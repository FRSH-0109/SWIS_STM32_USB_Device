
SWIS_USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008f80  08008f80  00009f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009080  08009080  0000b154  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009080  08009080  0000a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009088  08009088  0000b154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009088  08009088  0000a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800908c  0800908c  0000a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08009090  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c48  20000154  080091e4  0000b154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  080091e4  0000bd9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013720  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377b  00000000  00000000  0001e8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00022020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc3  00000000  00000000  00023108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198d5  00000000  00000000  00023dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b21  00000000  00000000  0003d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7e6  00000000  00000000  000551c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e19a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a20  00000000  00000000  000e19ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e640c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f68 	.word	0x08008f68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	08008f68 	.word	0x08008f68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	@ 0x30
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
 80005d6:	4b82      	ldr	r3, [pc, #520]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a81      	ldr	r2, [pc, #516]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005dc:	f043 0310 	orr.w	r3, r3, #16
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b7f      	ldr	r3, [pc, #508]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0310 	and.w	r3, r3, #16
 80005ea:	61bb      	str	r3, [r7, #24]
 80005ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	4b7b      	ldr	r3, [pc, #492]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a7a      	ldr	r2, [pc, #488]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b78      	ldr	r3, [pc, #480]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	4b74      	ldr	r3, [pc, #464]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a73      	ldr	r2, [pc, #460]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b71      	ldr	r3, [pc, #452]	@ (80007e0 <MX_GPIO_Init+0x224>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b6d      	ldr	r3, [pc, #436]	@ (80007e0 <MX_GPIO_Init+0x224>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a6c      	ldr	r2, [pc, #432]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b6a      	ldr	r3, [pc, #424]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b66      	ldr	r3, [pc, #408]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a65      	ldr	r2, [pc, #404]	@ (80007e0 <MX_GPIO_Init+0x224>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b63      	ldr	r3, [pc, #396]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b5f      	ldr	r3, [pc, #380]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a5e      	ldr	r2, [pc, #376]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b5c      	ldr	r3, [pc, #368]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2108      	movs	r1, #8
 800067e:	4859      	ldr	r0, [pc, #356]	@ (80007e4 <MX_GPIO_Init+0x228>)
 8000680:	f000 ff3e 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	4857      	ldr	r0, [pc, #348]	@ (80007e8 <MX_GPIO_Init+0x22c>)
 800068a:	f000 ff39 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800068e:	2200      	movs	r2, #0
 8000690:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000694:	4855      	ldr	r0, [pc, #340]	@ (80007ec <MX_GPIO_Init+0x230>)
 8000696:	f000 ff33 	bl	8001500 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800069a:	2304      	movs	r3, #4
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	484d      	ldr	r0, [pc, #308]	@ (80007e4 <MX_GPIO_Init+0x228>)
 80006ae:	f000 fda3 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006b2:	2308      	movs	r3, #8
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4846      	ldr	r0, [pc, #280]	@ (80007e4 <MX_GPIO_Init+0x228>)
 80006ca:	f000 fd95 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4840      	ldr	r0, [pc, #256]	@ (80007e4 <MX_GPIO_Init+0x228>)
 80006e4:	f000 fd88 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	483a      	ldr	r0, [pc, #232]	@ (80007e8 <MX_GPIO_Init+0x22c>)
 8000700:	f000 fd7a 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000704:	2308      	movs	r3, #8
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000714:	2305      	movs	r3, #5
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4832      	ldr	r0, [pc, #200]	@ (80007e8 <MX_GPIO_Init+0x22c>)
 8000720:	f000 fd6a 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000724:	2301      	movs	r3, #1
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000728:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	482d      	ldr	r0, [pc, #180]	@ (80007f0 <MX_GPIO_Init+0x234>)
 800073a:	f000 fd5d 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800073e:	2310      	movs	r3, #16
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800074e:	2306      	movs	r3, #6
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4825      	ldr	r0, [pc, #148]	@ (80007f0 <MX_GPIO_Init+0x234>)
 800075a:	f000 fd4d 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800075e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000770:	2305      	movs	r3, #5
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <MX_GPIO_Init+0x238>)
 800077c:	f000 fd3c 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000780:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000784:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4814      	ldr	r0, [pc, #80]	@ (80007ec <MX_GPIO_Init+0x230>)
 800079a:	f000 fd2d 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800079e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007b0:	2306      	movs	r3, #6
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <MX_GPIO_Init+0x22c>)
 80007bc:	f000 fd1c 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007c0:	2320      	movs	r3, #32
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <MX_GPIO_Init+0x230>)
 80007d4:	f000 fd10 	bl	80011f8 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3730      	adds	r7, #48	@ 0x30
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020400 	.word	0x40020400

080007f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2C1_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	@ (800084c <MX_I2C1_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000804:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <MX_I2C1_Init+0x58>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800081a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000836:	f000 fe97 	bl	8001568 <HAL_I2C_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000840:	f000 f9da 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000170 	.word	0x20000170
 800084c:	40005400 	.word	0x40005400
 8000850:	000186a0 	.word	0x000186a0

08000854 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	@ (80008d8 <HAL_I2C_MspInit+0x84>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d12c      	bne.n	80008d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHTC3_SDA_Pin|SHTC3_SCL_Pin;
 8000892:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000898:	2312      	movs	r3, #18
 800089a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a4:	2304      	movs	r3, #4
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <HAL_I2C_MspInit+0x8c>)
 80008b0:	f000 fca2 	bl	80011f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40005400 	.word	0x40005400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b092      	sub	sp, #72	@ 0x48
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fadd 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f917 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff fe63 	bl	80005bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008f6:	f007 fa03 	bl	8007d00 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80008fa:	f7ff ff7d 	bl	80007f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80008fe:	f000 f981 	bl	8000c04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  shtc3_init(&shtc3_sensor, &hi2c1, SHTC3_I2C_ADDR);
 8000902:	2270      	movs	r2, #112	@ 0x70
 8000904:	4928      	ldr	r1, [pc, #160]	@ (80009a8 <main+0xc4>)
 8000906:	4829      	ldr	r0, [pc, #164]	@ (80009ac <main+0xc8>)
 8000908:	f006 ffb3 	bl	8007872 <shtc3_init>
  shtc3_wakeup(&shtc3_sensor);
 800090c:	4827      	ldr	r0, [pc, #156]	@ (80009ac <main+0xc8>)
 800090e:	f007 f8fb 	bl	8007b08 <shtc3_wakeup>
  shtc3_get_id(&shtc3_sensor);
 8000912:	4826      	ldr	r0, [pc, #152]	@ (80009ac <main+0xc8>)
 8000914:	f006 ffc9 	bl	80078aa <shtc3_get_id>
  shtc3_sleep(&shtc3_sensor);
 8000918:	4824      	ldr	r0, [pc, #144]	@ (80009ac <main+0xc8>)
 800091a:	f007 f8e4 	bl	8007ae6 <shtc3_sleep>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	uint8_t ret	= 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	switch(shtc3_sensor.state)
 8000924:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <main+0xc8>)
 8000926:	7a9b      	ldrb	r3, [r3, #10]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d006      	beq.n	800093a <main+0x56>
 800092c:	2b03      	cmp	r3, #3
 800092e:	dc33      	bgt.n	8000998 <main+0xb4>
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00f      	beq.n	8000954 <main+0x70>
 8000934:	2b02      	cmp	r3, #2
 8000936:	d033      	beq.n	80009a0 <main+0xbc>
 8000938:	e02e      	b.n	8000998 <main+0xb4>
	{
		case SHTC3_SINGLE_MEASURE_START:
			 ret = shtc3_raw_write_temp_and_hum(&shtc3_sensor);
 800093a:	481c      	ldr	r0, [pc, #112]	@ (80009ac <main+0xc8>)
 800093c:	f007 f85c 	bl	80079f8 <shtc3_raw_write_temp_and_hum>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			if(0 == ret) {shtc3_sensor.state = SHTC3_SINGLE_MEASURE;}
 8000946:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <main+0x70>
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <main+0xc8>)
 8000950:	2201      	movs	r2, #1
 8000952:	729a      	strb	r2, [r3, #10]
		case SHTC3_SINGLE_MEASURE:
			uint8_t report[64] = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2240      	movs	r2, #64	@ 0x40
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fe74 	bl	8008648 <memset>
			ret = shtc3_raw_read_temp_and_hum(&shtc3_sensor);
 8000960:	4812      	ldr	r0, [pc, #72]	@ (80009ac <main+0xc8>)
 8000962:	f007 f85f 	bl	8007a24 <shtc3_raw_read_temp_and_hum>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			if(0 == ret)
 800096c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000970:	2b00      	cmp	r3, #0
 8000972:	d117      	bne.n	80009a4 <main+0xc0>
			{
				shtc3_sleep(&shtc3_sensor);
 8000974:	480d      	ldr	r0, [pc, #52]	@ (80009ac <main+0xc8>)
 8000976:	f007 f8b6 	bl	8007ae6 <shtc3_sleep>
				memcpy(&report[0], &shtc3_sensor.temp, sizeof(shtc3_sensor.temp));
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <main+0xc8>)
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	607b      	str	r3, [r7, #4]
				memcpy(&report[4], &shtc3_sensor.hum, sizeof(shtc3_sensor.hum));
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <main+0xc8>)
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	60bb      	str	r3, [r7, #8]
				usbSend(report, 8);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2108      	movs	r1, #8
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f834 	bl	80009f8 <usbSend>
				shtc3_sensor.state = STHC3_IDLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <main+0xc8>)
 8000992:	2200      	movs	r2, #0
 8000994:	729a      	strb	r2, [r3, #10]
			}
			break;
 8000996:	e005      	b.n	80009a4 <main+0xc0>
		case SHTC3_CYCLIC_MEASURE:
			break;

		case STHC3_IDLE:
		default:
			shtc3_get_temp_and_hum(&shtc3_sensor);
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <main+0xc8>)
 800099a:	f006 ffc3 	bl	8007924 <shtc3_get_temp_and_hum>
			break;
 800099e:	e002      	b.n	80009a6 <main+0xc2>
			break;
 80009a0:	bf00      	nop
 80009a2:	e7bc      	b.n	800091e <main+0x3a>
			break;
 80009a4:	bf00      	nop
  {
 80009a6:	e7ba      	b.n	800091e <main+0x3a>
 80009a8:	20000170 	.word	0x20000170
 80009ac:	200001c4 	.word	0x200001c4

080009b0 <compareStrings>:
  }
  /* USER CODE END 3 */
}

static bool compareStrings(uint8_t *buffer, char *str, uint16_t max_len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	4613      	mov	r3, r2
 80009bc:	80fb      	strh	r3, [r7, #6]
	return (0 == strncmp((char *)buffer, str, (strlen(str) > max_len ? max_len : strlen(str))));
 80009be:	68b8      	ldr	r0, [r7, #8]
 80009c0:	f7ff fc0e 	bl	80001e0 <strlen>
 80009c4:	4602      	mov	r2, r0
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d901      	bls.n	80009d0 <compareStrings+0x20>
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	e003      	b.n	80009d8 <compareStrings+0x28>
 80009d0:	68b8      	ldr	r0, [r7, #8]
 80009d2:	f7ff fc05 	bl	80001e0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f007 fe3b 	bl	8008658 <strncmp>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <usbSend>:

static void usbSend(uint8_t *report, uint8_t len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <usbSend+0x40>)
 8000a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d10e      	bne.n	8000a2e <usbSend+0x36>
	{
		while (((USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData)->state != CUSTOM_HID_IDLE);
 8000a10:	bf00      	nop
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <usbSend+0x40>)
 8000a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000a18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f8      	bne.n	8000a12 <usbSend+0x1a>
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <usbSend+0x40>)
 8000a2a:	f005 fa7d 	bl	8005f28 <USBD_CUSTOM_HID_SendReport>
	}
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000023c 	.word	0x2000023c

08000a3c <usb_parser>:

void usb_parser(uint8_t *buffer, uint16_t max_len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	@ 0x50
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
	if(compareStrings(buffer, SHTC3_CMD_READ_DATA, max_len))
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	492d      	ldr	r1, [pc, #180]	@ (8000b04 <usb_parser+0xc8>)
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffae 	bl	80009b0 <compareStrings>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00c      	beq.n	8000a74 <usb_parser+0x38>
	{
		uint8_t report[8];
		memcpy(&report[0], &shtc3_sensor.temp, sizeof(shtc3_sensor.temp));
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <usb_parser+0xcc>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
		memcpy(&report[4], &shtc3_sensor.hum, sizeof(shtc3_sensor.hum));
 8000a60:	4b29      	ldr	r3, [pc, #164]	@ (8000b08 <usb_parser+0xcc>)
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
		usbSend(report, sizeof(report));
 8000a66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ffc3 	bl	80009f8 <usbSend>
				sprintf((char *)report, "SHTC3 UNKNOW");
				break;
		}
		usbSend(report, strlen((char *)report));
	}
}
 8000a72:	e043      	b.n	8000afc <usb_parser+0xc0>
	else if(compareStrings(buffer, SHTC3_CMD_READ_STATE, max_len))
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4924      	ldr	r1, [pc, #144]	@ (8000b0c <usb_parser+0xd0>)
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff98 	bl	80009b0 <compareStrings>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d03a      	beq.n	8000afc <usb_parser+0xc0>
		uint8_t report[64] = {0};
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2240      	movs	r2, #64	@ 0x40
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 fdda 	bl	8008648 <memset>
		switch (shtc3_sensor.state)
 8000a94:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <usb_parser+0xcc>)
 8000a96:	7a9b      	ldrb	r3, [r3, #10]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d014      	beq.n	8000ac6 <usb_parser+0x8a>
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	dc19      	bgt.n	8000ad4 <usb_parser+0x98>
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <usb_parser+0x6e>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d007      	beq.n	8000ab8 <usb_parser+0x7c>
 8000aa8:	e014      	b.n	8000ad4 <usb_parser+0x98>
				sprintf((char *)report, "SHTC3 IDLE");
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4918      	ldr	r1, [pc, #96]	@ (8000b10 <usb_parser+0xd4>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f007 fda7 	bl	8008604 <siprintf>
				break;
 8000ab6:	e014      	b.n	8000ae2 <usb_parser+0xa6>
				sprintf((char *)report, "SHTC3 SINGLE MEASURE");
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	4915      	ldr	r1, [pc, #84]	@ (8000b14 <usb_parser+0xd8>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f007 fda0 	bl	8008604 <siprintf>
				break;
 8000ac4:	e00d      	b.n	8000ae2 <usb_parser+0xa6>
				sprintf((char *)report, "SHTC3 CYCLIC MEASURE");
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4913      	ldr	r1, [pc, #76]	@ (8000b18 <usb_parser+0xdc>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f007 fd99 	bl	8008604 <siprintf>
				break;
 8000ad2:	e006      	b.n	8000ae2 <usb_parser+0xa6>
				sprintf((char *)report, "SHTC3 UNKNOW");
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	4910      	ldr	r1, [pc, #64]	@ (8000b1c <usb_parser+0xe0>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 fd92 	bl	8008604 <siprintf>
				break;
 8000ae0:	bf00      	nop
		usbSend(report, strlen((char *)report));
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fb7a 	bl	80001e0 <strlen>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff7e 	bl	80009f8 <usbSend>
}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	@ 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	08008f80 	.word	0x08008f80
 8000b08:	200001c4 	.word	0x200001c4
 8000b0c:	08008f8c 	.word	0x08008f8c
 8000b10:	08008f98 	.word	0x08008f98
 8000b14:	08008fa4 	.word	0x08008fa4
 8000b18:	08008fbc 	.word	0x08008fbc
 8000b1c:	08008fd4 	.word	0x08008fd4

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	@ 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	@ 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fd8a 	bl	8008648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a28      	ldr	r2, [pc, #160]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a22      	ldr	r2, [pc, #136]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b9c:	2348      	movs	r3, #72	@ 0x48
 8000b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 ff0f 	bl	80039d0 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bb8:	f000 f81e 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 f971 	bl	8003ec0 <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000be4:	f000 f808 	bl	8000bf8 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3750      	adds	r7, #80	@ 0x50
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c0a:	4a18      	ldr	r2, [pc, #96]	@ (8000c6c <MX_SPI1_Init+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c38:	2210      	movs	r2, #16
 8000c3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c50:	220a      	movs	r2, #10
 8000c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_SPI1_Init+0x64>)
 8000c56:	f003 fb3f 	bl	80042d8 <HAL_SPI_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c60:	f7ff ffca 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200001d8 	.word	0x200001d8
 8000c6c:	40013000 	.word	0x40013000

08000c70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	@ (8000cf4 <HAL_SPI_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12b      	bne.n	8000cea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a17      	ldr	r2, [pc, #92]	@ (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BME280_SCK_Pin|BME280_MISO_Pin|BME280_MOSI_Pin;
 8000cca:	23e0      	movs	r3, #224	@ 0xe0
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <HAL_SPI_MspInit+0x8c>)
 8000ce6:	f000 fa87 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	@ 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f000 fa18 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f000 f8d1 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <OTG_FS_IRQHandler+0x10>)
 8000db6:	f001 fd15 	bl	80027e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000718 	.word	0x20000718

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f007 fc42 	bl	800867c <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20020000 	.word	0x20020000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	20000230 	.word	0x20000230
 8000e2c:	20000da0 	.word	0x20000da0

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f007 fc01 	bl	8008688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fd2d 	bl	80008e4 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8000e98:	08009090 	.word	0x08009090
  ldr r2, =_sbss
 8000e9c:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8000ea0:	20000d9c 	.word	0x20000d9c

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f94f 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff ff10 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f967 	bl	80011de <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f92f 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000234 	.word	0x20000234

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000234 	.word	0x20000234

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	@ (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff3e 	bl	800101c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e159      	b.n	80014c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8148 	bne.w	80014c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a2 	beq.w	80014c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	4a56      	ldr	r2, [pc, #344]	@ (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138c:	6453      	str	r3, [r2, #68]	@ 0x44
 800138e:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a52      	ldr	r2, [pc, #328]	@ (80014e4 <HAL_GPIO_Init+0x2ec>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a49      	ldr	r2, [pc, #292]	@ (80014e8 <HAL_GPIO_Init+0x2f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x202>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a48      	ldr	r2, [pc, #288]	@ (80014ec <HAL_GPIO_Init+0x2f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x1fe>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a47      	ldr	r2, [pc, #284]	@ (80014f0 <HAL_GPIO_Init+0x2f8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a46      	ldr	r2, [pc, #280]	@ (80014f4 <HAL_GPIO_Init+0x2fc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x1f6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a45      	ldr	r2, [pc, #276]	@ (80014f8 <HAL_GPIO_Init+0x300>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x1f2>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	@ (80014e4 <HAL_GPIO_Init+0x2ec>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <HAL_GPIO_Init+0x304>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a2f      	ldr	r2, [pc, #188]	@ (80014fc <HAL_GPIO_Init+0x304>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HAL_GPIO_Init+0x304>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a24      	ldr	r2, [pc, #144]	@ (80014fc <HAL_GPIO_Init+0x304>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <HAL_GPIO_Init+0x304>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1a      	ldr	r2, [pc, #104]	@ (80014fc <HAL_GPIO_Init+0x304>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <HAL_GPIO_Init+0x304>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <HAL_GPIO_Init+0x304>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f aea2 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	041a      	lsls	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001544:	887a      	ldrh	r2, [r7, #2]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	041a      	lsls	r2, r3, #16
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43d9      	mvns	r1, r3
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	400b      	ands	r3, r1
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e12b      	b.n	80017d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff f960 	bl	8000854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2224      	movs	r2, #36	@ 0x24
 8001598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015cc:	f002 fe70 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 80015d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4a81      	ldr	r2, [pc, #516]	@ (80017dc <HAL_I2C_Init+0x274>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d807      	bhi.n	80015ec <HAL_I2C_Init+0x84>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4a80      	ldr	r2, [pc, #512]	@ (80017e0 <HAL_I2C_Init+0x278>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	bf94      	ite	ls
 80015e4:	2301      	movls	r3, #1
 80015e6:	2300      	movhi	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	e006      	b.n	80015fa <HAL_I2C_Init+0x92>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a7d      	ldr	r2, [pc, #500]	@ (80017e4 <HAL_I2C_Init+0x27c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bf94      	ite	ls
 80015f4:	2301      	movls	r3, #1
 80015f6:	2300      	movhi	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0e7      	b.n	80017d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4a78      	ldr	r2, [pc, #480]	@ (80017e8 <HAL_I2C_Init+0x280>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0c9b      	lsrs	r3, r3, #18
 800160c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4a6a      	ldr	r2, [pc, #424]	@ (80017dc <HAL_I2C_Init+0x274>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d802      	bhi.n	800163c <HAL_I2C_Init+0xd4>
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3301      	adds	r3, #1
 800163a:	e009      	b.n	8001650 <HAL_I2C_Init+0xe8>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001642:	fb02 f303 	mul.w	r3, r2, r3
 8001646:	4a69      	ldr	r2, [pc, #420]	@ (80017ec <HAL_I2C_Init+0x284>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	3301      	adds	r3, #1
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	430b      	orrs	r3, r1
 8001656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001662:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	495c      	ldr	r1, [pc, #368]	@ (80017dc <HAL_I2C_Init+0x274>)
 800166c:	428b      	cmp	r3, r1
 800166e:	d819      	bhi.n	80016a4 <HAL_I2C_Init+0x13c>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1e59      	subs	r1, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fbb1 f3f3 	udiv	r3, r1, r3
 800167e:	1c59      	adds	r1, r3, #1
 8001680:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001684:	400b      	ands	r3, r1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00a      	beq.n	80016a0 <HAL_I2C_Init+0x138>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1e59      	subs	r1, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fbb1 f3f3 	udiv	r3, r1, r3
 8001698:	3301      	adds	r3, #1
 800169a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169e:	e051      	b.n	8001744 <HAL_I2C_Init+0x1dc>
 80016a0:	2304      	movs	r3, #4
 80016a2:	e04f      	b.n	8001744 <HAL_I2C_Init+0x1dc>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d111      	bne.n	80016d0 <HAL_I2C_Init+0x168>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	440b      	add	r3, r1
 80016ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	e012      	b.n	80016f6 <HAL_I2C_Init+0x18e>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1e58      	subs	r0, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	0099      	lsls	r1, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Init+0x196>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e022      	b.n	8001744 <HAL_I2C_Init+0x1dc>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10e      	bne.n	8001724 <HAL_I2C_Init+0x1bc>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1e58      	subs	r0, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	440b      	add	r3, r1
 8001714:	fbb0 f3f3 	udiv	r3, r0, r3
 8001718:	3301      	adds	r3, #1
 800171a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001722:	e00f      	b.n	8001744 <HAL_I2C_Init+0x1dc>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1e58      	subs	r0, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	0099      	lsls	r1, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	fbb0 f3f3 	udiv	r3, r0, r3
 800173a:	3301      	adds	r3, #1
 800173c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001740:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	6809      	ldr	r1, [r1, #0]
 8001748:	4313      	orrs	r3, r2
 800174a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001772:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6911      	ldr	r1, [r2, #16]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68d2      	ldr	r2, [r2, #12]
 800177e:	4311      	orrs	r1, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	430b      	orrs	r3, r1
 8001786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2220      	movs	r2, #32
 80017be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	000186a0 	.word	0x000186a0
 80017e0:	001e847f 	.word	0x001e847f
 80017e4:	003d08ff 	.word	0x003d08ff
 80017e8:	431bde83 	.word	0x431bde83
 80017ec:	10624dd3 	.word	0x10624dd3

080017f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	461a      	mov	r2, r3
 80017fc:	460b      	mov	r3, r1
 80017fe:	817b      	strh	r3, [r7, #10]
 8001800:	4613      	mov	r3, r2
 8001802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff fbb6 	bl	8000f74 <HAL_GetTick>
 8001808:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b20      	cmp	r3, #32
 8001814:	f040 80e0 	bne.w	80019d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2319      	movs	r3, #25
 800181e:	2201      	movs	r2, #1
 8001820:	4970      	ldr	r1, [pc, #448]	@ (80019e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fc64 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800182e:	2302      	movs	r3, #2
 8001830:	e0d3      	b.n	80019da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_I2C_Master_Transmit+0x50>
 800183c:	2302      	movs	r3, #2
 800183e:	e0cc      	b.n	80019da <HAL_I2C_Master_Transmit+0x1ea>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d007      	beq.n	8001866 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2221      	movs	r2, #33	@ 0x21
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2210      	movs	r2, #16
 8001882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	893a      	ldrh	r2, [r7, #8]
 8001896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a50      	ldr	r2, [pc, #320]	@ (80019e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	6a3a      	ldr	r2, [r7, #32]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 face 	bl	8001e50 <I2C_MasterRequestWrite>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e08d      	b.n	80019da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018d4:	e066      	b.n	80019a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	6a39      	ldr	r1, [r7, #32]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fd22 	bl	8002324 <I2C_WaitOnTXEFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d107      	bne.n	80018fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e06b      	b.n	80019da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b04      	cmp	r3, #4
 800193e:	d11b      	bne.n	8001978 <HAL_I2C_Master_Transmit+0x188>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001944:	2b00      	cmp	r3, #0
 8001946:	d017      	beq.n	8001978 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6a39      	ldr	r1, [r7, #32]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fd19 	bl	80023b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00d      	beq.n	80019a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	2b04      	cmp	r3, #4
 800198e:	d107      	bne.n	80019a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800199e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e01a      	b.n	80019da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d194      	bne.n	80018d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	00100002 	.word	0x00100002
 80019e8:	ffff0000 	.word	0xffff0000

080019ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	@ 0x30
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	461a      	mov	r2, r3
 80019f8:	460b      	mov	r3, r1
 80019fa:	817b      	strh	r3, [r7, #10]
 80019fc:	4613      	mov	r3, r2
 80019fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff fab8 	bl	8000f74 <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	f040 8217 	bne.w	8001e42 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2319      	movs	r3, #25
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	497c      	ldr	r1, [pc, #496]	@ (8001c10 <HAL_I2C_Master_Receive+0x224>)
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fb66 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e20a      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_I2C_Master_Receive+0x50>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e203      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d007      	beq.n	8001a62 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2222      	movs	r2, #34	@ 0x22
 8001a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	893a      	ldrh	r2, [r7, #8]
 8001a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a5c      	ldr	r2, [pc, #368]	@ (8001c14 <HAL_I2C_Master_Receive+0x228>)
 8001aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001aa4:	8979      	ldrh	r1, [r7, #10]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fa52 	bl	8001f54 <I2C_MasterRequestRead>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1c4      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d113      	bne.n	8001aea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	623b      	str	r3, [r7, #32]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	623b      	str	r3, [r7, #32]
 8001ad6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e198      	b.n	8001e1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d11b      	bne.n	8001b2a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e178      	b.n	8001e1c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d11b      	bne.n	8001b6a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	e158      	b.n	8001e1c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b90:	e144      	b.n	8001e1c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	f200 80f1 	bhi.w	8001d7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d123      	bne.n	8001bec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 fc4b 	bl	8002444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e145      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bea:	e117      	b.n	8001e1c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d14e      	bne.n	8001c92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4906      	ldr	r1, [pc, #24]	@ (8001c18 <HAL_I2C_Master_Receive+0x22c>)
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fa76 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e11a      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
 8001c0e:	bf00      	nop
 8001c10:	00100002 	.word	0x00100002
 8001c14:	ffff0000 	.word	0xffff0000
 8001c18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c90:	e0c4      	b.n	8001e1c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c98:	2200      	movs	r2, #0
 8001c9a:	496c      	ldr	r1, [pc, #432]	@ (8001e4c <HAL_I2C_Master_Receive+0x460>)
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fa27 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0cb      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4955      	ldr	r1, [pc, #340]	@ (8001e4c <HAL_I2C_Master_Receive+0x460>)
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f9f9 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e09d      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d7c:	e04e      	b.n	8001e1c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fb5e 	bl	8002444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e058      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d124      	bne.n	8001e1c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001de8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f aeb6 	bne.w	8001b92 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
  }
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3728      	adds	r7, #40	@ 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	00010004 	.word	0x00010004

08001e50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d006      	beq.n	8001e7a <I2C_MasterRequestWrite+0x2a>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d003      	beq.n	8001e7a <I2C_MasterRequestWrite+0x2a>
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e78:	d108      	bne.n	8001e8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	e00b      	b.n	8001ea4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	2b12      	cmp	r3, #18
 8001e92:	d107      	bne.n	8001ea4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ea2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f91d 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eca:	d103      	bne.n	8001ed4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e035      	b.n	8001f44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ee0:	d108      	bne.n	8001ef4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ef0:	611a      	str	r2, [r3, #16]
 8001ef2:	e01b      	b.n	8001f2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ef4:	897b      	ldrh	r3, [r7, #10]
 8001ef6:	11db      	asrs	r3, r3, #7
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f003 0306 	and.w	r3, r3, #6
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f063 030f 	orn	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <I2C_MasterRequestWrite+0xfc>)
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f966 	bl	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e010      	b.n	8001f44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f22:	897b      	ldrh	r3, [r7, #10]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4907      	ldr	r1, [pc, #28]	@ (8001f50 <I2C_MasterRequestWrite+0x100>)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f956 	bl	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	00010008 	.word	0x00010008
 8001f50:	00010002 	.word	0x00010002

08001f54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	460b      	mov	r3, r1
 8001f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d006      	beq.n	8001f8e <I2C_MasterRequestRead+0x3a>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d003      	beq.n	8001f8e <I2C_MasterRequestRead+0x3a>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f8c:	d108      	bne.n	8001fa0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e00b      	b.n	8001fb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	2b11      	cmp	r3, #17
 8001fa6:	d107      	bne.n	8001fb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f893 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00d      	beq.n	8001fec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fde:	d103      	bne.n	8001fe8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e079      	b.n	80020e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ff4:	d108      	bne.n	8002008 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ff6:	897b      	ldrh	r3, [r7, #10]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	611a      	str	r2, [r3, #16]
 8002006:	e05f      	b.n	80020c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	11db      	asrs	r3, r3, #7
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f003 0306 	and.w	r3, r3, #6
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f063 030f 	orn	r3, r3, #15
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4930      	ldr	r1, [pc, #192]	@ (80020e8 <I2C_MasterRequestRead+0x194>)
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f8dc 	bl	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e054      	b.n	80020e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4929      	ldr	r1, [pc, #164]	@ (80020ec <I2C_MasterRequestRead+0x198>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f8cc 	bl	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e044      	b.n	80020e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800207a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f831 	bl	80020f0 <I2C_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a2:	d103      	bne.n	80020ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020aa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e017      	b.n	80020e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	11db      	asrs	r3, r3, #7
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f003 0306 	and.w	r3, r3, #6
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f063 030e 	orn	r3, r3, #14
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4907      	ldr	r1, [pc, #28]	@ (80020ec <I2C_MasterRequestRead+0x198>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f888 	bl	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	00010008 	.word	0x00010008
 80020ec:	00010002 	.word	0x00010002

080020f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002100:	e048      	b.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d044      	beq.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210a:	f7fe ff33 	bl	8000f74 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d302      	bcc.n	8002120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d139      	bne.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10d      	bne.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x56>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	43da      	mvns	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4013      	ands	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	e00c      	b.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	43da      	mvns	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4013      	ands	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	429a      	cmp	r2, r3
 8002164:	d116      	bne.n	8002194 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e023      	b.n	80021dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10d      	bne.n	80021ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	43da      	mvns	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4013      	ands	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	e00c      	b.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	43da      	mvns	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4013      	ands	r3, r2
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d093      	beq.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021f2:	e071      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002202:	d123      	bne.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002212:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800221c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e067      	b.n	800231c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002252:	d041      	beq.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7fe fe8e 	bl	8000f74 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d136      	bne.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d10c      	bne.n	800228e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	e00b      	b.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e021      	b.n	800231c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	0c1b      	lsrs	r3, r3, #16
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d10c      	bne.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	43da      	mvns	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4013      	ands	r3, r2
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e00b      	b.n	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	f47f af6d 	bne.w	80021f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002330:	e034      	b.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f8e3 	bl	80024fe <I2C_IsAcknowledgeFailed>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e034      	b.n	80023ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d028      	beq.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7fe fe13 	bl	8000f74 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d11d      	bne.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236a:	2b80      	cmp	r3, #128	@ 0x80
 800236c:	d016      	beq.n	800239c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e007      	b.n	80023ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a6:	2b80      	cmp	r3, #128	@ 0x80
 80023a8:	d1c3      	bne.n	8002332 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023c0:	e034      	b.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f89b 	bl	80024fe <I2C_IsAcknowledgeFailed>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e034      	b.n	800243c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d028      	beq.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7fe fdcb 	bl	8000f74 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11d      	bne.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d016      	beq.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d1c3      	bne.n	80023c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002450:	e049      	b.n	80024e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b10      	cmp	r3, #16
 800245e:	d119      	bne.n	8002494 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0210 	mvn.w	r2, #16
 8002468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e030      	b.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7fe fd6e 	bl	8000f74 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b4:	2b40      	cmp	r3, #64	@ 0x40
 80024b6:	d016      	beq.n	80024e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f043 0220 	orr.w	r2, r3, #32
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e007      	b.n	80024f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d1ae      	bne.n	8002452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002514:	d11b      	bne.n	800254e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800251e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f043 0204 	orr.w	r2, r3, #4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e101      	b.n	8002772 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f005 fd35 	bl	8007ff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800259c:	d102      	bne.n	80025a4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 f836 	bl	800461a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7c1a      	ldrb	r2, [r3, #16]
 80025b6:	f88d 2000 	strb.w	r2, [sp]
 80025ba:	3304      	adds	r3, #4
 80025bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025be:	f001 ff14 	bl	80043ea <USB_CoreInit>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0ce      	b.n	8002772 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f002 f82e 	bl	800463c <USB_SetCurrentMode>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0bf      	b.n	8002772 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e04a      	b.n	800268e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3315      	adds	r3, #21
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	3314      	adds	r3, #20
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	b298      	uxth	r0, r3
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	332e      	adds	r3, #46	@ 0x2e
 8002634:	4602      	mov	r2, r0
 8002636:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3318      	adds	r3, #24
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	331c      	adds	r3, #28
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3320      	adds	r3, #32
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3324      	adds	r3, #36	@ 0x24
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	3301      	adds	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	791b      	ldrb	r3, [r3, #4]
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	429a      	cmp	r2, r3
 8002696:	d3af      	bcc.n	80025f8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e044      	b.n	8002728 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	3301      	adds	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	791b      	ldrb	r3, [r3, #4]
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	429a      	cmp	r2, r3
 8002730:	d3b5      	bcc.n	800269e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7c1a      	ldrb	r2, [r3, #16]
 800273a:	f88d 2000 	strb.w	r2, [sp]
 800273e:	3304      	adds	r3, #4
 8002740:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002742:	f001 ffc7 	bl	80046d4 <USB_DevInit>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e00c      	b.n	8002772 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 f811 	bl	8005792 <USB_DevDisconnect>

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_PCD_Start+0x1c>
 8002792:	2302      	movs	r3, #2
 8002794:	e022      	b.n	80027dc <HAL_PCD_Start+0x62>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 ff18 	bl	80045f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 ffbf 	bl	8005750 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b08d      	sub	sp, #52	@ 0x34
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 f87d 	bl	80058fa <USB_GetMode>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 848c 	bne.w	8003120 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f002 ffe1 	bl	80057d4 <USB_ReadInterrupts>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8482 	beq.w	800311e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f002 ffce 	bl	80057d4 <USB_ReadInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b02      	cmp	r3, #2
 8002840:	d107      	bne.n	8002852 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f002 0202 	and.w	r2, r2, #2
 8002850:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 ffbc 	bl	80057d4 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b10      	cmp	r3, #16
 8002864:	d161      	bne.n	800292a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0210 	bic.w	r2, r2, #16
 8002874:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 020f 	and.w	r2, r3, #15
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800289c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028a0:	d124      	bne.n	80028ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d035      	beq.n	800291a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6a38      	ldr	r0, [r7, #32]
 80028c2:	f002 fdf3 	bl	80054ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d2:	441a      	add	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e4:	441a      	add	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	615a      	str	r2, [r3, #20]
 80028ea:	e016      	b.n	800291a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028f6:	d110      	bne.n	800291a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028fe:	2208      	movs	r2, #8
 8002900:	4619      	mov	r1, r3
 8002902:	6a38      	ldr	r0, [r7, #32]
 8002904:	f002 fdd2 	bl	80054ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002914:	441a      	add	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0210 	orr.w	r2, r2, #16
 8002928:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f002 ff50 	bl	80057d4 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800293a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800293e:	f040 80a7 	bne.w	8002a90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f002 ff55 	bl	80057fa <USB_ReadDevAllOutEpInterrupt>
 8002950:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002952:	e099      	b.n	8002a88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 808e 	beq.w	8002a7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f002 ff79 	bl	8005862 <USB_ReadDevOutEPInterrupt>
 8002970:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002988:	461a      	mov	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800298e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fe8b 	bl	80036ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00c      	beq.n	80029ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ac:	461a      	mov	r2, r3
 80029ae:	2308      	movs	r3, #8
 80029b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 ff61 	bl	800387c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029d0:	461a      	mov	r2, r3
 80029d2:	2310      	movs	r3, #16
 80029d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d030      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e8:	2b80      	cmp	r3, #128	@ 0x80
 80029ea:	d109      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	3304      	adds	r3, #4
 8002a14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	78db      	ldrb	r3, [r3, #3]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f005 fbee 	bl	800820c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2302      	movs	r3, #2
 8002a40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a74:	461a      	mov	r2, r3
 8002a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	3301      	adds	r3, #1
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f47f af62 	bne.w	8002954 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 fe9d 	bl	80057d4 <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002aa4:	f040 80db 	bne.w	8002c5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 febe 	bl	800582e <USB_ReadDevAllInEpInterrupt>
 8002ab2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ab8:	e0cd      	b.n	8002c56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80c2 	beq.w	8002c4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fee4 	bl	800589e <USB_ReadDevInEPInterrupt>
 8002ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d057      	beq.n	8002b92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	2201      	movs	r2, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69f9      	ldr	r1, [r7, #28]
 8002afe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b02:	4013      	ands	r3, r2
 8002b04:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b12:	461a      	mov	r2, r3
 8002b14:	2301      	movs	r3, #1
 8002b16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	799b      	ldrb	r3, [r3, #6]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d132      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3320      	adds	r3, #32
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4403      	add	r3, r0
 8002b40:	331c      	adds	r3, #28
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4419      	add	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4403      	add	r3, r0
 8002b54:	3320      	adds	r3, #32
 8002b56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d113      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x3a2>
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3324      	adds	r3, #36	@ 0x24
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d108      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2101      	movs	r1, #1
 8002b82:	f002 feeb 	bl	800595c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f005 fac2 	bl	8008116 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2308      	movs	r3, #8
 8002bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2310      	movs	r3, #16
 8002bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002be0:	461a      	mov	r2, r3
 8002be2:	2340      	movs	r3, #64	@ 0x40
 8002be4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d023      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bf2:	6a38      	ldr	r0, [r7, #32]
 8002bf4:	f001 fed2 	bl	800499c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	3310      	adds	r3, #16
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	78db      	ldrb	r3, [r3, #3]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d108      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2200      	movs	r2, #0
 8002c18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f005 fb05 	bl	8008230 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c32:	461a      	mov	r2, r3
 8002c34:	2302      	movs	r3, #2
 8002c36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fca5 	bl	8003594 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f af2e 	bne.w	8002aba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fdb6 	bl	80057d4 <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c72:	d122      	bne.n	8002cba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d108      	bne.n	8002ca4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fe8b 	bl	80039b8 <HAL_PCDEx_LPM_Callback>
 8002ca2:	e002      	b.n	8002caa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f005 faa3 	bl	80081f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 fd88 	bl	80057d4 <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cce:	d112      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f005 fa5f 	bl	80081a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002cf4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 fd6a 	bl	80057d4 <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d0a:	f040 80b7 	bne.w	8002e7c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2110      	movs	r1, #16
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fe37 	bl	800499c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d32:	e046      	b.n	8002dc2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d40:	461a      	mov	r2, r3
 8002d42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d58:	0151      	lsls	r1, r2, #5
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d74:	461a      	mov	r2, r3
 8002d76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d8c:	0151      	lsls	r1, r2, #5
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	440a      	add	r2, r1
 8002d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dac:	0151      	lsls	r1, r2, #5
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	440a      	add	r2, r1
 8002db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002db6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002dba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	791b      	ldrb	r3, [r3, #4]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d3b2      	bcc.n	8002d34 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ddc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002de0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7bdb      	ldrb	r3, [r3, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dfa:	f043 030b 	orr.w	r3, r3, #11
 8002dfe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e10:	f043 030b 	orr.w	r3, r3, #11
 8002e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e16:	e015      	b.n	8002e44 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e2a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e3e:	f043 030b 	orr.w	r3, r3, #11
 8002e42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e66:	461a      	mov	r2, r3
 8002e68:	f002 fd78 	bl	800595c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fca7 	bl	80057d4 <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e90:	d123      	bne.n	8002eda <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 fd3d 	bl	8005916 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 fdf4 	bl	8004a8e <USB_GetDevSpeed>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681c      	ldr	r4, [r3, #0]
 8002eb2:	f001 f9f1 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 8002eb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f001 faf8 	bl	80044b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f005 f94e 	bl	8008166 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fc78 	bl	80057d4 <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d10a      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f005 f92b 	bl	800814a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f002 0208 	and.w	r2, r2, #8
 8002f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fc63 	bl	80057d4 <USB_ReadInterrupts>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f14:	2b80      	cmp	r3, #128	@ 0x80
 8002f16:	d123      	bne.n	8002f60 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f24:	2301      	movs	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f28:	e014      	b.n	8002f54 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 faf2 	bl	8003532 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	3301      	adds	r3, #1
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	791b      	ldrb	r3, [r3, #4]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d3e4      	bcc.n	8002f2a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 fc35 	bl	80057d4 <USB_ReadInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f74:	d13c      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f76:	2301      	movs	r3, #1
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7a:	e02b      	b.n	8002fd4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d115      	bne.n	8002fce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fa2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da12      	bge.n	8002fce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3317      	adds	r3, #23
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fab2 	bl	8003532 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	791b      	ldrb	r3, [r3, #4]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d3cd      	bcc.n	8002f7c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f002 fbed 	bl	80057d4 <USB_ReadInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003004:	d156      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003006:	2301      	movs	r3, #1
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
 800300a:	e045      	b.n	8003098 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d12e      	bne.n	8003092 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003034:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003036:	2b00      	cmp	r3, #0
 8003038:	da2b      	bge.n	8003092 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	0c1a      	lsrs	r2, r3, #16
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003044:	4053      	eors	r3, r2
 8003046:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d121      	bne.n	8003092 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800308a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800308e:	6053      	str	r3, [r2, #4]
            break;
 8003090:	e008      	b.n	80030a4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	3301      	adds	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	791b      	ldrb	r3, [r3, #4]
 800309c:	461a      	mov	r2, r3
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d3b3      	bcc.n	800300c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80030b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 fb8b 	bl	80057d4 <USB_ReadInterrupts>
 80030be:	4603      	mov	r3, r0
 80030c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c8:	d10a      	bne.n	80030e0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f005 f8c2 	bl	8008254 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 fb75 	bl	80057d4 <USB_ReadInterrupts>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d115      	bne.n	8003120 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f005 f8b2 	bl	8008270 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	e000      	b.n	8003120 <HAL_PCD_IRQHandler+0x93c>
      return;
 800311e:	bf00      	nop
    }
  }
}
 8003120:	3734      	adds	r7, #52	@ 0x34
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_PCD_SetAddress+0x1a>
 800313c:	2302      	movs	r3, #2
 800313e:	e012      	b.n	8003166 <HAL_PCD_SetAddress+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f002 fad4 	bl	8005704 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	4608      	mov	r0, r1
 8003178:	4611      	mov	r1, r2
 800317a:	461a      	mov	r2, r3
 800317c:	4603      	mov	r3, r0
 800317e:	70fb      	strb	r3, [r7, #3]
 8003180:	460b      	mov	r3, r1
 8003182:	803b      	strh	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800318c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da0f      	bge.n	80031b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 020f 	and.w	r2, r3, #15
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	3310      	adds	r3, #16
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	3304      	adds	r3, #4
 80031aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	705a      	strb	r2, [r3, #1]
 80031b2:	e00f      	b.n	80031d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 020f 	and.w	r2, r3, #15
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80031e0:	883b      	ldrh	r3, [r7, #0]
 80031e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	78ba      	ldrb	r2, [r7, #2]
 80031ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003202:	78bb      	ldrb	r3, [r7, #2]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d102      	bne.n	800320e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_PCD_EP_Open+0xae>
 8003218:	2302      	movs	r3, #2
 800321a:	e00e      	b.n	800323a <HAL_PCD_EP_Open+0xcc>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	4618      	mov	r0, r3
 800322c:	f001 fc54 	bl	8004ad8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003238:	7afb      	ldrb	r3, [r7, #11]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800324e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da0f      	bge.n	8003276 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	3310      	adds	r3, #16
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	3304      	adds	r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	705a      	strb	r2, [r3, #1]
 8003274:	e00f      	b.n	8003296 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 020f 	and.w	r2, r3, #15
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_PCD_EP_Close+0x6e>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e00e      	b.n	80032ce <HAL_PCD_EP_Close+0x8c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 fc92 	bl	8004be8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	460b      	mov	r3, r1
 80032e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	7afb      	ldrb	r3, [r7, #11]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	b2da      	uxtb	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	799b      	ldrb	r3, [r3, #6]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	799b      	ldrb	r3, [r3, #6]
 800333a:	461a      	mov	r2, r3
 800333c:	6979      	ldr	r1, [r7, #20]
 800333e:	f001 fd2f 	bl	8004da0 <USB_EPStartXfer>

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	460b      	mov	r3, r1
 800335a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	3310      	adds	r3, #16
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	3304      	adds	r3, #4
 8003372:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2201      	movs	r2, #1
 800338a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800338c:	7afb      	ldrb	r3, [r7, #11]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	b2da      	uxtb	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	799b      	ldrb	r3, [r3, #6]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	799b      	ldrb	r3, [r3, #6]
 80033ae:	461a      	mov	r2, r3
 80033b0:	6979      	ldr	r1, [r7, #20]
 80033b2:	f001 fcf5 	bl	8004da0 <USB_EPStartXfer>

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	7912      	ldrb	r2, [r2, #4]
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e04f      	b.n	800347e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da0f      	bge.n	8003406 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	3310      	adds	r3, #16
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	3304      	adds	r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	705a      	strb	r2, [r3, #1]
 8003404:	e00d      	b.n	8003422 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	3304      	adds	r3, #4
 800341a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_PCD_EP_SetStall+0x82>
 800343e:	2302      	movs	r3, #2
 8003440:	e01d      	b.n	800347e <HAL_PCD_EP_SetStall+0xbe>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	4618      	mov	r0, r3
 8003452:	f002 f883 	bl	800555c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7999      	ldrb	r1, [r3, #6]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800346e:	461a      	mov	r2, r3
 8003470:	f002 fa74 	bl	800595c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	7912      	ldrb	r2, [r2, #4]
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e042      	b.n	800352a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da0f      	bge.n	80034cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	3310      	adds	r3, #16
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	705a      	strb	r2, [r3, #1]
 80034ca:	e00f      	b.n	80034ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_PCD_EP_ClrStall+0x86>
 8003508:	2302      	movs	r3, #2
 800350a:	e00e      	b.n	800352a <HAL_PCD_EP_ClrStall+0xa4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f002 f88c 	bl	8005638 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800353e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003542:	2b00      	cmp	r3, #0
 8003544:	da0c      	bge.n	8003560 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	3310      	adds	r3, #16
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	3304      	adds	r3, #4
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e00c      	b.n	800357a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	3304      	adds	r3, #4
 8003578:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	4618      	mov	r0, r3
 8003582:	f001 feab 	bl	80052dc <USB_EPStopXfer>
 8003586:	4603      	mov	r3, r0
 8003588:	72fb      	strb	r3, [r7, #11]

  return ret;
 800358a:	7afb      	ldrb	r3, [r7, #11]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	@ 0x28
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	3310      	adds	r3, #16
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d901      	bls.n	80035cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e06b      	b.n	80036a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d902      	bls.n	80035e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	3303      	adds	r3, #3
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f0:	e02a      	b.n	8003648 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	d902      	bls.n	800360e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3303      	adds	r3, #3
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68d9      	ldr	r1, [r3, #12]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4603      	mov	r3, r0
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f001 ff00 	bl	8005430 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	441a      	add	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	441a      	add	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	429a      	cmp	r2, r3
 800365c:	d809      	bhi.n	8003672 <PCD_WriteEmptyTxFifo+0xde>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003666:	429a      	cmp	r2, r3
 8003668:	d203      	bcs.n	8003672 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1bf      	bne.n	80035f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	429a      	cmp	r2, r3
 800367c:	d811      	bhi.n	80036a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	2201      	movs	r2, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	43db      	mvns	r3, r3
 8003698:	6939      	ldr	r1, [r7, #16]
 800369a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800369e:	4013      	ands	r3, r2
 80036a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	333c      	adds	r3, #60	@ 0x3c
 80036c4:	3304      	adds	r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	799b      	ldrb	r3, [r3, #6]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d17b      	bne.n	80037da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d015      	beq.n	8003718 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4a61      	ldr	r2, [pc, #388]	@ (8003874 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	f240 80b9 	bls.w	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80b3 	beq.w	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370e:	461a      	mov	r2, r3
 8003710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003714:	6093      	str	r3, [r2, #8]
 8003716:	e0a7      	b.n	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372e:	461a      	mov	r2, r3
 8003730:	2320      	movs	r3, #32
 8003732:	6093      	str	r3, [r2, #8]
 8003734:	e098      	b.n	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 8093 	bne.w	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	4a4b      	ldr	r2, [pc, #300]	@ (8003874 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d90f      	bls.n	800376a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003760:	461a      	mov	r2, r3
 8003762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003766:	6093      	str	r3, [r2, #8]
 8003768:	e07e      	b.n	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	3304      	adds	r3, #4
 800377e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	0159      	lsls	r1, r3, #5
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	440b      	add	r3, r1
 800378c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003796:	1ad2      	subs	r2, r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d114      	bne.n	80037cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037b4:	461a      	mov	r2, r3
 80037b6:	2101      	movs	r1, #1
 80037b8:	f002 f8d0 	bl	800595c <USB_EP0_OutStart>
 80037bc:	e006      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	441a      	add	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f004 fc84 	bl	80080e0 <HAL_PCD_DataOutStageCallback>
 80037d8:	e046      	b.n	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4a26      	ldr	r2, [pc, #152]	@ (8003878 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d124      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f8:	461a      	mov	r2, r3
 80037fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037fe:	6093      	str	r3, [r2, #8]
 8003800:	e032      	b.n	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	2320      	movs	r3, #32
 800381c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f004 fc5b 	bl	80080e0 <HAL_PCD_DataOutStageCallback>
 800382a:	e01d      	b.n	8003868 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d114      	bne.n	800385c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003854:	461a      	mov	r2, r3
 8003856:	2100      	movs	r1, #0
 8003858:	f002 f880 	bl	800595c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f004 fc3c 	bl	80080e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	4f54300a 	.word	0x4f54300a
 8003878:	4f54310a 	.word	0x4f54310a

0800387c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	333c      	adds	r3, #60	@ 0x3c
 8003894:	3304      	adds	r3, #4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a15      	ldr	r2, [pc, #84]	@ (8003904 <PCD_EP_OutSetupPacket_int+0x88>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d90e      	bls.n	80038d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c8:	461a      	mov	r2, r3
 80038ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f004 fbf3 	bl	80080bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003904 <PCD_EP_OutSetupPacket_int+0x88>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d90c      	bls.n	80038f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	799b      	ldrb	r3, [r3, #6]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d108      	bne.n	80038f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038f0:	461a      	mov	r2, r3
 80038f2:	2101      	movs	r1, #1
 80038f4:	f002 f832 	bl	800595c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	4f54300a 	.word	0x4f54300a

08003908 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
 8003914:	4613      	mov	r3, r2
 8003916:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d107      	bne.n	8003936 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003926:	883b      	ldrh	r3, [r7, #0]
 8003928:	0419      	lsls	r1, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	430a      	orrs	r2, r1
 8003932:	629a      	str	r2, [r3, #40]	@ 0x28
 8003934:	e028      	b.n	8003988 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4413      	add	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
 8003948:	e00d      	b.n	8003966 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	3340      	adds	r3, #64	@ 0x40
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	4413      	add	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	3301      	adds	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	3b01      	subs	r3, #1
 800396c:	429a      	cmp	r2, r3
 800396e:	d3ec      	bcc.n	800394a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003970:	883b      	ldrh	r3, [r7, #0]
 8003972:	0418      	lsls	r0, r3, #16
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6819      	ldr	r1, [r3, #0]
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	3b01      	subs	r3, #1
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4302      	orrs	r2, r0
 8003980:	3340      	adds	r3, #64	@ 0x40
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e267      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d075      	beq.n	8003ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039ee:	4b88      	ldr	r3, [pc, #544]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d00c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fa:	4b85      	ldr	r3, [pc, #532]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d112      	bne.n	8003a2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a06:	4b82      	ldr	r3, [pc, #520]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a12:	d10b      	bne.n	8003a2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	4b7e      	ldr	r3, [pc, #504]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d05b      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x108>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d157      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e242      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a34:	d106      	bne.n	8003a44 <HAL_RCC_OscConfig+0x74>
 8003a36:	4b76      	ldr	r3, [pc, #472]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a75      	ldr	r2, [pc, #468]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e01d      	b.n	8003a80 <HAL_RCC_OscConfig+0xb0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x98>
 8003a4e:	4b70      	ldr	r3, [pc, #448]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6f      	ldr	r2, [pc, #444]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e00b      	b.n	8003a80 <HAL_RCC_OscConfig+0xb0>
 8003a68:	4b69      	ldr	r3, [pc, #420]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a68      	ldr	r2, [pc, #416]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b66      	ldr	r3, [pc, #408]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a65      	ldr	r2, [pc, #404]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d013      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fd fa74 	bl	8000f74 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fd fa70 	bl	8000f74 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	@ 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e207      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0xc0>
 8003aae:	e014      	b.n	8003ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fa60 	bl	8000f74 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fd fa5c 	bl	8000f74 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	@ 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1f3      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0xe8>
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d063      	beq.n	8003bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af2:	4b47      	ldr	r3, [pc, #284]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d11c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afe:	4b44      	ldr	r3, [pc, #272]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d116      	bne.n	8003b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0a:	4b41      	ldr	r3, [pc, #260]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_RCC_OscConfig+0x152>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e1c7      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b22:	4b3b      	ldr	r3, [pc, #236]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4937      	ldr	r1, [pc, #220]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b36:	e03a      	b.n	8003bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d020      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b40:	4b34      	ldr	r3, [pc, #208]	@ (8003c14 <HAL_RCC_OscConfig+0x244>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7fd fa15 	bl	8000f74 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4e:	f7fd fa11 	bl	8000f74 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e1a8      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	4b2b      	ldr	r3, [pc, #172]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6c:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4925      	ldr	r1, [pc, #148]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]
 8003b80:	e015      	b.n	8003bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b82:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <HAL_RCC_OscConfig+0x244>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd f9f4 	bl	8000f74 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fd f9f0 	bl	8000f74 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e187      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d036      	beq.n	8003c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d016      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc2:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <HAL_RCC_OscConfig+0x248>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd f9d4 	bl	8000f74 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fd f9d0 	bl	8000f74 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e167      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCC_OscConfig+0x240>)
 8003be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x200>
 8003bee:	e01b      	b.n	8003c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_RCC_OscConfig+0x248>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf6:	f7fd f9bd 	bl	8000f74 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfc:	e00e      	b.n	8003c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfe:	f7fd f9b9 	bl	8000f74 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d907      	bls.n	8003c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e150      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
 8003c10:	40023800 	.word	0x40023800
 8003c14:	42470000 	.word	0x42470000
 8003c18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1c:	4b88      	ldr	r3, [pc, #544]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ea      	bne.n	8003bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8097 	beq.w	8003d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3a:	4b81      	ldr	r3, [pc, #516]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10f      	bne.n	8003c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c56:	4b7a      	ldr	r3, [pc, #488]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c66:	4b77      	ldr	r3, [pc, #476]	@ (8003e44 <HAL_RCC_OscConfig+0x474>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d118      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c72:	4b74      	ldr	r3, [pc, #464]	@ (8003e44 <HAL_RCC_OscConfig+0x474>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a73      	ldr	r2, [pc, #460]	@ (8003e44 <HAL_RCC_OscConfig+0x474>)
 8003c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7e:	f7fd f979 	bl	8000f74 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c86:	f7fd f975 	bl	8000f74 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e10c      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	4b6a      	ldr	r3, [pc, #424]	@ (8003e44 <HAL_RCC_OscConfig+0x474>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d106      	bne.n	8003cba <HAL_RCC_OscConfig+0x2ea>
 8003cac:	4b64      	ldr	r3, [pc, #400]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4a63      	ldr	r2, [pc, #396]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb8:	e01c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x324>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b05      	cmp	r3, #5
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x30c>
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc6:	4a5e      	ldr	r2, [pc, #376]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cce:	4b5c      	ldr	r3, [pc, #368]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCC_OscConfig+0x324>
 8003cdc:	4b58      	ldr	r3, [pc, #352]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce0:	4a57      	ldr	r2, [pc, #348]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce8:	4b55      	ldr	r3, [pc, #340]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cec:	4a54      	ldr	r2, [pc, #336]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003cee:	f023 0304 	bic.w	r3, r3, #4
 8003cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d015      	beq.n	8003d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fd f93a 	bl	8000f74 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d04:	f7fd f936 	bl	8000f74 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0cb      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1a:	4b49      	ldr	r3, [pc, #292]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0ee      	beq.n	8003d04 <HAL_RCC_OscConfig+0x334>
 8003d26:	e014      	b.n	8003d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7fd f924 	bl	8000f74 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fd f920 	bl	8000f74 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0b5      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d46:	4b3e      	ldr	r3, [pc, #248]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ee      	bne.n	8003d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b39      	ldr	r3, [pc, #228]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	4a38      	ldr	r2, [pc, #224]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80a1 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d6e:	4b34      	ldr	r3, [pc, #208]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d05c      	beq.n	8003e34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d141      	bne.n	8003e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4b31      	ldr	r3, [pc, #196]	@ (8003e48 <HAL_RCC_OscConfig+0x478>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fd f8f4 	bl	8000f74 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fd f8f0 	bl	8000f74 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e087      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	4b27      	ldr	r3, [pc, #156]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	019b      	lsls	r3, r3, #6
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	491b      	ldr	r1, [pc, #108]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCC_OscConfig+0x478>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fd f8c9 	bl	8000f74 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fd f8c5 	bl	8000f74 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e05c      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df8:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x416>
 8003e04:	e054      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <HAL_RCC_OscConfig+0x478>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f8b2 	bl	8000f74 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd f8ae 	bl	8000f74 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e045      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <HAL_RCC_OscConfig+0x470>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x444>
 8003e32:	e03d      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e038      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40007000 	.word	0x40007000
 8003e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_RCC_OscConfig+0x4ec>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d028      	beq.n	8003eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d121      	bne.n	8003eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d11a      	bne.n	8003eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d111      	bne.n	8003eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	3b01      	subs	r3, #1
 8003e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800

08003ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0cc      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b68      	ldr	r3, [pc, #416]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d90c      	bls.n	8003efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b65      	ldr	r3, [pc, #404]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b63      	ldr	r3, [pc, #396]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0b8      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f14:	4b59      	ldr	r3, [pc, #356]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a58      	ldr	r2, [pc, #352]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f2c:	4b53      	ldr	r3, [pc, #332]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a52      	ldr	r2, [pc, #328]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b50      	ldr	r3, [pc, #320]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	494d      	ldr	r1, [pc, #308]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d044      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d119      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e07f      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e06f      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e067      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9e:	4b37      	ldr	r3, [pc, #220]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4934      	ldr	r1, [pc, #208]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb0:	f7fc ffe0 	bl	8000f74 <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fc ffdc 	bl	8000f74 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e04f      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 020c 	and.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1eb      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d20c      	bcs.n	8004008 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b22      	ldr	r3, [pc, #136]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b20      	ldr	r3, [pc, #128]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e032      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004014:	4b19      	ldr	r3, [pc, #100]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4916      	ldr	r1, [pc, #88]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004032:	4b12      	ldr	r3, [pc, #72]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	490e      	ldr	r1, [pc, #56]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004046:	f000 f821 	bl	800408c <HAL_RCC_GetSysClockFreq>
 800404a:	4602      	mov	r2, r0
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	490a      	ldr	r1, [pc, #40]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8004058:	5ccb      	ldrb	r3, [r1, r3]
 800405a:	fa22 f303 	lsr.w	r3, r2, r3
 800405e:	4a09      	ldr	r2, [pc, #36]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004062:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <HAL_RCC_ClockConfig+0x1c8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc ff40 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023c00 	.word	0x40023c00
 800407c:	40023800 	.word	0x40023800
 8004080:	08009034 	.word	0x08009034
 8004084:	20000000 	.word	0x20000000
 8004088:	20000004 	.word	0x20000004

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004090:	b094      	sub	sp, #80	@ 0x50
 8004092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a4:	4b79      	ldr	r3, [pc, #484]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d00d      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x40>
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	f200 80e1 	bhi.w	8004278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x34>
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d003      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040be:	e0db      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c0:	4b73      	ldr	r3, [pc, #460]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x204>)
 80040c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040c4:	e0db      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c6:	4b73      	ldr	r3, [pc, #460]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x208>)
 80040c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ca:	e0d8      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040cc:	4b6f      	ldr	r3, [pc, #444]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d6:	4b6d      	ldr	r3, [pc, #436]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e2:	4b6a      	ldr	r3, [pc, #424]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	2200      	movs	r2, #0
 80040ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f6:	2300      	movs	r3, #0
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040fe:	4622      	mov	r2, r4
 8004100:	462b      	mov	r3, r5
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	0159      	lsls	r1, r3, #5
 800410c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004110:	0150      	lsls	r0, r2, #5
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4621      	mov	r1, r4
 8004118:	1a51      	subs	r1, r2, r1
 800411a:	6139      	str	r1, [r7, #16]
 800411c:	4629      	mov	r1, r5
 800411e:	eb63 0301 	sbc.w	r3, r3, r1
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004130:	4659      	mov	r1, fp
 8004132:	018b      	lsls	r3, r1, #6
 8004134:	4651      	mov	r1, sl
 8004136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800413a:	4651      	mov	r1, sl
 800413c:	018a      	lsls	r2, r1, #6
 800413e:	4651      	mov	r1, sl
 8004140:	ebb2 0801 	subs.w	r8, r2, r1
 8004144:	4659      	mov	r1, fp
 8004146:	eb63 0901 	sbc.w	r9, r3, r1
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800415a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415e:	4690      	mov	r8, r2
 8004160:	4699      	mov	r9, r3
 8004162:	4623      	mov	r3, r4
 8004164:	eb18 0303 	adds.w	r3, r8, r3
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	462b      	mov	r3, r5
 800416c:	eb49 0303 	adc.w	r3, r9, r3
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800417e:	4629      	mov	r1, r5
 8004180:	024b      	lsls	r3, r1, #9
 8004182:	4621      	mov	r1, r4
 8004184:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004188:	4621      	mov	r1, r4
 800418a:	024a      	lsls	r2, r1, #9
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004192:	2200      	movs	r2, #0
 8004194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800419c:	f7fc f878 	bl	8000290 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4613      	mov	r3, r2
 80041a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a8:	e058      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b38      	ldr	r3, [pc, #224]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	2200      	movs	r2, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	4611      	mov	r1, r2
 80041b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	f04f 0000 	mov.w	r0, #0
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	0159      	lsls	r1, r3, #5
 80041d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d6:	0150      	lsls	r0, r2, #5
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4641      	mov	r1, r8
 80041de:	ebb2 0a01 	subs.w	sl, r2, r1
 80041e2:	4649      	mov	r1, r9
 80041e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004200:	eb63 050b 	sbc.w	r5, r3, fp
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	00eb      	lsls	r3, r5, #3
 800420e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004212:	00e2      	lsls	r2, r4, #3
 8004214:	4614      	mov	r4, r2
 8004216:	461d      	mov	r5, r3
 8004218:	4643      	mov	r3, r8
 800421a:	18e3      	adds	r3, r4, r3
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	464b      	mov	r3, r9
 8004220:	eb45 0303 	adc.w	r3, r5, r3
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004232:	4629      	mov	r1, r5
 8004234:	028b      	lsls	r3, r1, #10
 8004236:	4621      	mov	r1, r4
 8004238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800423c:	4621      	mov	r1, r4
 800423e:	028a      	lsls	r2, r1, #10
 8004240:	4610      	mov	r0, r2
 8004242:	4619      	mov	r1, r3
 8004244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004246:	2200      	movs	r2, #0
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	61fa      	str	r2, [r7, #28]
 800424c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004250:	f7fc f81e 	bl	8000290 <__aeabi_uldivmod>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4613      	mov	r3, r2
 800425a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800426c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800426e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004276:	e002      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004278:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x204>)
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800427c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004280:	4618      	mov	r0, r3
 8004282:	3750      	adds	r7, #80	@ 0x50
 8004284:	46bd      	mov	sp, r7
 8004286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200

08004298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800429c:	4b03      	ldr	r3, [pc, #12]	@ (80042ac <HAL_RCC_GetHCLKFreq+0x14>)
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042b4:	f7ff fff0 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0a9b      	lsrs	r3, r3, #10
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40023800 	.word	0x40023800
 80042d4:	08009044 	.word	0x08009044

080042d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e07b      	b.n	80043e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042fa:	d009      	beq.n	8004310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
 8004302:	e005      	b.n	8004310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fca0 	bl	8000c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004394:	ea42 0103 	orr.w	r1, r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	f003 0104 	and.w	r1, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	f003 0210 	and.w	r2, r3, #16
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043ea:	b084      	sub	sp, #16
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	f107 001c 	add.w	r0, r7, #28
 80043f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043fc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004400:	2b01      	cmp	r3, #1
 8004402:	d123      	bne.n	800444c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800442c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f001 fae9 	bl	8005a18 <USB_CoreReset>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]
 800444a:	e01b      	b.n	8004484 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f001 fadd 	bl	8005a18 <USB_CoreReset>
 800445e:	4603      	mov	r3, r0
 8004460:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004462:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	639a      	str	r2, [r3, #56]	@ 0x38
 8004476:	e005      	b.n	8004484 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004484:	7fbb      	ldrb	r3, [r7, #30]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d10b      	bne.n	80044a2 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f043 0206 	orr.w	r2, r3, #6
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ae:	b004      	add	sp, #16
 80044b0:	4770      	bx	lr
	...

080044b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d165      	bne.n	8004594 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a41      	ldr	r2, [pc, #260]	@ (80045d0 <USB_SetTurnaroundTime+0x11c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d906      	bls.n	80044de <USB_SetTurnaroundTime+0x2a>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a40      	ldr	r2, [pc, #256]	@ (80045d4 <USB_SetTurnaroundTime+0x120>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d202      	bcs.n	80044de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044d8:	230f      	movs	r3, #15
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e062      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a3c      	ldr	r2, [pc, #240]	@ (80045d4 <USB_SetTurnaroundTime+0x120>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d306      	bcc.n	80044f4 <USB_SetTurnaroundTime+0x40>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a3b      	ldr	r2, [pc, #236]	@ (80045d8 <USB_SetTurnaroundTime+0x124>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d202      	bcs.n	80044f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044ee:	230e      	movs	r3, #14
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e057      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a38      	ldr	r2, [pc, #224]	@ (80045d8 <USB_SetTurnaroundTime+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d306      	bcc.n	800450a <USB_SetTurnaroundTime+0x56>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a37      	ldr	r2, [pc, #220]	@ (80045dc <USB_SetTurnaroundTime+0x128>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d202      	bcs.n	800450a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004504:	230d      	movs	r3, #13
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e04c      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4a33      	ldr	r2, [pc, #204]	@ (80045dc <USB_SetTurnaroundTime+0x128>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d306      	bcc.n	8004520 <USB_SetTurnaroundTime+0x6c>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4a32      	ldr	r2, [pc, #200]	@ (80045e0 <USB_SetTurnaroundTime+0x12c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d802      	bhi.n	8004520 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800451a:	230c      	movs	r3, #12
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e041      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4a2f      	ldr	r2, [pc, #188]	@ (80045e0 <USB_SetTurnaroundTime+0x12c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d906      	bls.n	8004536 <USB_SetTurnaroundTime+0x82>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4a2e      	ldr	r2, [pc, #184]	@ (80045e4 <USB_SetTurnaroundTime+0x130>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d802      	bhi.n	8004536 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004530:	230b      	movs	r3, #11
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e036      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4a2a      	ldr	r2, [pc, #168]	@ (80045e4 <USB_SetTurnaroundTime+0x130>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d906      	bls.n	800454c <USB_SetTurnaroundTime+0x98>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a29      	ldr	r2, [pc, #164]	@ (80045e8 <USB_SetTurnaroundTime+0x134>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d802      	bhi.n	800454c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004546:	230a      	movs	r3, #10
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e02b      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4a26      	ldr	r2, [pc, #152]	@ (80045e8 <USB_SetTurnaroundTime+0x134>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d906      	bls.n	8004562 <USB_SetTurnaroundTime+0xae>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4a25      	ldr	r2, [pc, #148]	@ (80045ec <USB_SetTurnaroundTime+0x138>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d202      	bcs.n	8004562 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800455c:	2309      	movs	r3, #9
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e020      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4a21      	ldr	r2, [pc, #132]	@ (80045ec <USB_SetTurnaroundTime+0x138>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d306      	bcc.n	8004578 <USB_SetTurnaroundTime+0xc4>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4a20      	ldr	r2, [pc, #128]	@ (80045f0 <USB_SetTurnaroundTime+0x13c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d802      	bhi.n	8004578 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004572:	2308      	movs	r3, #8
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e015      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a1d      	ldr	r2, [pc, #116]	@ (80045f0 <USB_SetTurnaroundTime+0x13c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d906      	bls.n	800458e <USB_SetTurnaroundTime+0xda>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <USB_SetTurnaroundTime+0x140>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d202      	bcs.n	800458e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004588:	2307      	movs	r3, #7
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	e00a      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800458e:	2306      	movs	r3, #6
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e007      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800459a:	2309      	movs	r3, #9
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e001      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045a0:	2309      	movs	r3, #9
 80045a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	029b      	lsls	r3, r3, #10
 80045b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	00d8acbf 	.word	0x00d8acbf
 80045d4:	00e4e1c0 	.word	0x00e4e1c0
 80045d8:	00f42400 	.word	0x00f42400
 80045dc:	01067380 	.word	0x01067380
 80045e0:	011a499f 	.word	0x011a499f
 80045e4:	01312cff 	.word	0x01312cff
 80045e8:	014ca43f 	.word	0x014ca43f
 80045ec:	016e3600 	.word	0x016e3600
 80045f0:	01a6ab1f 	.word	0x01a6ab1f
 80045f4:	01e84800 	.word	0x01e84800

080045f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d115      	bne.n	800468a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800466a:	200a      	movs	r0, #10
 800466c:	f7fc fc8e 	bl	8000f8c <HAL_Delay>
      ms += 10U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	330a      	adds	r3, #10
 8004674:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f001 f93f 	bl	80058fa <USB_GetMode>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d01e      	beq.n	80046c0 <USB_SetCurrentMode+0x84>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2bc7      	cmp	r3, #199	@ 0xc7
 8004686:	d9f0      	bls.n	800466a <USB_SetCurrentMode+0x2e>
 8004688:	e01a      	b.n	80046c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d115      	bne.n	80046bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800469c:	200a      	movs	r0, #10
 800469e:	f7fc fc75 	bl	8000f8c <HAL_Delay>
      ms += 10U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	330a      	adds	r3, #10
 80046a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 f926 	bl	80058fa <USB_GetMode>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <USB_SetCurrentMode+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80046b8:	d9f0      	bls.n	800469c <USB_SetCurrentMode+0x60>
 80046ba:	e001      	b.n	80046c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e005      	b.n	80046cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80046c4:	d101      	bne.n	80046ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046d4:	b084      	sub	sp, #16
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b086      	sub	sp, #24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80046e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	e009      	b.n	8004708 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	3340      	adds	r3, #64	@ 0x40
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	2200      	movs	r2, #0
 8004700:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3301      	adds	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b0e      	cmp	r3, #14
 800470c:	d9f2      	bls.n	80046f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800470e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11c      	bne.n	8004750 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004724:	f043 0302 	orr.w	r3, r3, #2
 8004728:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38
 800474e:	e00b      	b.n	8004768 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004754:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800476e:	461a      	mov	r2, r3
 8004770:	2300      	movs	r3, #0
 8004772:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004774:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10d      	bne.n	8004798 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800477c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004784:	2100      	movs	r1, #0
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f968 	bl	8004a5c <USB_SetDevSpeed>
 800478c:	e008      	b.n	80047a0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800478e:	2101      	movs	r1, #1
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f963 	bl	8004a5c <USB_SetDevSpeed>
 8004796:	e003      	b.n	80047a0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004798:	2103      	movs	r1, #3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f95e 	bl	8004a5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047a0:	2110      	movs	r1, #16
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8fa 	bl	800499c <USB_FlushTxFifo>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f924 	bl	8004a00 <USB_FlushRxFifo>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c8:	461a      	mov	r2, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d4:	461a      	mov	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047e0:	461a      	mov	r2, r3
 80047e2:	2300      	movs	r3, #0
 80047e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e043      	b.n	8004874 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004802:	d118      	bne.n	8004836 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004816:	461a      	mov	r2, r3
 8004818:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e013      	b.n	8004848 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800482c:	461a      	mov	r2, r3
 800482e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e008      	b.n	8004848 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004842:	461a      	mov	r2, r3
 8004844:	2300      	movs	r3, #0
 8004846:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004854:	461a      	mov	r2, r3
 8004856:	2300      	movs	r3, #0
 8004858:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004866:	461a      	mov	r2, r3
 8004868:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800486c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	3301      	adds	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004878:	461a      	mov	r2, r3
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4293      	cmp	r3, r2
 800487e:	d3b5      	bcc.n	80047ec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	e043      	b.n	800490e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800489c:	d118      	bne.n	80048d0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b0:	461a      	mov	r2, r3
 80048b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	e013      	b.n	80048e2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c6:	461a      	mov	r2, r3
 80048c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e008      	b.n	80048e2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048dc:	461a      	mov	r2, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ee:	461a      	mov	r2, r3
 80048f0:	2300      	movs	r3, #0
 80048f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004900:	461a      	mov	r2, r3
 8004902:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004906:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	3301      	adds	r3, #1
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004912:	461a      	mov	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4293      	cmp	r3, r2
 8004918:	d3b5      	bcc.n	8004886 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800492c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800493a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800493c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f043 0210 	orr.w	r2, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <USB_DevInit+0x2c4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800495c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f043 0208 	orr.w	r2, r3, #8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004970:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004988:	7dfb      	ldrb	r3, [r7, #23]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004994:	b004      	add	sp, #16
 8004996:	4770      	bx	lr
 8004998:	803c3800 	.word	0x803c3800

0800499c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049b6:	d901      	bls.n	80049bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e01b      	b.n	80049f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	daf2      	bge.n	80049aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	019b      	lsls	r3, r3, #6
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049e0:	d901      	bls.n	80049e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e006      	b.n	80049f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d0f0      	beq.n	80049d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a18:	d901      	bls.n	8004a1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e018      	b.n	8004a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	daf2      	bge.n	8004a0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3301      	adds	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a3c:	d901      	bls.n	8004a42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e006      	b.n	8004a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d0f0      	beq.n	8004a30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0306 	and.w	r3, r3, #6
 8004aa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]
 8004ab2:	e00a      	b.n	8004aca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d002      	beq.n	8004ac0 <USB_GetDevSpeed+0x32>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d102      	bne.n	8004ac6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	75fb      	strb	r3, [r7, #23]
 8004ac4:	e001      	b.n	8004aca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ac6:	230f      	movs	r3, #15
 8004ac8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d13a      	bne.n	8004b6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d155      	bne.n	8004bd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	791b      	ldrb	r3, [r3, #4]
 8004b46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	059b      	lsls	r3, r3, #22
 8004b4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b50:	4313      	orrs	r3, r2
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e036      	b.n	8004bd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d11a      	bne.n	8004bd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	791b      	ldrb	r3, [r3, #4]
 8004bbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d161      	bne.n	8004cc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c1a:	d11f      	bne.n	8004c5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0159      	lsls	r1, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	440b      	add	r3, r1
 8004cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4b35      	ldr	r3, [pc, #212]	@ (8004d98 <USB_DeactivateEndpoint+0x1b0>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
 8004cc6:	e060      	b.n	8004d8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cde:	d11f      	bne.n	8004d20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004cfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d40:	4013      	ands	r3, r2
 8004d42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d64:	4013      	ands	r3, r2
 8004d66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	0159      	lsls	r1, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	440b      	add	r3, r1
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d82:	4619      	mov	r1, r3
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <USB_DeactivateEndpoint+0x1b4>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	ec337800 	.word	0xec337800
 8004d9c:	eff37800 	.word	0xeff37800

08004da0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08a      	sub	sp, #40	@ 0x28
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	f040 817f 	bne.w	80050c0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d132      	bne.n	8004e30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004de4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004de8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004dec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e28:	0cdb      	lsrs	r3, r3, #19
 8004e2a:	04db      	lsls	r3, r3, #19
 8004e2c:	6113      	str	r3, [r2, #16]
 8004e2e:	e097      	b.n	8004f60 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e4a:	0cdb      	lsrs	r3, r3, #19
 8004e4c:	04db      	lsls	r3, r3, #19
 8004e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e6a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004e6e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004e72:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11a      	bne.n	8004eb0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d903      	bls.n	8004e8e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ea8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004eac:	6113      	str	r3, [r2, #16]
 8004eae:	e044      	b.n	8004f3a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4413      	add	r3, r2
 8004eba:	1e5a      	subs	r2, r3, #1
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	8afb      	ldrh	r3, [r7, #22]
 8004ed6:	04d9      	lsls	r1, r3, #19
 8004ed8:	4ba4      	ldr	r3, [pc, #656]	@ (800516c <USB_EPStartXfer+0x3cc>)
 8004eda:	400b      	ands	r3, r1
 8004edc:	69b9      	ldr	r1, [r7, #24]
 8004ede:	0148      	lsls	r0, r1, #5
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	4401      	add	r1, r0
 8004ee4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	791b      	ldrb	r3, [r3, #4]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d122      	bne.n	8004f3a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f0e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004f12:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	8afb      	ldrh	r3, [r7, #22]
 8004f24:	075b      	lsls	r3, r3, #29
 8004f26:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004f2a:	69b9      	ldr	r1, [r7, #24]
 8004f2c:	0148      	lsls	r0, r1, #5
 8004f2e:	69f9      	ldr	r1, [r7, #28]
 8004f30:	4401      	add	r1, r0
 8004f32:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f50:	69b9      	ldr	r1, [r7, #24]
 8004f52:	0148      	lsls	r0, r1, #5
 8004f54:	69f9      	ldr	r1, [r7, #28]
 8004f56:	4401      	add	r1, r0
 8004f58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d14b      	bne.n	8004ffe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	791b      	ldrb	r3, [r3, #4]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d128      	bne.n	8004fdc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d110      	bne.n	8004fbc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e00f      	b.n	8004fdc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ff6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e166      	b.n	80052cc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005018:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800501c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	791b      	ldrb	r3, [r3, #4]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d015      	beq.n	8005052 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 814e 	beq.w	80052cc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	69f9      	ldr	r1, [r7, #28]
 8005048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800504c:	4313      	orrs	r3, r2
 800504e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005050:	e13c      	b.n	80052cc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d110      	bne.n	8005084 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800507c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e00f      	b.n	80050a4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	68d9      	ldr	r1, [r3, #12]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	781a      	ldrb	r2, [r3, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	b298      	uxth	r0, r3
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	4603      	mov	r3, r0
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f9b9 	bl	8005430 <USB_WritePacket>
 80050be:	e105      	b.n	80052cc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050da:	0cdb      	lsrs	r3, r3, #19
 80050dc:	04db      	lsls	r3, r3, #19
 80050de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80050fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005102:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d132      	bne.n	8005170 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005138:	69b9      	ldr	r1, [r7, #24]
 800513a:	0148      	lsls	r0, r1, #5
 800513c:	69f9      	ldr	r1, [r7, #28]
 800513e:	4401      	add	r1, r0
 8005140:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005144:	4313      	orrs	r3, r2
 8005146:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005162:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005166:	6113      	str	r3, [r2, #16]
 8005168:	e062      	b.n	8005230 <USB_EPStartXfer+0x490>
 800516a:	bf00      	nop
 800516c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d123      	bne.n	80051c0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800518e:	69b9      	ldr	r1, [r7, #24]
 8005190:	0148      	lsls	r0, r1, #5
 8005192:	69f9      	ldr	r1, [r7, #28]
 8005194:	4401      	add	r1, r0
 8005196:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800519a:	4313      	orrs	r3, r2
 800519c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051bc:	6113      	str	r3, [r2, #16]
 80051be:	e037      	b.n	8005230 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4413      	add	r3, r2
 80051ca:	1e5a      	subs	r2, r3, #1
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	8afa      	ldrh	r2, [r7, #22]
 80051dc:	fb03 f202 	mul.w	r2, r3, r2
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	8afb      	ldrh	r3, [r7, #22]
 80051f4:	04d9      	lsls	r1, r3, #19
 80051f6:	4b38      	ldr	r3, [pc, #224]	@ (80052d8 <USB_EPStartXfer+0x538>)
 80051f8:	400b      	ands	r3, r1
 80051fa:	69b9      	ldr	r1, [r7, #24]
 80051fc:	0148      	lsls	r0, r1, #5
 80051fe:	69f9      	ldr	r1, [r7, #28]
 8005200:	4401      	add	r1, r0
 8005202:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005206:	4313      	orrs	r3, r2
 8005208:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005220:	69b9      	ldr	r1, [r7, #24]
 8005222:	0148      	lsls	r0, r1, #5
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	4401      	add	r1, r0
 8005228:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800522c:	4313      	orrs	r3, r2
 800522e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10d      	bne.n	8005252 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	68d9      	ldr	r1, [r3, #12]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524e:	460a      	mov	r2, r1
 8005250:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d128      	bne.n	80052ac <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d110      	bne.n	800528c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005284:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e00f      	b.n	80052ac <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80052ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	1ff80000 	.word	0x1ff80000

080052dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d14a      	bne.n	8005390 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800530e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005312:	f040 8086 	bne.w	8005422 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005334:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005338:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005358:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800535c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f242 7210 	movw	r2, #10000	@ 0x2710
 800536a:	4293      	cmp	r3, r2
 800536c:	d902      	bls.n	8005374 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
          break;
 8005372:	e056      	b.n	8005422 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800538c:	d0e7      	beq.n	800535e <USB_EPStopXfer+0x82>
 800538e:	e048      	b.n	8005422 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053a8:	d13b      	bne.n	8005422 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	7812      	ldrb	r2, [r2, #0]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	7812      	ldrb	r2, [r2, #0]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80053fe:	4293      	cmp	r3, r2
 8005400:	d902      	bls.n	8005408 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	75fb      	strb	r3, [r7, #23]
          break;
 8005406:	e00c      	b.n	8005422 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800541c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005420:	d0e7      	beq.n	80053f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005422:	7dfb      	ldrb	r3, [r7, #23]
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	@ 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4611      	mov	r1, r2
 800543c:	461a      	mov	r2, r3
 800543e:	460b      	mov	r3, r1
 8005440:	71fb      	strb	r3, [r7, #7]
 8005442:	4613      	mov	r3, r2
 8005444:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800544e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005452:	2b00      	cmp	r3, #0
 8005454:	d123      	bne.n	800549e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005456:	88bb      	ldrh	r3, [r7, #4]
 8005458:	3303      	adds	r3, #3
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e018      	b.n	8005496 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	031a      	lsls	r2, r3, #12
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4413      	add	r3, r2
 800546c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005470:	461a      	mov	r2, r3
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	3301      	adds	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3301      	adds	r3, #1
 8005482:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	3301      	adds	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	3301      	adds	r3, #1
 800548e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	3301      	adds	r3, #1
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	429a      	cmp	r2, r3
 800549c:	d3e2      	bcc.n	8005464 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3724      	adds	r7, #36	@ 0x24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b08b      	sub	sp, #44	@ 0x2c
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	089b      	lsrs	r3, r3, #2
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	623b      	str	r3, [r7, #32]
 80054d6:	e014      	b.n	8005502 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	3301      	adds	r3, #1
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	3301      	adds	r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	3301      	adds	r3, #1
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	3301      	adds	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	3301      	adds	r3, #1
 8005500:	623b      	str	r3, [r7, #32]
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	429a      	cmp	r2, r3
 8005508:	d3e6      	bcc.n	80054d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800550a:	8bfb      	ldrh	r3, [r7, #30]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01e      	beq.n	800554e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800551a:	461a      	mov	r2, r3
 800551c:	f107 0310 	add.w	r3, r7, #16
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
 8005530:	b2da      	uxtb	r2, r3
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	701a      	strb	r2, [r3, #0]
      i++;
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	3301      	adds	r3, #1
 800553a:	623b      	str	r3, [r7, #32]
      pDest++;
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	3301      	adds	r3, #1
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005542:	8bfb      	ldrh	r3, [r7, #30]
 8005544:	3b01      	subs	r3, #1
 8005546:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005548:	8bfb      	ldrh	r3, [r7, #30]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1ea      	bne.n	8005524 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005550:	4618      	mov	r0, r3
 8005552:	372c      	adds	r7, #44	@ 0x2c
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d12c      	bne.n	80055d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	db12      	blt.n	80055b0 <USB_EPSetStall+0x54>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00f      	beq.n	80055b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	e02b      	b.n	800562a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	db12      	blt.n	800560a <USB_EPSetStall+0xae>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00f      	beq.n	800560a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005604:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005608:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005628:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d128      	bne.n	80056a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800566e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005672:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	791b      	ldrb	r3, [r3, #4]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d003      	beq.n	8005684 <USB_EPClearStall+0x4c>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	791b      	ldrb	r3, [r3, #4]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d138      	bne.n	80056f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800569e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e027      	b.n	80056f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	791b      	ldrb	r3, [r3, #4]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d003      	beq.n	80056d6 <USB_EPClearStall+0x9e>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	791b      	ldrb	r3, [r3, #4]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d10f      	bne.n	80056f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005722:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005726:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005738:	68f9      	ldr	r1, [r7, #12]
 800573a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800573e:	4313      	orrs	r3, r2
 8005740:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800577e:	f023 0302 	bic.w	r3, r3, #2
 8005782:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80057ac:	f023 0303 	bic.w	r3, r3, #3
 80057b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4013      	ands	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057ec:	68fb      	ldr	r3, [r7, #12]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	0c1b      	lsrs	r3, r3, #16
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	4013      	ands	r3, r2
 8005850:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	b29b      	uxth	r3, r3
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005890:	68bb      	ldr	r3, [r7, #8]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800589e:	b480      	push	{r7}
 80058a0:	b087      	sub	sp, #28
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	fa22 f303 	lsr.w	r3, r2, r3
 80058ce:	01db      	lsls	r3, r3, #7
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4013      	ands	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058ec:	68bb      	ldr	r3, [r7, #8]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0301 	and.w	r3, r3, #1
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005930:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005934:	f023 0307 	bic.w	r3, r3, #7
 8005938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800594c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	460b      	mov	r3, r1
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	333c      	adds	r3, #60	@ 0x3c
 8005972:	3304      	adds	r3, #4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4a26      	ldr	r2, [pc, #152]	@ (8005a14 <USB_EP0_OutStart+0xb8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d90a      	bls.n	8005996 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800598c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005990:	d101      	bne.n	8005996 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e037      	b.n	8005a06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	461a      	mov	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059c4:	f043 0318 	orr.w	r3, r3, #24
 80059c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059d8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80059dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059de:	7afb      	ldrb	r3, [r7, #11]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d10f      	bne.n	8005a04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059fe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005a02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	4f54300a 	.word	0x4f54300a

08005a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a30:	d901      	bls.n	8005a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e022      	b.n	8005a7c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	daf2      	bge.n	8005a24 <USB_CoreReset+0xc>

  count = 10U;
 8005a3e:	230a      	movs	r3, #10
 8005a40:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005a42:	e002      	b.n	8005a4a <USB_CoreReset+0x32>
  {
    count--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f9      	bne.n	8005a44 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f043 0201 	orr.w	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a68:	d901      	bls.n	8005a6e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e006      	b.n	8005a7c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d0f0      	beq.n	8005a5c <USB_CoreReset+0x44>

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005a94:	2054      	movs	r0, #84	@ 0x54
 8005a96:	f002 fd71 	bl	800857c <USBD_static_malloc>
 8005a9a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	32b0      	adds	r2, #176	@ 0xb0
 8005aac:	2100      	movs	r1, #0
 8005aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e08b      	b.n	8005bce <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	32b0      	adds	r2, #176	@ 0xb0
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	32b0      	adds	r2, #176	@ 0xb0
 8005ad0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	7c1b      	ldrb	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11b      	bne.n	8005b1a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8005bd8 <USBD_CUSTOM_HID_Init+0x150>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f003 020f 	and.w	r2, r3, #15
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	331c      	adds	r3, #28
 8005af8:	2205      	movs	r2, #5
 8005afa:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005afc:	4b37      	ldr	r3, [pc, #220]	@ (8005bdc <USBD_CUSTOM_HID_Init+0x154>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 020f 	and.w	r2, r3, #15
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005b14:	2205      	movs	r2, #5
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e01a      	b.n	8005b50 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd8 <USBD_CUSTOM_HID_Init+0x150>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f003 020f 	and.w	r2, r3, #15
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	331c      	adds	r3, #28
 8005b30:	2205      	movs	r2, #5
 8005b32:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005b34:	4b29      	ldr	r3, [pc, #164]	@ (8005bdc <USBD_CUSTOM_HID_Init+0x154>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005b4c:	2205      	movs	r2, #5
 8005b4e:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005b50:	4b21      	ldr	r3, [pc, #132]	@ (8005bd8 <USBD_CUSTOM_HID_Init+0x150>)
 8005b52:	7819      	ldrb	r1, [r3, #0]
 8005b54:	2340      	movs	r3, #64	@ 0x40
 8005b56:	2203      	movs	r2, #3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f002 fbfe 	bl	800835a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd8 <USBD_CUSTOM_HID_Init+0x150>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f003 020f 	and.w	r2, r3, #15
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	3323      	adds	r3, #35	@ 0x23
 8005b74:	2201      	movs	r2, #1
 8005b76:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8005b78:	4b18      	ldr	r3, [pc, #96]	@ (8005bdc <USBD_CUSTOM_HID_Init+0x154>)
 8005b7a:	7819      	ldrb	r1, [r3, #0]
 8005b7c:	2340      	movs	r3, #64	@ 0x40
 8005b7e:	2203      	movs	r2, #3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f002 fbea 	bl	800835a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8005b86:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <USBD_CUSTOM_HID_Init+0x154>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	f003 020f 	and.w	r2, r3, #15
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	33b0      	adds	r3, #176	@ 0xb0
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005bbe:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <USBD_CUSTOM_HID_Init+0x154>)
 8005bc0:	7819      	ldrb	r1, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	2340      	movs	r3, #64	@ 0x40
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f002 fcb6 	bl	8008538 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000086 	.word	0x20000086
 8005bdc:	20000087 	.word	0x20000087

08005be0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005bec:	4b37      	ldr	r3, [pc, #220]	@ (8005ccc <USBD_CUSTOM_HID_DeInit+0xec>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f002 fbd7 	bl	80083a6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005bf8:	4b34      	ldr	r3, [pc, #208]	@ (8005ccc <USBD_CUSTOM_HID_DeInit+0xec>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f003 020f 	and.w	r2, r3, #15
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3323      	adds	r3, #35	@ 0x23
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005c12:	4b2e      	ldr	r3, [pc, #184]	@ (8005ccc <USBD_CUSTOM_HID_DeInit+0xec>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f003 020f 	and.w	r2, r3, #15
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	331c      	adds	r3, #28
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005c2c:	4b28      	ldr	r3, [pc, #160]	@ (8005cd0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f002 fbb7 	bl	80083a6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005c38:	4b25      	ldr	r3, [pc, #148]	@ (8005cd0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	f003 020f 	and.w	r2, r3, #15
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005c54:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	32b0      	adds	r2, #176	@ 0xb0
 8005c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01f      	beq.n	8005cc2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	33b0      	adds	r3, #176	@ 0xb0
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	32b0      	adds	r2, #176	@ 0xb0
 8005ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f002 fc77 	bl	8008598 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	32b0      	adds	r2, #176	@ 0xb0
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000086 	.word	0x20000086
 8005cd0:	20000087 	.word	0x20000087

08005cd4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	32b0      	adds	r2, #176	@ 0xb0
 8005ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e108      	b.n	8005f1a <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d05c      	beq.n	8005dce <USBD_CUSTOM_HID_Setup+0xfa>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	f040 80f8 	bne.w	8005f0a <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	3b02      	subs	r3, #2
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	d84c      	bhi.n	8005dbe <USBD_CUSTOM_HID_Setup+0xea>
 8005d24:	a201      	add	r2, pc, #4	@ (adr r2, 8005d2c <USBD_CUSTOM_HID_Setup+0x58>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d63 	.word	0x08005d63
 8005d34:	08005dbf 	.word	0x08005dbf
 8005d38:	08005dbf 	.word	0x08005dbf
 8005d3c:	08005dbf 	.word	0x08005dbf
 8005d40:	08005dbf 	.word	0x08005dbf
 8005d44:	08005dbf 	.word	0x08005dbf
 8005d48:	08005d95 	.word	0x08005d95
 8005d4c:	08005d73 	.word	0x08005d73
 8005d50:	08005d55 	.word	0x08005d55
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	885b      	ldrh	r3, [r3, #2]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8005d60:	e034      	b.n	8005dcc <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	3340      	adds	r3, #64	@ 0x40
 8005d66:	2201      	movs	r2, #1
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 fcfa 	bl	8007764 <USBD_CtlSendData>
          break;
 8005d70:	e02c      	b.n	8005dcc <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	885b      	ldrh	r3, [r3, #2]
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8005d82:	e023      	b.n	8005dcc <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	3344      	adds	r3, #68	@ 0x44
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 fce9 	bl	8007764 <USBD_CtlSendData>
          break;
 8005d92:	e01b      	b.n	8005dcc <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	88db      	ldrh	r3, [r3, #6]
 8005d98:	2b40      	cmp	r3, #64	@ 0x40
 8005d9a:	d905      	bls.n	8005da8 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fc63 	bl	800766a <USBD_CtlError>
            return USBD_FAIL;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0b8      	b.n	8005f1a <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2201      	movs	r2, #1
 8005dac:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005dae:	6939      	ldr	r1, [r7, #16]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	88db      	ldrh	r3, [r3, #6]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 fd03 	bl	80077c2 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005dbc:	e006      	b.n	8005dcc <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 fc52 	bl	800766a <USBD_CtlError>
          ret = USBD_FAIL;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005dca:	bf00      	nop
      }
      break;
 8005dcc:	e0a4      	b.n	8005f18 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b0b      	cmp	r3, #11
 8005dd4:	f200 8090 	bhi.w	8005ef8 <USBD_CUSTOM_HID_Setup+0x224>
 8005dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <USBD_CUSTOM_HID_Setup+0x10c>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005f07 	.word	0x08005f07
 8005de8:	08005ef9 	.word	0x08005ef9
 8005dec:	08005ef9 	.word	0x08005ef9
 8005df0:	08005ef9 	.word	0x08005ef9
 8005df4:	08005ef9 	.word	0x08005ef9
 8005df8:	08005e3b 	.word	0x08005e3b
 8005dfc:	08005ef9 	.word	0x08005ef9
 8005e00:	08005ef9 	.word	0x08005ef9
 8005e04:	08005ef9 	.word	0x08005ef9
 8005e08:	08005ea7 	.word	0x08005ea7
 8005e0c:	08005ed1 	.word	0x08005ed1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d107      	bne.n	8005e2c <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e1c:	f107 030e 	add.w	r3, r7, #14
 8005e20:	2202      	movs	r2, #2
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 fc9d 	bl	8007764 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e2a:	e06d      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fc1b 	bl	800766a <USBD_CtlError>
            ret = USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	75fb      	strb	r3, [r7, #23]
          break;
 8005e38:	e066      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	885b      	ldrh	r3, [r3, #2]
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b22      	cmp	r3, #34	@ 0x22
 8005e44:	d110      	bne.n	8005e68 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	88db      	ldrh	r3, [r3, #6]
 8005e4a:	2b1b      	cmp	r3, #27
 8005e4c:	bf28      	it	cs
 8005e4e:	231b      	movcs	r3, #27
 8005e50:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	33b0      	adds	r3, #176	@ 0xb0
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	e00d      	b.n	8005e84 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	885b      	ldrh	r3, [r3, #2]
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b21      	cmp	r3, #33	@ 0x21
 8005e72:	d107      	bne.n	8005e84 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005e74:	4b2b      	ldr	r3, [pc, #172]	@ (8005f24 <USBD_CUSTOM_HID_Setup+0x250>)
 8005e76:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	88db      	ldrh	r3, [r3, #6]
 8005e7c:	2b09      	cmp	r3, #9
 8005e7e:	bf28      	it	cs
 8005e80:	2309      	movcs	r3, #9
 8005e82:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d006      	beq.n	8005e98 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e8a:	8bfb      	ldrh	r3, [r7, #30]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	69b9      	ldr	r1, [r7, #24]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 fc67 	bl	8007764 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e96:	e037      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fbe5 	bl	800766a <USBD_CtlError>
            ret = USBD_FAIL;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea4:	e030      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d107      	bne.n	8005ec2 <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	3348      	adds	r3, #72	@ 0x48
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fc52 	bl	8007764 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ec0:	e022      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 fbd0 	bl	800766a <USBD_CtlError>
            ret = USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ece:	e01b      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d106      	bne.n	8005eea <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	885b      	ldrh	r3, [r3, #2]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ee8:	e00e      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fbbc 	bl	800766a <USBD_CtlError>
            ret = USBD_FAIL;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef6:	e007      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fbb5 	bl	800766a <USBD_CtlError>
          ret = USBD_FAIL;
 8005f00:	2303      	movs	r3, #3
 8005f02:	75fb      	strb	r3, [r7, #23]
          break;
 8005f04:	e000      	b.n	8005f08 <USBD_CUSTOM_HID_Setup+0x234>
          break;
 8005f06:	bf00      	nop
      }
      break;
 8005f08:	e006      	b.n	8005f18 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fbac 	bl	800766a <USBD_CtlError>
      ret = USBD_FAIL;
 8005f12:	2303      	movs	r3, #3
 8005f14:	75fb      	strb	r3, [r7, #23]
      break;
 8005f16:	bf00      	nop
  }
  return (uint8_t)ret;
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000070 	.word	0x20000070

08005f28 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	4613      	mov	r3, r2
 8005f34:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	32b0      	adds	r2, #176	@ 0xb0
 8005f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f44:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e019      	b.n	8005f84 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d112      	bne.n	8005f82 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005f6e:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <USBD_CUSTOM_HID_SendReport+0x64>)
 8005f70:	7819      	ldrb	r1, [r3, #0]
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f002 fabd 	bl	80084f6 <USBD_LL_Transmit>
 8005f7c:	e001      	b.n	8005f82 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20000086 	.word	0x20000086

08005f90 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005f98:	2181      	movs	r1, #129	@ 0x81
 8005f9a:	4815      	ldr	r0, [pc, #84]	@ (8005ff0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005f9c:	f000 fd2c 	bl	80069f8 <USBD_GetEpDesc>
 8005fa0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4812      	ldr	r0, [pc, #72]	@ (8005ff0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005fa6:	f000 fd27 	bl	80069f8 <USBD_GetEpDesc>
 8005faa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fba:	711a      	strb	r2, [r3, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2205      	movs	r2, #5
 8005fc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd4:	711a      	strb	r2, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2205      	movs	r2, #5
 8005fde:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2229      	movs	r2, #41	@ 0x29
 8005fe4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005fe6:	4b02      	ldr	r3, [pc, #8]	@ (8005ff0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000044 	.word	0x20000044

08005ff4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005ffc:	2181      	movs	r1, #129	@ 0x81
 8005ffe:	4815      	ldr	r0, [pc, #84]	@ (8006054 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006000:	f000 fcfa 	bl	80069f8 <USBD_GetEpDesc>
 8006004:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006006:	2101      	movs	r1, #1
 8006008:	4812      	ldr	r0, [pc, #72]	@ (8006054 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800600a:	f000 fcf5 	bl	80069f8 <USBD_GetEpDesc>
 800600e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800601e:	711a      	strb	r2, [r3, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2205      	movs	r2, #5
 8006028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2200      	movs	r2, #0
 8006034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006038:	711a      	strb	r2, [r3, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2205      	movs	r2, #5
 8006042:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2229      	movs	r2, #41	@ 0x29
 8006048:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800604a:	4b02      	ldr	r3, [pc, #8]	@ (8006054 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000044 	.word	0x20000044

08006058 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006060:	2181      	movs	r1, #129	@ 0x81
 8006062:	4815      	ldr	r0, [pc, #84]	@ (80060b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006064:	f000 fcc8 	bl	80069f8 <USBD_GetEpDesc>
 8006068:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800606a:	2101      	movs	r1, #1
 800606c:	4812      	ldr	r0, [pc, #72]	@ (80060b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800606e:	f000 fcc3 	bl	80069f8 <USBD_GetEpDesc>
 8006072:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006082:	711a      	strb	r2, [r3, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2205      	movs	r2, #5
 800608c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d009      	beq.n	80060a8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800609c:	711a      	strb	r2, [r3, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2205      	movs	r2, #5
 80060a6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2229      	movs	r2, #41	@ 0x29
 80060ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80060ae:	4b02      	ldr	r3, [pc, #8]	@ (80060b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000044 	.word	0x20000044

080060bc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	32b0      	adds	r2, #176	@ 0xb0
 80060d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	32b0      	adds	r2, #176	@ 0xb0
 8006100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006108:	2303      	movs	r3, #3
 800610a:	e014      	b.n	8006136 <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	32b0      	adds	r2, #176	@ 0xb0
 8006116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611a:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	33b0      	adds	r3, #176	@ 0xb0
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4610      	mov	r0, r2
 8006132:	4798      	blx	r3
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	32b0      	adds	r2, #176	@ 0xb0
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800615a:	2303      	movs	r3, #3
 800615c:	e00f      	b.n	800617e <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	32b0      	adds	r2, #176	@ 0xb0
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800616e:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006170:	7819      	ldrb	r1, [r3, #0]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	2340      	movs	r3, #64	@ 0x40
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f002 f9de 	bl	8008538 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000087 	.word	0x20000087

0800618c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	32b0      	adds	r2, #176	@ 0xb0
 800619e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e013      	b.n	80061d6 <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10e      	bne.n	80061d4 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	33b0      	adds	r3, #176	@ 0xb0
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4610      	mov	r0, r2
 80061cc:	4798      	blx	r3
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	220a      	movs	r2, #10
 80061ec:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80061ee:	4b03      	ldr	r3, [pc, #12]	@ (80061fc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	2000007c 	.word	0x2000007c

08006200 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	e009      	b.n	8006228 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	33b0      	adds	r3, #176	@ 0xb0
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006248:	2303      	movs	r3, #3
 800624a:	e01f      	b.n	800628c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	79fa      	ldrb	r2, [r7, #7]
 800627e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f002 f803 	bl	800828c <USBD_LL_Init>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]

  return ret;
 800628a:	7dfb      	ldrb	r3, [r7, #23]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e025      	b.n	80062f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	32ae      	adds	r2, #174	@ 0xae
 80062be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00f      	beq.n	80062e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	32ae      	adds	r2, #174	@ 0xae
 80062d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	f107 020e 	add.w	r2, r7, #14
 80062dc:	4610      	mov	r0, r2
 80062de:	4798      	blx	r3
 80062e0:	4602      	mov	r2, r0
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f002 f80b 	bl	8008324 <USBD_LL_Start>
 800630e:	4603      	mov	r3, r0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006320:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	78fa      	ldrb	r2, [r7, #3]
 8006352:	4611      	mov	r1, r2
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	78fa      	ldrb	r2, [r7, #3]
 8006380:	4611      	mov	r1, r2
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800638c:	2303      	movs	r3, #3
 800638e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 f922 	bl	80075f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d01a      	beq.n	800640c <USBD_LL_SetupStage+0x72>
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d822      	bhi.n	8006420 <USBD_LL_SetupStage+0x86>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <USBD_LL_SetupStage+0x4a>
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d00a      	beq.n	80063f8 <USBD_LL_SetupStage+0x5e>
 80063e2:	e01d      	b.n	8006420 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb77 	bl	8006ae0 <USBD_StdDevReq>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]
      break;
 80063f6:	e020      	b.n	800643a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fbdf 	bl	8006bc4 <USBD_StdItfReq>
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
      break;
 800640a:	e016      	b.n	800643a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fc41 	bl	8006c9c <USBD_StdEPReq>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
      break;
 800641e:	e00c      	b.n	800643a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006426:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800642a:	b2db      	uxtb	r3, r3
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 ffd8 	bl	80083e4 <USBD_LL_StallEP>
 8006434:	4603      	mov	r3, r0
 8006436:	73fb      	strb	r3, [r7, #15]
      break;
 8006438:	bf00      	nop
  }

  return ret;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	460b      	mov	r3, r1
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006456:	7afb      	ldrb	r3, [r7, #11]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d177      	bne.n	800654c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006462:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800646a:	2b03      	cmp	r3, #3
 800646c:	f040 80a1 	bne.w	80065b2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	8992      	ldrh	r2, [r2, #12]
 8006478:	4293      	cmp	r3, r2
 800647a:	d91c      	bls.n	80064b6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	8992      	ldrh	r2, [r2, #12]
 8006484:	1a9a      	subs	r2, r3, r2
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	8992      	ldrh	r2, [r2, #12]
 8006492:	441a      	add	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	6919      	ldr	r1, [r3, #16]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	899b      	ldrh	r3, [r3, #12]
 80064a0:	461a      	mov	r2, r3
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	4293      	cmp	r3, r2
 80064a8:	bf38      	it	cc
 80064aa:	4613      	movcc	r3, r2
 80064ac:	461a      	mov	r2, r3
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f001 f9a8 	bl	8007804 <USBD_CtlContinueRx>
 80064b4:	e07d      	b.n	80065b2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d014      	beq.n	80064ee <USBD_LL_DataOutStage+0xaa>
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d81d      	bhi.n	8006504 <USBD_LL_DataOutStage+0xc0>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <USBD_LL_DataOutStage+0x8e>
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d003      	beq.n	80064d8 <USBD_LL_DataOutStage+0x94>
 80064d0:	e018      	b.n	8006504 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75bb      	strb	r3, [r7, #22]
            break;
 80064d6:	e018      	b.n	800650a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	4619      	mov	r1, r3
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fa6e 	bl	80069c4 <USBD_CoreFindIF>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75bb      	strb	r3, [r7, #22]
            break;
 80064ec:	e00d      	b.n	800650a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fa70 	bl	80069de <USBD_CoreFindEP>
 80064fe:	4603      	mov	r3, r0
 8006500:	75bb      	strb	r3, [r7, #22]
            break;
 8006502:	e002      	b.n	800650a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	75bb      	strb	r3, [r7, #22]
            break;
 8006508:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800650a:	7dbb      	ldrb	r3, [r7, #22]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d119      	bne.n	8006544 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b03      	cmp	r3, #3
 800651a:	d113      	bne.n	8006544 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800651c:	7dba      	ldrb	r2, [r7, #22]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	32ae      	adds	r2, #174	@ 0xae
 8006522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800652c:	7dba      	ldrb	r2, [r7, #22]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006534:	7dba      	ldrb	r2, [r7, #22]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	32ae      	adds	r2, #174	@ 0xae
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f001 f96e 	bl	8007826 <USBD_CtlSendStatus>
 800654a:	e032      	b.n	80065b2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4619      	mov	r1, r3
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fa41 	bl	80069de <USBD_CoreFindEP>
 800655c:	4603      	mov	r3, r0
 800655e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006560:	7dbb      	ldrb	r3, [r7, #22]
 8006562:	2bff      	cmp	r3, #255	@ 0xff
 8006564:	d025      	beq.n	80065b2 <USBD_LL_DataOutStage+0x16e>
 8006566:	7dbb      	ldrb	r3, [r7, #22]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d122      	bne.n	80065b2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b03      	cmp	r3, #3
 8006576:	d117      	bne.n	80065a8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006578:	7dba      	ldrb	r2, [r7, #22]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	32ae      	adds	r2, #174	@ 0xae
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00f      	beq.n	80065a8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006588:	7dba      	ldrb	r2, [r7, #22]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006590:	7dba      	ldrb	r2, [r7, #22]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	32ae      	adds	r2, #174	@ 0xae
 8006596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	7afa      	ldrb	r2, [r7, #11]
 800659e:	4611      	mov	r1, r2
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	4798      	blx	r3
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	e000      	b.n	80065b4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	460b      	mov	r3, r1
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d178      	bne.n	80066c2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3314      	adds	r3, #20
 80065d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d163      	bne.n	80066a8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	8992      	ldrh	r2, [r2, #12]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d91c      	bls.n	8006626 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	8992      	ldrh	r2, [r2, #12]
 80065f4:	1a9a      	subs	r2, r3, r2
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	8992      	ldrh	r2, [r2, #12]
 8006602:	441a      	add	r2, r3
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	6919      	ldr	r1, [r3, #16]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	461a      	mov	r2, r3
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f001 f8c4 	bl	80077a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006618:	2300      	movs	r3, #0
 800661a:	2200      	movs	r2, #0
 800661c:	2100      	movs	r1, #0
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f001 ff8a 	bl	8008538 <USBD_LL_PrepareReceive>
 8006624:	e040      	b.n	80066a8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	899b      	ldrh	r3, [r3, #12]
 800662a:	461a      	mov	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d11c      	bne.n	800666e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800663c:	4293      	cmp	r3, r2
 800663e:	d316      	bcc.n	800666e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800664a:	429a      	cmp	r2, r3
 800664c:	d20f      	bcs.n	800666e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800664e:	2200      	movs	r2, #0
 8006650:	2100      	movs	r1, #0
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f001 f8a4 	bl	80077a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006660:	2300      	movs	r3, #0
 8006662:	2200      	movs	r2, #0
 8006664:	2100      	movs	r1, #0
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f001 ff66 	bl	8008538 <USBD_LL_PrepareReceive>
 800666c:	e01c      	b.n	80066a8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b03      	cmp	r3, #3
 8006678:	d10f      	bne.n	800669a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800669a:	2180      	movs	r1, #128	@ 0x80
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f001 fea1 	bl	80083e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f001 f8d2 	bl	800784c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d03a      	beq.n	8006728 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff fe30 	bl	8006318 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80066c0:	e032      	b.n	8006728 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	4619      	mov	r1, r3
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f986 	bl	80069de <USBD_CoreFindEP>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2bff      	cmp	r3, #255	@ 0xff
 80066da:	d025      	beq.n	8006728 <USBD_LL_DataInStage+0x16c>
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d122      	bne.n	8006728 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d11c      	bne.n	8006728 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066ee:	7dfa      	ldrb	r2, [r7, #23]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	32ae      	adds	r2, #174	@ 0xae
 80066f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d014      	beq.n	8006728 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80066fe:	7dfa      	ldrb	r2, [r7, #23]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006706:	7dfa      	ldrb	r2, [r7, #23]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	32ae      	adds	r2, #174	@ 0xae
 800670c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	7afa      	ldrb	r2, [r7, #11]
 8006714:	4611      	mov	r1, r2
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	4798      	blx	r3
 800671a:	4603      	mov	r3, r0
 800671c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800671e:	7dbb      	ldrb	r3, [r7, #22]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	e000      	b.n	800672a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d014      	beq.n	8006798 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00e      	beq.n	8006798 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6852      	ldr	r2, [r2, #4]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	4611      	mov	r1, r2
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006794:	2303      	movs	r3, #3
 8006796:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006798:	2340      	movs	r3, #64	@ 0x40
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fddb 	bl	800835a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2240      	movs	r2, #64	@ 0x40
 80067b0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b4:	2340      	movs	r3, #64	@ 0x40
 80067b6:	2200      	movs	r2, #0
 80067b8:	2180      	movs	r1, #128	@ 0x80
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fdcd 	bl	800835a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2240      	movs	r2, #64	@ 0x40
 80067cc:	841a      	strh	r2, [r3, #32]

  return ret;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	78fa      	ldrb	r2, [r7, #3]
 80067e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b04      	cmp	r3, #4
 800680a:	d006      	beq.n	800681a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006812:	b2da      	uxtb	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2204      	movs	r2, #4
 800681e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b04      	cmp	r3, #4
 8006842:	d106      	bne.n	8006852 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800684a:	b2da      	uxtb	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b03      	cmp	r3, #3
 8006872:	d110      	bne.n	8006896 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	32ae      	adds	r2, #174	@ 0xae
 80068b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068be:	2303      	movs	r3, #3
 80068c0:	e01c      	b.n	80068fc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d115      	bne.n	80068fa <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	32ae      	adds	r2, #174	@ 0xae
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	32ae      	adds	r2, #174	@ 0xae
 80068ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	4611      	mov	r1, r2
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	32ae      	adds	r2, #174	@ 0xae
 800691a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006922:	2303      	movs	r3, #3
 8006924:	e01c      	b.n	8006960 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b03      	cmp	r3, #3
 8006930:	d115      	bne.n	800695e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	32ae      	adds	r2, #174	@ 0xae
 800693c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	32ae      	adds	r2, #174	@ 0xae
 8006950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	4611      	mov	r1, r2
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00e      	beq.n	80069ba <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6852      	ldr	r2, [r2, #4]
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	4611      	mov	r1, r2
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	4798      	blx	r3
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069b6:	2303      	movs	r3, #3
 80069b8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	460b      	mov	r3, r1
 80069e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	885b      	ldrh	r3, [r3, #2]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	7812      	ldrb	r2, [r2, #0]
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d91f      	bls.n	8006a5e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a24:	e013      	b.n	8006a4e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a26:	f107 030a 	add.w	r3, r7, #10
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6978      	ldr	r0, [r7, #20]
 8006a2e:	f000 f81b 	bl	8006a68 <USBD_GetNextDesc>
 8006a32:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b05      	cmp	r3, #5
 8006a3a:	d108      	bne.n	8006a4e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	789b      	ldrb	r3, [r3, #2]
 8006a44:	78fa      	ldrb	r2, [r7, #3]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d008      	beq.n	8006a5c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	885b      	ldrh	r3, [r3, #2]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	897b      	ldrh	r3, [r7, #10]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d8e5      	bhi.n	8006a26 <USBD_GetEpDesc+0x2e>
 8006a5a:	e000      	b.n	8006a5e <USBD_GetEpDesc+0x66>
          break;
 8006a5c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a5e:	693b      	ldr	r3, [r7, #16]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	4413      	add	r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a92:	68fb      	ldr	r3, [r7, #12]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006abe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	b21a      	sxth	r2, r3
 8006ac6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b21b      	sxth	r3, r3
 8006ace:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ad0:	89fb      	ldrh	r3, [r7, #14]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d005      	beq.n	8006b06 <USBD_StdDevReq+0x26>
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d857      	bhi.n	8006bae <USBD_StdDevReq+0xce>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00f      	beq.n	8006b22 <USBD_StdDevReq+0x42>
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d153      	bne.n	8006bae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	32ae      	adds	r2, #174	@ 0xae
 8006b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b20:	e04a      	b.n	8006bb8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b09      	cmp	r3, #9
 8006b28:	d83b      	bhi.n	8006ba2 <USBD_StdDevReq+0xc2>
 8006b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <USBD_StdDevReq+0x50>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b85 	.word	0x08006b85
 8006b34:	08006b99 	.word	0x08006b99
 8006b38:	08006ba3 	.word	0x08006ba3
 8006b3c:	08006b8f 	.word	0x08006b8f
 8006b40:	08006ba3 	.word	0x08006ba3
 8006b44:	08006b63 	.word	0x08006b63
 8006b48:	08006b59 	.word	0x08006b59
 8006b4c:	08006ba3 	.word	0x08006ba3
 8006b50:	08006b7b 	.word	0x08006b7b
 8006b54:	08006b6d 	.word	0x08006b6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa3e 	bl	8006fdc <USBD_GetDescriptor>
          break;
 8006b60:	e024      	b.n	8006bac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fba3 	bl	80072b0 <USBD_SetAddress>
          break;
 8006b6a:	e01f      	b.n	8006bac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fbe2 	bl	8007338 <USBD_SetConfig>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
          break;
 8006b78:	e018      	b.n	8006bac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fc85 	bl	800748c <USBD_GetConfig>
          break;
 8006b82:	e013      	b.n	8006bac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fcb6 	bl	80074f8 <USBD_GetStatus>
          break;
 8006b8c:	e00e      	b.n	8006bac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fce5 	bl	8007560 <USBD_SetFeature>
          break;
 8006b96:	e009      	b.n	8006bac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fd09 	bl	80075b2 <USBD_ClrFeature>
          break;
 8006ba0:	e004      	b.n	8006bac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fd60 	bl	800766a <USBD_CtlError>
          break;
 8006baa:	bf00      	nop
      }
      break;
 8006bac:	e004      	b.n	8006bb8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fd5a 	bl	800766a <USBD_CtlError>
      break;
 8006bb6:	bf00      	nop
  }

  return ret;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop

08006bc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bda:	2b40      	cmp	r3, #64	@ 0x40
 8006bdc:	d005      	beq.n	8006bea <USBD_StdItfReq+0x26>
 8006bde:	2b40      	cmp	r3, #64	@ 0x40
 8006be0:	d852      	bhi.n	8006c88 <USBD_StdItfReq+0xc4>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <USBD_StdItfReq+0x26>
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d14e      	bne.n	8006c88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d840      	bhi.n	8006c7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	889b      	ldrh	r3, [r3, #4]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d836      	bhi.n	8006c70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	889b      	ldrh	r3, [r3, #4]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff feda 	bl	80069c4 <USBD_CoreFindIF>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	2bff      	cmp	r3, #255	@ 0xff
 8006c18:	d01d      	beq.n	8006c56 <USBD_StdItfReq+0x92>
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11a      	bne.n	8006c56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c20:	7bba      	ldrb	r2, [r7, #14]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32ae      	adds	r2, #174	@ 0xae
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00f      	beq.n	8006c50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c30:	7bba      	ldrb	r2, [r7, #14]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c38:	7bba      	ldrb	r2, [r7, #14]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	32ae      	adds	r2, #174	@ 0xae
 8006c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c4e:	e004      	b.n	8006c5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c50:	2303      	movs	r3, #3
 8006c52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c54:	e001      	b.n	8006c5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c56:	2303      	movs	r3, #3
 8006c58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	88db      	ldrh	r3, [r3, #6]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d110      	bne.n	8006c84 <USBD_StdItfReq+0xc0>
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10d      	bne.n	8006c84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fddc 	bl	8007826 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c6e:	e009      	b.n	8006c84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fcf9 	bl	800766a <USBD_CtlError>
          break;
 8006c78:	e004      	b.n	8006c84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fcf4 	bl	800766a <USBD_CtlError>
          break;
 8006c82:	e000      	b.n	8006c86 <USBD_StdItfReq+0xc2>
          break;
 8006c84:	bf00      	nop
      }
      break;
 8006c86:	e004      	b.n	8006c92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fced 	bl	800766a <USBD_CtlError>
      break;
 8006c90:	bf00      	nop
  }

  return ret;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	889b      	ldrh	r3, [r3, #4]
 8006cae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	d007      	beq.n	8006ccc <USBD_StdEPReq+0x30>
 8006cbc:	2b40      	cmp	r3, #64	@ 0x40
 8006cbe:	f200 8181 	bhi.w	8006fc4 <USBD_StdEPReq+0x328>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d02a      	beq.n	8006d1c <USBD_StdEPReq+0x80>
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	f040 817c 	bne.w	8006fc4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff fe84 	bl	80069de <USBD_CoreFindEP>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cda:	7b7b      	ldrb	r3, [r7, #13]
 8006cdc:	2bff      	cmp	r3, #255	@ 0xff
 8006cde:	f000 8176 	beq.w	8006fce <USBD_StdEPReq+0x332>
 8006ce2:	7b7b      	ldrb	r3, [r7, #13]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f040 8172 	bne.w	8006fce <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006cea:	7b7a      	ldrb	r2, [r7, #13]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006cf2:	7b7a      	ldrb	r2, [r7, #13]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	32ae      	adds	r2, #174	@ 0xae
 8006cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8165 	beq.w	8006fce <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d04:	7b7a      	ldrb	r2, [r7, #13]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32ae      	adds	r2, #174	@ 0xae
 8006d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d1a:	e158      	b.n	8006fce <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d008      	beq.n	8006d36 <USBD_StdEPReq+0x9a>
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	f300 8147 	bgt.w	8006fb8 <USBD_StdEPReq+0x31c>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 809b 	beq.w	8006e66 <USBD_StdEPReq+0x1ca>
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d03c      	beq.n	8006dae <USBD_StdEPReq+0x112>
 8006d34:	e140      	b.n	8006fb8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d002      	beq.n	8006d48 <USBD_StdEPReq+0xac>
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d016      	beq.n	8006d74 <USBD_StdEPReq+0xd8>
 8006d46:	e02c      	b.n	8006da2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00d      	beq.n	8006d6a <USBD_StdEPReq+0xce>
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b80      	cmp	r3, #128	@ 0x80
 8006d52:	d00a      	beq.n	8006d6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fb43 	bl	80083e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d5e:	2180      	movs	r1, #128	@ 0x80
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fb3f 	bl	80083e4 <USBD_LL_StallEP>
 8006d66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d68:	e020      	b.n	8006dac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fc7c 	bl	800766a <USBD_CtlError>
              break;
 8006d72:	e01b      	b.n	8006dac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	885b      	ldrh	r3, [r3, #2]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10e      	bne.n	8006d9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00b      	beq.n	8006d9a <USBD_StdEPReq+0xfe>
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b80      	cmp	r3, #128	@ 0x80
 8006d86:	d008      	beq.n	8006d9a <USBD_StdEPReq+0xfe>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	88db      	ldrh	r3, [r3, #6]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d104      	bne.n	8006d9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fb25 	bl	80083e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fd43 	bl	8007826 <USBD_CtlSendStatus>

              break;
 8006da0:	e004      	b.n	8006dac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc60 	bl	800766a <USBD_CtlError>
              break;
 8006daa:	bf00      	nop
          }
          break;
 8006dac:	e109      	b.n	8006fc2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d002      	beq.n	8006dc0 <USBD_StdEPReq+0x124>
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d016      	beq.n	8006dec <USBD_StdEPReq+0x150>
 8006dbe:	e04b      	b.n	8006e58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00d      	beq.n	8006de2 <USBD_StdEPReq+0x146>
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	2b80      	cmp	r3, #128	@ 0x80
 8006dca:	d00a      	beq.n	8006de2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 fb07 	bl	80083e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd6:	2180      	movs	r1, #128	@ 0x80
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fb03 	bl	80083e4 <USBD_LL_StallEP>
 8006dde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006de0:	e040      	b.n	8006e64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc40 	bl	800766a <USBD_CtlError>
              break;
 8006dea:	e03b      	b.n	8006e64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	885b      	ldrh	r3, [r3, #2]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d136      	bne.n	8006e62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fb0d 	bl	8008422 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fd0c 	bl	8007826 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fde3 	bl	80069de <USBD_CoreFindEP>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e1c:	7b7b      	ldrb	r3, [r7, #13]
 8006e1e:	2bff      	cmp	r3, #255	@ 0xff
 8006e20:	d01f      	beq.n	8006e62 <USBD_StdEPReq+0x1c6>
 8006e22:	7b7b      	ldrb	r3, [r7, #13]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11c      	bne.n	8006e62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e28:	7b7a      	ldrb	r2, [r7, #13]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e30:	7b7a      	ldrb	r2, [r7, #13]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32ae      	adds	r2, #174	@ 0xae
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d010      	beq.n	8006e62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e40:	7b7a      	ldrb	r2, [r7, #13]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32ae      	adds	r2, #174	@ 0xae
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4798      	blx	r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e56:	e004      	b.n	8006e62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fc05 	bl	800766a <USBD_CtlError>
              break;
 8006e60:	e000      	b.n	8006e64 <USBD_StdEPReq+0x1c8>
              break;
 8006e62:	bf00      	nop
          }
          break;
 8006e64:	e0ad      	b.n	8006fc2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d002      	beq.n	8006e78 <USBD_StdEPReq+0x1dc>
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d033      	beq.n	8006ede <USBD_StdEPReq+0x242>
 8006e76:	e099      	b.n	8006fac <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <USBD_StdEPReq+0x1f2>
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b80      	cmp	r3, #128	@ 0x80
 8006e82:	d004      	beq.n	8006e8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fbef 	bl	800766a <USBD_CtlError>
                break;
 8006e8c:	e093      	b.n	8006fb6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	da0b      	bge.n	8006eae <USBD_StdEPReq+0x212>
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	3310      	adds	r3, #16
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	3304      	adds	r3, #4
 8006eac:	e00b      	b.n	8006ec6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	330e      	adds	r3, #14
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fc44 	bl	8007764 <USBD_CtlSendData>
              break;
 8006edc:	e06b      	b.n	8006fb6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ede:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	da11      	bge.n	8006f0a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	f003 020f 	and.w	r2, r3, #15
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3323      	adds	r3, #35	@ 0x23
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d117      	bne.n	8006f30 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fbb1 	bl	800766a <USBD_CtlError>
                  break;
 8006f08:	e055      	b.n	8006fb6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	f003 020f 	and.w	r2, r3, #15
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d104      	bne.n	8006f30 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fb9e 	bl	800766a <USBD_CtlError>
                  break;
 8006f2e:	e042      	b.n	8006fb6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	da0b      	bge.n	8006f50 <USBD_StdEPReq+0x2b4>
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	3310      	adds	r3, #16
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	e00b      	b.n	8006f68 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	3304      	adds	r3, #4
 8006f68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <USBD_StdEPReq+0x2da>
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b80      	cmp	r3, #128	@ 0x80
 8006f74:	d103      	bne.n	8006f7e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	739a      	strb	r2, [r3, #14]
 8006f7c:	e00e      	b.n	8006f9c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 fa6c 	bl	8008460 <USBD_LL_IsStallEP>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2201      	movs	r2, #1
 8006f92:	739a      	strb	r2, [r3, #14]
 8006f94:	e002      	b.n	8006f9c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	330e      	adds	r3, #14
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fbdd 	bl	8007764 <USBD_CtlSendData>
              break;
 8006faa:	e004      	b.n	8006fb6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fb5b 	bl	800766a <USBD_CtlError>
              break;
 8006fb4:	bf00      	nop
          }
          break;
 8006fb6:	e004      	b.n	8006fc2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb55 	bl	800766a <USBD_CtlError>
          break;
 8006fc0:	bf00      	nop
      }
      break;
 8006fc2:	e005      	b.n	8006fd0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fb4f 	bl	800766a <USBD_CtlError>
      break;
 8006fcc:	e000      	b.n	8006fd0 <USBD_StdEPReq+0x334>
      break;
 8006fce:	bf00      	nop
  }

  return ret;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	0a1b      	lsrs	r3, r3, #8
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	2b06      	cmp	r3, #6
 8006ffe:	f200 8128 	bhi.w	8007252 <USBD_GetDescriptor+0x276>
 8007002:	a201      	add	r2, pc, #4	@ (adr r2, 8007008 <USBD_GetDescriptor+0x2c>)
 8007004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007008:	08007025 	.word	0x08007025
 800700c:	0800703d 	.word	0x0800703d
 8007010:	0800707d 	.word	0x0800707d
 8007014:	08007253 	.word	0x08007253
 8007018:	08007253 	.word	0x08007253
 800701c:	080071f3 	.word	0x080071f3
 8007020:	0800721f 	.word	0x0800721f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	7c12      	ldrb	r2, [r2, #16]
 8007030:	f107 0108 	add.w	r1, r7, #8
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
 8007038:	60f8      	str	r0, [r7, #12]
      break;
 800703a:	e112      	b.n	8007262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	7c1b      	ldrb	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10d      	bne.n	8007060 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704c:	f107 0208 	add.w	r2, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3301      	adds	r3, #1
 800705a:	2202      	movs	r2, #2
 800705c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800705e:	e100      	b.n	8007262 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	f107 0208 	add.w	r2, r7, #8
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	2202      	movs	r2, #2
 8007078:	701a      	strb	r2, [r3, #0]
      break;
 800707a:	e0f2      	b.n	8007262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	885b      	ldrh	r3, [r3, #2]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b05      	cmp	r3, #5
 8007084:	f200 80ac 	bhi.w	80071e0 <USBD_GetDescriptor+0x204>
 8007088:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <USBD_GetDescriptor+0xb4>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070a9 	.word	0x080070a9
 8007094:	080070dd 	.word	0x080070dd
 8007098:	08007111 	.word	0x08007111
 800709c:	08007145 	.word	0x08007145
 80070a0:	08007179 	.word	0x08007179
 80070a4:	080071ad 	.word	0x080071ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	7c12      	ldrb	r2, [r2, #16]
 80070c0:	f107 0108 	add.w	r1, r7, #8
 80070c4:	4610      	mov	r0, r2
 80070c6:	4798      	blx	r3
 80070c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ca:	e091      	b.n	80071f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 facb 	bl	800766a <USBD_CtlError>
            err++;
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	3301      	adds	r3, #1
 80070d8:	72fb      	strb	r3, [r7, #11]
          break;
 80070da:	e089      	b.n	80071f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	7c12      	ldrb	r2, [r2, #16]
 80070f4:	f107 0108 	add.w	r1, r7, #8
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
 80070fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070fe:	e077      	b.n	80071f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fab1 	bl	800766a <USBD_CtlError>
            err++;
 8007108:	7afb      	ldrb	r3, [r7, #11]
 800710a:	3301      	adds	r3, #1
 800710c:	72fb      	strb	r3, [r7, #11]
          break;
 800710e:	e06f      	b.n	80071f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	7c12      	ldrb	r2, [r2, #16]
 8007128:	f107 0108 	add.w	r1, r7, #8
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
 8007130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007132:	e05d      	b.n	80071f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa97 	bl	800766a <USBD_CtlError>
            err++;
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	3301      	adds	r3, #1
 8007140:	72fb      	strb	r3, [r7, #11]
          break;
 8007142:	e055      	b.n	80071f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	7c12      	ldrb	r2, [r2, #16]
 800715c:	f107 0108 	add.w	r1, r7, #8
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
 8007164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007166:	e043      	b.n	80071f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa7d 	bl	800766a <USBD_CtlError>
            err++;
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	3301      	adds	r3, #1
 8007174:	72fb      	strb	r3, [r7, #11]
          break;
 8007176:	e03b      	b.n	80071f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	7c12      	ldrb	r2, [r2, #16]
 8007190:	f107 0108 	add.w	r1, r7, #8
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
 8007198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800719a:	e029      	b.n	80071f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa63 	bl	800766a <USBD_CtlError>
            err++;
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	3301      	adds	r3, #1
 80071a8:	72fb      	strb	r3, [r7, #11]
          break;
 80071aa:	e021      	b.n	80071f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	7c12      	ldrb	r2, [r2, #16]
 80071c4:	f107 0108 	add.w	r1, r7, #8
 80071c8:	4610      	mov	r0, r2
 80071ca:	4798      	blx	r3
 80071cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ce:	e00f      	b.n	80071f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa49 	bl	800766a <USBD_CtlError>
            err++;
 80071d8:	7afb      	ldrb	r3, [r7, #11]
 80071da:	3301      	adds	r3, #1
 80071dc:	72fb      	strb	r3, [r7, #11]
          break;
 80071de:	e007      	b.n	80071f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa41 	bl	800766a <USBD_CtlError>
          err++;
 80071e8:	7afb      	ldrb	r3, [r7, #11]
 80071ea:	3301      	adds	r3, #1
 80071ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071ee:	bf00      	nop
      }
      break;
 80071f0:	e037      	b.n	8007262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7c1b      	ldrb	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007202:	f107 0208 	add.w	r2, r7, #8
 8007206:	4610      	mov	r0, r2
 8007208:	4798      	blx	r3
 800720a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800720c:	e029      	b.n	8007262 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fa2a 	bl	800766a <USBD_CtlError>
        err++;
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	3301      	adds	r3, #1
 800721a:	72fb      	strb	r3, [r7, #11]
      break;
 800721c:	e021      	b.n	8007262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	7c1b      	ldrb	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10d      	bne.n	8007242 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800722c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722e:	f107 0208 	add.w	r2, r7, #8
 8007232:	4610      	mov	r0, r2
 8007234:	4798      	blx	r3
 8007236:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3301      	adds	r3, #1
 800723c:	2207      	movs	r2, #7
 800723e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007240:	e00f      	b.n	8007262 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fa10 	bl	800766a <USBD_CtlError>
        err++;
 800724a:	7afb      	ldrb	r3, [r7, #11]
 800724c:	3301      	adds	r3, #1
 800724e:	72fb      	strb	r3, [r7, #11]
      break;
 8007250:	e007      	b.n	8007262 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fa08 	bl	800766a <USBD_CtlError>
      err++;
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	3301      	adds	r3, #1
 800725e:	72fb      	strb	r3, [r7, #11]
      break;
 8007260:	bf00      	nop
  }

  if (err != 0U)
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d11e      	bne.n	80072a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	88db      	ldrh	r3, [r3, #6]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d016      	beq.n	800729e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007270:	893b      	ldrh	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	88da      	ldrh	r2, [r3, #6]
 800727a:	893b      	ldrh	r3, [r7, #8]
 800727c:	4293      	cmp	r3, r2
 800727e:	bf28      	it	cs
 8007280:	4613      	movcs	r3, r2
 8007282:	b29b      	uxth	r3, r3
 8007284:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007286:	893b      	ldrh	r3, [r7, #8]
 8007288:	461a      	mov	r2, r3
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa69 	bl	8007764 <USBD_CtlSendData>
 8007292:	e009      	b.n	80072a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9e7 	bl	800766a <USBD_CtlError>
 800729c:	e004      	b.n	80072a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fac1 	bl	8007826 <USBD_CtlSendStatus>
 80072a4:	e000      	b.n	80072a8 <USBD_GetDescriptor+0x2cc>
    return;
 80072a6:	bf00      	nop
  }
}
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop

080072b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	889b      	ldrh	r3, [r3, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d131      	bne.n	8007326 <USBD_SetAddress+0x76>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	88db      	ldrh	r3, [r3, #6]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d12d      	bne.n	8007326 <USBD_SetAddress+0x76>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	885b      	ldrh	r3, [r3, #2]
 80072ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80072d0:	d829      	bhi.n	8007326 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	885b      	ldrh	r3, [r3, #2]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d104      	bne.n	80072f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f9bc 	bl	800766a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f2:	e01d      	b.n	8007330 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7bfa      	ldrb	r2, [r7, #15]
 80072f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f8d9 	bl	80084b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fa8d 	bl	8007826 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d004      	beq.n	800731c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	e009      	b.n	8007330 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007324:	e004      	b.n	8007330 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f99e 	bl	800766a <USBD_CtlError>
  }
}
 800732e:	bf00      	nop
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	885b      	ldrh	r3, [r3, #2]
 800734a:	b2da      	uxtb	r2, r3
 800734c:	4b4e      	ldr	r3, [pc, #312]	@ (8007488 <USBD_SetConfig+0x150>)
 800734e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007350:	4b4d      	ldr	r3, [pc, #308]	@ (8007488 <USBD_SetConfig+0x150>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d905      	bls.n	8007364 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f985 	bl	800766a <USBD_CtlError>
    return USBD_FAIL;
 8007360:	2303      	movs	r3, #3
 8007362:	e08c      	b.n	800747e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d002      	beq.n	8007376 <USBD_SetConfig+0x3e>
 8007370:	2b03      	cmp	r3, #3
 8007372:	d029      	beq.n	80073c8 <USBD_SetConfig+0x90>
 8007374:	e075      	b.n	8007462 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007376:	4b44      	ldr	r3, [pc, #272]	@ (8007488 <USBD_SetConfig+0x150>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d020      	beq.n	80073c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800737e:	4b42      	ldr	r3, [pc, #264]	@ (8007488 <USBD_SetConfig+0x150>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007388:	4b3f      	ldr	r3, [pc, #252]	@ (8007488 <USBD_SetConfig+0x150>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fe ffcd 	bl	800632e <USBD_SetClassConfig>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d008      	beq.n	80073b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f962 	bl	800766a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073ae:	e065      	b.n	800747c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fa38 	bl	8007826 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2203      	movs	r2, #3
 80073ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80073be:	e05d      	b.n	800747c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fa30 	bl	8007826 <USBD_CtlSendStatus>
      break;
 80073c6:	e059      	b.n	800747c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073c8:	4b2f      	ldr	r3, [pc, #188]	@ (8007488 <USBD_SetConfig+0x150>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d112      	bne.n	80073f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80073d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007488 <USBD_SetConfig+0x150>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073e2:	4b29      	ldr	r3, [pc, #164]	@ (8007488 <USBD_SetConfig+0x150>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fe ffbc 	bl	8006366 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa19 	bl	8007826 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073f4:	e042      	b.n	800747c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073f6:	4b24      	ldr	r3, [pc, #144]	@ (8007488 <USBD_SetConfig+0x150>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d02a      	beq.n	800745a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fe ffaa 	bl	8006366 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007412:	4b1d      	ldr	r3, [pc, #116]	@ (8007488 <USBD_SetConfig+0x150>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800741c:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <USBD_SetConfig+0x150>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fe ff83 	bl	800632e <USBD_SetClassConfig>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00f      	beq.n	8007452 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f918 	bl	800766a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fe ff8f 	bl	8006366 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007450:	e014      	b.n	800747c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f9e7 	bl	8007826 <USBD_CtlSendStatus>
      break;
 8007458:	e010      	b.n	800747c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f9e3 	bl	8007826 <USBD_CtlSendStatus>
      break;
 8007460:	e00c      	b.n	800747c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f900 	bl	800766a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800746a:	4b07      	ldr	r3, [pc, #28]	@ (8007488 <USBD_SetConfig+0x150>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7fe ff78 	bl	8006366 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007476:	2303      	movs	r3, #3
 8007478:	73fb      	strb	r3, [r7, #15]
      break;
 800747a:	bf00      	nop
  }

  return ret;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000238 	.word	0x20000238

0800748c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	88db      	ldrh	r3, [r3, #6]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d004      	beq.n	80074a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f8e2 	bl	800766a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074a6:	e023      	b.n	80074f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	dc02      	bgt.n	80074ba <USBD_GetConfig+0x2e>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dc03      	bgt.n	80074c0 <USBD_GetConfig+0x34>
 80074b8:	e015      	b.n	80074e6 <USBD_GetConfig+0x5a>
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d00b      	beq.n	80074d6 <USBD_GetConfig+0x4a>
 80074be:	e012      	b.n	80074e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3308      	adds	r3, #8
 80074ca:	2201      	movs	r2, #1
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f948 	bl	8007764 <USBD_CtlSendData>
        break;
 80074d4:	e00c      	b.n	80074f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	2201      	movs	r2, #1
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f940 	bl	8007764 <USBD_CtlSendData>
        break;
 80074e4:	e004      	b.n	80074f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f8be 	bl	800766a <USBD_CtlError>
        break;
 80074ee:	bf00      	nop
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007508:	b2db      	uxtb	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	2b02      	cmp	r3, #2
 800750e:	d81e      	bhi.n	800754e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	88db      	ldrh	r3, [r3, #6]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d004      	beq.n	8007522 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8a5 	bl	800766a <USBD_CtlError>
        break;
 8007520:	e01a      	b.n	8007558 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f043 0202 	orr.w	r2, r3, #2
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	330c      	adds	r3, #12
 8007542:	2202      	movs	r2, #2
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f90c 	bl	8007764 <USBD_CtlSendData>
      break;
 800754c:	e004      	b.n	8007558 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f88a 	bl	800766a <USBD_CtlError>
      break;
 8007556:	bf00      	nop
  }
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	885b      	ldrh	r3, [r3, #2]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d107      	bne.n	8007582 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f953 	bl	8007826 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007580:	e013      	b.n	80075aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	885b      	ldrh	r3, [r3, #2]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d10b      	bne.n	80075a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	889b      	ldrh	r3, [r3, #4]
 800758e:	0a1b      	lsrs	r3, r3, #8
 8007590:	b29b      	uxth	r3, r3
 8007592:	b2da      	uxtb	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f943 	bl	8007826 <USBD_CtlSendStatus>
}
 80075a0:	e003      	b.n	80075aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f860 	bl	800766a <USBD_CtlError>
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d80b      	bhi.n	80075e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	885b      	ldrh	r3, [r3, #2]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d10c      	bne.n	80075ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f923 	bl	8007826 <USBD_CtlSendStatus>
      }
      break;
 80075e0:	e004      	b.n	80075ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f840 	bl	800766a <USBD_CtlError>
      break;
 80075ea:	e000      	b.n	80075ee <USBD_ClrFeature+0x3c>
      break;
 80075ec:	bf00      	nop
  }
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	781a      	ldrb	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff fa3d 	bl	8006aa0 <SWAPBYTE>
 8007626:	4603      	mov	r3, r0
 8007628:	461a      	mov	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff fa30 	bl	8006aa0 <SWAPBYTE>
 8007640:	4603      	mov	r3, r0
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff fa23 	bl	8006aa0 <SWAPBYTE>
 800765a:	4603      	mov	r3, r0
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	80da      	strh	r2, [r3, #6]
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007674:	2180      	movs	r1, #128	@ 0x80
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 feb4 	bl	80083e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800767c:	2100      	movs	r1, #0
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 feb0 	bl	80083e4 <USBD_LL_StallEP>
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d042      	beq.n	8007728 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80076a6:	6938      	ldr	r0, [r7, #16]
 80076a8:	f000 f842 	bl	8007730 <USBD_GetLen>
 80076ac:	4603      	mov	r3, r0
 80076ae:	3301      	adds	r3, #1
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076b6:	d808      	bhi.n	80076ca <USBD_GetString+0x3e>
 80076b8:	6938      	ldr	r0, [r7, #16]
 80076ba:	f000 f839 	bl	8007730 <USBD_GetLen>
 80076be:	4603      	mov	r3, r0
 80076c0:	3301      	adds	r3, #1
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	e001      	b.n	80076ce <USBD_GetString+0x42>
 80076ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	4413      	add	r3, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7812      	ldrb	r2, [r2, #0]
 80076dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	3301      	adds	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	4413      	add	r3, r2
 80076ea:	2203      	movs	r2, #3
 80076ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	3301      	adds	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076f4:	e013      	b.n	800771e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	4413      	add	r3, r2
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	3301      	adds	r3, #1
 8007706:	613b      	str	r3, [r7, #16]
    idx++;
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	3301      	adds	r3, #1
 800770c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	4413      	add	r3, r2
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
    idx++;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	3301      	adds	r3, #1
 800771c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e7      	bne.n	80076f6 <USBD_GetString+0x6a>
 8007726:	e000      	b.n	800772a <USBD_GetString+0x9e>
    return;
 8007728:	bf00      	nop
  }
}
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007740:	e005      	b.n	800774e <USBD_GetLen+0x1e>
  {
    len++;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	3301      	adds	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	3301      	adds	r3, #1
 800774c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f5      	bne.n	8007742 <USBD_GetLen+0x12>
  }

  return len;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2202      	movs	r2, #2
 8007774:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	2100      	movs	r1, #0
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 feb0 	bl	80084f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	2100      	movs	r1, #0
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fe9f 	bl	80084f6 <USBD_LL_Transmit>

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2203      	movs	r2, #3
 80077d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	2100      	movs	r1, #0
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fe9f 	bl	8008538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	2100      	movs	r1, #0
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fe8e 	bl	8008538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2204      	movs	r2, #4
 8007832:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007836:	2300      	movs	r3, #0
 8007838:	2200      	movs	r2, #0
 800783a:	2100      	movs	r1, #0
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fe5a 	bl	80084f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2205      	movs	r2, #5
 8007858:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800785c:	2300      	movs	r3, #0
 800785e:	2200      	movs	r2, #0
 8007860:	2100      	movs	r1, #0
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fe68 	bl	8008538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <shtc3_init>:
/* Exported functions definitions --------------------------------------------*/
/**
 * @brief Function to initialize a SHTC3 instance
 */
int shtc3_init(shtc3_t *const me, void *i2c_handle, uint8_t dev_addr)
{
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	4613      	mov	r3, r2
 800787e:	71fb      	strb	r3, [r7, #7]
	/* Variable to return error code */
	int ret = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
	me->i2c_dev.handle = (I2C_HandleTypeDef *)i2c_handle;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	605a      	str	r2, [r3, #4]
	me->i2c_dev.addr = dev_addr;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	79fa      	ldrb	r2, [r7, #7]
 800788e:	701a      	strb	r2, [r3, #0]
	me->id = 0;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	811a      	strh	r2, [r3, #8]
	me->state = STHC3_IDLE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	729a      	strb	r2, [r3, #10]

	/* Return 0 */
	return ret;
 800789c:	697b      	ldr	r3, [r7, #20]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <shtc3_get_id>:

/**
 * @brief Function to get the device ID
 */
int shtc3_get_id(shtc3_t *const me)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
	me->id = 0;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	811a      	strh	r2, [r3, #8]

	/* Variable to return error code */
	int ret = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_READ_ID, &me->i2c_dev);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4619      	mov	r1, r3
 80078c0:	f64e 70c8 	movw	r0, #61384	@ 0xefc8
 80078c4:	f000 f959 	bl	8007b7a <shtc3_reg_write>

	uint8_t data[3] = {0};
 80078c8:	f107 0308 	add.w	r3, r7, #8
 80078cc:	2100      	movs	r1, #0
 80078ce:	460a      	mov	r2, r1
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	460a      	mov	r2, r1
 80078d4:	709a      	strb	r2, [r3, #2]
	shtc3_reg_read(data, 3, &me->i2c_dev);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	f107 0308 	add.w	r3, r7, #8
 80078dc:	2103      	movs	r1, #3
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f926 	bl	8007b30 <shtc3_reg_read>

	/* Check data received CRC */
	if (!check_crc(data, 2, data[2])) {
 80078e4:	7aba      	ldrb	r2, [r7, #10]
 80078e6:	f107 0308 	add.w	r3, r7, #8
 80078ea:	2102      	movs	r1, #2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 f9aa 	bl	8007c46 <check_crc>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f083 0301 	eor.w	r3, r3, #1
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <shtc3_get_id+0x5a>
		return -1;
 80078fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007902:	e00b      	b.n	800791c <shtc3_get_id+0x72>
	}

	me->id = data[0] << 8 | data[1];
 8007904:	7a3b      	ldrb	r3, [r7, #8]
 8007906:	b21b      	sxth	r3, r3
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	b21a      	sxth	r2, r3
 800790c:	7a7b      	ldrb	r3, [r7, #9]
 800790e:	b21b      	sxth	r3, r3
 8007910:	4313      	orrs	r3, r2
 8007912:	b21b      	sxth	r3, r3
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	811a      	strh	r2, [r3, #8]

	/* Return 0 */
	return ret;
 800791a:	68fb      	ldr	r3, [r7, #12]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <shtc3_get_temp_and_hum>:

/**
 * @brief Function to get the temperature (°C) and humidity (%)
 */
int shtc3_get_temp_and_hum(shtc3_t *const me)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]

	shtc3_wakeup(me);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f8e9 	bl	8007b08 <shtc3_wakeup>

	shtc3_reg_write(SHTC3_CMD_MEAS_T_RH_CLOCKSTR_NM, &me->i2c_dev);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4619      	mov	r1, r3
 800793a:	f647 40a2 	movw	r0, #31906	@ 0x7ca2
 800793e:	f000 f91c 	bl	8007b7a <shtc3_reg_write>

	HAL_Delay(300);
 8007942:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8007946:	f7f9 fb21 	bl	8000f8c <HAL_Delay>

	uint8_t data[6] = {0};
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	809a      	strh	r2, [r3, #4]
	shtc3_reg_read(data, 6, &me->i2c_dev);
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	f107 030c 	add.w	r3, r7, #12
 800795a:	2106      	movs	r1, #6
 800795c:	4618      	mov	r0, r3
 800795e:	f000 f8e7 	bl	8007b30 <shtc3_reg_read>

	/* Check data received CRC */
	if (!check_crc(&data[0], 2, data[2])) {
 8007962:	7bba      	ldrb	r2, [r7, #14]
 8007964:	f107 030c 	add.w	r3, r7, #12
 8007968:	2102      	movs	r1, #2
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f96b 	bl	8007c46 <check_crc>
 8007970:	4603      	mov	r3, r0
 8007972:	f083 0301 	eor.w	r3, r3, #1
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <shtc3_get_temp_and_hum+0x5e>
		return -1;
 800797c:	f04f 33ff 	mov.w	r3, #4294967295
 8007980:	e036      	b.n	80079f0 <shtc3_get_temp_and_hum+0xcc>
	}

	if (!check_crc(&data[3], 2, data[5])) {
 8007982:	7c7a      	ldrb	r2, [r7, #17]
 8007984:	f107 030c 	add.w	r3, r7, #12
 8007988:	3303      	adds	r3, #3
 800798a:	2102      	movs	r1, #2
 800798c:	4618      	mov	r0, r3
 800798e:	f000 f95a 	bl	8007c46 <check_crc>
 8007992:	4603      	mov	r3, r0
 8007994:	f083 0301 	eor.w	r3, r3, #1
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <shtc3_get_temp_and_hum+0x80>
		return -1;
 800799e:	f04f 33ff 	mov.w	r3, #4294967295
 80079a2:	e025      	b.n	80079f0 <shtc3_get_temp_and_hum+0xcc>
	}

	me->temp = calc_temp((uint16_t)((data[0] << 8) | (data[1])));
 80079a4:	7b3b      	ldrb	r3, [r7, #12]
 80079a6:	b21b      	sxth	r3, r3
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	b21a      	sxth	r2, r3
 80079ac:	7b7b      	ldrb	r3, [r7, #13]
 80079ae:	b21b      	sxth	r3, r3
 80079b0:	4313      	orrs	r3, r2
 80079b2:	b21b      	sxth	r3, r3
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f95e 	bl	8007c78 <calc_temp>
 80079bc:	eef0 7a40 	vmov.f32	s15, s0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	edc3 7a03 	vstr	s15, [r3, #12]
	me->hum = calc_hum((uint16_t)((data[3] << 8) | (data[4])));
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	b21b      	sxth	r3, r3
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	b21a      	sxth	r2, r3
 80079ce:	7c3b      	ldrb	r3, [r7, #16]
 80079d0:	b21b      	sxth	r3, r3
 80079d2:	4313      	orrs	r3, r2
 80079d4:	b21b      	sxth	r3, r3
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 f971 	bl	8007cc0 <calc_hum>
 80079de:	eef0 7a40 	vmov.f32	s15, s0
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	edc3 7a04 	vstr	s15, [r3, #16]

	shtc3_sleep(me);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f87c 	bl	8007ae6 <shtc3_sleep>
	/* Return 0 */
	return ret;
 80079ee:	697b      	ldr	r3, [r7, #20]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <shtc3_raw_write_temp_and_hum>:
	/* Return 0 */
	return ret;
}

int shtc3_raw_write_temp_and_hum(shtc3_t *const me)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	60fb      	str	r3, [r7, #12]

	shtc3_wakeup(me);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f87f 	bl	8007b08 <shtc3_wakeup>

	ret = shtc3_reg_write(SHTC3_CMD_MEAS_T_RH_POLLING_NM, &me->i2c_dev);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f647 0066 	movw	r0, #30822	@ 0x7866
 8007a12:	f000 f8b2 	bl	8007b7a <shtc3_reg_write>
 8007a16:	4603      	mov	r3, r0
 8007a18:	60fb      	str	r3, [r7, #12]

	return ret;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <shtc3_raw_read_temp_and_hum>:

int shtc3_raw_read_temp_and_hum(shtc3_t *const me)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]

	uint8_t data[6] = {0};
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	809a      	strh	r2, [r3, #4]
	ret = shtc3_reg_read(data, 6, &me->i2c_dev);
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	f107 030c 	add.w	r3, r7, #12
 8007a40:	2106      	movs	r1, #6
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f874 	bl	8007b30 <shtc3_reg_read>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	617b      	str	r3, [r7, #20]
	if(0 != ret) {return ret;}
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <shtc3_raw_read_temp_and_hum+0x32>
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	e043      	b.n	8007ade <shtc3_raw_read_temp_and_hum+0xba>

	/* Check data received CRC */
	if (!check_crc(&data[0], 2, data[2])) {
 8007a56:	7bba      	ldrb	r2, [r7, #14]
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f8f1 	bl	8007c46 <check_crc>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f083 0301 	eor.w	r3, r3, #1
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <shtc3_raw_read_temp_and_hum+0x52>
		return -1;
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
 8007a74:	e033      	b.n	8007ade <shtc3_raw_read_temp_and_hum+0xba>
	}

	if (!check_crc(&data[3], 2, data[5])) {
 8007a76:	7c7a      	ldrb	r2, [r7, #17]
 8007a78:	f107 030c 	add.w	r3, r7, #12
 8007a7c:	3303      	adds	r3, #3
 8007a7e:	2102      	movs	r1, #2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 f8e0 	bl	8007c46 <check_crc>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f083 0301 	eor.w	r3, r3, #1
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <shtc3_raw_read_temp_and_hum+0x74>
		return -1;
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	e022      	b.n	8007ade <shtc3_raw_read_temp_and_hum+0xba>
	}

	me->temp = calc_temp((uint16_t)((data[0] << 8) | (data[1])));
 8007a98:	7b3b      	ldrb	r3, [r7, #12]
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	b21a      	sxth	r2, r3
 8007aa0:	7b7b      	ldrb	r3, [r7, #13]
 8007aa2:	b21b      	sxth	r3, r3
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b21b      	sxth	r3, r3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f8e4 	bl	8007c78 <calc_temp>
 8007ab0:	eef0 7a40 	vmov.f32	s15, s0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	edc3 7a03 	vstr	s15, [r3, #12]
	me->hum = calc_hum((uint16_t)((data[3] << 8) | (data[4])));
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	b21b      	sxth	r3, r3
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	b21a      	sxth	r2, r3
 8007ac2:	7c3b      	ldrb	r3, [r7, #16]
 8007ac4:	b21b      	sxth	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b21b      	sxth	r3, r3
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f8f7 	bl	8007cc0 <calc_hum>
 8007ad2:	eef0 7a40 	vmov.f32	s15, s0
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	edc3 7a04 	vstr	s15, [r3, #16]

	/* Return 0 */
	return ret;
 8007adc:	697b      	ldr	r3, [r7, #20]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <shtc3_sleep>:

/**
 * @brief Function to put the device in sleep mode
 */
int shtc3_sleep(shtc3_t *const me)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_SLEEP, &me->i2c_dev);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4619      	mov	r1, r3
 8007af6:	f24b 0098 	movw	r0, #45208	@ 0xb098
 8007afa:	f000 f83e 	bl	8007b7a <shtc3_reg_write>

	/* Return 0 */
	return ret;
 8007afe:	68fb      	ldr	r3, [r7, #12]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <shtc3_wakeup>:

/**
 * @brief Function to wakeup the device from sleep mode
 */
int shtc3_wakeup(shtc3_t *const me)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_WAKEUP, &me->i2c_dev);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4619      	mov	r1, r3
 8007b18:	f243 5017 	movw	r0, #13591	@ 0x3517
 8007b1c:	f000 f82d 	bl	8007b7a <shtc3_reg_write>

	HAL_Delay(1);
 8007b20:	2001      	movs	r0, #1
 8007b22:	f7f9 fa33 	bl	8000f8c <HAL_Delay>

	/* Return 0 */
	return ret;
 8007b26:	68fb      	ldr	r3, [r7, #12]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <shtc3_reg_read>:
/* Private function definitions ----------------------------------------------*/
/**
 * @brief Function that implements the default I2C read transaction
 */
static int8_t shtc3_reg_read(uint8_t *data, uint32_t data_len, void *intf)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Receive(i2c_dev->handle, (i2c_dev->addr << 1) | 0x01,
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	6858      	ldr	r0, [r3, #4]
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	b21b      	sxth	r3, r3
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	b21b      	sxth	r3, r3
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	b21b      	sxth	r3, r3
 8007b54:	b299      	uxth	r1, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	9200      	str	r2, [sp, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	f7f9 ff44 	bl	80019ec <HAL_I2C_Master_Receive>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <shtc3_reg_read+0x40>
			data, data_len, 10) > 0) {
		return -1;
 8007b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6e:	e000      	b.n	8007b72 <shtc3_reg_read+0x42>
	}

	return 0;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <shtc3_reg_write>:

/**
 * @brief Function that implements the default I2C write transaction
 */
static int8_t shtc3_reg_write(uint16_t data, void *intf)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b088      	sub	sp, #32
 8007b7e:	af02      	add	r7, sp, #8
 8007b80:	4603      	mov	r3, r0
 8007b82:	6039      	str	r1, [r7, #0]
 8007b84:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8007b86:	f107 030c 	add.w	r3, r7, #12
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	605a      	str	r2, [r3, #4]
			(uint8_t)((data >> 8) & 0xFF),
 8007b90:	88fb      	ldrh	r3, [r7, #6]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8007b98:	733b      	strb	r3, [r7, #12]
			(uint8_t)(data & 0xFF)
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8007b9e:	737b      	strb	r3, [r7, #13]
	};

	/* Transmit buffer */
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Transmit(i2c_dev->handle, i2c_dev->addr << 1, buffer, 2,
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	6858      	ldr	r0, [r3, #4]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	b299      	uxth	r1, r3
 8007bb0:	f107 020c 	add.w	r2, r7, #12
 8007bb4:	2364      	movs	r3, #100	@ 0x64
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	2302      	movs	r3, #2
 8007bba:	f7f9 fe19 	bl	80017f0 <HAL_I2C_Master_Transmit>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <shtc3_reg_write+0x50>
			100)) {
		return -1;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	e000      	b.n	8007bcc <shtc3_reg_write+0x52>
	}

	return 0;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <generate_crc>:

/**
 * @brief Function that generates a CRC byte for a given data
 */
static uint8_t generate_crc(const uint8_t *data, uint16_t count) {
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	807b      	strh	r3, [r7, #2]
  uint16_t current_byte;
  uint8_t crc = CRC8_INIT;
 8007be0:	23ff      	movs	r3, #255	@ 0xff
 8007be2:	737b      	strb	r3, [r7, #13]
  uint8_t crc_bit;

  /* calculates 8-Bit checksum with given polynomial */
  for (current_byte = 0; current_byte < count; ++current_byte) {
 8007be4:	2300      	movs	r3, #0
 8007be6:	81fb      	strh	r3, [r7, #14]
 8007be8:	e022      	b.n	8007c30 <generate_crc+0x5c>
  	crc ^= (data[current_byte]);
 8007bea:	89fb      	ldrh	r3, [r7, #14]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	4413      	add	r3, r2
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	7b7b      	ldrb	r3, [r7, #13]
 8007bf4:	4053      	eors	r3, r2
 8007bf6:	737b      	strb	r3, [r7, #13]

  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	733b      	strb	r3, [r7, #12]
 8007bfc:	e012      	b.n	8007c24 <generate_crc+0x50>
  		if (crc & 0x80) {
 8007bfe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	da08      	bge.n	8007c18 <generate_crc+0x44>
  			crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8007c06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	b25b      	sxtb	r3, r3
 8007c0e:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8007c12:	b25b      	sxtb	r3, r3
 8007c14:	737b      	strb	r3, [r7, #13]
 8007c16:	e002      	b.n	8007c1e <generate_crc+0x4a>
  		}
  		else {
  			crc = (crc << 1);
 8007c18:	7b7b      	ldrb	r3, [r7, #13]
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	737b      	strb	r3, [r7, #13]
  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8007c1e:	7b3b      	ldrb	r3, [r7, #12]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	733b      	strb	r3, [r7, #12]
 8007c24:	7b3b      	ldrb	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e9      	bne.n	8007bfe <generate_crc+0x2a>
  for (current_byte = 0; current_byte < count; ++current_byte) {
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	81fb      	strh	r3, [r7, #14]
 8007c30:	89fa      	ldrh	r2, [r7, #14]
 8007c32:	887b      	ldrh	r3, [r7, #2]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d3d8      	bcc.n	8007bea <generate_crc+0x16>
  		}
  	}
  }
  return crc;
 8007c38:	7b7b      	ldrb	r3, [r7, #13]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <check_crc>:

/**
 * @brief Function that checks the CRC for the received data
 */
static bool check_crc(const uint8_t *data, uint16_t count, uint8_t checksum) {
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	807b      	strh	r3, [r7, #2]
 8007c52:	4613      	mov	r3, r2
 8007c54:	707b      	strb	r3, [r7, #1]
	if (generate_crc(data, count) != checksum) {
 8007c56:	887b      	ldrh	r3, [r7, #2]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff ffba 	bl	8007bd4 <generate_crc>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	787b      	ldrb	r3, [r7, #1]
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d001      	beq.n	8007c6e <check_crc+0x28>
		return false;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e000      	b.n	8007c70 <check_crc+0x2a>
	}

	return true;
 8007c6e:	2301      	movs	r3, #1
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <calc_temp>:

static float calc_temp(uint16_t raw_temp)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	80fb      	strh	r3, [r7, #6]
	return 175 * (float)raw_temp / 65536.0f - 45.0f;
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	ee07 3a90 	vmov	s15, r3
 8007c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8007cb4 <calc_temp+0x3c>
 8007c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c94:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8007cb8 <calc_temp+0x40>
 8007c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c9c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007cbc <calc_temp+0x44>
 8007ca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8007ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	432f0000 	.word	0x432f0000
 8007cb8:	47800000 	.word	0x47800000
 8007cbc:	42340000 	.word	0x42340000

08007cc0 <calc_hum>:

static float calc_hum(uint16_t raw_hum)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	80fb      	strh	r3, [r7, #6]
	return 100 * (float)raw_hum / 65536.0f;
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	ee07 3a90 	vmov	s15, r3
 8007cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8007cf8 <calc_hum+0x38>
 8007cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cdc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007cfc <calc_hum+0x3c>
 8007ce0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007ce4:	eef0 7a66 	vmov.f32	s15, s13
}
 8007ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	42c80000 	.word	0x42c80000
 8007cfc:	47800000 	.word	0x47800000

08007d00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d04:	2200      	movs	r2, #0
 8007d06:	4912      	ldr	r1, [pc, #72]	@ (8007d50 <MX_USB_DEVICE_Init+0x50>)
 8007d08:	4812      	ldr	r0, [pc, #72]	@ (8007d54 <MX_USB_DEVICE_Init+0x54>)
 8007d0a:	f7fe fa93 	bl	8006234 <USBD_Init>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d14:	f7f8 ff70 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007d18:	490f      	ldr	r1, [pc, #60]	@ (8007d58 <MX_USB_DEVICE_Init+0x58>)
 8007d1a:	480e      	ldr	r0, [pc, #56]	@ (8007d54 <MX_USB_DEVICE_Init+0x54>)
 8007d1c:	f7fe faba 	bl	8006294 <USBD_RegisterClass>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d26:	f7f8 ff67 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007d2a:	490c      	ldr	r1, [pc, #48]	@ (8007d5c <MX_USB_DEVICE_Init+0x5c>)
 8007d2c:	4809      	ldr	r0, [pc, #36]	@ (8007d54 <MX_USB_DEVICE_Init+0x54>)
 8007d2e:	f7fe fa67 	bl	8006200 <USBD_CUSTOM_HID_RegisterInterface>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d38:	f7f8 ff5e 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d3c:	4805      	ldr	r0, [pc, #20]	@ (8007d54 <MX_USB_DEVICE_Init+0x54>)
 8007d3e:	f7fe fadf 	bl	8006300 <USBD_Start>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d48:	f7f8 ff56 	bl	8000bf8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d4c:	bf00      	nop
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	200000b4 	.word	0x200000b4
 8007d54:	2000023c 	.word	0x2000023c
 8007d58:	2000000c 	.word	0x2000000c
 8007d5c:	200000a4 	.word	0x200000a4

08007d60 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPIN_SIZE);  // IN
 8007d64:	2340      	movs	r3, #64	@ 0x40
 8007d66:	2203      	movs	r2, #3
 8007d68:	2181      	movs	r1, #129	@ 0x81
 8007d6a:	4806      	ldr	r0, [pc, #24]	@ (8007d84 <CUSTOM_HID_Init_FS+0x24>)
 8007d6c:	f000 faf5 	bl	800835a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPOUT_SIZE); // OUT
 8007d70:	2340      	movs	r3, #64	@ 0x40
 8007d72:	2203      	movs	r2, #3
 8007d74:	2101      	movs	r1, #1
 8007d76:	4803      	ldr	r0, [pc, #12]	@ (8007d84 <CUSTOM_HID_Init_FS+0x24>)
 8007d78:	f000 faef 	bl	800835a <USBD_LL_OpenEP>
  return (USBD_OK);
 8007d7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	2000023c 	.word	0x2000023c

08007d88 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR);
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR);
  return (USBD_OK);
 8007d8c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *buffer)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8007da0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007da4:	480a      	ldr	r0, [pc, #40]	@ (8007dd0 <CUSTOM_HID_OutEvent_FS+0x38>)
 8007da6:	f7f9 fbc4 	bl	8001532 <HAL_GPIO_TogglePin>

  usb_parser(buffer, 64);
 8007daa:	2140      	movs	r1, #64	@ 0x40
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7f8 fe45 	bl	8000a3c <usb_parser>

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8007db2:	4808      	ldr	r0, [pc, #32]	@ (8007dd4 <CUSTOM_HID_OutEvent_FS+0x3c>)
 8007db4:	f7fe f9c4 	bl	8006140 <USBD_CUSTOM_HID_ReceivePacket>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <CUSTOM_HID_OutEvent_FS+0x2c>
  {
    return -1;
 8007dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc2:	e000      	b.n	8007dc6 <CUSTOM_HID_OutEvent_FS+0x2e>
  }

  return (USBD_OK);
 8007dc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40020c00 	.word	0x40020c00
 8007dd4:	2000023c 	.word	0x2000023c

08007dd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2212      	movs	r2, #18
 8007de8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007dea:	4b03      	ldr	r3, [pc, #12]	@ (8007df8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	200000d0 	.word	0x200000d0

08007dfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e0e:	4b03      	ldr	r3, [pc, #12]	@ (8007e1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	200000e4 	.word	0x200000e4

08007e20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4907      	ldr	r1, [pc, #28]	@ (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e36:	4808      	ldr	r0, [pc, #32]	@ (8007e58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e38:	f7ff fc28 	bl	800768c <USBD_GetString>
 8007e3c:	e004      	b.n	8007e48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4904      	ldr	r1, [pc, #16]	@ (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e42:	4805      	ldr	r0, [pc, #20]	@ (8007e58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e44:	f7ff fc22 	bl	800768c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e48:	4b02      	ldr	r3, [pc, #8]	@ (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000518 	.word	0x20000518
 8007e58:	08008fe4 	.word	0x08008fe4

08007e5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	4904      	ldr	r1, [pc, #16]	@ (8007e7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e6c:	4804      	ldr	r0, [pc, #16]	@ (8007e80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e6e:	f7ff fc0d 	bl	800768c <USBD_GetString>
  return USBD_StrDesc;
 8007e72:	4b02      	ldr	r3, [pc, #8]	@ (8007e7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20000518 	.word	0x20000518
 8007e80:	08008ff4 	.word	0x08008ff4

08007e84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	221a      	movs	r2, #26
 8007e94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e96:	f000 f843 	bl	8007f20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e9a:	4b02      	ldr	r3, [pc, #8]	@ (8007ea4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	200000e8 	.word	0x200000e8

08007ea8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	6039      	str	r1, [r7, #0]
 8007eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	4907      	ldr	r1, [pc, #28]	@ (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ebe:	4808      	ldr	r0, [pc, #32]	@ (8007ee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ec0:	f7ff fbe4 	bl	800768c <USBD_GetString>
 8007ec4:	e004      	b.n	8007ed0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	4904      	ldr	r1, [pc, #16]	@ (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007eca:	4805      	ldr	r0, [pc, #20]	@ (8007ee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ecc:	f7ff fbde 	bl	800768c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ed0:	4b02      	ldr	r3, [pc, #8]	@ (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000518 	.word	0x20000518
 8007ee0:	08009008 	.word	0x08009008

08007ee4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d105      	bne.n	8007f02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	4907      	ldr	r1, [pc, #28]	@ (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007efa:	4808      	ldr	r0, [pc, #32]	@ (8007f1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007efc:	f7ff fbc6 	bl	800768c <USBD_GetString>
 8007f00:	e004      	b.n	8007f0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4904      	ldr	r1, [pc, #16]	@ (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f06:	4805      	ldr	r0, [pc, #20]	@ (8007f1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f08:	f7ff fbc0 	bl	800768c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f0c:	4b02      	ldr	r3, [pc, #8]	@ (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000518 	.word	0x20000518
 8007f1c:	0800901c 	.word	0x0800901c

08007f20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f26:	4b0f      	ldr	r3, [pc, #60]	@ (8007f64 <Get_SerialNum+0x44>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f68 <Get_SerialNum+0x48>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f32:	4b0e      	ldr	r3, [pc, #56]	@ (8007f6c <Get_SerialNum+0x4c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f46:	2208      	movs	r2, #8
 8007f48:	4909      	ldr	r1, [pc, #36]	@ (8007f70 <Get_SerialNum+0x50>)
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f814 	bl	8007f78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f50:	2204      	movs	r2, #4
 8007f52:	4908      	ldr	r1, [pc, #32]	@ (8007f74 <Get_SerialNum+0x54>)
 8007f54:	68b8      	ldr	r0, [r7, #8]
 8007f56:	f000 f80f 	bl	8007f78 <IntToUnicode>
  }
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	1fff7a10 	.word	0x1fff7a10
 8007f68:	1fff7a14 	.word	0x1fff7a14
 8007f6c:	1fff7a18 	.word	0x1fff7a18
 8007f70:	200000ea 	.word	0x200000ea
 8007f74:	200000fa 	.word	0x200000fa

08007f78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	75fb      	strb	r3, [r7, #23]
 8007f8e:	e027      	b.n	8007fe0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0f1b      	lsrs	r3, r3, #28
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d80b      	bhi.n	8007fb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	0f1b      	lsrs	r3, r3, #28
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3230      	adds	r2, #48	@ 0x30
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	e00a      	b.n	8007fc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	0f1b      	lsrs	r3, r3, #28
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3237      	adds	r2, #55	@ 0x37
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
 8007fe0:	7dfa      	ldrb	r2, [r7, #23]
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d3d3      	bcc.n	8007f90 <IntToUnicode+0x18>
  }
}
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
	...

08007ff8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	@ 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	605a      	str	r2, [r3, #4]
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008018:	d147      	bne.n	80080aa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	4b25      	ldr	r3, [pc, #148]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008022:	4a24      	ldr	r2, [pc, #144]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	6313      	str	r3, [r2, #48]	@ 0x30
 800802a:	4b22      	ldr	r3, [pc, #136]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800803a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800803c:	2300      	movs	r3, #0
 800803e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008044:	f107 0314 	add.w	r3, r7, #20
 8008048:	4619      	mov	r1, r3
 800804a:	481b      	ldr	r0, [pc, #108]	@ (80080b8 <HAL_PCD_MspInit+0xc0>)
 800804c:	f7f9 f8d4 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008050:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008056:	2302      	movs	r3, #2
 8008058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800805e:	2303      	movs	r3, #3
 8008060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008062:	230a      	movs	r3, #10
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008066:	f107 0314 	add.w	r3, r7, #20
 800806a:	4619      	mov	r1, r3
 800806c:	4812      	ldr	r0, [pc, #72]	@ (80080b8 <HAL_PCD_MspInit+0xc0>)
 800806e:	f7f9 f8c3 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008072:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008076:	4a0f      	ldr	r2, [pc, #60]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800807c:	6353      	str	r3, [r2, #52]	@ 0x34
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008086:	4a0b      	ldr	r2, [pc, #44]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800808c:	6453      	str	r3, [r2, #68]	@ 0x44
 800808e:	4b09      	ldr	r3, [pc, #36]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800809a:	2200      	movs	r2, #0
 800809c:	2100      	movs	r1, #0
 800809e:	2043      	movs	r0, #67	@ 0x43
 80080a0:	f7f9 f873 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080a4:	2043      	movs	r0, #67	@ 0x43
 80080a6:	f7f9 f88c 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080aa:	bf00      	nop
 80080ac:	3728      	adds	r7, #40	@ 0x28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	40020000 	.word	0x40020000

080080bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f7fe f961 	bl	800639a <USBD_LL_SetupStage>
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	4619      	mov	r1, r3
 800810a:	f7fe f99b 	bl	8006444 <USBD_LL_DataOutStage>
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4613      	mov	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	3320      	adds	r3, #32
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	4619      	mov	r1, r3
 800813e:	f7fe fa3d 	bl	80065bc <USBD_LL_DataInStage>
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008158:	4618      	mov	r0, r3
 800815a:	f7fe fb81 	bl	8006860 <USBD_LL_SOF>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800816e:	2301      	movs	r3, #1
 8008170:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	79db      	ldrb	r3, [r3, #7]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d001      	beq.n	800817e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800817a:	f7f8 fd3d 	bl	8000bf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008184:	7bfa      	ldrb	r2, [r7, #15]
 8008186:	4611      	mov	r1, r2
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe fb25 	bl	80067d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe facc 	bl	8006732 <USBD_LL_Reset>
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fb20 	bl	80067f8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6812      	ldr	r2, [r2, #0]
 80081c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7adb      	ldrb	r3, [r3, #11]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <HAL_PCD_SuspendCallback+0x48>)
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	4a03      	ldr	r2, [pc, #12]	@ (80081ec <HAL_PCD_SuspendCallback+0x48>)
 80081de:	f043 0306 	orr.w	r3, r3, #6
 80081e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	e000ed00 	.word	0xe000ed00

080081f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fb16 	bl	8006830 <USBD_LL_Resume>
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fb6e 	bl	8006904 <USBD_LL_IsoOUTIncomplete>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	4611      	mov	r1, r2
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fb2a 	bl	80068a0 <USBD_LL_IsoINIncomplete>
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fb80 	bl	8006968 <USBD_LL_DevConnected>
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe fb7d 	bl	800697e <USBD_LL_DevDisconnected>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d13c      	bne.n	8008316 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800829c:	4a20      	ldr	r2, [pc, #128]	@ (8008320 <USBD_LL_Init+0x94>)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008320 <USBD_LL_Init+0x94>)
 80082a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008320 <USBD_LL_Init+0x94>)
 80082ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80082b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80082b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008320 <USBD_LL_Init+0x94>)
 80082b6:	2204      	movs	r2, #4
 80082b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80082ba:	4b19      	ldr	r3, [pc, #100]	@ (8008320 <USBD_LL_Init+0x94>)
 80082bc:	2202      	movs	r2, #2
 80082be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80082c0:	4b17      	ldr	r3, [pc, #92]	@ (8008320 <USBD_LL_Init+0x94>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082c6:	4b16      	ldr	r3, [pc, #88]	@ (8008320 <USBD_LL_Init+0x94>)
 80082c8:	2202      	movs	r2, #2
 80082ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082cc:	4b14      	ldr	r3, [pc, #80]	@ (8008320 <USBD_LL_Init+0x94>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082d2:	4b13      	ldr	r3, [pc, #76]	@ (8008320 <USBD_LL_Init+0x94>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082d8:	4b11      	ldr	r3, [pc, #68]	@ (8008320 <USBD_LL_Init+0x94>)
 80082da:	2200      	movs	r2, #0
 80082dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80082de:	4b10      	ldr	r3, [pc, #64]	@ (8008320 <USBD_LL_Init+0x94>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008320 <USBD_LL_Init+0x94>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082ea:	480d      	ldr	r0, [pc, #52]	@ (8008320 <USBD_LL_Init+0x94>)
 80082ec:	f7fa f936 	bl	800255c <HAL_PCD_Init>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082f6:	f7f8 fc7f 	bl	8000bf8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082fa:	2180      	movs	r1, #128	@ 0x80
 80082fc:	4808      	ldr	r0, [pc, #32]	@ (8008320 <USBD_LL_Init+0x94>)
 80082fe:	f7fb fb4a 	bl	8003996 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008302:	2240      	movs	r2, #64	@ 0x40
 8008304:	2100      	movs	r1, #0
 8008306:	4806      	ldr	r0, [pc, #24]	@ (8008320 <USBD_LL_Init+0x94>)
 8008308:	f7fb fafe 	bl	8003908 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800830c:	2280      	movs	r2, #128	@ 0x80
 800830e:	2101      	movs	r1, #1
 8008310:	4803      	ldr	r0, [pc, #12]	@ (8008320 <USBD_LL_Init+0x94>)
 8008312:	f7fb faf9 	bl	8003908 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20000718 	.word	0x20000718

08008324 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800833a:	4618      	mov	r0, r3
 800833c:	f7fa fa1d 	bl	800277a <HAL_PCD_Start>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f930 	bl	80085ac <USBD_Get_USB_Status>
 800834c:	4603      	mov	r3, r0
 800834e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008350:	7bbb      	ldrb	r3, [r7, #14]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	4608      	mov	r0, r1
 8008364:	4611      	mov	r1, r2
 8008366:	461a      	mov	r2, r3
 8008368:	4603      	mov	r3, r0
 800836a:	70fb      	strb	r3, [r7, #3]
 800836c:	460b      	mov	r3, r1
 800836e:	70bb      	strb	r3, [r7, #2]
 8008370:	4613      	mov	r3, r2
 8008372:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008382:	78bb      	ldrb	r3, [r7, #2]
 8008384:	883a      	ldrh	r2, [r7, #0]
 8008386:	78f9      	ldrb	r1, [r7, #3]
 8008388:	f7fa fef1 	bl	800316e <HAL_PCD_EP_Open>
 800838c:	4603      	mov	r3, r0
 800838e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f90a 	bl	80085ac <USBD_Get_USB_Status>
 8008398:	4603      	mov	r3, r0
 800839a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800839c:	7bbb      	ldrb	r3, [r7, #14]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083c0:	78fa      	ldrb	r2, [r7, #3]
 80083c2:	4611      	mov	r1, r2
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fa ff3c 	bl	8003242 <HAL_PCD_EP_Close>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 f8eb 	bl	80085ac <USBD_Get_USB_Status>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083da:	7bbb      	ldrb	r3, [r7, #14]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f7fa ffdc 	bl	80033c0 <HAL_PCD_EP_SetStall>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 f8cc 	bl	80085ac <USBD_Get_USB_Status>
 8008414:	4603      	mov	r3, r0
 8008416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008418:	7bbb      	ldrb	r3, [r7, #14]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f7fb f820 	bl	8003486 <HAL_PCD_EP_ClrStall>
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f8ad 	bl	80085ac <USBD_Get_USB_Status>
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008456:	7bbb      	ldrb	r3, [r7, #14]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008472:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008478:	2b00      	cmp	r3, #0
 800847a:	da0b      	bge.n	8008494 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	4613      	mov	r3, r2
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	3316      	adds	r3, #22
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	e00b      	b.n	80084ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800849a:	68f9      	ldr	r1, [r7, #12]
 800849c:	4613      	mov	r3, r2
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80084aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fa fe25 	bl	8003126 <HAL_PCD_SetAddress>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f862 	bl	80085ac <USBD_Get_USB_Status>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b086      	sub	sp, #24
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	460b      	mov	r3, r1
 8008504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008514:	7af9      	ldrb	r1, [r7, #11]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	f7fa ff17 	bl	800334c <HAL_PCD_EP_Transmit>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f841 	bl	80085ac <USBD_Get_USB_Status>
 800852a:	4603      	mov	r3, r0
 800852c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800852e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	460b      	mov	r3, r1
 8008546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008556:	7af9      	ldrb	r1, [r7, #11]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	f7fa febb 	bl	80032d6 <HAL_PCD_EP_Receive>
 8008560:	4603      	mov	r3, r0
 8008562:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 f820 	bl	80085ac <USBD_Get_USB_Status>
 800856c:	4603      	mov	r3, r0
 800856e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008570:	7dbb      	ldrb	r3, [r7, #22]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008584:	4b03      	ldr	r3, [pc, #12]	@ (8008594 <USBD_static_malloc+0x18>)
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20000bfc 	.word	0x20000bfc

08008598 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]

}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d817      	bhi.n	80085f0 <USBD_Get_USB_Status+0x44>
 80085c0:	a201      	add	r2, pc, #4	@ (adr r2, 80085c8 <USBD_Get_USB_Status+0x1c>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085d9 	.word	0x080085d9
 80085cc:	080085df 	.word	0x080085df
 80085d0:	080085e5 	.word	0x080085e5
 80085d4:	080085eb 	.word	0x080085eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
    break;
 80085dc:	e00b      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085de:	2303      	movs	r3, #3
 80085e0:	73fb      	strb	r3, [r7, #15]
    break;
 80085e2:	e008      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
    break;
 80085e8:	e005      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085ea:	2303      	movs	r3, #3
 80085ec:	73fb      	strb	r3, [r7, #15]
    break;
 80085ee:	e002      	b.n	80085f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80085f0:	2303      	movs	r3, #3
 80085f2:	73fb      	strb	r3, [r7, #15]
    break;
 80085f4:	bf00      	nop
  }
  return usb_status;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <siprintf>:
 8008604:	b40e      	push	{r1, r2, r3}
 8008606:	b510      	push	{r4, lr}
 8008608:	b09d      	sub	sp, #116	@ 0x74
 800860a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800860c:	9002      	str	r0, [sp, #8]
 800860e:	9006      	str	r0, [sp, #24]
 8008610:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008614:	480a      	ldr	r0, [pc, #40]	@ (8008640 <siprintf+0x3c>)
 8008616:	9107      	str	r1, [sp, #28]
 8008618:	9104      	str	r1, [sp, #16]
 800861a:	490a      	ldr	r1, [pc, #40]	@ (8008644 <siprintf+0x40>)
 800861c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008620:	9105      	str	r1, [sp, #20]
 8008622:	2400      	movs	r4, #0
 8008624:	a902      	add	r1, sp, #8
 8008626:	6800      	ldr	r0, [r0, #0]
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800862c:	f000 f9a6 	bl	800897c <_svfiprintf_r>
 8008630:	9b02      	ldr	r3, [sp, #8]
 8008632:	701c      	strb	r4, [r3, #0]
 8008634:	b01d      	add	sp, #116	@ 0x74
 8008636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800863a:	b003      	add	sp, #12
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20000104 	.word	0x20000104
 8008644:	ffff0208 	.word	0xffff0208

08008648 <memset>:
 8008648:	4402      	add	r2, r0
 800864a:	4603      	mov	r3, r0
 800864c:	4293      	cmp	r3, r2
 800864e:	d100      	bne.n	8008652 <memset+0xa>
 8008650:	4770      	bx	lr
 8008652:	f803 1b01 	strb.w	r1, [r3], #1
 8008656:	e7f9      	b.n	800864c <memset+0x4>

08008658 <strncmp>:
 8008658:	b510      	push	{r4, lr}
 800865a:	b16a      	cbz	r2, 8008678 <strncmp+0x20>
 800865c:	3901      	subs	r1, #1
 800865e:	1884      	adds	r4, r0, r2
 8008660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008664:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008668:	429a      	cmp	r2, r3
 800866a:	d103      	bne.n	8008674 <strncmp+0x1c>
 800866c:	42a0      	cmp	r0, r4
 800866e:	d001      	beq.n	8008674 <strncmp+0x1c>
 8008670:	2a00      	cmp	r2, #0
 8008672:	d1f5      	bne.n	8008660 <strncmp+0x8>
 8008674:	1ad0      	subs	r0, r2, r3
 8008676:	bd10      	pop	{r4, pc}
 8008678:	4610      	mov	r0, r2
 800867a:	e7fc      	b.n	8008676 <strncmp+0x1e>

0800867c <__errno>:
 800867c:	4b01      	ldr	r3, [pc, #4]	@ (8008684 <__errno+0x8>)
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20000104 	.word	0x20000104

08008688 <__libc_init_array>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4d0d      	ldr	r5, [pc, #52]	@ (80086c0 <__libc_init_array+0x38>)
 800868c:	4c0d      	ldr	r4, [pc, #52]	@ (80086c4 <__libc_init_array+0x3c>)
 800868e:	1b64      	subs	r4, r4, r5
 8008690:	10a4      	asrs	r4, r4, #2
 8008692:	2600      	movs	r6, #0
 8008694:	42a6      	cmp	r6, r4
 8008696:	d109      	bne.n	80086ac <__libc_init_array+0x24>
 8008698:	4d0b      	ldr	r5, [pc, #44]	@ (80086c8 <__libc_init_array+0x40>)
 800869a:	4c0c      	ldr	r4, [pc, #48]	@ (80086cc <__libc_init_array+0x44>)
 800869c:	f000 fc64 	bl	8008f68 <_init>
 80086a0:	1b64      	subs	r4, r4, r5
 80086a2:	10a4      	asrs	r4, r4, #2
 80086a4:	2600      	movs	r6, #0
 80086a6:	42a6      	cmp	r6, r4
 80086a8:	d105      	bne.n	80086b6 <__libc_init_array+0x2e>
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b0:	4798      	blx	r3
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7ee      	b.n	8008694 <__libc_init_array+0xc>
 80086b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ba:	4798      	blx	r3
 80086bc:	3601      	adds	r6, #1
 80086be:	e7f2      	b.n	80086a6 <__libc_init_array+0x1e>
 80086c0:	08009088 	.word	0x08009088
 80086c4:	08009088 	.word	0x08009088
 80086c8:	08009088 	.word	0x08009088
 80086cc:	0800908c 	.word	0x0800908c

080086d0 <__retarget_lock_acquire_recursive>:
 80086d0:	4770      	bx	lr

080086d2 <__retarget_lock_release_recursive>:
 80086d2:	4770      	bx	lr

080086d4 <_free_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4605      	mov	r5, r0
 80086d8:	2900      	cmp	r1, #0
 80086da:	d041      	beq.n	8008760 <_free_r+0x8c>
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f0c      	subs	r4, r1, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfb8      	it	lt
 80086e6:	18e4      	addlt	r4, r4, r3
 80086e8:	f000 f8e0 	bl	80088ac <__malloc_lock>
 80086ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008764 <_free_r+0x90>)
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	b933      	cbnz	r3, 8008700 <_free_r+0x2c>
 80086f2:	6063      	str	r3, [r4, #4]
 80086f4:	6014      	str	r4, [r2, #0]
 80086f6:	4628      	mov	r0, r5
 80086f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fc:	f000 b8dc 	b.w	80088b8 <__malloc_unlock>
 8008700:	42a3      	cmp	r3, r4
 8008702:	d908      	bls.n	8008716 <_free_r+0x42>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	1821      	adds	r1, r4, r0
 8008708:	428b      	cmp	r3, r1
 800870a:	bf01      	itttt	eq
 800870c:	6819      	ldreq	r1, [r3, #0]
 800870e:	685b      	ldreq	r3, [r3, #4]
 8008710:	1809      	addeq	r1, r1, r0
 8008712:	6021      	streq	r1, [r4, #0]
 8008714:	e7ed      	b.n	80086f2 <_free_r+0x1e>
 8008716:	461a      	mov	r2, r3
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	b10b      	cbz	r3, 8008720 <_free_r+0x4c>
 800871c:	42a3      	cmp	r3, r4
 800871e:	d9fa      	bls.n	8008716 <_free_r+0x42>
 8008720:	6811      	ldr	r1, [r2, #0]
 8008722:	1850      	adds	r0, r2, r1
 8008724:	42a0      	cmp	r0, r4
 8008726:	d10b      	bne.n	8008740 <_free_r+0x6c>
 8008728:	6820      	ldr	r0, [r4, #0]
 800872a:	4401      	add	r1, r0
 800872c:	1850      	adds	r0, r2, r1
 800872e:	4283      	cmp	r3, r0
 8008730:	6011      	str	r1, [r2, #0]
 8008732:	d1e0      	bne.n	80086f6 <_free_r+0x22>
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	6053      	str	r3, [r2, #4]
 800873a:	4408      	add	r0, r1
 800873c:	6010      	str	r0, [r2, #0]
 800873e:	e7da      	b.n	80086f6 <_free_r+0x22>
 8008740:	d902      	bls.n	8008748 <_free_r+0x74>
 8008742:	230c      	movs	r3, #12
 8008744:	602b      	str	r3, [r5, #0]
 8008746:	e7d6      	b.n	80086f6 <_free_r+0x22>
 8008748:	6820      	ldr	r0, [r4, #0]
 800874a:	1821      	adds	r1, r4, r0
 800874c:	428b      	cmp	r3, r1
 800874e:	bf04      	itt	eq
 8008750:	6819      	ldreq	r1, [r3, #0]
 8008752:	685b      	ldreq	r3, [r3, #4]
 8008754:	6063      	str	r3, [r4, #4]
 8008756:	bf04      	itt	eq
 8008758:	1809      	addeq	r1, r1, r0
 800875a:	6021      	streq	r1, [r4, #0]
 800875c:	6054      	str	r4, [r2, #4]
 800875e:	e7ca      	b.n	80086f6 <_free_r+0x22>
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	bf00      	nop
 8008764:	20000d98 	.word	0x20000d98

08008768 <sbrk_aligned>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	4e0f      	ldr	r6, [pc, #60]	@ (80087a8 <sbrk_aligned+0x40>)
 800876c:	460c      	mov	r4, r1
 800876e:	6831      	ldr	r1, [r6, #0]
 8008770:	4605      	mov	r5, r0
 8008772:	b911      	cbnz	r1, 800877a <sbrk_aligned+0x12>
 8008774:	f000 fba4 	bl	8008ec0 <_sbrk_r>
 8008778:	6030      	str	r0, [r6, #0]
 800877a:	4621      	mov	r1, r4
 800877c:	4628      	mov	r0, r5
 800877e:	f000 fb9f 	bl	8008ec0 <_sbrk_r>
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	d103      	bne.n	800878e <sbrk_aligned+0x26>
 8008786:	f04f 34ff 	mov.w	r4, #4294967295
 800878a:	4620      	mov	r0, r4
 800878c:	bd70      	pop	{r4, r5, r6, pc}
 800878e:	1cc4      	adds	r4, r0, #3
 8008790:	f024 0403 	bic.w	r4, r4, #3
 8008794:	42a0      	cmp	r0, r4
 8008796:	d0f8      	beq.n	800878a <sbrk_aligned+0x22>
 8008798:	1a21      	subs	r1, r4, r0
 800879a:	4628      	mov	r0, r5
 800879c:	f000 fb90 	bl	8008ec0 <_sbrk_r>
 80087a0:	3001      	adds	r0, #1
 80087a2:	d1f2      	bne.n	800878a <sbrk_aligned+0x22>
 80087a4:	e7ef      	b.n	8008786 <sbrk_aligned+0x1e>
 80087a6:	bf00      	nop
 80087a8:	20000d94 	.word	0x20000d94

080087ac <_malloc_r>:
 80087ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b0:	1ccd      	adds	r5, r1, #3
 80087b2:	f025 0503 	bic.w	r5, r5, #3
 80087b6:	3508      	adds	r5, #8
 80087b8:	2d0c      	cmp	r5, #12
 80087ba:	bf38      	it	cc
 80087bc:	250c      	movcc	r5, #12
 80087be:	2d00      	cmp	r5, #0
 80087c0:	4606      	mov	r6, r0
 80087c2:	db01      	blt.n	80087c8 <_malloc_r+0x1c>
 80087c4:	42a9      	cmp	r1, r5
 80087c6:	d904      	bls.n	80087d2 <_malloc_r+0x26>
 80087c8:	230c      	movs	r3, #12
 80087ca:	6033      	str	r3, [r6, #0]
 80087cc:	2000      	movs	r0, #0
 80087ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088a8 <_malloc_r+0xfc>
 80087d6:	f000 f869 	bl	80088ac <__malloc_lock>
 80087da:	f8d8 3000 	ldr.w	r3, [r8]
 80087de:	461c      	mov	r4, r3
 80087e0:	bb44      	cbnz	r4, 8008834 <_malloc_r+0x88>
 80087e2:	4629      	mov	r1, r5
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7ff ffbf 	bl	8008768 <sbrk_aligned>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	4604      	mov	r4, r0
 80087ee:	d158      	bne.n	80088a2 <_malloc_r+0xf6>
 80087f0:	f8d8 4000 	ldr.w	r4, [r8]
 80087f4:	4627      	mov	r7, r4
 80087f6:	2f00      	cmp	r7, #0
 80087f8:	d143      	bne.n	8008882 <_malloc_r+0xd6>
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	d04b      	beq.n	8008896 <_malloc_r+0xea>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	4639      	mov	r1, r7
 8008802:	4630      	mov	r0, r6
 8008804:	eb04 0903 	add.w	r9, r4, r3
 8008808:	f000 fb5a 	bl	8008ec0 <_sbrk_r>
 800880c:	4581      	cmp	r9, r0
 800880e:	d142      	bne.n	8008896 <_malloc_r+0xea>
 8008810:	6821      	ldr	r1, [r4, #0]
 8008812:	1a6d      	subs	r5, r5, r1
 8008814:	4629      	mov	r1, r5
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ffa6 	bl	8008768 <sbrk_aligned>
 800881c:	3001      	adds	r0, #1
 800881e:	d03a      	beq.n	8008896 <_malloc_r+0xea>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	442b      	add	r3, r5
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	f8d8 3000 	ldr.w	r3, [r8]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	bb62      	cbnz	r2, 8008888 <_malloc_r+0xdc>
 800882e:	f8c8 7000 	str.w	r7, [r8]
 8008832:	e00f      	b.n	8008854 <_malloc_r+0xa8>
 8008834:	6822      	ldr	r2, [r4, #0]
 8008836:	1b52      	subs	r2, r2, r5
 8008838:	d420      	bmi.n	800887c <_malloc_r+0xd0>
 800883a:	2a0b      	cmp	r2, #11
 800883c:	d917      	bls.n	800886e <_malloc_r+0xc2>
 800883e:	1961      	adds	r1, r4, r5
 8008840:	42a3      	cmp	r3, r4
 8008842:	6025      	str	r5, [r4, #0]
 8008844:	bf18      	it	ne
 8008846:	6059      	strne	r1, [r3, #4]
 8008848:	6863      	ldr	r3, [r4, #4]
 800884a:	bf08      	it	eq
 800884c:	f8c8 1000 	streq.w	r1, [r8]
 8008850:	5162      	str	r2, [r4, r5]
 8008852:	604b      	str	r3, [r1, #4]
 8008854:	4630      	mov	r0, r6
 8008856:	f000 f82f 	bl	80088b8 <__malloc_unlock>
 800885a:	f104 000b 	add.w	r0, r4, #11
 800885e:	1d23      	adds	r3, r4, #4
 8008860:	f020 0007 	bic.w	r0, r0, #7
 8008864:	1ac2      	subs	r2, r0, r3
 8008866:	bf1c      	itt	ne
 8008868:	1a1b      	subne	r3, r3, r0
 800886a:	50a3      	strne	r3, [r4, r2]
 800886c:	e7af      	b.n	80087ce <_malloc_r+0x22>
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	42a3      	cmp	r3, r4
 8008872:	bf0c      	ite	eq
 8008874:	f8c8 2000 	streq.w	r2, [r8]
 8008878:	605a      	strne	r2, [r3, #4]
 800887a:	e7eb      	b.n	8008854 <_malloc_r+0xa8>
 800887c:	4623      	mov	r3, r4
 800887e:	6864      	ldr	r4, [r4, #4]
 8008880:	e7ae      	b.n	80087e0 <_malloc_r+0x34>
 8008882:	463c      	mov	r4, r7
 8008884:	687f      	ldr	r7, [r7, #4]
 8008886:	e7b6      	b.n	80087f6 <_malloc_r+0x4a>
 8008888:	461a      	mov	r2, r3
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	42a3      	cmp	r3, r4
 800888e:	d1fb      	bne.n	8008888 <_malloc_r+0xdc>
 8008890:	2300      	movs	r3, #0
 8008892:	6053      	str	r3, [r2, #4]
 8008894:	e7de      	b.n	8008854 <_malloc_r+0xa8>
 8008896:	230c      	movs	r3, #12
 8008898:	6033      	str	r3, [r6, #0]
 800889a:	4630      	mov	r0, r6
 800889c:	f000 f80c 	bl	80088b8 <__malloc_unlock>
 80088a0:	e794      	b.n	80087cc <_malloc_r+0x20>
 80088a2:	6005      	str	r5, [r0, #0]
 80088a4:	e7d6      	b.n	8008854 <_malloc_r+0xa8>
 80088a6:	bf00      	nop
 80088a8:	20000d98 	.word	0x20000d98

080088ac <__malloc_lock>:
 80088ac:	4801      	ldr	r0, [pc, #4]	@ (80088b4 <__malloc_lock+0x8>)
 80088ae:	f7ff bf0f 	b.w	80086d0 <__retarget_lock_acquire_recursive>
 80088b2:	bf00      	nop
 80088b4:	20000d90 	.word	0x20000d90

080088b8 <__malloc_unlock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	@ (80088c0 <__malloc_unlock+0x8>)
 80088ba:	f7ff bf0a 	b.w	80086d2 <__retarget_lock_release_recursive>
 80088be:	bf00      	nop
 80088c0:	20000d90 	.word	0x20000d90

080088c4 <__ssputs_r>:
 80088c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c8:	688e      	ldr	r6, [r1, #8]
 80088ca:	461f      	mov	r7, r3
 80088cc:	42be      	cmp	r6, r7
 80088ce:	680b      	ldr	r3, [r1, #0]
 80088d0:	4682      	mov	sl, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	4690      	mov	r8, r2
 80088d6:	d82d      	bhi.n	8008934 <__ssputs_r+0x70>
 80088d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088e0:	d026      	beq.n	8008930 <__ssputs_r+0x6c>
 80088e2:	6965      	ldr	r5, [r4, #20]
 80088e4:	6909      	ldr	r1, [r1, #16]
 80088e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088ea:	eba3 0901 	sub.w	r9, r3, r1
 80088ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088f2:	1c7b      	adds	r3, r7, #1
 80088f4:	444b      	add	r3, r9
 80088f6:	106d      	asrs	r5, r5, #1
 80088f8:	429d      	cmp	r5, r3
 80088fa:	bf38      	it	cc
 80088fc:	461d      	movcc	r5, r3
 80088fe:	0553      	lsls	r3, r2, #21
 8008900:	d527      	bpl.n	8008952 <__ssputs_r+0x8e>
 8008902:	4629      	mov	r1, r5
 8008904:	f7ff ff52 	bl	80087ac <_malloc_r>
 8008908:	4606      	mov	r6, r0
 800890a:	b360      	cbz	r0, 8008966 <__ssputs_r+0xa2>
 800890c:	6921      	ldr	r1, [r4, #16]
 800890e:	464a      	mov	r2, r9
 8008910:	f000 fae6 	bl	8008ee0 <memcpy>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800891a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	6126      	str	r6, [r4, #16]
 8008922:	6165      	str	r5, [r4, #20]
 8008924:	444e      	add	r6, r9
 8008926:	eba5 0509 	sub.w	r5, r5, r9
 800892a:	6026      	str	r6, [r4, #0]
 800892c:	60a5      	str	r5, [r4, #8]
 800892e:	463e      	mov	r6, r7
 8008930:	42be      	cmp	r6, r7
 8008932:	d900      	bls.n	8008936 <__ssputs_r+0x72>
 8008934:	463e      	mov	r6, r7
 8008936:	6820      	ldr	r0, [r4, #0]
 8008938:	4632      	mov	r2, r6
 800893a:	4641      	mov	r1, r8
 800893c:	f000 faa6 	bl	8008e8c <memmove>
 8008940:	68a3      	ldr	r3, [r4, #8]
 8008942:	1b9b      	subs	r3, r3, r6
 8008944:	60a3      	str	r3, [r4, #8]
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	4433      	add	r3, r6
 800894a:	6023      	str	r3, [r4, #0]
 800894c:	2000      	movs	r0, #0
 800894e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008952:	462a      	mov	r2, r5
 8008954:	f000 fad2 	bl	8008efc <_realloc_r>
 8008958:	4606      	mov	r6, r0
 800895a:	2800      	cmp	r0, #0
 800895c:	d1e0      	bne.n	8008920 <__ssputs_r+0x5c>
 800895e:	6921      	ldr	r1, [r4, #16]
 8008960:	4650      	mov	r0, sl
 8008962:	f7ff feb7 	bl	80086d4 <_free_r>
 8008966:	230c      	movs	r3, #12
 8008968:	f8ca 3000 	str.w	r3, [sl]
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	e7e9      	b.n	800894e <__ssputs_r+0x8a>
	...

0800897c <_svfiprintf_r>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	4698      	mov	r8, r3
 8008982:	898b      	ldrh	r3, [r1, #12]
 8008984:	061b      	lsls	r3, r3, #24
 8008986:	b09d      	sub	sp, #116	@ 0x74
 8008988:	4607      	mov	r7, r0
 800898a:	460d      	mov	r5, r1
 800898c:	4614      	mov	r4, r2
 800898e:	d510      	bpl.n	80089b2 <_svfiprintf_r+0x36>
 8008990:	690b      	ldr	r3, [r1, #16]
 8008992:	b973      	cbnz	r3, 80089b2 <_svfiprintf_r+0x36>
 8008994:	2140      	movs	r1, #64	@ 0x40
 8008996:	f7ff ff09 	bl	80087ac <_malloc_r>
 800899a:	6028      	str	r0, [r5, #0]
 800899c:	6128      	str	r0, [r5, #16]
 800899e:	b930      	cbnz	r0, 80089ae <_svfiprintf_r+0x32>
 80089a0:	230c      	movs	r3, #12
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	b01d      	add	sp, #116	@ 0x74
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ae:	2340      	movs	r3, #64	@ 0x40
 80089b0:	616b      	str	r3, [r5, #20]
 80089b2:	2300      	movs	r3, #0
 80089b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089b6:	2320      	movs	r3, #32
 80089b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80089c0:	2330      	movs	r3, #48	@ 0x30
 80089c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b60 <_svfiprintf_r+0x1e4>
 80089c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089ca:	f04f 0901 	mov.w	r9, #1
 80089ce:	4623      	mov	r3, r4
 80089d0:	469a      	mov	sl, r3
 80089d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089d6:	b10a      	cbz	r2, 80089dc <_svfiprintf_r+0x60>
 80089d8:	2a25      	cmp	r2, #37	@ 0x25
 80089da:	d1f9      	bne.n	80089d0 <_svfiprintf_r+0x54>
 80089dc:	ebba 0b04 	subs.w	fp, sl, r4
 80089e0:	d00b      	beq.n	80089fa <_svfiprintf_r+0x7e>
 80089e2:	465b      	mov	r3, fp
 80089e4:	4622      	mov	r2, r4
 80089e6:	4629      	mov	r1, r5
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7ff ff6b 	bl	80088c4 <__ssputs_r>
 80089ee:	3001      	adds	r0, #1
 80089f0:	f000 80a7 	beq.w	8008b42 <_svfiprintf_r+0x1c6>
 80089f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089f6:	445a      	add	r2, fp
 80089f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80089fa:	f89a 3000 	ldrb.w	r3, [sl]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 809f 	beq.w	8008b42 <_svfiprintf_r+0x1c6>
 8008a04:	2300      	movs	r3, #0
 8008a06:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a0e:	f10a 0a01 	add.w	sl, sl, #1
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	9307      	str	r3, [sp, #28]
 8008a16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a1c:	4654      	mov	r4, sl
 8008a1e:	2205      	movs	r2, #5
 8008a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a24:	484e      	ldr	r0, [pc, #312]	@ (8008b60 <_svfiprintf_r+0x1e4>)
 8008a26:	f7f7 fbe3 	bl	80001f0 <memchr>
 8008a2a:	9a04      	ldr	r2, [sp, #16]
 8008a2c:	b9d8      	cbnz	r0, 8008a66 <_svfiprintf_r+0xea>
 8008a2e:	06d0      	lsls	r0, r2, #27
 8008a30:	bf44      	itt	mi
 8008a32:	2320      	movmi	r3, #32
 8008a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a38:	0711      	lsls	r1, r2, #28
 8008a3a:	bf44      	itt	mi
 8008a3c:	232b      	movmi	r3, #43	@ 0x2b
 8008a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a42:	f89a 3000 	ldrb.w	r3, [sl]
 8008a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a48:	d015      	beq.n	8008a76 <_svfiprintf_r+0xfa>
 8008a4a:	9a07      	ldr	r2, [sp, #28]
 8008a4c:	4654      	mov	r4, sl
 8008a4e:	2000      	movs	r0, #0
 8008a50:	f04f 0c0a 	mov.w	ip, #10
 8008a54:	4621      	mov	r1, r4
 8008a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a5a:	3b30      	subs	r3, #48	@ 0x30
 8008a5c:	2b09      	cmp	r3, #9
 8008a5e:	d94b      	bls.n	8008af8 <_svfiprintf_r+0x17c>
 8008a60:	b1b0      	cbz	r0, 8008a90 <_svfiprintf_r+0x114>
 8008a62:	9207      	str	r2, [sp, #28]
 8008a64:	e014      	b.n	8008a90 <_svfiprintf_r+0x114>
 8008a66:	eba0 0308 	sub.w	r3, r0, r8
 8008a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	46a2      	mov	sl, r4
 8008a74:	e7d2      	b.n	8008a1c <_svfiprintf_r+0xa0>
 8008a76:	9b03      	ldr	r3, [sp, #12]
 8008a78:	1d19      	adds	r1, r3, #4
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	9103      	str	r1, [sp, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bfbb      	ittet	lt
 8008a82:	425b      	neglt	r3, r3
 8008a84:	f042 0202 	orrlt.w	r2, r2, #2
 8008a88:	9307      	strge	r3, [sp, #28]
 8008a8a:	9307      	strlt	r3, [sp, #28]
 8008a8c:	bfb8      	it	lt
 8008a8e:	9204      	strlt	r2, [sp, #16]
 8008a90:	7823      	ldrb	r3, [r4, #0]
 8008a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a94:	d10a      	bne.n	8008aac <_svfiprintf_r+0x130>
 8008a96:	7863      	ldrb	r3, [r4, #1]
 8008a98:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a9a:	d132      	bne.n	8008b02 <_svfiprintf_r+0x186>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	1d1a      	adds	r2, r3, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	9203      	str	r2, [sp, #12]
 8008aa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008aa8:	3402      	adds	r4, #2
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b70 <_svfiprintf_r+0x1f4>
 8008ab0:	7821      	ldrb	r1, [r4, #0]
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	f7f7 fb9b 	bl	80001f0 <memchr>
 8008aba:	b138      	cbz	r0, 8008acc <_svfiprintf_r+0x150>
 8008abc:	9b04      	ldr	r3, [sp, #16]
 8008abe:	eba0 000a 	sub.w	r0, r0, sl
 8008ac2:	2240      	movs	r2, #64	@ 0x40
 8008ac4:	4082      	lsls	r2, r0
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	3401      	adds	r4, #1
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad0:	4824      	ldr	r0, [pc, #144]	@ (8008b64 <_svfiprintf_r+0x1e8>)
 8008ad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ad6:	2206      	movs	r2, #6
 8008ad8:	f7f7 fb8a 	bl	80001f0 <memchr>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d036      	beq.n	8008b4e <_svfiprintf_r+0x1d2>
 8008ae0:	4b21      	ldr	r3, [pc, #132]	@ (8008b68 <_svfiprintf_r+0x1ec>)
 8008ae2:	bb1b      	cbnz	r3, 8008b2c <_svfiprintf_r+0x1b0>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	3307      	adds	r3, #7
 8008ae8:	f023 0307 	bic.w	r3, r3, #7
 8008aec:	3308      	adds	r3, #8
 8008aee:	9303      	str	r3, [sp, #12]
 8008af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af2:	4433      	add	r3, r6
 8008af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008af6:	e76a      	b.n	80089ce <_svfiprintf_r+0x52>
 8008af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008afc:	460c      	mov	r4, r1
 8008afe:	2001      	movs	r0, #1
 8008b00:	e7a8      	b.n	8008a54 <_svfiprintf_r+0xd8>
 8008b02:	2300      	movs	r3, #0
 8008b04:	3401      	adds	r4, #1
 8008b06:	9305      	str	r3, [sp, #20]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	f04f 0c0a 	mov.w	ip, #10
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b14:	3a30      	subs	r2, #48	@ 0x30
 8008b16:	2a09      	cmp	r2, #9
 8008b18:	d903      	bls.n	8008b22 <_svfiprintf_r+0x1a6>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0c6      	beq.n	8008aac <_svfiprintf_r+0x130>
 8008b1e:	9105      	str	r1, [sp, #20]
 8008b20:	e7c4      	b.n	8008aac <_svfiprintf_r+0x130>
 8008b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b26:	4604      	mov	r4, r0
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e7f0      	b.n	8008b0e <_svfiprintf_r+0x192>
 8008b2c:	ab03      	add	r3, sp, #12
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	462a      	mov	r2, r5
 8008b32:	4b0e      	ldr	r3, [pc, #56]	@ (8008b6c <_svfiprintf_r+0x1f0>)
 8008b34:	a904      	add	r1, sp, #16
 8008b36:	4638      	mov	r0, r7
 8008b38:	f3af 8000 	nop.w
 8008b3c:	1c42      	adds	r2, r0, #1
 8008b3e:	4606      	mov	r6, r0
 8008b40:	d1d6      	bne.n	8008af0 <_svfiprintf_r+0x174>
 8008b42:	89ab      	ldrh	r3, [r5, #12]
 8008b44:	065b      	lsls	r3, r3, #25
 8008b46:	f53f af2d 	bmi.w	80089a4 <_svfiprintf_r+0x28>
 8008b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b4c:	e72c      	b.n	80089a8 <_svfiprintf_r+0x2c>
 8008b4e:	ab03      	add	r3, sp, #12
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	462a      	mov	r2, r5
 8008b54:	4b05      	ldr	r3, [pc, #20]	@ (8008b6c <_svfiprintf_r+0x1f0>)
 8008b56:	a904      	add	r1, sp, #16
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f000 f879 	bl	8008c50 <_printf_i>
 8008b5e:	e7ed      	b.n	8008b3c <_svfiprintf_r+0x1c0>
 8008b60:	0800904c 	.word	0x0800904c
 8008b64:	08009056 	.word	0x08009056
 8008b68:	00000000 	.word	0x00000000
 8008b6c:	080088c5 	.word	0x080088c5
 8008b70:	08009052 	.word	0x08009052

08008b74 <_printf_common>:
 8008b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	4616      	mov	r6, r2
 8008b7a:	4698      	mov	r8, r3
 8008b7c:	688a      	ldr	r2, [r1, #8]
 8008b7e:	690b      	ldr	r3, [r1, #16]
 8008b80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	bfb8      	it	lt
 8008b88:	4613      	movlt	r3, r2
 8008b8a:	6033      	str	r3, [r6, #0]
 8008b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b90:	4607      	mov	r7, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	b10a      	cbz	r2, 8008b9a <_printf_common+0x26>
 8008b96:	3301      	adds	r3, #1
 8008b98:	6033      	str	r3, [r6, #0]
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	0699      	lsls	r1, r3, #26
 8008b9e:	bf42      	ittt	mi
 8008ba0:	6833      	ldrmi	r3, [r6, #0]
 8008ba2:	3302      	addmi	r3, #2
 8008ba4:	6033      	strmi	r3, [r6, #0]
 8008ba6:	6825      	ldr	r5, [r4, #0]
 8008ba8:	f015 0506 	ands.w	r5, r5, #6
 8008bac:	d106      	bne.n	8008bbc <_printf_common+0x48>
 8008bae:	f104 0a19 	add.w	sl, r4, #25
 8008bb2:	68e3      	ldr	r3, [r4, #12]
 8008bb4:	6832      	ldr	r2, [r6, #0]
 8008bb6:	1a9b      	subs	r3, r3, r2
 8008bb8:	42ab      	cmp	r3, r5
 8008bba:	dc26      	bgt.n	8008c0a <_printf_common+0x96>
 8008bbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bc0:	6822      	ldr	r2, [r4, #0]
 8008bc2:	3b00      	subs	r3, #0
 8008bc4:	bf18      	it	ne
 8008bc6:	2301      	movne	r3, #1
 8008bc8:	0692      	lsls	r2, r2, #26
 8008bca:	d42b      	bmi.n	8008c24 <_printf_common+0xb0>
 8008bcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bd0:	4641      	mov	r1, r8
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	47c8      	blx	r9
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d01e      	beq.n	8008c18 <_printf_common+0xa4>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	6922      	ldr	r2, [r4, #16]
 8008bde:	f003 0306 	and.w	r3, r3, #6
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	bf02      	ittt	eq
 8008be6:	68e5      	ldreq	r5, [r4, #12]
 8008be8:	6833      	ldreq	r3, [r6, #0]
 8008bea:	1aed      	subeq	r5, r5, r3
 8008bec:	68a3      	ldr	r3, [r4, #8]
 8008bee:	bf0c      	ite	eq
 8008bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bf4:	2500      	movne	r5, #0
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	bfc4      	itt	gt
 8008bfa:	1a9b      	subgt	r3, r3, r2
 8008bfc:	18ed      	addgt	r5, r5, r3
 8008bfe:	2600      	movs	r6, #0
 8008c00:	341a      	adds	r4, #26
 8008c02:	42b5      	cmp	r5, r6
 8008c04:	d11a      	bne.n	8008c3c <_printf_common+0xc8>
 8008c06:	2000      	movs	r0, #0
 8008c08:	e008      	b.n	8008c1c <_printf_common+0xa8>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4652      	mov	r2, sl
 8008c0e:	4641      	mov	r1, r8
 8008c10:	4638      	mov	r0, r7
 8008c12:	47c8      	blx	r9
 8008c14:	3001      	adds	r0, #1
 8008c16:	d103      	bne.n	8008c20 <_printf_common+0xac>
 8008c18:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c20:	3501      	adds	r5, #1
 8008c22:	e7c6      	b.n	8008bb2 <_printf_common+0x3e>
 8008c24:	18e1      	adds	r1, r4, r3
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	2030      	movs	r0, #48	@ 0x30
 8008c2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c2e:	4422      	add	r2, r4
 8008c30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c38:	3302      	adds	r3, #2
 8008c3a:	e7c7      	b.n	8008bcc <_printf_common+0x58>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4622      	mov	r2, r4
 8008c40:	4641      	mov	r1, r8
 8008c42:	4638      	mov	r0, r7
 8008c44:	47c8      	blx	r9
 8008c46:	3001      	adds	r0, #1
 8008c48:	d0e6      	beq.n	8008c18 <_printf_common+0xa4>
 8008c4a:	3601      	adds	r6, #1
 8008c4c:	e7d9      	b.n	8008c02 <_printf_common+0x8e>
	...

08008c50 <_printf_i>:
 8008c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c54:	7e0f      	ldrb	r7, [r1, #24]
 8008c56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c58:	2f78      	cmp	r7, #120	@ 0x78
 8008c5a:	4691      	mov	r9, r2
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	469a      	mov	sl, r3
 8008c62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c66:	d807      	bhi.n	8008c78 <_printf_i+0x28>
 8008c68:	2f62      	cmp	r7, #98	@ 0x62
 8008c6a:	d80a      	bhi.n	8008c82 <_printf_i+0x32>
 8008c6c:	2f00      	cmp	r7, #0
 8008c6e:	f000 80d1 	beq.w	8008e14 <_printf_i+0x1c4>
 8008c72:	2f58      	cmp	r7, #88	@ 0x58
 8008c74:	f000 80b8 	beq.w	8008de8 <_printf_i+0x198>
 8008c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c80:	e03a      	b.n	8008cf8 <_printf_i+0xa8>
 8008c82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c86:	2b15      	cmp	r3, #21
 8008c88:	d8f6      	bhi.n	8008c78 <_printf_i+0x28>
 8008c8a:	a101      	add	r1, pc, #4	@ (adr r1, 8008c90 <_printf_i+0x40>)
 8008c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c90:	08008ce9 	.word	0x08008ce9
 8008c94:	08008cfd 	.word	0x08008cfd
 8008c98:	08008c79 	.word	0x08008c79
 8008c9c:	08008c79 	.word	0x08008c79
 8008ca0:	08008c79 	.word	0x08008c79
 8008ca4:	08008c79 	.word	0x08008c79
 8008ca8:	08008cfd 	.word	0x08008cfd
 8008cac:	08008c79 	.word	0x08008c79
 8008cb0:	08008c79 	.word	0x08008c79
 8008cb4:	08008c79 	.word	0x08008c79
 8008cb8:	08008c79 	.word	0x08008c79
 8008cbc:	08008dfb 	.word	0x08008dfb
 8008cc0:	08008d27 	.word	0x08008d27
 8008cc4:	08008db5 	.word	0x08008db5
 8008cc8:	08008c79 	.word	0x08008c79
 8008ccc:	08008c79 	.word	0x08008c79
 8008cd0:	08008e1d 	.word	0x08008e1d
 8008cd4:	08008c79 	.word	0x08008c79
 8008cd8:	08008d27 	.word	0x08008d27
 8008cdc:	08008c79 	.word	0x08008c79
 8008ce0:	08008c79 	.word	0x08008c79
 8008ce4:	08008dbd 	.word	0x08008dbd
 8008ce8:	6833      	ldr	r3, [r6, #0]
 8008cea:	1d1a      	adds	r2, r3, #4
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6032      	str	r2, [r6, #0]
 8008cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e09c      	b.n	8008e36 <_printf_i+0x1e6>
 8008cfc:	6833      	ldr	r3, [r6, #0]
 8008cfe:	6820      	ldr	r0, [r4, #0]
 8008d00:	1d19      	adds	r1, r3, #4
 8008d02:	6031      	str	r1, [r6, #0]
 8008d04:	0606      	lsls	r6, r0, #24
 8008d06:	d501      	bpl.n	8008d0c <_printf_i+0xbc>
 8008d08:	681d      	ldr	r5, [r3, #0]
 8008d0a:	e003      	b.n	8008d14 <_printf_i+0xc4>
 8008d0c:	0645      	lsls	r5, r0, #25
 8008d0e:	d5fb      	bpl.n	8008d08 <_printf_i+0xb8>
 8008d10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	da03      	bge.n	8008d20 <_printf_i+0xd0>
 8008d18:	232d      	movs	r3, #45	@ 0x2d
 8008d1a:	426d      	negs	r5, r5
 8008d1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d20:	4858      	ldr	r0, [pc, #352]	@ (8008e84 <_printf_i+0x234>)
 8008d22:	230a      	movs	r3, #10
 8008d24:	e011      	b.n	8008d4a <_printf_i+0xfa>
 8008d26:	6821      	ldr	r1, [r4, #0]
 8008d28:	6833      	ldr	r3, [r6, #0]
 8008d2a:	0608      	lsls	r0, r1, #24
 8008d2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d30:	d402      	bmi.n	8008d38 <_printf_i+0xe8>
 8008d32:	0649      	lsls	r1, r1, #25
 8008d34:	bf48      	it	mi
 8008d36:	b2ad      	uxthmi	r5, r5
 8008d38:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d3a:	4852      	ldr	r0, [pc, #328]	@ (8008e84 <_printf_i+0x234>)
 8008d3c:	6033      	str	r3, [r6, #0]
 8008d3e:	bf14      	ite	ne
 8008d40:	230a      	movne	r3, #10
 8008d42:	2308      	moveq	r3, #8
 8008d44:	2100      	movs	r1, #0
 8008d46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d4a:	6866      	ldr	r6, [r4, #4]
 8008d4c:	60a6      	str	r6, [r4, #8]
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	db05      	blt.n	8008d5e <_printf_i+0x10e>
 8008d52:	6821      	ldr	r1, [r4, #0]
 8008d54:	432e      	orrs	r6, r5
 8008d56:	f021 0104 	bic.w	r1, r1, #4
 8008d5a:	6021      	str	r1, [r4, #0]
 8008d5c:	d04b      	beq.n	8008df6 <_printf_i+0x1a6>
 8008d5e:	4616      	mov	r6, r2
 8008d60:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d64:	fb03 5711 	mls	r7, r3, r1, r5
 8008d68:	5dc7      	ldrb	r7, [r0, r7]
 8008d6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d6e:	462f      	mov	r7, r5
 8008d70:	42bb      	cmp	r3, r7
 8008d72:	460d      	mov	r5, r1
 8008d74:	d9f4      	bls.n	8008d60 <_printf_i+0x110>
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d10b      	bne.n	8008d92 <_printf_i+0x142>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	07df      	lsls	r7, r3, #31
 8008d7e:	d508      	bpl.n	8008d92 <_printf_i+0x142>
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	6861      	ldr	r1, [r4, #4]
 8008d84:	4299      	cmp	r1, r3
 8008d86:	bfde      	ittt	le
 8008d88:	2330      	movle	r3, #48	@ 0x30
 8008d8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d92:	1b92      	subs	r2, r2, r6
 8008d94:	6122      	str	r2, [r4, #16]
 8008d96:	f8cd a000 	str.w	sl, [sp]
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	aa03      	add	r2, sp, #12
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4640      	mov	r0, r8
 8008da2:	f7ff fee7 	bl	8008b74 <_printf_common>
 8008da6:	3001      	adds	r0, #1
 8008da8:	d14a      	bne.n	8008e40 <_printf_i+0x1f0>
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	b004      	add	sp, #16
 8008db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	f043 0320 	orr.w	r3, r3, #32
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	4832      	ldr	r0, [pc, #200]	@ (8008e88 <_printf_i+0x238>)
 8008dbe:	2778      	movs	r7, #120	@ 0x78
 8008dc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	6831      	ldr	r1, [r6, #0]
 8008dc8:	061f      	lsls	r7, r3, #24
 8008dca:	f851 5b04 	ldr.w	r5, [r1], #4
 8008dce:	d402      	bmi.n	8008dd6 <_printf_i+0x186>
 8008dd0:	065f      	lsls	r7, r3, #25
 8008dd2:	bf48      	it	mi
 8008dd4:	b2ad      	uxthmi	r5, r5
 8008dd6:	6031      	str	r1, [r6, #0]
 8008dd8:	07d9      	lsls	r1, r3, #31
 8008dda:	bf44      	itt	mi
 8008ddc:	f043 0320 	orrmi.w	r3, r3, #32
 8008de0:	6023      	strmi	r3, [r4, #0]
 8008de2:	b11d      	cbz	r5, 8008dec <_printf_i+0x19c>
 8008de4:	2310      	movs	r3, #16
 8008de6:	e7ad      	b.n	8008d44 <_printf_i+0xf4>
 8008de8:	4826      	ldr	r0, [pc, #152]	@ (8008e84 <_printf_i+0x234>)
 8008dea:	e7e9      	b.n	8008dc0 <_printf_i+0x170>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	f023 0320 	bic.w	r3, r3, #32
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	e7f6      	b.n	8008de4 <_printf_i+0x194>
 8008df6:	4616      	mov	r6, r2
 8008df8:	e7bd      	b.n	8008d76 <_printf_i+0x126>
 8008dfa:	6833      	ldr	r3, [r6, #0]
 8008dfc:	6825      	ldr	r5, [r4, #0]
 8008dfe:	6961      	ldr	r1, [r4, #20]
 8008e00:	1d18      	adds	r0, r3, #4
 8008e02:	6030      	str	r0, [r6, #0]
 8008e04:	062e      	lsls	r6, r5, #24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	d501      	bpl.n	8008e0e <_printf_i+0x1be>
 8008e0a:	6019      	str	r1, [r3, #0]
 8008e0c:	e002      	b.n	8008e14 <_printf_i+0x1c4>
 8008e0e:	0668      	lsls	r0, r5, #25
 8008e10:	d5fb      	bpl.n	8008e0a <_printf_i+0x1ba>
 8008e12:	8019      	strh	r1, [r3, #0]
 8008e14:	2300      	movs	r3, #0
 8008e16:	6123      	str	r3, [r4, #16]
 8008e18:	4616      	mov	r6, r2
 8008e1a:	e7bc      	b.n	8008d96 <_printf_i+0x146>
 8008e1c:	6833      	ldr	r3, [r6, #0]
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	6032      	str	r2, [r6, #0]
 8008e22:	681e      	ldr	r6, [r3, #0]
 8008e24:	6862      	ldr	r2, [r4, #4]
 8008e26:	2100      	movs	r1, #0
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7f7 f9e1 	bl	80001f0 <memchr>
 8008e2e:	b108      	cbz	r0, 8008e34 <_printf_i+0x1e4>
 8008e30:	1b80      	subs	r0, r0, r6
 8008e32:	6060      	str	r0, [r4, #4]
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	6123      	str	r3, [r4, #16]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e3e:	e7aa      	b.n	8008d96 <_printf_i+0x146>
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	4632      	mov	r2, r6
 8008e44:	4649      	mov	r1, r9
 8008e46:	4640      	mov	r0, r8
 8008e48:	47d0      	blx	sl
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d0ad      	beq.n	8008daa <_printf_i+0x15a>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	079b      	lsls	r3, r3, #30
 8008e52:	d413      	bmi.n	8008e7c <_printf_i+0x22c>
 8008e54:	68e0      	ldr	r0, [r4, #12]
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	4298      	cmp	r0, r3
 8008e5a:	bfb8      	it	lt
 8008e5c:	4618      	movlt	r0, r3
 8008e5e:	e7a6      	b.n	8008dae <_printf_i+0x15e>
 8008e60:	2301      	movs	r3, #1
 8008e62:	4632      	mov	r2, r6
 8008e64:	4649      	mov	r1, r9
 8008e66:	4640      	mov	r0, r8
 8008e68:	47d0      	blx	sl
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d09d      	beq.n	8008daa <_printf_i+0x15a>
 8008e6e:	3501      	adds	r5, #1
 8008e70:	68e3      	ldr	r3, [r4, #12]
 8008e72:	9903      	ldr	r1, [sp, #12]
 8008e74:	1a5b      	subs	r3, r3, r1
 8008e76:	42ab      	cmp	r3, r5
 8008e78:	dcf2      	bgt.n	8008e60 <_printf_i+0x210>
 8008e7a:	e7eb      	b.n	8008e54 <_printf_i+0x204>
 8008e7c:	2500      	movs	r5, #0
 8008e7e:	f104 0619 	add.w	r6, r4, #25
 8008e82:	e7f5      	b.n	8008e70 <_printf_i+0x220>
 8008e84:	0800905d 	.word	0x0800905d
 8008e88:	0800906e 	.word	0x0800906e

08008e8c <memmove>:
 8008e8c:	4288      	cmp	r0, r1
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	eb01 0402 	add.w	r4, r1, r2
 8008e94:	d902      	bls.n	8008e9c <memmove+0x10>
 8008e96:	4284      	cmp	r4, r0
 8008e98:	4623      	mov	r3, r4
 8008e9a:	d807      	bhi.n	8008eac <memmove+0x20>
 8008e9c:	1e43      	subs	r3, r0, #1
 8008e9e:	42a1      	cmp	r1, r4
 8008ea0:	d008      	beq.n	8008eb4 <memmove+0x28>
 8008ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eaa:	e7f8      	b.n	8008e9e <memmove+0x12>
 8008eac:	4402      	add	r2, r0
 8008eae:	4601      	mov	r1, r0
 8008eb0:	428a      	cmp	r2, r1
 8008eb2:	d100      	bne.n	8008eb6 <memmove+0x2a>
 8008eb4:	bd10      	pop	{r4, pc}
 8008eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ebe:	e7f7      	b.n	8008eb0 <memmove+0x24>

08008ec0 <_sbrk_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	@ (8008edc <_sbrk_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7f7 ff7a 	bl	8000dc4 <_sbrk>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_sbrk_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_sbrk_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	20000d8c 	.word	0x20000d8c

08008ee0 <memcpy>:
 8008ee0:	440a      	add	r2, r1
 8008ee2:	4291      	cmp	r1, r2
 8008ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ee8:	d100      	bne.n	8008eec <memcpy+0xc>
 8008eea:	4770      	bx	lr
 8008eec:	b510      	push	{r4, lr}
 8008eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	d1f9      	bne.n	8008eee <memcpy+0xe>
 8008efa:	bd10      	pop	{r4, pc}

08008efc <_realloc_r>:
 8008efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f00:	4607      	mov	r7, r0
 8008f02:	4614      	mov	r4, r2
 8008f04:	460d      	mov	r5, r1
 8008f06:	b921      	cbnz	r1, 8008f12 <_realloc_r+0x16>
 8008f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	f7ff bc4d 	b.w	80087ac <_malloc_r>
 8008f12:	b92a      	cbnz	r2, 8008f20 <_realloc_r+0x24>
 8008f14:	f7ff fbde 	bl	80086d4 <_free_r>
 8008f18:	4625      	mov	r5, r4
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f20:	f000 f81a 	bl	8008f58 <_malloc_usable_size_r>
 8008f24:	4284      	cmp	r4, r0
 8008f26:	4606      	mov	r6, r0
 8008f28:	d802      	bhi.n	8008f30 <_realloc_r+0x34>
 8008f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f2e:	d8f4      	bhi.n	8008f1a <_realloc_r+0x1e>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7ff fc3a 	bl	80087ac <_malloc_r>
 8008f38:	4680      	mov	r8, r0
 8008f3a:	b908      	cbnz	r0, 8008f40 <_realloc_r+0x44>
 8008f3c:	4645      	mov	r5, r8
 8008f3e:	e7ec      	b.n	8008f1a <_realloc_r+0x1e>
 8008f40:	42b4      	cmp	r4, r6
 8008f42:	4622      	mov	r2, r4
 8008f44:	4629      	mov	r1, r5
 8008f46:	bf28      	it	cs
 8008f48:	4632      	movcs	r2, r6
 8008f4a:	f7ff ffc9 	bl	8008ee0 <memcpy>
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4638      	mov	r0, r7
 8008f52:	f7ff fbbf 	bl	80086d4 <_free_r>
 8008f56:	e7f1      	b.n	8008f3c <_realloc_r+0x40>

08008f58 <_malloc_usable_size_r>:
 8008f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f5c:	1f18      	subs	r0, r3, #4
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bfbc      	itt	lt
 8008f62:	580b      	ldrlt	r3, [r1, r0]
 8008f64:	18c0      	addlt	r0, r0, r3
 8008f66:	4770      	bx	lr

08008f68 <_init>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	bf00      	nop
 8008f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6e:	bc08      	pop	{r3}
 8008f70:	469e      	mov	lr, r3
 8008f72:	4770      	bx	lr

08008f74 <_fini>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	bf00      	nop
 8008f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7a:	bc08      	pop	{r3}
 8008f7c:	469e      	mov	lr, r3
 8008f7e:	4770      	bx	lr
