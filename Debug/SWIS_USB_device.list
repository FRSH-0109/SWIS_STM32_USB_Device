
SWIS_USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008168  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008374  08008374  0000a104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008374  08008374  00009374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800837c  0800837c  0000a104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800837c  0800837c  0000937c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008380  08008380  00009380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08008384  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000afc  20000104  08008488  0000a104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  08008488  0000ac00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133fb  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000367c  00000000  00000000  0001d52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00020bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  00021c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019575  00000000  00000000  000228ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173c3  00000000  00000000  0003be61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c20d  00000000  00000000  00053224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df431  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000441c  00000000  00000000  000df474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e3890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080082e8 	.word	0x080082e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	080082e8 	.word	0x080082e8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	@ 0x30
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 031c 	add.w	r3, r7, #28
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
 800051e:	4b82      	ldr	r3, [pc, #520]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a81      	ldr	r2, [pc, #516]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b7f      	ldr	r3, [pc, #508]	@ (8000728 <MX_GPIO_Init+0x224>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	4b7b      	ldr	r3, [pc, #492]	@ (8000728 <MX_GPIO_Init+0x224>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a7a      	ldr	r2, [pc, #488]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b78      	ldr	r3, [pc, #480]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	4b74      	ldr	r3, [pc, #464]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a73      	ldr	r2, [pc, #460]	@ (8000728 <MX_GPIO_Init+0x224>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b71      	ldr	r3, [pc, #452]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	4b6d      	ldr	r3, [pc, #436]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a6c      	ldr	r2, [pc, #432]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b6a      	ldr	r3, [pc, #424]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	4b66      	ldr	r3, [pc, #408]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a65      	ldr	r2, [pc, #404]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b63      	ldr	r3, [pc, #396]	@ (8000728 <MX_GPIO_Init+0x224>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b5f      	ldr	r3, [pc, #380]	@ (8000728 <MX_GPIO_Init+0x224>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a5e      	ldr	r2, [pc, #376]	@ (8000728 <MX_GPIO_Init+0x224>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000728 <MX_GPIO_Init+0x224>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2108      	movs	r1, #8
 80005c6:	4859      	ldr	r0, [pc, #356]	@ (800072c <MX_GPIO_Init+0x228>)
 80005c8:	f000 fe48 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2101      	movs	r1, #1
 80005d0:	4857      	ldr	r0, [pc, #348]	@ (8000730 <MX_GPIO_Init+0x22c>)
 80005d2:	f000 fe43 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005d6:	2200      	movs	r2, #0
 80005d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80005dc:	4855      	ldr	r0, [pc, #340]	@ (8000734 <MX_GPIO_Init+0x230>)
 80005de:	f000 fe3d 	bl	800125c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005e2:	2304      	movs	r3, #4
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	484d      	ldr	r0, [pc, #308]	@ (800072c <MX_GPIO_Init+0x228>)
 80005f6:	f000 fcad 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005fa:	2308      	movs	r3, #8
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	4846      	ldr	r0, [pc, #280]	@ (800072c <MX_GPIO_Init+0x228>)
 8000612:	f000 fc9f 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800061a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800061e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	4840      	ldr	r0, [pc, #256]	@ (800072c <MX_GPIO_Init+0x228>)
 800062c:	f000 fc92 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	483a      	ldr	r0, [pc, #232]	@ (8000730 <MX_GPIO_Init+0x22c>)
 8000648:	f000 fc84 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800064c:	2308      	movs	r3, #8
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800065c:	2305      	movs	r3, #5
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4832      	ldr	r0, [pc, #200]	@ (8000730 <MX_GPIO_Init+0x22c>)
 8000668:	f000 fc74 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000670:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	482d      	ldr	r0, [pc, #180]	@ (8000738 <MX_GPIO_Init+0x234>)
 8000682:	f000 fc67 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000686:	2310      	movs	r3, #16
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000696:	2306      	movs	r3, #6
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4825      	ldr	r0, [pc, #148]	@ (8000738 <MX_GPIO_Init+0x234>)
 80006a2:	f000 fc57 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006b8:	2305      	movs	r3, #5
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	481e      	ldr	r0, [pc, #120]	@ (800073c <MX_GPIO_Init+0x238>)
 80006c4:	f000 fc46 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006c8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80006cc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4814      	ldr	r0, [pc, #80]	@ (8000734 <MX_GPIO_Init+0x230>)
 80006e2:	f000 fc37 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006e6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006f8:	2306      	movs	r3, #6
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <MX_GPIO_Init+0x22c>)
 8000704:	f000 fc26 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000708:	2320      	movs	r3, #32
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	@ (8000734 <MX_GPIO_Init+0x230>)
 800071c:	f000 fc1a 	bl	8000f54 <HAL_GPIO_Init>

}
 8000720:	bf00      	nop
 8000722:	3730      	adds	r7, #48	@ 0x30
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40021000 	.word	0x40021000
 8000730:	40020800 	.word	0x40020800
 8000734:	40020c00 	.word	0x40020c00
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400

08000740 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f000 fda1 	bl	80012c4 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 f91a 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000120 	.word	0x20000120
 8000794:	40005400 	.word	0x40005400
 8000798:	000186a0 	.word	0x000186a0

0800079c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a19      	ldr	r2, [pc, #100]	@ (8000820 <HAL_I2C_MspInit+0x84>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d12c      	bne.n	8000818 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <HAL_I2C_MspInit+0x88>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a17      	ldr	r2, [pc, #92]	@ (8000824 <HAL_I2C_MspInit+0x88>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <HAL_I2C_MspInit+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHTC3_SDA_Pin|SHTC3_SCL_Pin;
 80007da:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80007de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e0:	2312      	movs	r3, #18
 80007e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ec:	2304      	movs	r3, #4
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	480c      	ldr	r0, [pc, #48]	@ (8000828 <HAL_I2C_MspInit+0x8c>)
 80007f8:	f000 fbac 	bl	8000f54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <HAL_I2C_MspInit+0x88>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	4a07      	ldr	r2, [pc, #28]	@ (8000824 <HAL_I2C_MspInit+0x88>)
 8000806:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800080a:	6413      	str	r3, [r2, #64]	@ 0x40
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_I2C_MspInit+0x88>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	@ 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40005400 	.word	0x40005400
 8000824:	40023800 	.word	0x40023800
 8000828:	40020400 	.word	0x40020400

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 f9e8 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f858 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f7ff fe64 	bl	8000504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800083c:	f007 f894 	bl	8007968 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000840:	f7ff ff7e 	bl	8000740 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000844:	f000 f8c2 	bl	80009cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  shtc3_init(&shtc3_sensor, &hi2c1, SHTC3_I2C_ADDR);
 8000848:	2270      	movs	r2, #112	@ 0x70
 800084a:	490c      	ldr	r1, [pc, #48]	@ (800087c <main+0x50>)
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <main+0x54>)
 800084e:	f006 febe 	bl	80075ce <shtc3_init>
  shtc3_wakeup(&shtc3_sensor);
 8000852:	480b      	ldr	r0, [pc, #44]	@ (8000880 <main+0x54>)
 8000854:	f006 ff8c 	bl	8007770 <shtc3_wakeup>
  shtc3_get_id(&shtc3_sensor);
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <main+0x54>)
 800085a:	f006 fed4 	bl	8007606 <shtc3_get_id>
  shtc3_sleep(&shtc3_sensor);
 800085e:	4808      	ldr	r0, [pc, #32]	@ (8000880 <main+0x54>)
 8000860:	f006 ff75 	bl	800774e <shtc3_sleep>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	switch(shtc3_sensor.state)
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <main+0x54>)
 8000866:	7a9b      	ldrb	r3, [r3, #10]
 8000868:	2b01      	cmp	r3, #1
		case SHTC3_MEASURE:
			break;

		case STHC3_IDLE:
		default:
			break;
 800086a:	bf00      	nop
	}
//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	shtc3_get_temp_and_hum(&shtc3_sensor);
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <main+0x54>)
 800086e:	f006 ff07 	bl	8007680 <shtc3_get_temp_and_hum>
	HAL_Delay(1000);
 8000872:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000876:	f000 fa37 	bl	8000ce8 <HAL_Delay>
	switch(shtc3_sensor.state)
 800087a:	e7f3      	b.n	8000864 <main+0x38>
 800087c:	20000120 	.word	0x20000120
 8000880:	20000174 	.word	0x20000174

08000884 <usb_parser>:
  }
  /* USER CODE END 3 */
}

void usb_parser(uint8_t *buffer, uint16_t max_len)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b092      	sub	sp, #72	@ 0x48
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	807b      	strh	r3, [r7, #2]
	if(0 == strncmp((char *)buffer, SHTC3_CMD_READ_DATA, (strlen(SHTC3_CMD_READ_DATA) > max_len ? max_len : strlen(SHTC3_CMD_READ_DATA))))
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	2b0a      	cmp	r3, #10
 8000894:	bf28      	it	cs
 8000896:	230a      	movcs	r3, #10
 8000898:	b29b      	uxth	r3, r3
 800089a:	461a      	mov	r2, r3
 800089c:	490f      	ldr	r1, [pc, #60]	@ (80008dc <usb_parser+0x58>)
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f007 fcec 	bl	800827c <strncmp>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d114      	bne.n	80008d4 <usb_parser+0x50>
	{
		uint8_t report[64];
		memcpy(&report[0], &shtc3_sensor.temp, sizeof(shtc3_sensor.temp));
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <usb_parser+0x5c>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	60bb      	str	r3, [r7, #8]
		memcpy(&report[4], &shtc3_sensor.hum, sizeof(shtc3_sensor.hum));
 80008b0:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <usb_parser+0x5c>)
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	60fb      	str	r3, [r7, #12]
		while (((USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData)->state != CUSTOM_HID_IDLE);
 80008b6:	bf00      	nop
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <usb_parser+0x60>)
 80008ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80008be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f8      	bne.n	80008b8 <usb_parser+0x34>
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, 8);
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2208      	movs	r2, #8
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <usb_parser+0x60>)
 80008d0:	f005 f9d8 	bl	8005c84 <USBD_CUSTOM_HID_SendReport>
	}
}
 80008d4:	bf00      	nop
 80008d6:	3748      	adds	r7, #72	@ 0x48
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	08008300 	.word	0x08008300
 80008e0:	20000174 	.word	0x20000174
 80008e4:	200001e8 	.word	0x200001e8

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	@ 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2230      	movs	r2, #48	@ 0x30
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 fcb8 	bl	800826c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <SystemClock_Config+0xd0>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	4a28      	ldr	r2, [pc, #160]	@ (80009b8 <SystemClock_Config+0xd0>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	@ 0x40
 800091c:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <SystemClock_Config+0xd0>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <SystemClock_Config+0xd4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <SystemClock_Config+0xd4>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <SystemClock_Config+0xd4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094e:	2301      	movs	r3, #1
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000952:	2310      	movs	r3, #16
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800095e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000964:	2348      	movs	r3, #72	@ 0x48
 8000966:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000968:	2306      	movs	r3, #6
 800096a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800096c:	2303      	movs	r3, #3
 800096e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fed9 	bl	800372c <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000980:	f000 f81e 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 f93b 	bl	8003c1c <HAL_RCC_ClockConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009ac:	f000 f808 	bl	80009c0 <Error_Handler>
  }
}
 80009b0:	bf00      	nop
 80009b2:	3750      	adds	r7, #80	@ 0x50
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40007000 	.word	0x40007000

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <Error_Handler+0x8>

080009cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_SPI1_Init+0x64>)
 80009d2:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <MX_SPI1_Init+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_SPI1_Init+0x64>)
 80009d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_SPI1_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_SPI1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_SPI1_Init+0x64>)
 80009f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_SPI1_Init+0x64>)
 8000a00:	2210      	movs	r2, #16
 8000a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_SPI1_Init+0x64>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_SPI1_Init+0x64>)
 8000a1e:	f003 fb09 	bl	8004034 <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a28:	f7ff ffca 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000188 	.word	0x20000188
 8000a34:	40013000 	.word	0x40013000

08000a38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <HAL_SPI_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_SPI_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BME280_SCK_Pin|BME280_MISO_Pin|BME280_MOSI_Pin;
 8000a92:	23e0      	movs	r3, #224	@ 0xe0
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <HAL_SPI_MspInit+0x8c>)
 8000aae:	f000 fa51 	bl	8000f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40013000 	.word	0x40013000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b06:	2007      	movs	r0, #7
 8000b08:	f000 f9e2 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <NMI_Handler+0x4>

08000b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <MemManage_Handler+0x4>

08000b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 f89b 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <OTG_FS_IRQHandler+0x10>)
 8000b7e:	f001 fcdf 	bl	8002540 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200006c4 	.word	0x200006c4

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f007 fb5f 	bl	80082a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fe23 	bl	800082c <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000bf4:	08008384 	.word	0x08008384
  ldr r2, =_sbss
 8000bf8:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000bfc:	20000c00 	.word	0x20000c00

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	@ (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f94f 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff ff46 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f967 	bl	8000f3a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f92f 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	200001e0 	.word	0x200001e0

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200001e0 	.word	0x200001e0

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffde 	bl	8000cd0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	@ (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	@ (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	@ 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	@ 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e159      	b.n	8001224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8148 	bne.w	800121e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a2 	beq.w	800121e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b57      	ldr	r3, [pc, #348]	@ (800123c <HAL_GPIO_Init+0x2e8>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a56      	ldr	r2, [pc, #344]	@ (800123c <HAL_GPIO_Init+0x2e8>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b54      	ldr	r3, [pc, #336]	@ (800123c <HAL_GPIO_Init+0x2e8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <HAL_GPIO_Init+0x2ec>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	@ (8001244 <HAL_GPIO_Init+0x2f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x202>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a48      	ldr	r2, [pc, #288]	@ (8001248 <HAL_GPIO_Init+0x2f4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x1fe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a47      	ldr	r2, [pc, #284]	@ (800124c <HAL_GPIO_Init+0x2f8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x1fa>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a46      	ldr	r2, [pc, #280]	@ (8001250 <HAL_GPIO_Init+0x2fc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a45      	ldr	r2, [pc, #276]	@ (8001254 <HAL_GPIO_Init+0x300>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x1f2>
 8001142:	2304      	movs	r3, #4
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001146:	2307      	movs	r3, #7
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_GPIO_Init+0x2ec>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b38      	ldr	r3, [pc, #224]	@ (8001258 <HAL_GPIO_Init+0x304>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a2f      	ldr	r2, [pc, #188]	@ (8001258 <HAL_GPIO_Init+0x304>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a24      	ldr	r2, [pc, #144]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f aea2 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a0:	887a      	ldrh	r2, [r7, #2]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	041a      	lsls	r2, r3, #16
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	400b      	ands	r3, r1
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e12b      	b.n	800152e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fa56 	bl	800079c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2224      	movs	r2, #36	@ 0x24
 80012f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001328:	f002 fe70 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 800132c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a81      	ldr	r2, [pc, #516]	@ (8001538 <HAL_I2C_Init+0x274>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d807      	bhi.n	8001348 <HAL_I2C_Init+0x84>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a80      	ldr	r2, [pc, #512]	@ (800153c <HAL_I2C_Init+0x278>)
 800133c:	4293      	cmp	r3, r2
 800133e:	bf94      	ite	ls
 8001340:	2301      	movls	r3, #1
 8001342:	2300      	movhi	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	e006      	b.n	8001356 <HAL_I2C_Init+0x92>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4a7d      	ldr	r2, [pc, #500]	@ (8001540 <HAL_I2C_Init+0x27c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	bf94      	ite	ls
 8001350:	2301      	movls	r3, #1
 8001352:	2300      	movhi	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0e7      	b.n	800152e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4a78      	ldr	r2, [pc, #480]	@ (8001544 <HAL_I2C_Init+0x280>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0c9b      	lsrs	r3, r3, #18
 8001368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a6a      	ldr	r2, [pc, #424]	@ (8001538 <HAL_I2C_Init+0x274>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d802      	bhi.n	8001398 <HAL_I2C_Init+0xd4>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	e009      	b.n	80013ac <HAL_I2C_Init+0xe8>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a69      	ldr	r2, [pc, #420]	@ (8001548 <HAL_I2C_Init+0x284>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	3301      	adds	r3, #1
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	495c      	ldr	r1, [pc, #368]	@ (8001538 <HAL_I2C_Init+0x274>)
 80013c8:	428b      	cmp	r3, r1
 80013ca:	d819      	bhi.n	8001400 <HAL_I2C_Init+0x13c>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e59      	subs	r1, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013da:	1c59      	adds	r1, r3, #1
 80013dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013e0:	400b      	ands	r3, r1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00a      	beq.n	80013fc <HAL_I2C_Init+0x138>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e59      	subs	r1, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fa:	e051      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 80013fc:	2304      	movs	r3, #4
 80013fe:	e04f      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d111      	bne.n	800142c <HAL_I2C_Init+0x168>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1e58      	subs	r0, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	fbb0 f3f3 	udiv	r3, r0, r3
 800141a:	3301      	adds	r3, #1
 800141c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e012      	b.n	8001452 <HAL_I2C_Init+0x18e>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	0099      	lsls	r1, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001442:	3301      	adds	r3, #1
 8001444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf0c      	ite	eq
 800144c:	2301      	moveq	r3, #1
 800144e:	2300      	movne	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Init+0x196>
 8001456:	2301      	movs	r3, #1
 8001458:	e022      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10e      	bne.n	8001480 <HAL_I2C_Init+0x1bc>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e58      	subs	r0, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6859      	ldr	r1, [r3, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	440b      	add	r3, r1
 8001470:	fbb0 f3f3 	udiv	r3, r0, r3
 8001474:	3301      	adds	r3, #1
 8001476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800147e:	e00f      	b.n	80014a0 <HAL_I2C_Init+0x1dc>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1e58      	subs	r0, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	0099      	lsls	r1, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	fbb0 f3f3 	udiv	r3, r0, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	6809      	ldr	r1, [r1, #0]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6911      	ldr	r1, [r2, #16]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68d2      	ldr	r2, [r2, #12]
 80014da:	4311      	orrs	r1, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	000186a0 	.word	0x000186a0
 800153c:	001e847f 	.word	0x001e847f
 8001540:	003d08ff 	.word	0x003d08ff
 8001544:	431bde83 	.word	0x431bde83
 8001548:	10624dd3 	.word	0x10624dd3

0800154c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	461a      	mov	r2, r3
 8001558:	460b      	mov	r3, r1
 800155a:	817b      	strh	r3, [r7, #10]
 800155c:	4613      	mov	r3, r2
 800155e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff fbb6 	bl	8000cd0 <HAL_GetTick>
 8001564:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b20      	cmp	r3, #32
 8001570:	f040 80e0 	bne.w	8001734 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2319      	movs	r3, #25
 800157a:	2201      	movs	r2, #1
 800157c:	4970      	ldr	r1, [pc, #448]	@ (8001740 <HAL_I2C_Master_Transmit+0x1f4>)
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 fc64 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800158a:	2302      	movs	r3, #2
 800158c:	e0d3      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_I2C_Master_Transmit+0x50>
 8001598:	2302      	movs	r3, #2
 800159a:	e0cc      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d007      	beq.n	80015c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2221      	movs	r2, #33	@ 0x21
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2210      	movs	r2, #16
 80015de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	893a      	ldrh	r2, [r7, #8]
 80015f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4a50      	ldr	r2, [pc, #320]	@ (8001744 <HAL_I2C_Master_Transmit+0x1f8>)
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001604:	8979      	ldrh	r1, [r7, #10]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 face 	bl	8001bac <I2C_MasterRequestWrite>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e08d      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001630:	e066      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 fd22 	bl	8002080 <I2C_WaitOnTXEFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00d      	beq.n	800165e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	2b04      	cmp	r3, #4
 8001648:	d107      	bne.n	800165a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06b      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b04      	cmp	r3, #4
 800169a:	d11b      	bne.n	80016d4 <HAL_I2C_Master_Transmit+0x188>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d017      	beq.n	80016d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	6a39      	ldr	r1, [r7, #32]
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fd19 	bl	8002110 <I2C_WaitOnBTFFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00d      	beq.n	8001700 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d107      	bne.n	80016fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e01a      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d194      	bne.n	8001632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	00100002 	.word	0x00100002
 8001744:	ffff0000 	.word	0xffff0000

08001748 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	@ 0x30
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	461a      	mov	r2, r3
 8001754:	460b      	mov	r3, r1
 8001756:	817b      	strh	r3, [r7, #10]
 8001758:	4613      	mov	r3, r2
 800175a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff fab8 	bl	8000cd0 <HAL_GetTick>
 8001760:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	f040 8217 	bne.w	8001b9e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2319      	movs	r3, #25
 8001776:	2201      	movs	r2, #1
 8001778:	497c      	ldr	r1, [pc, #496]	@ (800196c <HAL_I2C_Master_Receive+0x224>)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fb66 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001786:	2302      	movs	r3, #2
 8001788:	e20a      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_I2C_Master_Receive+0x50>
 8001794:	2302      	movs	r3, #2
 8001796:	e203      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d007      	beq.n	80017be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2222      	movs	r2, #34	@ 0x22
 80017d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2210      	movs	r2, #16
 80017da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	893a      	ldrh	r2, [r7, #8]
 80017ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4a5c      	ldr	r2, [pc, #368]	@ (8001970 <HAL_I2C_Master_Receive+0x228>)
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001800:	8979      	ldrh	r1, [r7, #10]
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fa52 	bl	8001cb0 <I2C_MasterRequestRead>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c4      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181a:	2b00      	cmp	r3, #0
 800181c:	d113      	bne.n	8001846 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e198      	b.n	8001b78 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184a:	2b01      	cmp	r3, #1
 800184c:	d11b      	bne.n	8001886 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800185c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e178      	b.n	8001b78 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188a:	2b02      	cmp	r3, #2
 800188c:	d11b      	bne.n	80018c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800189c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	e158      	b.n	8001b78 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018ec:	e144      	b.n	8001b78 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	f200 80f1 	bhi.w	8001ada <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d123      	bne.n	8001948 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001902:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fc4b 	bl	80021a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e145      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001930:	3b01      	subs	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193c:	b29b      	uxth	r3, r3
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001946:	e117      	b.n	8001b78 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194c:	2b02      	cmp	r3, #2
 800194e:	d14e      	bne.n	80019ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001956:	2200      	movs	r2, #0
 8001958:	4906      	ldr	r1, [pc, #24]	@ (8001974 <HAL_I2C_Master_Receive+0x22c>)
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fa76 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d008      	beq.n	8001978 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e11a      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
 800196a:	bf00      	nop
 800196c:	00100002 	.word	0x00100002
 8001970:	ffff0000 	.word	0xffff0000
 8001974:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019ec:	e0c4      	b.n	8001b78 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f4:	2200      	movs	r2, #0
 80019f6:	496c      	ldr	r1, [pc, #432]	@ (8001ba8 <HAL_I2C_Master_Receive+0x460>)
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 fa27 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0cb      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a50:	2200      	movs	r2, #0
 8001a52:	4955      	ldr	r1, [pc, #340]	@ (8001ba8 <HAL_I2C_Master_Receive+0x460>)
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f9f9 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e09d      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ad8:	e04e      	b.n	8001b78 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fb5e 	bl	80021a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e058      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d124      	bne.n	8001b78 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d107      	bne.n	8001b46 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b44:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f47f aeb6 	bne.w	80018ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001b9e:	2302      	movs	r3, #2
  }
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	00010004 	.word	0x00010004

08001bac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d006      	beq.n	8001bd6 <I2C_MasterRequestWrite+0x2a>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d003      	beq.n	8001bd6 <I2C_MasterRequestWrite+0x2a>
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bd4:	d108      	bne.n	8001be8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e00b      	b.n	8001c00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	2b12      	cmp	r3, #18
 8001bee:	d107      	bne.n	8001c00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f91d 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00d      	beq.n	8001c34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c26:	d103      	bne.n	8001c30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e035      	b.n	8001ca0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c3c:	d108      	bne.n	8001c50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c3e:	897b      	ldrh	r3, [r7, #10]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	e01b      	b.n	8001c88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c50:	897b      	ldrh	r3, [r7, #10]
 8001c52:	11db      	asrs	r3, r3, #7
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f003 0306 	and.w	r3, r3, #6
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f063 030f 	orn	r3, r3, #15
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	490e      	ldr	r1, [pc, #56]	@ (8001ca8 <I2C_MasterRequestWrite+0xfc>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f966 	bl	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e010      	b.n	8001ca0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4907      	ldr	r1, [pc, #28]	@ (8001cac <I2C_MasterRequestWrite+0x100>)
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f956 	bl	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	00010008 	.word	0x00010008
 8001cac:	00010002 	.word	0x00010002

08001cb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d006      	beq.n	8001cea <I2C_MasterRequestRead+0x3a>
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d003      	beq.n	8001cea <I2C_MasterRequestRead+0x3a>
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ce8:	d108      	bne.n	8001cfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e00b      	b.n	8001d14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	2b11      	cmp	r3, #17
 8001d02:	d107      	bne.n	8001d14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f893 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00d      	beq.n	8001d48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d3a:	d103      	bne.n	8001d44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e079      	b.n	8001e3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d50:	d108      	bne.n	8001d64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	e05f      	b.n	8001e24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d64:	897b      	ldrh	r3, [r7, #10]
 8001d66:	11db      	asrs	r3, r3, #7
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f003 0306 	and.w	r3, r3, #6
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f063 030f 	orn	r3, r3, #15
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4930      	ldr	r1, [pc, #192]	@ (8001e44 <I2C_MasterRequestRead+0x194>)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f8dc 	bl	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e054      	b.n	8001e3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d92:	897b      	ldrh	r3, [r7, #10]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4929      	ldr	r1, [pc, #164]	@ (8001e48 <I2C_MasterRequestRead+0x198>)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f8cc 	bl	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e044      	b.n	8001e3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f831 	bl	8001e4c <I2C_WaitOnFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dfe:	d103      	bne.n	8001e08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e017      	b.n	8001e3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e0c:	897b      	ldrh	r3, [r7, #10]
 8001e0e:	11db      	asrs	r3, r3, #7
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f003 0306 	and.w	r3, r3, #6
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f063 030e 	orn	r3, r3, #14
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4907      	ldr	r1, [pc, #28]	@ (8001e48 <I2C_MasterRequestRead+0x198>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f888 	bl	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	00010008 	.word	0x00010008
 8001e48:	00010002 	.word	0x00010002

08001e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e5c:	e048      	b.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d044      	beq.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e66:	f7fe ff33 	bl	8000cd0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d302      	bcc.n	8001e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d139      	bne.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	0c1b      	lsrs	r3, r3, #16
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10d      	bne.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	e00c      	b.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4013      	ands	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d116      	bne.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e023      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	0c1b      	lsrs	r3, r3, #16
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10d      	bne.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	43da      	mvns	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4013      	ands	r3, r2
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	e00c      	b.n	8001f30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d093      	beq.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f4e:	e071      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f5e:	d123      	bne.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f043 0204 	orr.w	r2, r3, #4
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e067      	b.n	8002078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d041      	beq.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb0:	f7fe fe8e 	bl	8000cd0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d302      	bcc.n	8001fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d136      	bne.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10c      	bne.n	8001fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e00b      	b.n	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e021      	b.n	8002078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10c      	bne.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	43da      	mvns	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4013      	ands	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e00b      	b.n	8002070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	f47f af6d 	bne.w	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208c:	e034      	b.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f8e3 	bl	800225a <I2C_IsAcknowledgeFailed>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e034      	b.n	8002108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d028      	beq.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a6:	f7fe fe13 	bl	8000cd0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d302      	bcc.n	80020bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11d      	bne.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c6:	2b80      	cmp	r3, #128	@ 0x80
 80020c8:	d016      	beq.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e007      	b.n	8002108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002102:	2b80      	cmp	r3, #128	@ 0x80
 8002104:	d1c3      	bne.n	800208e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800211c:	e034      	b.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f89b 	bl	800225a <I2C_IsAcknowledgeFailed>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e034      	b.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d028      	beq.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002136:	f7fe fdcb 	bl	8000cd0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	d302      	bcc.n	800214c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11d      	bne.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b04      	cmp	r3, #4
 8002158:	d016      	beq.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e007      	b.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d1c3      	bne.n	800211e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021ac:	e049      	b.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d119      	bne.n	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0210 	mvn.w	r2, #16
 80021c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e030      	b.n	8002252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f0:	f7fe fd6e 	bl	8000cd0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d302      	bcc.n	8002206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11d      	bne.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002210:	2b40      	cmp	r3, #64	@ 0x40
 8002212:	d016      	beq.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f043 0220 	orr.w	r2, r3, #32
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e007      	b.n	8002252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224c:	2b40      	cmp	r3, #64	@ 0x40
 800224e:	d1ae      	bne.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002270:	d11b      	bne.n	80022aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800227a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f043 0204 	orr.w	r2, r3, #4
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af02      	add	r7, sp, #8
 80022be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e101      	b.n	80024ce <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f005 fcbb 	bl	8007c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2203      	movs	r2, #3
 80022ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f8:	d102      	bne.n	8002300 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f002 f836 	bl	8004376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7c1a      	ldrb	r2, [r3, #16]
 8002312:	f88d 2000 	strb.w	r2, [sp]
 8002316:	3304      	adds	r3, #4
 8002318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231a:	f001 ff14 	bl	8004146 <USB_CoreInit>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0ce      	b.n	80024ce <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f002 f82e 	bl	8004398 <USB_SetCurrentMode>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0bf      	b.n	80024ce <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	e04a      	b.n	80023ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3315      	adds	r3, #21
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3314      	adds	r3, #20
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	b298      	uxth	r0, r3
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	332e      	adds	r3, #46	@ 0x2e
 8002390:	4602      	mov	r2, r0
 8002392:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3318      	adds	r3, #24
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	331c      	adds	r3, #28
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3320      	adds	r3, #32
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3324      	adds	r3, #36	@ 0x24
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3301      	adds	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	791b      	ldrb	r3, [r3, #4]
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3af      	bcc.n	8002354 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	e044      	b.n	8002484 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	3301      	adds	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	429a      	cmp	r2, r3
 800248c:	d3b5      	bcc.n	80023fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7c1a      	ldrb	r2, [r3, #16]
 8002496:	f88d 2000 	strb.w	r2, [sp]
 800249a:	3304      	adds	r3, #4
 800249c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249e:	f001 ffc7 	bl	8004430 <USB_DevInit>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e00c      	b.n	80024ce <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 f811 	bl	80054ee <USB_DevDisconnect>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_PCD_Start+0x1c>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e022      	b.n	8002538 <HAL_PCD_Start+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002512:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f001 ff18 	bl	8004354 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f002 ffbf 	bl	80054ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b08d      	sub	sp, #52	@ 0x34
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 f87d 	bl	8005656 <USB_GetMode>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 848c 	bne.w	8002e7c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f002 ffe1 	bl	8005530 <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8482 	beq.w	8002e7a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f002 ffce 	bl	8005530 <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d107      	bne.n	80025ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f002 0202 	and.w	r2, r2, #2
 80025ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 ffbc 	bl	8005530 <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d161      	bne.n	8002686 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0210 	bic.w	r2, r2, #16
 80025d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 020f 	and.w	r2, r3, #15
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	3304      	adds	r3, #4
 80025f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80025f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025fc:	d124      	bne.n	8002648 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d035      	beq.n	8002676 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002618:	b29b      	uxth	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	6a38      	ldr	r0, [r7, #32]
 800261e:	f002 fdf3 	bl	8005208 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800262e:	441a      	add	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002640:	441a      	add	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	e016      	b.n	8002676 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800264e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002652:	d110      	bne.n	8002676 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800265a:	2208      	movs	r2, #8
 800265c:	4619      	mov	r1, r3
 800265e:	6a38      	ldr	r0, [r7, #32]
 8002660:	f002 fdd2 	bl	8005208 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002670:	441a      	add	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0210 	orr.w	r2, r2, #16
 8002684:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f002 ff50 	bl	8005530 <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002696:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800269a:	f040 80a7 	bne.w	80027ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 ff55 	bl	8005556 <USB_ReadDevAllOutEpInterrupt>
 80026ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80026ae:	e099      	b.n	80027e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 808e 	beq.w	80027d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 ff79 	bl	80055be <USB_ReadDevOutEPInterrupt>
 80026cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026e4:	461a      	mov	r2, r3
 80026e6:	2301      	movs	r3, #1
 80026e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fe8b 	bl	8003408 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002708:	461a      	mov	r2, r3
 800270a:	2308      	movs	r3, #8
 800270c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800270e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 ff61 	bl	80035d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800272c:	461a      	mov	r2, r3
 800272e:	2310      	movs	r3, #16
 8002730:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d030      	beq.n	800279e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002744:	2b80      	cmp	r3, #128	@ 0x80
 8002746:	d109      	bne.n	800275c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800275a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800275c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	78db      	ldrb	r3, [r3, #3]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d108      	bne.n	800278c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4619      	mov	r1, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f005 fb74 	bl	8007e74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002798:	461a      	mov	r2, r3
 800279a:	2302      	movs	r3, #2
 800279c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027b4:	461a      	mov	r2, r3
 80027b6:	2320      	movs	r3, #32
 80027b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027d0:	461a      	mov	r2, r3
 80027d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	3301      	adds	r3, #1
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f47f af62 	bne.w	80026b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fe9d 	bl	8005530 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002800:	f040 80db 	bne.w	80029ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f002 febe 	bl	800558a <USB_ReadDevAllInEpInterrupt>
 800280e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002814:	e0cd      	b.n	80029b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80c2 	beq.w	80029a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f002 fee4 	bl	80055fa <USB_ReadDevInEPInterrupt>
 8002832:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d057      	beq.n	80028ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	2201      	movs	r2, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	43db      	mvns	r3, r3
 8002858:	69f9      	ldr	r1, [r7, #28]
 800285a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800285e:	4013      	ands	r3, r2
 8002860:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800286e:	461a      	mov	r2, r3
 8002870:	2301      	movs	r3, #1
 8002872:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	799b      	ldrb	r3, [r3, #6]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d132      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3320      	adds	r3, #32
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4403      	add	r3, r0
 800289c:	331c      	adds	r3, #28
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4419      	add	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4403      	add	r3, r0
 80028b0:	3320      	adds	r3, #32
 80028b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d113      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x3a2>
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3324      	adds	r3, #36	@ 0x24
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d108      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028da:	461a      	mov	r2, r3
 80028dc:	2101      	movs	r1, #1
 80028de:	f002 feeb 	bl	80056b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f005 fa48 	bl	8007d7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002904:	461a      	mov	r2, r3
 8002906:	2308      	movs	r3, #8
 8002908:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002920:	461a      	mov	r2, r3
 8002922:	2310      	movs	r3, #16
 8002924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800293c:	461a      	mov	r2, r3
 800293e:	2340      	movs	r3, #64	@ 0x40
 8002940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d023      	beq.n	8002994 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800294c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800294e:	6a38      	ldr	r0, [r7, #32]
 8002950:	f001 fed2 	bl	80046f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	3310      	adds	r3, #16
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	3304      	adds	r3, #4
 8002966:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	78db      	ldrb	r3, [r3, #3]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d108      	bne.n	8002982 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2200      	movs	r2, #0
 8002974:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f005 fa8b 	bl	8007e98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800298e:	461a      	mov	r2, r3
 8002990:	2302      	movs	r3, #2
 8002992:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800299e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fca5 	bl	80032f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	3301      	adds	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f af2e 	bne.w	8002816 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f002 fdb6 	bl	8005530 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029ce:	d122      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d108      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029f6:	2100      	movs	r1, #0
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fe8b 	bl	8003714 <HAL_PCDEx_LPM_Callback>
 80029fe:	e002      	b.n	8002a06 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f005 fa29 	bl	8007e58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 fd88 	bl	8005530 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a2a:	d112      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f005 f9e5 	bl	8007e0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a50:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 fd6a 	bl	8005530 <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a66:	f040 80b7 	bne.w	8002bd8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2110      	movs	r1, #16
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 fe37 	bl	80046f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a8e:	e046      	b.n	8002b1e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002aa2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab4:	0151      	lsls	r1, r2, #5
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	440a      	add	r2, r1
 8002aba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002abe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ac2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ad6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ae8:	0151      	lsls	r1, r2, #5
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	440a      	add	r2, r1
 8002aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002af2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002af6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b16:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	791b      	ldrb	r3, [r3, #4]
 8002b22:	461a      	mov	r2, r3
 8002b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d3b2      	bcc.n	8002a90 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b38:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7bdb      	ldrb	r3, [r3, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b56:	f043 030b 	orr.w	r3, r3, #11
 8002b5a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b6c:	f043 030b 	orr.w	r3, r3, #11
 8002b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b72:	e015      	b.n	8002ba0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b86:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b9a:	f043 030b 	orr.w	r3, r3, #11
 8002b9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002bb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f002 fd78 	bl	80056b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 fca7 	bl	8005530 <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bec:	d123      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fd3d 	bl	8005672 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 fdf4 	bl	80047ea <USB_GetDevSpeed>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681c      	ldr	r4, [r3, #0]
 8002c0e:	f001 f9f1 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8002c12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f001 faf8 	bl	8004210 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f005 f8d4 	bl	8007dce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fc78 	bl	8005530 <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d10a      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f005 f8b1 	bl	8007db2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f002 0208 	and.w	r2, r2, #8
 8002c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fc63 	bl	8005530 <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c70:	2b80      	cmp	r3, #128	@ 0x80
 8002c72:	d123      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c80:	2301      	movs	r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c84:	e014      	b.n	8002cb0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 faf2 	bl	800328e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	3301      	adds	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d3e4      	bcc.n	8002c86 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 fc35 	bl	8005530 <USB_ReadInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ccc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cd0:	d13c      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	e02b      	b.n	8002d30 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3318      	adds	r3, #24
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d115      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	da12      	bge.n	8002d2a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3317      	adds	r3, #23
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fab2 	bl	800328e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	791b      	ldrb	r3, [r3, #4]
 8002d34:	461a      	mov	r2, r3
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d3cd      	bcc.n	8002cd8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 fbed 	bl	8005530 <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d60:	d156      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d62:	2301      	movs	r3, #1
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d66:	e045      	b.n	8002df4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d12e      	bne.n	8002dee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da2b      	bge.n	8002dee <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	0c1a      	lsrs	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002da0:	4053      	eors	r3, r2
 8002da2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d121      	bne.n	8002dee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dea:	6053      	str	r3, [r2, #4]
            break;
 8002dec:	e008      	b.n	8002e00 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	3301      	adds	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d3b3      	bcc.n	8002d68 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 fb8b 	bl	8005530 <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d10a      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f005 f848 	bl	8007ebc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 fb75 	bl	8005530 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d115      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f005 f838 	bl	8007ed8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	e000      	b.n	8002e7c <HAL_PCD_IRQHandler+0x93c>
      return;
 8002e7a:	bf00      	nop
    }
  }
}
 8002e7c:	3734      	adds	r7, #52	@ 0x34
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}

08002e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_PCD_SetAddress+0x1a>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e012      	b.n	8002ec2 <HAL_PCD_SetAddress+0x40>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fad4 	bl	8005460 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	4608      	mov	r0, r1
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4603      	mov	r3, r0
 8002eda:	70fb      	strb	r3, [r7, #3]
 8002edc:	460b      	mov	r3, r1
 8002ede:	803b      	strh	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	da0f      	bge.n	8002f10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 020f 	and.w	r2, r3, #15
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	3310      	adds	r3, #16
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	3304      	adds	r3, #4
 8002f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	705a      	strb	r2, [r3, #1]
 8002f0e:	e00f      	b.n	8002f30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002f3c:	883b      	ldrh	r3, [r7, #0]
 8002f3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	78ba      	ldrb	r2, [r7, #2]
 8002f4a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f5e:	78bb      	ldrb	r3, [r7, #2]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d102      	bne.n	8002f6a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_PCD_EP_Open+0xae>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e00e      	b.n	8002f96 <HAL_PCD_EP_Open+0xcc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fc54 	bl	8004834 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f94:	7afb      	ldrb	r3, [r7, #11]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	da0f      	bge.n	8002fd2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	705a      	strb	r2, [r3, #1]
 8002fd0:	e00f      	b.n	8002ff2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_PCD_EP_Close+0x6e>
 8003008:	2302      	movs	r3, #2
 800300a:	e00e      	b.n	800302a <HAL_PCD_EP_Close+0x8c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	4618      	mov	r0, r3
 800301c:	f001 fc92 	bl	8004944 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	460b      	mov	r3, r1
 8003040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003042:	7afb      	ldrb	r3, [r7, #11]
 8003044:	f003 020f 	and.w	r2, r3, #15
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	3304      	adds	r3, #4
 800305a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	b2da      	uxtb	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	799b      	ldrb	r3, [r3, #6]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d102      	bne.n	800308e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	799b      	ldrb	r3, [r3, #6]
 8003096:	461a      	mov	r2, r3
 8003098:	6979      	ldr	r1, [r7, #20]
 800309a:	f001 fd2f 	bl	8004afc <USB_EPStartXfer>

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	460b      	mov	r3, r1
 80030b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b8:	7afb      	ldrb	r3, [r7, #11]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3310      	adds	r3, #16
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2201      	movs	r2, #1
 80030e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	799b      	ldrb	r3, [r3, #6]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d102      	bne.n	8003102 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	799b      	ldrb	r3, [r3, #6]
 800310a:	461a      	mov	r2, r3
 800310c:	6979      	ldr	r1, [r7, #20]
 800310e:	f001 fcf5 	bl	8004afc <USB_EPStartXfer>

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	7912      	ldrb	r2, [r2, #4]
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e04f      	b.n	80031da <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800313a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800313e:	2b00      	cmp	r3, #0
 8003140:	da0f      	bge.n	8003162 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	3310      	adds	r3, #16
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	705a      	strb	r2, [r3, #1]
 8003160:	e00d      	b.n	800317e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_PCD_EP_SetStall+0x82>
 800319a:	2302      	movs	r3, #2
 800319c:	e01d      	b.n	80031da <HAL_PCD_EP_SetStall+0xbe>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68f9      	ldr	r1, [r7, #12]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 f883 	bl	80052b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7999      	ldrb	r1, [r3, #6]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031ca:	461a      	mov	r2, r3
 80031cc:	f002 fa74 	bl	80056b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	7912      	ldrb	r2, [r2, #4]
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e042      	b.n	8003286 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da0f      	bge.n	8003228 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	3310      	adds	r3, #16
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	3304      	adds	r3, #4
 800321e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	705a      	strb	r2, [r3, #1]
 8003226:	e00f      	b.n	8003248 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_PCD_EP_ClrStall+0x86>
 8003264:	2302      	movs	r3, #2
 8003266:	e00e      	b.n	8003286 <HAL_PCD_EP_ClrStall+0xa4>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	4618      	mov	r0, r3
 8003278:	f002 f88c 	bl	8005394 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800329a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da0c      	bge.n	80032bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	3310      	adds	r3, #16
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e00c      	b.n	80032d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	f003 020f 	and.w	r2, r3, #15
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 feab 	bl	8005038 <USB_EPStopXfer>
 80032e2:	4603      	mov	r3, r0
 80032e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032e6:	7afb      	ldrb	r3, [r7, #11]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3310      	adds	r3, #16
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d901      	bls.n	8003328 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e06b      	b.n	8003400 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	429a      	cmp	r2, r3
 800333c:	d902      	bls.n	8003344 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	3303      	adds	r3, #3
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800334c:	e02a      	b.n	80033a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	429a      	cmp	r2, r3
 8003362:	d902      	bls.n	800336a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3303      	adds	r3, #3
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	68d9      	ldr	r1, [r3, #12]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4603      	mov	r3, r0
 8003386:	6978      	ldr	r0, [r7, #20]
 8003388:	f001 ff00 	bl	800518c <USB_WritePacket>

    ep->xfer_buff  += len;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	441a      	add	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	441a      	add	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d809      	bhi.n	80033ce <PCD_WriteEmptyTxFifo+0xde>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d203      	bcs.n	80033ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1bf      	bne.n	800334e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d811      	bhi.n	80033fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	2201      	movs	r2, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	6939      	ldr	r1, [r7, #16]
 80033f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033fa:	4013      	ands	r3, r2
 80033fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	333c      	adds	r3, #60	@ 0x3c
 8003420:	3304      	adds	r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	799b      	ldrb	r3, [r3, #6]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d17b      	bne.n	8003536 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4a61      	ldr	r2, [pc, #388]	@ (80035d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	f240 80b9 	bls.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80b3 	beq.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003470:	6093      	str	r3, [r2, #8]
 8003472:	e0a7      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2320      	movs	r3, #32
 800348e:	6093      	str	r3, [r2, #8]
 8003490:	e098      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8093 	bne.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	@ (80035d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d90f      	bls.n	80034c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034c2:	6093      	str	r3, [r2, #8]
 80034c4:	e07e      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	0159      	lsls	r1, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d114      	bne.n	8003528 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003510:	461a      	mov	r2, r3
 8003512:	2101      	movs	r1, #1
 8003514:	f002 f8d0 	bl	80056b8 <USB_EP0_OutStart>
 8003518:	e006      	b.n	8003528 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f004 fc0a 	bl	8007d48 <HAL_PCD_DataOutStageCallback>
 8003534:	e046      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d124      	bne.n	8003588 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	e032      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	2320      	movs	r3, #32
 8003578:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f004 fbe1 	bl	8007d48 <HAL_PCD_DataOutStageCallback>
 8003586:	e01d      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d114      	bne.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035b0:	461a      	mov	r2, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	f002 f880 	bl	80056b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f004 fbc2 	bl	8007d48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	4f54300a 	.word	0x4f54300a
 80035d4:	4f54310a 	.word	0x4f54310a

080035d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	333c      	adds	r3, #60	@ 0x3c
 80035f0:	3304      	adds	r3, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a15      	ldr	r2, [pc, #84]	@ (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d90e      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800362a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f004 fb79 	bl	8007d24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d90c      	bls.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	799b      	ldrb	r3, [r3, #6]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800364c:	461a      	mov	r2, r3
 800364e:	2101      	movs	r1, #1
 8003650:	f002 f832 	bl	80056b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	4f54300a 	.word	0x4f54300a

08003664 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
 8003670:	4613      	mov	r3, r2
 8003672:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003682:	883b      	ldrh	r3, [r7, #0]
 8003684:	0419      	lsls	r1, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	430a      	orrs	r2, r1
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003690:	e028      	b.n	80036e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e00d      	b.n	80036c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	3340      	adds	r3, #64	@ 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	3301      	adds	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3ec      	bcc.n	80036a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036cc:	883b      	ldrh	r3, [r7, #0]
 80036ce:	0418      	lsls	r0, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4302      	orrs	r2, r0
 80036dc:	3340      	adds	r3, #64	@ 0x40
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e267      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d075      	beq.n	8003836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800374a:	4b88      	ldr	r3, [pc, #544]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b85      	ldr	r3, [pc, #532]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800375e:	2b08      	cmp	r3, #8
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b82      	ldr	r3, [pc, #520]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b7e      	ldr	r3, [pc, #504]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x108>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e242      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x74>
 8003792:	4b76      	ldr	r3, [pc, #472]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a75      	ldr	r2, [pc, #468]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x98>
 80037aa:	4b70      	ldr	r3, [pc, #448]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6f      	ldr	r2, [pc, #444]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6d      	ldr	r3, [pc, #436]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6c      	ldr	r2, [pc, #432]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037c4:	4b69      	ldr	r3, [pc, #420]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a68      	ldr	r2, [pc, #416]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b66      	ldr	r3, [pc, #408]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a65      	ldr	r2, [pc, #404]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fa74 	bl	8000cd0 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fa70 	bl	8000cd0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	@ 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e207      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b5b      	ldr	r3, [pc, #364]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xc0>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fa60 	bl	8000cd0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd fa5c 	bl	8000cd0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	@ 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1f3      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b51      	ldr	r3, [pc, #324]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0xe8>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b47      	ldr	r3, [pc, #284]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b44      	ldr	r3, [pc, #272]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c7      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3b      	ldr	r3, [pc, #236]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4937      	ldr	r1, [pc, #220]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b34      	ldr	r3, [pc, #208]	@ (8003970 <HAL_RCC_OscConfig+0x244>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fa15 	bl	8000cd0 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fd fa11 	bl	8000cd0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a8      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b28      	ldr	r3, [pc, #160]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4925      	ldr	r1, [pc, #148]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b24      	ldr	r3, [pc, #144]	@ (8003970 <HAL_RCC_OscConfig+0x244>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd f9f4 	bl	8000cd0 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd f9f0 	bl	8000cd0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e187      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d036      	beq.n	8003984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <HAL_RCC_OscConfig+0x248>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd f9d4 	bl	8000cd0 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7fd f9d0 	bl	8000cd0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e167      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x200>
 800394a:	e01b      	b.n	8003984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_OscConfig+0x248>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fd f9bd 	bl	8000cd0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e00e      	b.n	8003978 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395a:	f7fd f9b9 	bl	8000cd0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d907      	bls.n	8003978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e150      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 800396c:	40023800 	.word	0x40023800
 8003970:	42470000 	.word	0x42470000
 8003974:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b88      	ldr	r3, [pc, #544]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 800397a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ea      	bne.n	800395a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8097 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b81      	ldr	r3, [pc, #516]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	4b7d      	ldr	r3, [pc, #500]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a7c      	ldr	r2, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b2:	4b7a      	ldr	r3, [pc, #488]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b77      	ldr	r3, [pc, #476]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b74      	ldr	r3, [pc, #464]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a73      	ldr	r2, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fd f979 	bl	8000cd0 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fd f975 	bl	8000cd0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e10c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
 8003a08:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a63      	ldr	r2, [pc, #396]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x30c>
 8003a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	4a5e      	ldr	r2, [pc, #376]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a38:	4b58      	ldr	r3, [pc, #352]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a44:	4b55      	ldr	r3, [pc, #340]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a54      	ldr	r2, [pc, #336]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd f93a 	bl	8000cd0 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd f936 	bl	8000cd0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0cb      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	4b49      	ldr	r3, [pc, #292]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCC_OscConfig+0x334>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fd f924 	bl	8000cd0 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fd f920 	bl	8000cd0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0b5      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ee      	bne.n	8003a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	4a38      	ldr	r2, [pc, #224]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a1 	beq.w	8003c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aca:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d05c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d141      	bne.n	8003b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b31      	ldr	r3, [pc, #196]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd f8f4 	bl	8000cd0 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fd f8f0 	bl	8000cd0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e087      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	3b01      	subs	r3, #1
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	491b      	ldr	r1, [pc, #108]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3a:	f7fd f8c9 	bl	8000cd0 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b42:	f7fd f8c5 	bl	8000cd0 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e05c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x416>
 8003b60:	e054      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd f8b2 	bl	8000cd0 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd f8ae 	bl	8000cd0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e045      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x444>
 8003b8e:	e03d      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d107      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e038      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d121      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d11a      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cc      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b68      	ldr	r3, [pc, #416]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a58      	ldr	r2, [pc, #352]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e067      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b37      	ldr	r3, [pc, #220]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4934      	ldr	r1, [pc, #208]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fc ffe0 	bl	8000cd0 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fc ffdc 	bl	8000cd0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc ff40 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	0800835c 	.word	0x0800835c
 8003de0:	20000000 	.word	0x20000000
 8003de4:	20000004 	.word	0x20000004

08003de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b094      	sub	sp, #80	@ 0x50
 8003dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e00:	4b79      	ldr	r3, [pc, #484]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d00d      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	f200 80e1 	bhi.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x34>
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e1a:	e0db      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b73      	ldr	r3, [pc, #460]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x204>)
 8003e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e20:	e0db      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e22:	4b73      	ldr	r3, [pc, #460]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e26:	e0d8      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e28:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e32:	4b6d      	ldr	r3, [pc, #436]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d063      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	2200      	movs	r2, #0
 8003e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e52:	2300      	movs	r3, #0
 8003e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	f04f 0000 	mov.w	r0, #0
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	0159      	lsls	r1, r3, #5
 8003e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6c:	0150      	lsls	r0, r2, #5
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4621      	mov	r1, r4
 8003e74:	1a51      	subs	r1, r2, r1
 8003e76:	6139      	str	r1, [r7, #16]
 8003e78:	4629      	mov	r1, r5
 8003e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	018b      	lsls	r3, r1, #6
 8003e90:	4651      	mov	r1, sl
 8003e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e96:	4651      	mov	r1, sl
 8003e98:	018a      	lsls	r2, r1, #6
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eba:	4690      	mov	r8, r2
 8003ebc:	4699      	mov	r9, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	eb18 0303 	adds.w	r3, r8, r3
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	eb49 0303 	adc.w	r3, r9, r3
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eda:	4629      	mov	r1, r5
 8003edc:	024b      	lsls	r3, r1, #9
 8003ede:	4621      	mov	r1, r4
 8003ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	024a      	lsls	r2, r1, #9
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eee:	2200      	movs	r2, #0
 8003ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ef8:	f7fc f96e 	bl	80001d8 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f04:	e058      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f06:	4b38      	ldr	r3, [pc, #224]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	4611      	mov	r1, r2
 8003f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	f04f 0000 	mov.w	r0, #0
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	0159      	lsls	r1, r3, #5
 8003f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f32:	0150      	lsls	r0, r2, #5
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4641      	mov	r1, r8
 8003f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f3e:	4649      	mov	r1, r9
 8003f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f58:	ebb2 040a 	subs.w	r4, r2, sl
 8003f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	00eb      	lsls	r3, r5, #3
 8003f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f6e:	00e2      	lsls	r2, r4, #3
 8003f70:	4614      	mov	r4, r2
 8003f72:	461d      	mov	r5, r3
 8003f74:	4643      	mov	r3, r8
 8003f76:	18e3      	adds	r3, r4, r3
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	eb45 0303 	adc.w	r3, r5, r3
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f8e:	4629      	mov	r1, r5
 8003f90:	028b      	lsls	r3, r1, #10
 8003f92:	4621      	mov	r1, r4
 8003f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f98:	4621      	mov	r1, r4
 8003f9a:	028a      	lsls	r2, r1, #10
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	61fa      	str	r2, [r7, #28]
 8003fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fac:	f7fc f914 	bl	80001d8 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd2:	e002      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x204>)
 8003fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3750      	adds	r7, #80	@ 0x50
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	00f42400 	.word	0x00f42400
 8003ff0:	007a1200 	.word	0x007a1200

08003ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000000 	.word	0x20000000

0800400c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004010:	f7ff fff0 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b05      	ldr	r3, [pc, #20]	@ (800402c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	0a9b      	lsrs	r3, r3, #10
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4903      	ldr	r1, [pc, #12]	@ (8004030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	0800836c 	.word	0x0800836c

08004034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e07b      	b.n	800413e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	2b00      	cmp	r3, #0
 800404c:	d108      	bne.n	8004060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004056:	d009      	beq.n	800406c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
 800405e:	e005      	b.n	800406c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fc fcd6 	bl	8000a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f0:	ea42 0103 	orr.w	r1, r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0104 	and.w	r1, r3, #4
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	f003 0210 	and.w	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800412c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004146:	b084      	sub	sp, #16
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	f107 001c 	add.w	r0, r7, #28
 8004154:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004158:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800415c:	2b01      	cmp	r3, #1
 800415e:	d123      	bne.n	80041a8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004188:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f001 fae9 	bl	8005774 <USB_CoreReset>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e01b      	b.n	80041e0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f001 fadd 	bl	8005774 <USB_CoreReset>
 80041ba:	4603      	mov	r3, r0
 80041bc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80041d2:	e005      	b.n	80041e0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041e0:	7fbb      	ldrb	r3, [r7, #30]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10b      	bne.n	80041fe <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f043 0206 	orr.w	r2, r3, #6
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f043 0220 	orr.w	r2, r3, #32
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800420a:	b004      	add	sp, #16
 800420c:	4770      	bx	lr
	...

08004210 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d165      	bne.n	80042f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4a41      	ldr	r2, [pc, #260]	@ (800432c <USB_SetTurnaroundTime+0x11c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d906      	bls.n	800423a <USB_SetTurnaroundTime+0x2a>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4a40      	ldr	r2, [pc, #256]	@ (8004330 <USB_SetTurnaroundTime+0x120>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d202      	bcs.n	800423a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004234:	230f      	movs	r3, #15
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e062      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4a3c      	ldr	r2, [pc, #240]	@ (8004330 <USB_SetTurnaroundTime+0x120>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d306      	bcc.n	8004250 <USB_SetTurnaroundTime+0x40>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4a3b      	ldr	r2, [pc, #236]	@ (8004334 <USB_SetTurnaroundTime+0x124>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d202      	bcs.n	8004250 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800424a:	230e      	movs	r3, #14
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	e057      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a38      	ldr	r2, [pc, #224]	@ (8004334 <USB_SetTurnaroundTime+0x124>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d306      	bcc.n	8004266 <USB_SetTurnaroundTime+0x56>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a37      	ldr	r2, [pc, #220]	@ (8004338 <USB_SetTurnaroundTime+0x128>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d202      	bcs.n	8004266 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004260:	230d      	movs	r3, #13
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e04c      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4a33      	ldr	r2, [pc, #204]	@ (8004338 <USB_SetTurnaroundTime+0x128>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d306      	bcc.n	800427c <USB_SetTurnaroundTime+0x6c>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4a32      	ldr	r2, [pc, #200]	@ (800433c <USB_SetTurnaroundTime+0x12c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d802      	bhi.n	800427c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004276:	230c      	movs	r3, #12
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e041      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4a2f      	ldr	r2, [pc, #188]	@ (800433c <USB_SetTurnaroundTime+0x12c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d906      	bls.n	8004292 <USB_SetTurnaroundTime+0x82>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a2e      	ldr	r2, [pc, #184]	@ (8004340 <USB_SetTurnaroundTime+0x130>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d802      	bhi.n	8004292 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800428c:	230b      	movs	r3, #11
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e036      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4a2a      	ldr	r2, [pc, #168]	@ (8004340 <USB_SetTurnaroundTime+0x130>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d906      	bls.n	80042a8 <USB_SetTurnaroundTime+0x98>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4a29      	ldr	r2, [pc, #164]	@ (8004344 <USB_SetTurnaroundTime+0x134>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d802      	bhi.n	80042a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042a2:	230a      	movs	r3, #10
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e02b      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4a26      	ldr	r2, [pc, #152]	@ (8004344 <USB_SetTurnaroundTime+0x134>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d906      	bls.n	80042be <USB_SetTurnaroundTime+0xae>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4a25      	ldr	r2, [pc, #148]	@ (8004348 <USB_SetTurnaroundTime+0x138>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d202      	bcs.n	80042be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042b8:	2309      	movs	r3, #9
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e020      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4a21      	ldr	r2, [pc, #132]	@ (8004348 <USB_SetTurnaroundTime+0x138>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d306      	bcc.n	80042d4 <USB_SetTurnaroundTime+0xc4>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4a20      	ldr	r2, [pc, #128]	@ (800434c <USB_SetTurnaroundTime+0x13c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d802      	bhi.n	80042d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042ce:	2308      	movs	r3, #8
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e015      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a1d      	ldr	r2, [pc, #116]	@ (800434c <USB_SetTurnaroundTime+0x13c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d906      	bls.n	80042ea <USB_SetTurnaroundTime+0xda>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a1c      	ldr	r2, [pc, #112]	@ (8004350 <USB_SetTurnaroundTime+0x140>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d202      	bcs.n	80042ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042e4:	2307      	movs	r3, #7
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e00a      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042ea:	2306      	movs	r3, #6
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e007      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042f6:	2309      	movs	r3, #9
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e001      	b.n	8004300 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042fc:	2309      	movs	r3, #9
 80042fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	029b      	lsls	r3, r3, #10
 8004314:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	00d8acbf 	.word	0x00d8acbf
 8004330:	00e4e1c0 	.word	0x00e4e1c0
 8004334:	00f42400 	.word	0x00f42400
 8004338:	01067380 	.word	0x01067380
 800433c:	011a499f 	.word	0x011a499f
 8004340:	01312cff 	.word	0x01312cff
 8004344:	014ca43f 	.word	0x014ca43f
 8004348:	016e3600 	.word	0x016e3600
 800434c:	01a6ab1f 	.word	0x01a6ab1f
 8004350:	01e84800 	.word	0x01e84800

08004354 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d115      	bne.n	80043e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043c6:	200a      	movs	r0, #10
 80043c8:	f7fc fc8e 	bl	8000ce8 <HAL_Delay>
      ms += 10U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	330a      	adds	r3, #10
 80043d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f001 f93f 	bl	8005656 <USB_GetMode>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d01e      	beq.n	800441c <USB_SetCurrentMode+0x84>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80043e2:	d9f0      	bls.n	80043c6 <USB_SetCurrentMode+0x2e>
 80043e4:	e01a      	b.n	800441c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d115      	bne.n	8004418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043f8:	200a      	movs	r0, #10
 80043fa:	f7fc fc75 	bl	8000ce8 <HAL_Delay>
      ms += 10U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	330a      	adds	r3, #10
 8004402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f001 f926 	bl	8005656 <USB_GetMode>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <USB_SetCurrentMode+0x84>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2bc7      	cmp	r3, #199	@ 0xc7
 8004414:	d9f0      	bls.n	80043f8 <USB_SetCurrentMode+0x60>
 8004416:	e001      	b.n	800441c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e005      	b.n	8004428 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004420:	d101      	bne.n	8004426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004430:	b084      	sub	sp, #16
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800443e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	e009      	b.n	8004464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3340      	adds	r3, #64	@ 0x40
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3301      	adds	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b0e      	cmp	r3, #14
 8004468:	d9f2      	bls.n	8004450 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800446a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11c      	bne.n	80044ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004496:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80044aa:	e00b      	b.n	80044c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10d      	bne.n	80044f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044e0:	2100      	movs	r1, #0
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f968 	bl	80047b8 <USB_SetDevSpeed>
 80044e8:	e008      	b.n	80044fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044ea:	2101      	movs	r1, #1
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f963 	bl	80047b8 <USB_SetDevSpeed>
 80044f2:	e003      	b.n	80044fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044f4:	2103      	movs	r1, #3
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f95e 	bl	80047b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044fc:	2110      	movs	r1, #16
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8fa 	bl	80046f8 <USB_FlushTxFifo>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f924 	bl	800475c <USB_FlushRxFifo>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004524:	461a      	mov	r2, r3
 8004526:	2300      	movs	r3, #0
 8004528:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004530:	461a      	mov	r2, r3
 8004532:	2300      	movs	r3, #0
 8004534:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800453c:	461a      	mov	r2, r3
 800453e:	2300      	movs	r3, #0
 8004540:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e043      	b.n	80045d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800455a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800455e:	d118      	bne.n	8004592 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004572:	461a      	mov	r2, r3
 8004574:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e013      	b.n	80045a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004588:	461a      	mov	r2, r3
 800458a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	e008      	b.n	80045a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459e:	461a      	mov	r2, r3
 80045a0:	2300      	movs	r3, #0
 80045a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b0:	461a      	mov	r2, r3
 80045b2:	2300      	movs	r3, #0
 80045b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c2:	461a      	mov	r2, r3
 80045c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	3301      	adds	r3, #1
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045d4:	461a      	mov	r2, r3
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4293      	cmp	r3, r2
 80045da:	d3b5      	bcc.n	8004548 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e043      	b.n	800466a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045f8:	d118      	bne.n	800462c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	e013      	b.n	800463e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004622:	461a      	mov	r2, r3
 8004624:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e008      	b.n	800463e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004638:	461a      	mov	r2, r3
 800463a:	2300      	movs	r3, #0
 800463c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464a:	461a      	mov	r2, r3
 800464c:	2300      	movs	r3, #0
 800464e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465c:	461a      	mov	r2, r3
 800465e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004662:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	3301      	adds	r3, #1
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800466e:	461a      	mov	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4293      	cmp	r3, r2
 8004674:	d3b5      	bcc.n	80045e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004688:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004696:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004698:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f043 0210 	orr.w	r2, r3, #16
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699a      	ldr	r2, [r3, #24]
 80046b0:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <USB_DevInit+0x2c4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f043 0208 	orr.w	r2, r3, #8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f0:	b004      	add	sp, #16
 80046f2:	4770      	bx	lr
 80046f4:	803c3800 	.word	0x803c3800

080046f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3301      	adds	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004712:	d901      	bls.n	8004718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e01b      	b.n	8004750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	daf2      	bge.n	8004706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	019b      	lsls	r3, r3, #6
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800473c:	d901      	bls.n	8004742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e006      	b.n	8004750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b20      	cmp	r3, #32
 800474c:	d0f0      	beq.n	8004730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004774:	d901      	bls.n	800477a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e018      	b.n	80047ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	daf2      	bge.n	8004768 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2210      	movs	r2, #16
 800478a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3301      	adds	r3, #1
 8004790:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004798:	d901      	bls.n	800479e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e006      	b.n	80047ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d0f0      	beq.n	800478c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b087      	sub	sp, #28
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0306 	and.w	r3, r3, #6
 8004802:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
 800480e:	e00a      	b.n	8004826 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d002      	beq.n	800481c <USB_GetDevSpeed+0x32>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b06      	cmp	r3, #6
 800481a:	d102      	bne.n	8004822 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800481c:	2302      	movs	r3, #2
 800481e:	75fb      	strb	r3, [r7, #23]
 8004820:	e001      	b.n	8004826 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004822:	230f      	movs	r3, #15
 8004824:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
}
 8004828:	4618      	mov	r0, r3
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d13a      	bne.n	80048c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	b29b      	uxth	r3, r3
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800486e:	4313      	orrs	r3, r2
 8004870:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d155      	bne.n	8004934 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	791b      	ldrb	r3, [r3, #4]
 80048a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	059b      	lsls	r3, r3, #22
 80048aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048ac:	4313      	orrs	r3, r2
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e036      	b.n	8004934 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	2101      	movs	r1, #1
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11a      	bne.n	8004934 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	791b      	ldrb	r3, [r3, #4]
 8004918:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800491a:	430b      	orrs	r3, r1
 800491c:	4313      	orrs	r3, r2
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800492e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004932:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d161      	bne.n	8004a24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004972:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004976:	d11f      	bne.n	80049b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	440a      	add	r2, r1
 800498e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004992:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004996:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	2101      	movs	r1, #1
 80049ca:	fa01 f303 	lsl.w	r3, r1, r3
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049d8:	4013      	ands	r3, r2
 80049da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049fc:	4013      	ands	r3, r2
 80049fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	0159      	lsls	r1, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	440b      	add	r3, r1
 8004a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4b35      	ldr	r3, [pc, #212]	@ (8004af4 <USB_DeactivateEndpoint+0x1b0>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
 8004a22:	e060      	b.n	8004ae6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a3a:	d11f      	bne.n	8004a7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	43db      	mvns	r3, r3
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	0159      	lsls	r1, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	440b      	add	r3, r1
 8004ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <USB_DeactivateEndpoint+0x1b4>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	ec337800 	.word	0xec337800
 8004af8:	eff37800 	.word	0xeff37800

08004afc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	@ 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	f040 817f 	bne.w	8004e1c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d132      	bne.n	8004b8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b84:	0cdb      	lsrs	r3, r3, #19
 8004b86:	04db      	lsls	r3, r3, #19
 8004b88:	6113      	str	r3, [r2, #16]
 8004b8a:	e097      	b.n	8004cbc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ba6:	0cdb      	lsrs	r3, r3, #19
 8004ba8:	04db      	lsls	r3, r3, #19
 8004baa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bc6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11a      	bne.n	8004c0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d903      	bls.n	8004bea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c08:	6113      	str	r3, [r2, #16]
 8004c0a:	e044      	b.n	8004c96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4413      	add	r3, r2
 8004c16:	1e5a      	subs	r2, r3, #1
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	8afb      	ldrh	r3, [r7, #22]
 8004c32:	04d9      	lsls	r1, r3, #19
 8004c34:	4ba4      	ldr	r3, [pc, #656]	@ (8004ec8 <USB_EPStartXfer+0x3cc>)
 8004c36:	400b      	ands	r3, r1
 8004c38:	69b9      	ldr	r1, [r7, #24]
 8004c3a:	0148      	lsls	r0, r1, #5
 8004c3c:	69f9      	ldr	r1, [r7, #28]
 8004c3e:	4401      	add	r1, r0
 8004c40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c44:	4313      	orrs	r3, r2
 8004c46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	791b      	ldrb	r3, [r3, #4]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d122      	bne.n	8004c96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004c6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	8afb      	ldrh	r3, [r7, #22]
 8004c80:	075b      	lsls	r3, r3, #29
 8004c82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004c86:	69b9      	ldr	r1, [r7, #24]
 8004c88:	0148      	lsls	r0, r1, #5
 8004c8a:	69f9      	ldr	r1, [r7, #28]
 8004c8c:	4401      	add	r1, r0
 8004c8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c92:	4313      	orrs	r3, r2
 8004c94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	0148      	lsls	r0, r1, #5
 8004cb0:	69f9      	ldr	r1, [r7, #28]
 8004cb2:	4401      	add	r1, r0
 8004cb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d14b      	bne.n	8004d5a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	791b      	ldrb	r3, [r3, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d128      	bne.n	8004d38 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d110      	bne.n	8004d18 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e00f      	b.n	8004d38 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e166      	b.n	8005028 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d78:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	791b      	ldrb	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d015      	beq.n	8004dae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 814e 	beq.w	8005028 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	69f9      	ldr	r1, [r7, #28]
 8004da4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004da8:	4313      	orrs	r3, r2
 8004daa:	634b      	str	r3, [r1, #52]	@ 0x34
 8004dac:	e13c      	b.n	8005028 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d110      	bne.n	8004de0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e00f      	b.n	8004e00 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	68d9      	ldr	r1, [r3, #12]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781a      	ldrb	r2, [r3, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	b298      	uxth	r0, r3
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4603      	mov	r3, r0
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f9b9 	bl	800518c <USB_WritePacket>
 8004e1a:	e105      	b.n	8005028 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e36:	0cdb      	lsrs	r3, r3, #19
 8004e38:	04db      	lsls	r3, r3, #19
 8004e3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004e5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004e5e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d132      	bne.n	8004ecc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	0148      	lsls	r0, r1, #5
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	4401      	add	r1, r0
 8004e9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ebe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ec2:	6113      	str	r3, [r2, #16]
 8004ec4:	e062      	b.n	8004f8c <USB_EPStartXfer+0x490>
 8004ec6:	bf00      	nop
 8004ec8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d123      	bne.n	8004f1c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eea:	69b9      	ldr	r1, [r7, #24]
 8004eec:	0148      	lsls	r0, r1, #5
 8004eee:	69f9      	ldr	r1, [r7, #28]
 8004ef0:	4401      	add	r1, r0
 8004ef2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f18:	6113      	str	r3, [r2, #16]
 8004f1a:	e037      	b.n	8004f8c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	1e5a      	subs	r2, r3, #1
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	8afa      	ldrh	r2, [r7, #22]
 8004f38:	fb03 f202 	mul.w	r2, r3, r2
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	8afb      	ldrh	r3, [r7, #22]
 8004f50:	04d9      	lsls	r1, r3, #19
 8004f52:	4b38      	ldr	r3, [pc, #224]	@ (8005034 <USB_EPStartXfer+0x538>)
 8004f54:	400b      	ands	r3, r1
 8004f56:	69b9      	ldr	r1, [r7, #24]
 8004f58:	0148      	lsls	r0, r1, #5
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	4401      	add	r1, r0
 8004f5e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f62:	4313      	orrs	r3, r2
 8004f64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7c:	69b9      	ldr	r1, [r7, #24]
 8004f7e:	0148      	lsls	r0, r1, #5
 8004f80:	69f9      	ldr	r1, [r7, #28]
 8004f82:	4401      	add	r1, r0
 8004f84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10d      	bne.n	8004fae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	68d9      	ldr	r1, [r3, #12]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004faa:	460a      	mov	r2, r1
 8004fac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	791b      	ldrb	r3, [r3, #4]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d128      	bne.n	8005008 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d110      	bne.n	8004fe8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fe0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e00f      	b.n	8005008 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005006:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005022:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	1ff80000 	.word	0x1ff80000

08005038 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d14a      	bne.n	80050ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800506a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800506e:	f040 8086 	bne.w	800517e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005090:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005094:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	0151      	lsls	r1, r2, #5
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	440a      	add	r2, r1
 80050b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3301      	adds	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d902      	bls.n	80050d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	75fb      	strb	r3, [r7, #23]
          break;
 80050ce:	e056      	b.n	800517e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e8:	d0e7      	beq.n	80050ba <USB_EPStopXfer+0x82>
 80050ea:	e048      	b.n	800517e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005104:	d13b      	bne.n	800517e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005124:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005128:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	7812      	ldrb	r2, [r2, #0]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005148:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800514c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f242 7210 	movw	r2, #10000	@ 0x2710
 800515a:	4293      	cmp	r3, r2
 800515c:	d902      	bls.n	8005164 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
          break;
 8005162:	e00c      	b.n	800517e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800517c:	d0e7      	beq.n	800514e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	@ 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	460b      	mov	r3, r1
 800519c:	71fb      	strb	r3, [r7, #7]
 800519e:	4613      	mov	r3, r2
 80051a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d123      	bne.n	80051fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051b2:	88bb      	ldrh	r3, [r7, #4]
 80051b4:	3303      	adds	r3, #3
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e018      	b.n	80051f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	031a      	lsls	r2, r3, #12
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051cc:	461a      	mov	r2, r3
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	3301      	adds	r3, #1
 80051d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3301      	adds	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	3301      	adds	r3, #1
 80051ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	3301      	adds	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d3e2      	bcc.n	80051c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3724      	adds	r7, #36	@ 0x24
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005208:	b480      	push	{r7}
 800520a:	b08b      	sub	sp, #44	@ 0x2c
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	089b      	lsrs	r3, r3, #2
 8005222:	b29b      	uxth	r3, r3
 8005224:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	e014      	b.n	800525e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	3301      	adds	r3, #1
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	3301      	adds	r3, #1
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	3301      	adds	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	3301      	adds	r3, #1
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	3301      	adds	r3, #1
 800525c:	623b      	str	r3, [r7, #32]
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	429a      	cmp	r2, r3
 8005264:	d3e6      	bcc.n	8005234 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005266:	8bfb      	ldrh	r3, [r7, #30]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01e      	beq.n	80052aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005276:	461a      	mov	r2, r3
 8005278:	f107 0310 	add.w	r3, r7, #16
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
 800528c:	b2da      	uxtb	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	701a      	strb	r2, [r3, #0]
      i++;
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	3301      	adds	r3, #1
 8005296:	623b      	str	r3, [r7, #32]
      pDest++;
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	3301      	adds	r3, #1
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800529e:	8bfb      	ldrh	r3, [r7, #30]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052a4:	8bfb      	ldrh	r3, [r7, #30]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ea      	bne.n	8005280 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	372c      	adds	r7, #44	@ 0x2c
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d12c      	bne.n	800532e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	db12      	blt.n	800530c <USB_EPSetStall+0x54>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00f      	beq.n	800530c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005306:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800530a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005326:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e02b      	b.n	8005386 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db12      	blt.n	8005366 <USB_EPSetStall+0xae>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00f      	beq.n	8005366 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005360:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005364:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005380:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005384:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d128      	bne.n	8005402 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	791b      	ldrb	r3, [r3, #4]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d003      	beq.n	80053e0 <USB_EPClearStall+0x4c>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	791b      	ldrb	r3, [r3, #4]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d138      	bne.n	8005452 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e027      	b.n	8005452 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800541c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005420:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	791b      	ldrb	r3, [r3, #4]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d003      	beq.n	8005432 <USB_EPClearStall+0x9e>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	791b      	ldrb	r3, [r3, #4]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d10f      	bne.n	8005452 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800544c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005450:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005482:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054da:	f023 0302 	bic.w	r3, r3, #2
 80054de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005508:	f023 0303 	bic.w	r3, r3, #3
 800550c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	4013      	ands	r3, r2
 8005578:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	0c1b      	lsrs	r3, r3, #16
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	b29b      	uxth	r3, r3
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055ec:	68bb      	ldr	r3, [r7, #8]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b087      	sub	sp, #28
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	fa22 f303 	lsr.w	r3, r2, r3
 800562a:	01db      	lsls	r3, r3, #7
 800562c:	b2db      	uxtb	r3, r3
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005648:	68bb      	ldr	r3, [r7, #8]
}
 800564a:	4618      	mov	r0, r3
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f003 0301 	and.w	r3, r3, #1
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800568c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005690:	f023 0307 	bic.w	r3, r3, #7
 8005694:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	460b      	mov	r3, r1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	333c      	adds	r3, #60	@ 0x3c
 80056ce:	3304      	adds	r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4a26      	ldr	r2, [pc, #152]	@ (8005770 <USB_EP0_OutStart+0xb8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d90a      	bls.n	80056f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ec:	d101      	bne.n	80056f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e037      	b.n	8005762 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2300      	movs	r3, #0
 80056fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005720:	f043 0318 	orr.w	r3, r3, #24
 8005724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005734:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005738:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10f      	bne.n	8005760 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800575a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800575e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	4f54300a 	.word	0x4f54300a

08005774 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800578c:	d901      	bls.n	8005792 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e022      	b.n	80057d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	daf2      	bge.n	8005780 <USB_CoreReset+0xc>

  count = 10U;
 800579a:	230a      	movs	r3, #10
 800579c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800579e:	e002      	b.n	80057a6 <USB_CoreReset+0x32>
  {
    count--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f9      	bne.n	80057a0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057c4:	d901      	bls.n	80057ca <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e006      	b.n	80057d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d0f0      	beq.n	80057b8 <USB_CoreReset+0x44>

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80057f0:	2054      	movs	r0, #84	@ 0x54
 80057f2:	f002 fcf7 	bl	80081e4 <USBD_static_malloc>
 80057f6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	32b0      	adds	r2, #176	@ 0xb0
 8005808:	2100      	movs	r1, #0
 800580a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800580e:	2302      	movs	r3, #2
 8005810:	e08b      	b.n	800592a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32b0      	adds	r2, #176	@ 0xb0
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	32b0      	adds	r2, #176	@ 0xb0
 800582c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	7c1b      	ldrb	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d11b      	bne.n	8005876 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800583e:	4b3d      	ldr	r3, [pc, #244]	@ (8005934 <USBD_CUSTOM_HID_Init+0x150>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	331c      	adds	r3, #28
 8005854:	2205      	movs	r2, #5
 8005856:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005858:	4b37      	ldr	r3, [pc, #220]	@ (8005938 <USBD_CUSTOM_HID_Init+0x154>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f003 020f 	and.w	r2, r3, #15
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005870:	2205      	movs	r2, #5
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e01a      	b.n	80058ac <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005876:	4b2f      	ldr	r3, [pc, #188]	@ (8005934 <USBD_CUSTOM_HID_Init+0x150>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	331c      	adds	r3, #28
 800588c:	2205      	movs	r2, #5
 800588e:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005890:	4b29      	ldr	r3, [pc, #164]	@ (8005938 <USBD_CUSTOM_HID_Init+0x154>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f003 020f 	and.w	r2, r3, #15
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80058a8:	2205      	movs	r2, #5
 80058aa:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80058ac:	4b21      	ldr	r3, [pc, #132]	@ (8005934 <USBD_CUSTOM_HID_Init+0x150>)
 80058ae:	7819      	ldrb	r1, [r3, #0]
 80058b0:	2340      	movs	r3, #64	@ 0x40
 80058b2:	2203      	movs	r2, #3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f002 fb84 	bl	8007fc2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80058ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005934 <USBD_CUSTOM_HID_Init+0x150>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f003 020f 	and.w	r2, r3, #15
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	3323      	adds	r3, #35	@ 0x23
 80058d0:	2201      	movs	r2, #1
 80058d2:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80058d4:	4b18      	ldr	r3, [pc, #96]	@ (8005938 <USBD_CUSTOM_HID_Init+0x154>)
 80058d6:	7819      	ldrb	r1, [r3, #0]
 80058d8:	2340      	movs	r3, #64	@ 0x40
 80058da:	2203      	movs	r2, #3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f002 fb70 	bl	8007fc2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80058e2:	4b15      	ldr	r3, [pc, #84]	@ (8005938 <USBD_CUSTOM_HID_Init+0x154>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f003 020f 	and.w	r2, r3, #15
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80058fa:	2201      	movs	r2, #1
 80058fc:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	33b0      	adds	r3, #176	@ 0xb0
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800591a:	4b07      	ldr	r3, [pc, #28]	@ (8005938 <USBD_CUSTOM_HID_Init+0x154>)
 800591c:	7819      	ldrb	r1, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	2340      	movs	r3, #64	@ 0x40
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f002 fc3c 	bl	80081a0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000086 	.word	0x20000086
 8005938:	20000087 	.word	0x20000087

0800593c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005948:	4b37      	ldr	r3, [pc, #220]	@ (8005a28 <USBD_CUSTOM_HID_DeInit+0xec>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f002 fb5d 	bl	800800e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005954:	4b34      	ldr	r3, [pc, #208]	@ (8005a28 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3323      	adds	r3, #35	@ 0x23
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800596e:	4b2e      	ldr	r3, [pc, #184]	@ (8005a28 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f003 020f 	and.w	r2, r3, #15
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	331c      	adds	r3, #28
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005988:	4b28      	ldr	r3, [pc, #160]	@ (8005a2c <USBD_CUSTOM_HID_DeInit+0xf0>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f002 fb3d 	bl	800800e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005994:	4b25      	ldr	r3, [pc, #148]	@ (8005a2c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 020f 	and.w	r2, r3, #15
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80059b0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a2c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	32b0      	adds	r2, #176	@ 0xb0
 80059d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01f      	beq.n	8005a1e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	33b0      	adds	r3, #176	@ 0xb0
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	32b0      	adds	r2, #176	@ 0xb0
 80059fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f002 fbfd 	bl	8008200 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	32b0      	adds	r2, #176	@ 0xb0
 8005a10:	2100      	movs	r1, #0
 8005a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000086 	.word	0x20000086
 8005a2c:	20000087 	.word	0x20000087

08005a30 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	32b0      	adds	r2, #176	@ 0xb0
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e108      	b.n	8005c76 <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d05c      	beq.n	8005b2a <USBD_CUSTOM_HID_Setup+0xfa>
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	f040 80f8 	bne.w	8005c66 <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	3b02      	subs	r3, #2
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d84c      	bhi.n	8005b1a <USBD_CUSTOM_HID_Setup+0xea>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <USBD_CUSTOM_HID_Setup+0x58>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005ae1 	.word	0x08005ae1
 8005a8c:	08005abf 	.word	0x08005abf
 8005a90:	08005b1b 	.word	0x08005b1b
 8005a94:	08005b1b 	.word	0x08005b1b
 8005a98:	08005b1b 	.word	0x08005b1b
 8005a9c:	08005b1b 	.word	0x08005b1b
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005af1 	.word	0x08005af1
 8005aa8:	08005acf 	.word	0x08005acf
 8005aac:	08005ab1 	.word	0x08005ab1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	885b      	ldrh	r3, [r3, #2]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8005abc:	e034      	b.n	8005b28 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3340      	adds	r3, #64	@ 0x40
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 fcfa 	bl	80074c0 <USBD_CtlSendData>
          break;
 8005acc:	e02c      	b.n	8005b28 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	885b      	ldrh	r3, [r3, #2]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8005ade:	e023      	b.n	8005b28 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3344      	adds	r3, #68	@ 0x44
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 fce9 	bl	80074c0 <USBD_CtlSendData>
          break;
 8005aee:	e01b      	b.n	8005b28 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	88db      	ldrh	r3, [r3, #6]
 8005af4:	2b40      	cmp	r3, #64	@ 0x40
 8005af6:	d905      	bls.n	8005b04 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 fc63 	bl	80073c6 <USBD_CtlError>
            return USBD_FAIL;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0b8      	b.n	8005c76 <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2201      	movs	r2, #1
 8005b08:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005b0a:	6939      	ldr	r1, [r7, #16]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	88db      	ldrh	r3, [r3, #6]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 fd03 	bl	800751e <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005b18:	e006      	b.n	8005b28 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 fc52 	bl	80073c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b22:	2303      	movs	r3, #3
 8005b24:	75fb      	strb	r3, [r7, #23]
          break;
 8005b26:	bf00      	nop
      }
      break;
 8005b28:	e0a4      	b.n	8005c74 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b0b      	cmp	r3, #11
 8005b30:	f200 8090 	bhi.w	8005c54 <USBD_CUSTOM_HID_Setup+0x224>
 8005b34:	a201      	add	r2, pc, #4	@ (adr r2, 8005b3c <USBD_CUSTOM_HID_Setup+0x10c>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b6d 	.word	0x08005b6d
 8005b40:	08005c63 	.word	0x08005c63
 8005b44:	08005c55 	.word	0x08005c55
 8005b48:	08005c55 	.word	0x08005c55
 8005b4c:	08005c55 	.word	0x08005c55
 8005b50:	08005c55 	.word	0x08005c55
 8005b54:	08005b97 	.word	0x08005b97
 8005b58:	08005c55 	.word	0x08005c55
 8005b5c:	08005c55 	.word	0x08005c55
 8005b60:	08005c55 	.word	0x08005c55
 8005b64:	08005c03 	.word	0x08005c03
 8005b68:	08005c2d 	.word	0x08005c2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d107      	bne.n	8005b88 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b78:	f107 030e 	add.w	r3, r7, #14
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fc9d 	bl	80074c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b86:	e06d      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 fc1b 	bl	80073c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b90:	2303      	movs	r3, #3
 8005b92:	75fb      	strb	r3, [r7, #23]
          break;
 8005b94:	e066      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	885b      	ldrh	r3, [r3, #2]
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b22      	cmp	r3, #34	@ 0x22
 8005ba0:	d110      	bne.n	8005bc4 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	88db      	ldrh	r3, [r3, #6]
 8005ba6:	2b1b      	cmp	r3, #27
 8005ba8:	bf28      	it	cs
 8005baa:	231b      	movcs	r3, #27
 8005bac:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	33b0      	adds	r3, #176	@ 0xb0
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	e00d      	b.n	8005be0 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	885b      	ldrh	r3, [r3, #2]
 8005bc8:	0a1b      	lsrs	r3, r3, #8
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b21      	cmp	r3, #33	@ 0x21
 8005bce:	d107      	bne.n	8005be0 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c80 <USBD_CUSTOM_HID_Setup+0x250>)
 8005bd2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	88db      	ldrh	r3, [r3, #6]
 8005bd8:	2b09      	cmp	r3, #9
 8005bda:	bf28      	it	cs
 8005bdc:	2309      	movcs	r3, #9
 8005bde:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d006      	beq.n	8005bf4 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8005be6:	8bfb      	ldrh	r3, [r7, #30]
 8005be8:	461a      	mov	r2, r3
 8005bea:	69b9      	ldr	r1, [r7, #24]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 fc67 	bl	80074c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bf2:	e037      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fbe5 	bl	80073c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	75fb      	strb	r3, [r7, #23]
          break;
 8005c00:	e030      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d107      	bne.n	8005c1e <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3348      	adds	r3, #72	@ 0x48
 8005c12:	2201      	movs	r2, #1
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 fc52 	bl	80074c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c1c:	e022      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 fbd0 	bl	80073c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c26:	2303      	movs	r3, #3
 8005c28:	75fb      	strb	r3, [r7, #23]
          break;
 8005c2a:	e01b      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d106      	bne.n	8005c46 <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	885b      	ldrh	r3, [r3, #2]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c44:	e00e      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 fbbc 	bl	80073c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	75fb      	strb	r3, [r7, #23]
          break;
 8005c52:	e007      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 fbb5 	bl	80073c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8005c60:	e000      	b.n	8005c64 <USBD_CUSTOM_HID_Setup+0x234>
          break;
 8005c62:	bf00      	nop
      }
      break;
 8005c64:	e006      	b.n	8005c74 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 fbac 	bl	80073c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	75fb      	strb	r3, [r7, #23]
      break;
 8005c72:	bf00      	nop
  }
  return (uint8_t)ret;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000070 	.word	0x20000070

08005c84 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	32b0      	adds	r2, #176	@ 0xb0
 8005c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e019      	b.n	8005ce0 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d112      	bne.n	8005cde <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005cca:	4b07      	ldr	r3, [pc, #28]	@ (8005ce8 <USBD_CUSTOM_HID_SendReport+0x64>)
 8005ccc:	7819      	ldrb	r1, [r3, #0]
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f002 fa43 	bl	800815e <USBD_LL_Transmit>
 8005cd8:	e001      	b.n	8005cde <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000086 	.word	0x20000086

08005cec <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005cf4:	2181      	movs	r1, #129	@ 0x81
 8005cf6:	4815      	ldr	r0, [pc, #84]	@ (8005d4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005cf8:	f000 fd2c 	bl	8006754 <USBD_GetEpDesc>
 8005cfc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4812      	ldr	r0, [pc, #72]	@ (8005d4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005d02:	f000 fd27 	bl	8006754 <USBD_GetEpDesc>
 8005d06:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d16:	711a      	strb	r2, [r3, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2205      	movs	r2, #5
 8005d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d30:	711a      	strb	r2, [r3, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2205      	movs	r2, #5
 8005d3a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2229      	movs	r2, #41	@ 0x29
 8005d40:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005d42:	4b02      	ldr	r3, [pc, #8]	@ (8005d4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000044 	.word	0x20000044

08005d50 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005d58:	2181      	movs	r1, #129	@ 0x81
 8005d5a:	4815      	ldr	r0, [pc, #84]	@ (8005db0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005d5c:	f000 fcfa 	bl	8006754 <USBD_GetEpDesc>
 8005d60:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005d62:	2101      	movs	r1, #1
 8005d64:	4812      	ldr	r0, [pc, #72]	@ (8005db0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005d66:	f000 fcf5 	bl	8006754 <USBD_GetEpDesc>
 8005d6a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d7a:	711a      	strb	r2, [r3, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2205      	movs	r2, #5
 8005d84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d009      	beq.n	8005da0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d94:	711a      	strb	r2, [r3, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2205      	movs	r2, #5
 8005d9e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2229      	movs	r2, #41	@ 0x29
 8005da4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005da6:	4b02      	ldr	r3, [pc, #8]	@ (8005db0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000044 	.word	0x20000044

08005db4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005dbc:	2181      	movs	r1, #129	@ 0x81
 8005dbe:	4815      	ldr	r0, [pc, #84]	@ (8005e14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005dc0:	f000 fcc8 	bl	8006754 <USBD_GetEpDesc>
 8005dc4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4812      	ldr	r0, [pc, #72]	@ (8005e14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005dca:	f000 fcc3 	bl	8006754 <USBD_GetEpDesc>
 8005dce:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dde:	711a      	strb	r2, [r3, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2205      	movs	r2, #5
 8005de8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d009      	beq.n	8005e04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005df8:	711a      	strb	r2, [r3, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2205      	movs	r2, #5
 8005e02:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2229      	movs	r2, #41	@ 0x29
 8005e08:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005e0a:	4b02      	ldr	r3, [pc, #8]	@ (8005e14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20000044 	.word	0x20000044

08005e18 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	32b0      	adds	r2, #176	@ 0xb0
 8005e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	32b0      	adds	r2, #176	@ 0xb0
 8005e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e014      	b.n	8005e92 <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	32b0      	adds	r2, #176	@ 0xb0
 8005e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	33b0      	adds	r3, #176	@ 0xb0
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4798      	blx	r3
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32b0      	adds	r2, #176	@ 0xb0
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e00f      	b.n	8005eda <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	32b0      	adds	r2, #176	@ 0xb0
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005ecc:	7819      	ldrb	r1, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	2340      	movs	r3, #64	@ 0x40
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 f964 	bl	80081a0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000087 	.word	0x20000087

08005ee8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	32b0      	adds	r2, #176	@ 0xb0
 8005efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efe:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e013      	b.n	8005f32 <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10e      	bne.n	8005f30 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	33b0      	adds	r3, #176	@ 0xb0
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4610      	mov	r0, r2
 8005f28:	4798      	blx	r3
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	220a      	movs	r2, #10
 8005f48:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005f4a:	4b03      	ldr	r3, [pc, #12]	@ (8005f58 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	2000007c 	.word	0x2000007c

08005f5c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e009      	b.n	8005f84 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	33b0      	adds	r3, #176	@ 0xb0
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e01f      	b.n	8005fe8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	79fa      	ldrb	r2, [r7, #7]
 8005fda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f001 ff89 	bl	8007ef4 <USBD_LL_Init>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006004:	2303      	movs	r3, #3
 8006006:	e025      	b.n	8006054 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	32ae      	adds	r2, #174	@ 0xae
 800601a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00f      	beq.n	8006044 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	32ae      	adds	r2, #174	@ 0xae
 800602e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006034:	f107 020e 	add.w	r2, r7, #14
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
 800603c:	4602      	mov	r2, r0
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 ff91 	bl	8007f8c <USBD_LL_Start>
 800606a:	4603      	mov	r3, r0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800607c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	4611      	mov	r1, r2
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	4611      	mov	r1, r2
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80060e8:	2303      	movs	r3, #3
 80060ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f001 f922 	bl	8007352 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800611c:	461a      	mov	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2b02      	cmp	r3, #2
 8006130:	d01a      	beq.n	8006168 <USBD_LL_SetupStage+0x72>
 8006132:	2b02      	cmp	r3, #2
 8006134:	d822      	bhi.n	800617c <USBD_LL_SetupStage+0x86>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <USBD_LL_SetupStage+0x4a>
 800613a:	2b01      	cmp	r3, #1
 800613c:	d00a      	beq.n	8006154 <USBD_LL_SetupStage+0x5e>
 800613e:	e01d      	b.n	800617c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fb77 	bl	800683c <USBD_StdDevReq>
 800614e:	4603      	mov	r3, r0
 8006150:	73fb      	strb	r3, [r7, #15]
      break;
 8006152:	e020      	b.n	8006196 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fbdf 	bl	8006920 <USBD_StdItfReq>
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]
      break;
 8006166:	e016      	b.n	8006196 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fc41 	bl	80069f8 <USBD_StdEPReq>
 8006176:	4603      	mov	r3, r0
 8006178:	73fb      	strb	r3, [r7, #15]
      break;
 800617a:	e00c      	b.n	8006196 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006182:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006186:	b2db      	uxtb	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 ff5e 	bl	800804c <USBD_LL_StallEP>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]
      break;
 8006194:	bf00      	nop
  }

  return ret;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	460b      	mov	r3, r1
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80061b2:	7afb      	ldrb	r3, [r7, #11]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d177      	bne.n	80062a8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80061be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	f040 80a1 	bne.w	800630e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	8992      	ldrh	r2, [r2, #12]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d91c      	bls.n	8006212 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	8992      	ldrh	r2, [r2, #12]
 80061e0:	1a9a      	subs	r2, r3, r2
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	8992      	ldrh	r2, [r2, #12]
 80061ee:	441a      	add	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	6919      	ldr	r1, [r3, #16]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	899b      	ldrh	r3, [r3, #12]
 80061fc:	461a      	mov	r2, r3
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4293      	cmp	r3, r2
 8006204:	bf38      	it	cc
 8006206:	4613      	movcc	r3, r2
 8006208:	461a      	mov	r2, r3
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f001 f9a8 	bl	8007560 <USBD_CtlContinueRx>
 8006210:	e07d      	b.n	800630e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2b02      	cmp	r3, #2
 800621e:	d014      	beq.n	800624a <USBD_LL_DataOutStage+0xaa>
 8006220:	2b02      	cmp	r3, #2
 8006222:	d81d      	bhi.n	8006260 <USBD_LL_DataOutStage+0xc0>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <USBD_LL_DataOutStage+0x8e>
 8006228:	2b01      	cmp	r3, #1
 800622a:	d003      	beq.n	8006234 <USBD_LL_DataOutStage+0x94>
 800622c:	e018      	b.n	8006260 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	75bb      	strb	r3, [r7, #22]
            break;
 8006232:	e018      	b.n	8006266 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800623a:	b2db      	uxtb	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fa6e 	bl	8006720 <USBD_CoreFindIF>
 8006244:	4603      	mov	r3, r0
 8006246:	75bb      	strb	r3, [r7, #22]
            break;
 8006248:	e00d      	b.n	8006266 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4619      	mov	r1, r3
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fa70 	bl	800673a <USBD_CoreFindEP>
 800625a:	4603      	mov	r3, r0
 800625c:	75bb      	strb	r3, [r7, #22]
            break;
 800625e:	e002      	b.n	8006266 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	75bb      	strb	r3, [r7, #22]
            break;
 8006264:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006266:	7dbb      	ldrb	r3, [r7, #22]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d119      	bne.n	80062a0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b03      	cmp	r3, #3
 8006276:	d113      	bne.n	80062a0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006278:	7dba      	ldrb	r2, [r7, #22]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	32ae      	adds	r2, #174	@ 0xae
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006288:	7dba      	ldrb	r2, [r7, #22]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006290:	7dba      	ldrb	r2, [r7, #22]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	32ae      	adds	r2, #174	@ 0xae
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f001 f96e 	bl	8007582 <USBD_CtlSendStatus>
 80062a6:	e032      	b.n	800630e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	4619      	mov	r1, r3
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fa41 	bl	800673a <USBD_CoreFindEP>
 80062b8:	4603      	mov	r3, r0
 80062ba:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062bc:	7dbb      	ldrb	r3, [r7, #22]
 80062be:	2bff      	cmp	r3, #255	@ 0xff
 80062c0:	d025      	beq.n	800630e <USBD_LL_DataOutStage+0x16e>
 80062c2:	7dbb      	ldrb	r3, [r7, #22]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d122      	bne.n	800630e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d117      	bne.n	8006304 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80062d4:	7dba      	ldrb	r2, [r7, #22]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	32ae      	adds	r2, #174	@ 0xae
 80062da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00f      	beq.n	8006304 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80062e4:	7dba      	ldrb	r2, [r7, #22]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80062ec:	7dba      	ldrb	r2, [r7, #22]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	32ae      	adds	r2, #174	@ 0xae
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	7afa      	ldrb	r2, [r7, #11]
 80062fa:	4611      	mov	r1, r2
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	4798      	blx	r3
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	e000      	b.n	8006310 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	460b      	mov	r3, r1
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d178      	bne.n	800641e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3314      	adds	r3, #20
 8006330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006338:	2b02      	cmp	r3, #2
 800633a:	d163      	bne.n	8006404 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	8992      	ldrh	r2, [r2, #12]
 8006344:	4293      	cmp	r3, r2
 8006346:	d91c      	bls.n	8006382 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	8992      	ldrh	r2, [r2, #12]
 8006350:	1a9a      	subs	r2, r3, r2
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	8992      	ldrh	r2, [r2, #12]
 800635e:	441a      	add	r2, r3
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6919      	ldr	r1, [r3, #16]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	461a      	mov	r2, r3
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f001 f8c4 	bl	80074fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006374:	2300      	movs	r3, #0
 8006376:	2200      	movs	r2, #0
 8006378:	2100      	movs	r1, #0
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f001 ff10 	bl	80081a0 <USBD_LL_PrepareReceive>
 8006380:	e040      	b.n	8006404 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	899b      	ldrh	r3, [r3, #12]
 8006386:	461a      	mov	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	d11c      	bne.n	80063ca <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006398:	4293      	cmp	r3, r2
 800639a:	d316      	bcc.n	80063ca <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d20f      	bcs.n	80063ca <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063aa:	2200      	movs	r2, #0
 80063ac:	2100      	movs	r1, #0
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f001 f8a4 	bl	80074fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063bc:	2300      	movs	r3, #0
 80063be:	2200      	movs	r2, #0
 80063c0:	2100      	movs	r1, #0
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f001 feec 	bl	80081a0 <USBD_LL_PrepareReceive>
 80063c8:	e01c      	b.n	8006404 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d10f      	bne.n	80063f6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063f6:	2180      	movs	r1, #128	@ 0x80
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f001 fe27 	bl	800804c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f001 f8d2 	bl	80075a8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d03a      	beq.n	8006484 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff fe30 	bl	8006074 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800641c:	e032      	b.n	8006484 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800641e:	7afb      	ldrb	r3, [r7, #11]
 8006420:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006424:	b2db      	uxtb	r3, r3
 8006426:	4619      	mov	r1, r3
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f986 	bl	800673a <USBD_CoreFindEP>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2bff      	cmp	r3, #255	@ 0xff
 8006436:	d025      	beq.n	8006484 <USBD_LL_DataInStage+0x16c>
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d122      	bne.n	8006484 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b03      	cmp	r3, #3
 8006448:	d11c      	bne.n	8006484 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800644a:	7dfa      	ldrb	r2, [r7, #23]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	32ae      	adds	r2, #174	@ 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d014      	beq.n	8006484 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800645a:	7dfa      	ldrb	r2, [r7, #23]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006462:	7dfa      	ldrb	r2, [r7, #23]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	32ae      	adds	r2, #174	@ 0xae
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	7afa      	ldrb	r2, [r7, #11]
 8006470:	4611      	mov	r1, r2
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	4798      	blx	r3
 8006476:	4603      	mov	r3, r0
 8006478:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800647a:	7dbb      	ldrb	r3, [r7, #22]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006480:	7dbb      	ldrb	r3, [r7, #22]
 8006482:	e000      	b.n	8006486 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d014      	beq.n	80064f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00e      	beq.n	80064f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6852      	ldr	r2, [r2, #4]
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	4611      	mov	r1, r2
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80064f0:	2303      	movs	r3, #3
 80064f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064f4:	2340      	movs	r3, #64	@ 0x40
 80064f6:	2200      	movs	r2, #0
 80064f8:	2100      	movs	r1, #0
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fd61 	bl	8007fc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2240      	movs	r2, #64	@ 0x40
 800650c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006510:	2340      	movs	r3, #64	@ 0x40
 8006512:	2200      	movs	r2, #0
 8006514:	2180      	movs	r1, #128	@ 0x80
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fd53 	bl	8007fc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2240      	movs	r2, #64	@ 0x40
 8006528:	841a      	strh	r2, [r3, #32]

  return ret;
 800652a:	7bfb      	ldrb	r3, [r7, #15]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b04      	cmp	r3, #4
 8006566:	d006      	beq.n	8006576 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800656e:	b2da      	uxtb	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2204      	movs	r2, #4
 800657a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b04      	cmp	r3, #4
 800659e:	d106      	bne.n	80065ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d110      	bne.n	80065f2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	32ae      	adds	r2, #174	@ 0xae
 8006612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800661a:	2303      	movs	r3, #3
 800661c:	e01c      	b.n	8006658 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b03      	cmp	r3, #3
 8006628:	d115      	bne.n	8006656 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	32ae      	adds	r2, #174	@ 0xae
 8006634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	32ae      	adds	r2, #174	@ 0xae
 8006648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	4611      	mov	r1, r2
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	32ae      	adds	r2, #174	@ 0xae
 8006676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800667e:	2303      	movs	r3, #3
 8006680:	e01c      	b.n	80066bc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b03      	cmp	r3, #3
 800668c:	d115      	bne.n	80066ba <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	32ae      	adds	r2, #174	@ 0xae
 8006698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	32ae      	adds	r2, #174	@ 0xae
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	4611      	mov	r1, r2
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6852      	ldr	r2, [r2, #4]
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	4611      	mov	r1, r2
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006712:	2303      	movs	r3, #3
 8006714:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800672c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006746:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	885b      	ldrh	r3, [r3, #2]
 8006770:	b29b      	uxth	r3, r3
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	4293      	cmp	r3, r2
 8006778:	d91f      	bls.n	80067ba <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006780:	e013      	b.n	80067aa <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006782:	f107 030a 	add.w	r3, r7, #10
 8006786:	4619      	mov	r1, r3
 8006788:	6978      	ldr	r0, [r7, #20]
 800678a:	f000 f81b 	bl	80067c4 <USBD_GetNextDesc>
 800678e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b05      	cmp	r3, #5
 8006796:	d108      	bne.n	80067aa <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	789b      	ldrb	r3, [r3, #2]
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d008      	beq.n	80067b8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	885b      	ldrh	r3, [r3, #2]
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	897b      	ldrh	r3, [r7, #10]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d8e5      	bhi.n	8006782 <USBD_GetEpDesc+0x2e>
 80067b6:	e000      	b.n	80067ba <USBD_GetEpDesc+0x66>
          break;
 80067b8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80067ba:	693b      	ldr	r3, [r7, #16]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	7812      	ldrb	r2, [r2, #0]
 80067da:	4413      	add	r3, r2
 80067dc:	b29a      	uxth	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80067ee:	68fb      	ldr	r3, [r7, #12]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	3301      	adds	r3, #1
 8006812:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800681a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	b21a      	sxth	r2, r3
 8006822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006826:	4313      	orrs	r3, r2
 8006828:	b21b      	sxth	r3, r3
 800682a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800682c:	89fb      	ldrh	r3, [r7, #14]
}
 800682e:	4618      	mov	r0, r3
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006852:	2b40      	cmp	r3, #64	@ 0x40
 8006854:	d005      	beq.n	8006862 <USBD_StdDevReq+0x26>
 8006856:	2b40      	cmp	r3, #64	@ 0x40
 8006858:	d857      	bhi.n	800690a <USBD_StdDevReq+0xce>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00f      	beq.n	800687e <USBD_StdDevReq+0x42>
 800685e:	2b20      	cmp	r3, #32
 8006860:	d153      	bne.n	800690a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	32ae      	adds	r2, #174	@ 0xae
 800686c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
      break;
 800687c:	e04a      	b.n	8006914 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	2b09      	cmp	r3, #9
 8006884:	d83b      	bhi.n	80068fe <USBD_StdDevReq+0xc2>
 8006886:	a201      	add	r2, pc, #4	@ (adr r2, 800688c <USBD_StdDevReq+0x50>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	080068e1 	.word	0x080068e1
 8006890:	080068f5 	.word	0x080068f5
 8006894:	080068ff 	.word	0x080068ff
 8006898:	080068eb 	.word	0x080068eb
 800689c:	080068ff 	.word	0x080068ff
 80068a0:	080068bf 	.word	0x080068bf
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068ff 	.word	0x080068ff
 80068ac:	080068d7 	.word	0x080068d7
 80068b0:	080068c9 	.word	0x080068c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa3e 	bl	8006d38 <USBD_GetDescriptor>
          break;
 80068bc:	e024      	b.n	8006908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fba3 	bl	800700c <USBD_SetAddress>
          break;
 80068c6:	e01f      	b.n	8006908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fbe2 	bl	8007094 <USBD_SetConfig>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
          break;
 80068d4:	e018      	b.n	8006908 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fc85 	bl	80071e8 <USBD_GetConfig>
          break;
 80068de:	e013      	b.n	8006908 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fcb6 	bl	8007254 <USBD_GetStatus>
          break;
 80068e8:	e00e      	b.n	8006908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fce5 	bl	80072bc <USBD_SetFeature>
          break;
 80068f2:	e009      	b.n	8006908 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fd09 	bl	800730e <USBD_ClrFeature>
          break;
 80068fc:	e004      	b.n	8006908 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fd60 	bl	80073c6 <USBD_CtlError>
          break;
 8006906:	bf00      	nop
      }
      break;
 8006908:	e004      	b.n	8006914 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fd5a 	bl	80073c6 <USBD_CtlError>
      break;
 8006912:	bf00      	nop
  }

  return ret;
 8006914:	7bfb      	ldrb	r3, [r7, #15]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006936:	2b40      	cmp	r3, #64	@ 0x40
 8006938:	d005      	beq.n	8006946 <USBD_StdItfReq+0x26>
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d852      	bhi.n	80069e4 <USBD_StdItfReq+0xc4>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <USBD_StdItfReq+0x26>
 8006942:	2b20      	cmp	r3, #32
 8006944:	d14e      	bne.n	80069e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	2b02      	cmp	r3, #2
 8006952:	d840      	bhi.n	80069d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	889b      	ldrh	r3, [r3, #4]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	d836      	bhi.n	80069cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	889b      	ldrh	r3, [r3, #4]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff feda 	bl	8006720 <USBD_CoreFindIF>
 800696c:	4603      	mov	r3, r0
 800696e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2bff      	cmp	r3, #255	@ 0xff
 8006974:	d01d      	beq.n	80069b2 <USBD_StdItfReq+0x92>
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d11a      	bne.n	80069b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800697c:	7bba      	ldrb	r2, [r7, #14]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	32ae      	adds	r2, #174	@ 0xae
 8006982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00f      	beq.n	80069ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800698c:	7bba      	ldrb	r2, [r7, #14]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006994:	7bba      	ldrb	r2, [r7, #14]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	@ 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069aa:	e004      	b.n	80069b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069b0:	e001      	b.n	80069b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069b2:	2303      	movs	r3, #3
 80069b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	88db      	ldrh	r3, [r3, #6]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d110      	bne.n	80069e0 <USBD_StdItfReq+0xc0>
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10d      	bne.n	80069e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fddc 	bl	8007582 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069ca:	e009      	b.n	80069e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fcf9 	bl	80073c6 <USBD_CtlError>
          break;
 80069d4:	e004      	b.n	80069e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fcf4 	bl	80073c6 <USBD_CtlError>
          break;
 80069de:	e000      	b.n	80069e2 <USBD_StdItfReq+0xc2>
          break;
 80069e0:	bf00      	nop
      }
      break;
 80069e2:	e004      	b.n	80069ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fced 	bl	80073c6 <USBD_CtlError>
      break;
 80069ec:	bf00      	nop
  }

  return ret;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	889b      	ldrh	r3, [r3, #4]
 8006a0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a14:	2b40      	cmp	r3, #64	@ 0x40
 8006a16:	d007      	beq.n	8006a28 <USBD_StdEPReq+0x30>
 8006a18:	2b40      	cmp	r3, #64	@ 0x40
 8006a1a:	f200 8181 	bhi.w	8006d20 <USBD_StdEPReq+0x328>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d02a      	beq.n	8006a78 <USBD_StdEPReq+0x80>
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	f040 817c 	bne.w	8006d20 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff fe84 	bl	800673a <USBD_CoreFindEP>
 8006a32:	4603      	mov	r3, r0
 8006a34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a36:	7b7b      	ldrb	r3, [r7, #13]
 8006a38:	2bff      	cmp	r3, #255	@ 0xff
 8006a3a:	f000 8176 	beq.w	8006d2a <USBD_StdEPReq+0x332>
 8006a3e:	7b7b      	ldrb	r3, [r7, #13]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f040 8172 	bne.w	8006d2a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006a46:	7b7a      	ldrb	r2, [r7, #13]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a4e:	7b7a      	ldrb	r2, [r7, #13]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	32ae      	adds	r2, #174	@ 0xae
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 8165 	beq.w	8006d2a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a60:	7b7a      	ldrb	r2, [r7, #13]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	32ae      	adds	r2, #174	@ 0xae
 8006a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a76:	e158      	b.n	8006d2a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d008      	beq.n	8006a92 <USBD_StdEPReq+0x9a>
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	f300 8147 	bgt.w	8006d14 <USBD_StdEPReq+0x31c>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 809b 	beq.w	8006bc2 <USBD_StdEPReq+0x1ca>
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d03c      	beq.n	8006b0a <USBD_StdEPReq+0x112>
 8006a90:	e140      	b.n	8006d14 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d002      	beq.n	8006aa4 <USBD_StdEPReq+0xac>
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d016      	beq.n	8006ad0 <USBD_StdEPReq+0xd8>
 8006aa2:	e02c      	b.n	8006afe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <USBD_StdEPReq+0xce>
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b80      	cmp	r3, #128	@ 0x80
 8006aae:	d00a      	beq.n	8006ac6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fac9 	bl	800804c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aba:	2180      	movs	r1, #128	@ 0x80
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fac5 	bl	800804c <USBD_LL_StallEP>
 8006ac2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac4:	e020      	b.n	8006b08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fc7c 	bl	80073c6 <USBD_CtlError>
              break;
 8006ace:	e01b      	b.n	8006b08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	885b      	ldrh	r3, [r3, #2]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10e      	bne.n	8006af6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <USBD_StdEPReq+0xfe>
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	2b80      	cmp	r3, #128	@ 0x80
 8006ae2:	d008      	beq.n	8006af6 <USBD_StdEPReq+0xfe>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	88db      	ldrh	r3, [r3, #6]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 faab 	bl	800804c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fd43 	bl	8007582 <USBD_CtlSendStatus>

              break;
 8006afc:	e004      	b.n	8006b08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fc60 	bl	80073c6 <USBD_CtlError>
              break;
 8006b06:	bf00      	nop
          }
          break;
 8006b08:	e109      	b.n	8006d1e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d002      	beq.n	8006b1c <USBD_StdEPReq+0x124>
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d016      	beq.n	8006b48 <USBD_StdEPReq+0x150>
 8006b1a:	e04b      	b.n	8006bb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00d      	beq.n	8006b3e <USBD_StdEPReq+0x146>
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b80      	cmp	r3, #128	@ 0x80
 8006b26:	d00a      	beq.n	8006b3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fa8d 	bl	800804c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b32:	2180      	movs	r1, #128	@ 0x80
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fa89 	bl	800804c <USBD_LL_StallEP>
 8006b3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b3c:	e040      	b.n	8006bc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fc40 	bl	80073c6 <USBD_CtlError>
              break;
 8006b46:	e03b      	b.n	8006bc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	885b      	ldrh	r3, [r3, #2]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d136      	bne.n	8006bbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 fa93 	bl	800808a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fd0c 	bl	8007582 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fde3 	bl	800673a <USBD_CoreFindEP>
 8006b74:	4603      	mov	r3, r0
 8006b76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b78:	7b7b      	ldrb	r3, [r7, #13]
 8006b7a:	2bff      	cmp	r3, #255	@ 0xff
 8006b7c:	d01f      	beq.n	8006bbe <USBD_StdEPReq+0x1c6>
 8006b7e:	7b7b      	ldrb	r3, [r7, #13]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11c      	bne.n	8006bbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b84:	7b7a      	ldrb	r2, [r7, #13]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b8c:	7b7a      	ldrb	r2, [r7, #13]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	32ae      	adds	r2, #174	@ 0xae
 8006b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d010      	beq.n	8006bbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b9c:	7b7a      	ldrb	r2, [r7, #13]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	32ae      	adds	r2, #174	@ 0xae
 8006ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006bb2:	e004      	b.n	8006bbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fc05 	bl	80073c6 <USBD_CtlError>
              break;
 8006bbc:	e000      	b.n	8006bc0 <USBD_StdEPReq+0x1c8>
              break;
 8006bbe:	bf00      	nop
          }
          break;
 8006bc0:	e0ad      	b.n	8006d1e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d002      	beq.n	8006bd4 <USBD_StdEPReq+0x1dc>
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d033      	beq.n	8006c3a <USBD_StdEPReq+0x242>
 8006bd2:	e099      	b.n	8006d08 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <USBD_StdEPReq+0x1f2>
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b80      	cmp	r3, #128	@ 0x80
 8006bde:	d004      	beq.n	8006bea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fbef 	bl	80073c6 <USBD_CtlError>
                break;
 8006be8:	e093      	b.n	8006d12 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da0b      	bge.n	8006c0a <USBD_StdEPReq+0x212>
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	3310      	adds	r3, #16
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	4413      	add	r3, r2
 8006c06:	3304      	adds	r3, #4
 8006c08:	e00b      	b.n	8006c22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	4413      	add	r3, r2
 8006c20:	3304      	adds	r3, #4
 8006c22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	330e      	adds	r3, #14
 8006c2e:	2202      	movs	r2, #2
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fc44 	bl	80074c0 <USBD_CtlSendData>
              break;
 8006c38:	e06b      	b.n	8006d12 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da11      	bge.n	8006c66 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	3323      	adds	r3, #35	@ 0x23
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d117      	bne.n	8006c8c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fbb1 	bl	80073c6 <USBD_CtlError>
                  break;
 8006c64:	e055      	b.n	8006d12 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	f003 020f 	and.w	r2, r3, #15
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	440b      	add	r3, r1
 8006c78:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fb9e 	bl	80073c6 <USBD_CtlError>
                  break;
 8006c8a:	e042      	b.n	8006d12 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da0b      	bge.n	8006cac <USBD_StdEPReq+0x2b4>
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	3310      	adds	r3, #16
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3304      	adds	r3, #4
 8006caa:	e00b      	b.n	8006cc4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <USBD_StdEPReq+0x2da>
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b80      	cmp	r3, #128	@ 0x80
 8006cd0:	d103      	bne.n	8006cda <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	739a      	strb	r2, [r3, #14]
 8006cd8:	e00e      	b.n	8006cf8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006cda:	7bbb      	ldrb	r3, [r7, #14]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 f9f2 	bl	80080c8 <USBD_LL_IsStallEP>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2201      	movs	r2, #1
 8006cee:	739a      	strb	r2, [r3, #14]
 8006cf0:	e002      	b.n	8006cf8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	330e      	adds	r3, #14
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fbdd 	bl	80074c0 <USBD_CtlSendData>
              break;
 8006d06:	e004      	b.n	8006d12 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb5b 	bl	80073c6 <USBD_CtlError>
              break;
 8006d10:	bf00      	nop
          }
          break;
 8006d12:	e004      	b.n	8006d1e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb55 	bl	80073c6 <USBD_CtlError>
          break;
 8006d1c:	bf00      	nop
      }
      break;
 8006d1e:	e005      	b.n	8006d2c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fb4f 	bl	80073c6 <USBD_CtlError>
      break;
 8006d28:	e000      	b.n	8006d2c <USBD_StdEPReq+0x334>
      break;
 8006d2a:	bf00      	nop
  }

  return ret;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	885b      	ldrh	r3, [r3, #2]
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	2b06      	cmp	r3, #6
 8006d5a:	f200 8128 	bhi.w	8006fae <USBD_GetDescriptor+0x276>
 8006d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d64 <USBD_GetDescriptor+0x2c>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d81 	.word	0x08006d81
 8006d68:	08006d99 	.word	0x08006d99
 8006d6c:	08006dd9 	.word	0x08006dd9
 8006d70:	08006faf 	.word	0x08006faf
 8006d74:	08006faf 	.word	0x08006faf
 8006d78:	08006f4f 	.word	0x08006f4f
 8006d7c:	08006f7b 	.word	0x08006f7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7c12      	ldrb	r2, [r2, #16]
 8006d8c:	f107 0108 	add.w	r1, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	60f8      	str	r0, [r7, #12]
      break;
 8006d96:	e112      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	7c1b      	ldrb	r3, [r3, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10d      	bne.n	8006dbc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da8:	f107 0208 	add.w	r2, r7, #8
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dba:	e100      	b.n	8006fbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	f107 0208 	add.w	r2, r7, #8
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
 8006dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	701a      	strb	r2, [r3, #0]
      break;
 8006dd6:	e0f2      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	885b      	ldrh	r3, [r3, #2]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	f200 80ac 	bhi.w	8006f3c <USBD_GetDescriptor+0x204>
 8006de4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <USBD_GetDescriptor+0xb4>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e05 	.word	0x08006e05
 8006df0:	08006e39 	.word	0x08006e39
 8006df4:	08006e6d 	.word	0x08006e6d
 8006df8:	08006ea1 	.word	0x08006ea1
 8006dfc:	08006ed5 	.word	0x08006ed5
 8006e00:	08006f09 	.word	0x08006f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	7c12      	ldrb	r2, [r2, #16]
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e26:	e091      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 facb 	bl	80073c6 <USBD_CtlError>
            err++;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	3301      	adds	r3, #1
 8006e34:	72fb      	strb	r3, [r7, #11]
          break;
 8006e36:	e089      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	f107 0108 	add.w	r1, r7, #8
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5a:	e077      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fab1 	bl	80073c6 <USBD_CtlError>
            err++;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	3301      	adds	r3, #1
 8006e68:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6a:	e06f      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7c12      	ldrb	r2, [r2, #16]
 8006e84:	f107 0108 	add.w	r1, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e8e:	e05d      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fa97 	bl	80073c6 <USBD_CtlError>
            err++;
 8006e98:	7afb      	ldrb	r3, [r7, #11]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e9e:	e055      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7c12      	ldrb	r2, [r2, #16]
 8006eb8:	f107 0108 	add.w	r1, r7, #8
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
 8006ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec2:	e043      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa7d 	bl	80073c6 <USBD_CtlError>
            err++;
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed2:	e03b      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ef6:	e029      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa63 	bl	80073c6 <USBD_CtlError>
            err++;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	3301      	adds	r3, #1
 8006f04:	72fb      	strb	r3, [r7, #11]
          break;
 8006f06:	e021      	b.n	8006f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	7c12      	ldrb	r2, [r2, #16]
 8006f20:	f107 0108 	add.w	r1, r7, #8
 8006f24:	4610      	mov	r0, r2
 8006f26:	4798      	blx	r3
 8006f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f2a:	e00f      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa49 	bl	80073c6 <USBD_CtlError>
            err++;
 8006f34:	7afb      	ldrb	r3, [r7, #11]
 8006f36:	3301      	adds	r3, #1
 8006f38:	72fb      	strb	r3, [r7, #11]
          break;
 8006f3a:	e007      	b.n	8006f4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa41 	bl	80073c6 <USBD_CtlError>
          err++;
 8006f44:	7afb      	ldrb	r3, [r7, #11]
 8006f46:	3301      	adds	r3, #1
 8006f48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f4a:	bf00      	nop
      }
      break;
 8006f4c:	e037      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7c1b      	ldrb	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5e:	f107 0208 	add.w	r2, r7, #8
 8006f62:	4610      	mov	r0, r2
 8006f64:	4798      	blx	r3
 8006f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f68:	e029      	b.n	8006fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fa2a 	bl	80073c6 <USBD_CtlError>
        err++;
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	3301      	adds	r3, #1
 8006f76:	72fb      	strb	r3, [r7, #11]
      break;
 8006f78:	e021      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	7c1b      	ldrb	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10d      	bne.n	8006f9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8a:	f107 0208 	add.w	r2, r7, #8
 8006f8e:	4610      	mov	r0, r2
 8006f90:	4798      	blx	r3
 8006f92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	2207      	movs	r2, #7
 8006f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f9c:	e00f      	b.n	8006fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fa10 	bl	80073c6 <USBD_CtlError>
        err++;
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	72fb      	strb	r3, [r7, #11]
      break;
 8006fac:	e007      	b.n	8006fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fa08 	bl	80073c6 <USBD_CtlError>
      err++;
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	72fb      	strb	r3, [r7, #11]
      break;
 8006fbc:	bf00      	nop
  }

  if (err != 0U)
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d11e      	bne.n	8007002 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	88db      	ldrh	r3, [r3, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d016      	beq.n	8006ffa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fcc:	893b      	ldrh	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00e      	beq.n	8006ff0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	88da      	ldrh	r2, [r3, #6]
 8006fd6:	893b      	ldrh	r3, [r7, #8]
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	bf28      	it	cs
 8006fdc:	4613      	movcs	r3, r2
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fe2:	893b      	ldrh	r3, [r7, #8]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fa69 	bl	80074c0 <USBD_CtlSendData>
 8006fee:	e009      	b.n	8007004 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f9e7 	bl	80073c6 <USBD_CtlError>
 8006ff8:	e004      	b.n	8007004 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fac1 	bl	8007582 <USBD_CtlSendStatus>
 8007000:	e000      	b.n	8007004 <USBD_GetDescriptor+0x2cc>
    return;
 8007002:	bf00      	nop
  }
}
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop

0800700c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	889b      	ldrh	r3, [r3, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d131      	bne.n	8007082 <USBD_SetAddress+0x76>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	88db      	ldrh	r3, [r3, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d12d      	bne.n	8007082 <USBD_SetAddress+0x76>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	885b      	ldrh	r3, [r3, #2]
 800702a:	2b7f      	cmp	r3, #127	@ 0x7f
 800702c:	d829      	bhi.n	8007082 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007038:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b03      	cmp	r3, #3
 8007044:	d104      	bne.n	8007050 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f9bc 	bl	80073c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704e:	e01d      	b.n	800708c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	7bfa      	ldrb	r2, [r7, #15]
 8007054:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f85f 	bl	8008120 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa8d 	bl	8007582 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007076:	e009      	b.n	800708c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007080:	e004      	b.n	800708c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f99e 	bl	80073c6 <USBD_CtlError>
  }
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	885b      	ldrh	r3, [r3, #2]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	4b4e      	ldr	r3, [pc, #312]	@ (80071e4 <USBD_SetConfig+0x150>)
 80070aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070ac:	4b4d      	ldr	r3, [pc, #308]	@ (80071e4 <USBD_SetConfig+0x150>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d905      	bls.n	80070c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f985 	bl	80073c6 <USBD_CtlError>
    return USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	e08c      	b.n	80071da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d002      	beq.n	80070d2 <USBD_SetConfig+0x3e>
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d029      	beq.n	8007124 <USBD_SetConfig+0x90>
 80070d0:	e075      	b.n	80071be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070d2:	4b44      	ldr	r3, [pc, #272]	@ (80071e4 <USBD_SetConfig+0x150>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d020      	beq.n	800711c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070da:	4b42      	ldr	r3, [pc, #264]	@ (80071e4 <USBD_SetConfig+0x150>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070e4:	4b3f      	ldr	r3, [pc, #252]	@ (80071e4 <USBD_SetConfig+0x150>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe ffcd 	bl	800608a <USBD_SetClassConfig>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f962 	bl	80073c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2202      	movs	r2, #2
 8007106:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800710a:	e065      	b.n	80071d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fa38 	bl	8007582 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2203      	movs	r2, #3
 8007116:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800711a:	e05d      	b.n	80071d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa30 	bl	8007582 <USBD_CtlSendStatus>
      break;
 8007122:	e059      	b.n	80071d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007124:	4b2f      	ldr	r3, [pc, #188]	@ (80071e4 <USBD_SetConfig+0x150>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d112      	bne.n	8007152 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007134:	4b2b      	ldr	r3, [pc, #172]	@ (80071e4 <USBD_SetConfig+0x150>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800713e:	4b29      	ldr	r3, [pc, #164]	@ (80071e4 <USBD_SetConfig+0x150>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fe ffbc 	bl	80060c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa19 	bl	8007582 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007150:	e042      	b.n	80071d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007152:	4b24      	ldr	r3, [pc, #144]	@ (80071e4 <USBD_SetConfig+0x150>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d02a      	beq.n	80071b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fe ffaa 	bl	80060c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800716e:	4b1d      	ldr	r3, [pc, #116]	@ (80071e4 <USBD_SetConfig+0x150>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007178:	4b1a      	ldr	r3, [pc, #104]	@ (80071e4 <USBD_SetConfig+0x150>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe ff83 	bl	800608a <USBD_SetClassConfig>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00f      	beq.n	80071ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f918 	bl	80073c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe ff8f 	bl	80060c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80071ac:	e014      	b.n	80071d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9e7 	bl	8007582 <USBD_CtlSendStatus>
      break;
 80071b4:	e010      	b.n	80071d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9e3 	bl	8007582 <USBD_CtlSendStatus>
      break;
 80071bc:	e00c      	b.n	80071d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f900 	bl	80073c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071c6:	4b07      	ldr	r3, [pc, #28]	@ (80071e4 <USBD_SetConfig+0x150>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fe ff78 	bl	80060c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	73fb      	strb	r3, [r7, #15]
      break;
 80071d6:	bf00      	nop
  }

  return ret;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	200001e4 	.word	0x200001e4

080071e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	88db      	ldrh	r3, [r3, #6]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d004      	beq.n	8007204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8e2 	bl	80073c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007202:	e023      	b.n	800724c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	dc02      	bgt.n	8007216 <USBD_GetConfig+0x2e>
 8007210:	2b00      	cmp	r3, #0
 8007212:	dc03      	bgt.n	800721c <USBD_GetConfig+0x34>
 8007214:	e015      	b.n	8007242 <USBD_GetConfig+0x5a>
 8007216:	2b03      	cmp	r3, #3
 8007218:	d00b      	beq.n	8007232 <USBD_GetConfig+0x4a>
 800721a:	e012      	b.n	8007242 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3308      	adds	r3, #8
 8007226:	2201      	movs	r2, #1
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f948 	bl	80074c0 <USBD_CtlSendData>
        break;
 8007230:	e00c      	b.n	800724c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3304      	adds	r3, #4
 8007236:	2201      	movs	r2, #1
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f940 	bl	80074c0 <USBD_CtlSendData>
        break;
 8007240:	e004      	b.n	800724c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8be 	bl	80073c6 <USBD_CtlError>
        break;
 800724a:	bf00      	nop
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007264:	b2db      	uxtb	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	2b02      	cmp	r3, #2
 800726a:	d81e      	bhi.n	80072aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	88db      	ldrh	r3, [r3, #6]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d004      	beq.n	800727e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8a5 	bl	80073c6 <USBD_CtlError>
        break;
 800727c:	e01a      	b.n	80072b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f043 0202 	orr.w	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	330c      	adds	r3, #12
 800729e:	2202      	movs	r2, #2
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f90c 	bl	80074c0 <USBD_CtlSendData>
      break;
 80072a8:	e004      	b.n	80072b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f88a 	bl	80073c6 <USBD_CtlError>
      break;
 80072b2:	bf00      	nop
  }
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	885b      	ldrh	r3, [r3, #2]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d107      	bne.n	80072de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f953 	bl	8007582 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072dc:	e013      	b.n	8007306 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	885b      	ldrh	r3, [r3, #2]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d10b      	bne.n	80072fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	889b      	ldrh	r3, [r3, #4]
 80072ea:	0a1b      	lsrs	r3, r3, #8
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f943 	bl	8007582 <USBD_CtlSendStatus>
}
 80072fc:	e003      	b.n	8007306 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f860 	bl	80073c6 <USBD_CtlError>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800731e:	b2db      	uxtb	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	2b02      	cmp	r3, #2
 8007324:	d80b      	bhi.n	800733e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d10c      	bne.n	8007348 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f923 	bl	8007582 <USBD_CtlSendStatus>
      }
      break;
 800733c:	e004      	b.n	8007348 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f840 	bl	80073c6 <USBD_CtlError>
      break;
 8007346:	e000      	b.n	800734a <USBD_ClrFeature+0x3c>
      break;
 8007348:	bf00      	nop
  }
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	781a      	ldrb	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	781a      	ldrb	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fa3d 	bl	80067fc <SWAPBYTE>
 8007382:	4603      	mov	r3, r0
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3301      	adds	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fa30 	bl	80067fc <SWAPBYTE>
 800739c:	4603      	mov	r3, r0
 800739e:	461a      	mov	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3301      	adds	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f7ff fa23 	bl	80067fc <SWAPBYTE>
 80073b6:	4603      	mov	r3, r0
 80073b8:	461a      	mov	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	80da      	strh	r2, [r3, #6]
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073d0:	2180      	movs	r1, #128	@ 0x80
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fe3a 	bl	800804c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fe36 	bl	800804c <USBD_LL_StallEP>
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d042      	beq.n	8007484 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007402:	6938      	ldr	r0, [r7, #16]
 8007404:	f000 f842 	bl	800748c <USBD_GetLen>
 8007408:	4603      	mov	r3, r0
 800740a:	3301      	adds	r3, #1
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007412:	d808      	bhi.n	8007426 <USBD_GetString+0x3e>
 8007414:	6938      	ldr	r0, [r7, #16]
 8007416:	f000 f839 	bl	800748c <USBD_GetLen>
 800741a:	4603      	mov	r3, r0
 800741c:	3301      	adds	r3, #1
 800741e:	b29b      	uxth	r3, r3
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	e001      	b.n	800742a <USBD_GetString+0x42>
 8007426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	4413      	add	r3, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7812      	ldrb	r2, [r2, #0]
 8007438:	701a      	strb	r2, [r3, #0]
  idx++;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	3301      	adds	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	4413      	add	r3, r2
 8007446:	2203      	movs	r2, #3
 8007448:	701a      	strb	r2, [r3, #0]
  idx++;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	3301      	adds	r3, #1
 800744e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007450:	e013      	b.n	800747a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	4413      	add	r3, r2
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	7812      	ldrb	r2, [r2, #0]
 800745c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	3301      	adds	r3, #1
 8007462:	613b      	str	r3, [r7, #16]
    idx++;
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	3301      	adds	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	4413      	add	r3, r2
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
    idx++;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	3301      	adds	r3, #1
 8007478:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e7      	bne.n	8007452 <USBD_GetString+0x6a>
 8007482:	e000      	b.n	8007486 <USBD_GetString+0x9e>
    return;
 8007484:	bf00      	nop
  }
}
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800749c:	e005      	b.n	80074aa <USBD_GetLen+0x1e>
  {
    len++;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	3301      	adds	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f5      	bne.n	800749e <USBD_GetLen+0x12>
  }

  return len;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	2100      	movs	r1, #0
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fe36 	bl	800815e <USBD_LL_Transmit>

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	2100      	movs	r1, #0
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 fe25 	bl	800815e <USBD_LL_Transmit>

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2203      	movs	r2, #3
 800752e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	2100      	movs	r1, #0
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fe25 	bl	80081a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	2100      	movs	r1, #0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fe14 	bl	80081a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2204      	movs	r2, #4
 800758e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007592:	2300      	movs	r3, #0
 8007594:	2200      	movs	r2, #0
 8007596:	2100      	movs	r1, #0
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fde0 	bl	800815e <USBD_LL_Transmit>

  return USBD_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2205      	movs	r2, #5
 80075b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075b8:	2300      	movs	r3, #0
 80075ba:	2200      	movs	r2, #0
 80075bc:	2100      	movs	r1, #0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fdee 	bl	80081a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <shtc3_init>:
/* Exported functions definitions --------------------------------------------*/
/**
 * @brief Function to initialize a SHTC3 instance
 */
int shtc3_init(shtc3_t *const me, void *i2c_handle, uint8_t dev_addr)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b087      	sub	sp, #28
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
	/* Variable to return error code */
	int ret = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
	me->i2c_dev.handle = (I2C_HandleTypeDef *)i2c_handle;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	605a      	str	r2, [r3, #4]
	me->i2c_dev.addr = dev_addr;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	79fa      	ldrb	r2, [r7, #7]
 80075ea:	701a      	strb	r2, [r3, #0]
	me->id = 0;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	811a      	strh	r2, [r3, #8]
	me->state = STHC3_IDLE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	729a      	strb	r2, [r3, #10]

	/* Return 0 */
	return ret;
 80075f8:	697b      	ldr	r3, [r7, #20]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <shtc3_get_id>:

/**
 * @brief Function to get the device ID
 */
int shtc3_get_id(shtc3_t *const me)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
	me->id = 0;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	811a      	strh	r2, [r3, #8]

	/* Variable to return error code */
	int ret = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_READ_ID, &me->i2c_dev);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4619      	mov	r1, r3
 800761c:	f64e 70c8 	movw	r0, #61384	@ 0xefc8
 8007620:	f000 f8df 	bl	80077e2 <shtc3_reg_write>

	uint8_t data[3] = {0};
 8007624:	f107 0308 	add.w	r3, r7, #8
 8007628:	2100      	movs	r1, #0
 800762a:	460a      	mov	r2, r1
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	460a      	mov	r2, r1
 8007630:	709a      	strb	r2, [r3, #2]
	shtc3_reg_read(data, 3, &me->i2c_dev);
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	f107 0308 	add.w	r3, r7, #8
 8007638:	2103      	movs	r1, #3
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f8ac 	bl	8007798 <shtc3_reg_read>

	/* Check data received CRC */
	if (!check_crc(data, 2, data[2])) {
 8007640:	7aba      	ldrb	r2, [r7, #10]
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	2102      	movs	r1, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f000 f930 	bl	80078ae <check_crc>
 800764e:	4603      	mov	r3, r0
 8007650:	f083 0301 	eor.w	r3, r3, #1
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <shtc3_get_id+0x5a>
		return -1;
 800765a:	f04f 33ff 	mov.w	r3, #4294967295
 800765e:	e00b      	b.n	8007678 <shtc3_get_id+0x72>
	}

	me->id = data[0] << 8 | data[1];
 8007660:	7a3b      	ldrb	r3, [r7, #8]
 8007662:	b21b      	sxth	r3, r3
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	b21a      	sxth	r2, r3
 8007668:	7a7b      	ldrb	r3, [r7, #9]
 800766a:	b21b      	sxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b21b      	sxth	r3, r3
 8007670:	b29a      	uxth	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	811a      	strh	r2, [r3, #8]

	/* Return 0 */
	return ret;
 8007676:	68fb      	ldr	r3, [r7, #12]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <shtc3_get_temp_and_hum>:

/**
 * @brief Function to get the temperature (°C) and humidity (%)
 */
int shtc3_get_temp_and_hum(shtc3_t *const me)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	617b      	str	r3, [r7, #20]

	shtc3_wakeup(me);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f86f 	bl	8007770 <shtc3_wakeup>

	shtc3_reg_write(SHTC3_CMD_MEAS_T_RH_CLOCKSTR_NM, &me->i2c_dev);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4619      	mov	r1, r3
 8007696:	f647 40a2 	movw	r0, #31906	@ 0x7ca2
 800769a:	f000 f8a2 	bl	80077e2 <shtc3_reg_write>

	HAL_Delay(300);
 800769e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80076a2:	f7f9 fb21 	bl	8000ce8 <HAL_Delay>

	uint8_t data[6] = {0};
 80076a6:	f107 030c 	add.w	r3, r7, #12
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	809a      	strh	r2, [r3, #4]
	shtc3_reg_read(data, 6, &me->i2c_dev);
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	f107 030c 	add.w	r3, r7, #12
 80076b6:	2106      	movs	r1, #6
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 f86d 	bl	8007798 <shtc3_reg_read>

	/* Check data received CRC */
	if (!check_crc(&data[0], 2, data[2])) {
 80076be:	7bba      	ldrb	r2, [r7, #14]
 80076c0:	f107 030c 	add.w	r3, r7, #12
 80076c4:	2102      	movs	r1, #2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f8f1 	bl	80078ae <check_crc>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f083 0301 	eor.w	r3, r3, #1
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <shtc3_get_temp_and_hum+0x5e>
		return -1;
 80076d8:	f04f 33ff 	mov.w	r3, #4294967295
 80076dc:	e033      	b.n	8007746 <shtc3_get_temp_and_hum+0xc6>
	}

	if (!check_crc(&data[3], 2, data[5])) {
 80076de:	7c7a      	ldrb	r2, [r7, #17]
 80076e0:	f107 030c 	add.w	r3, r7, #12
 80076e4:	3303      	adds	r3, #3
 80076e6:	2102      	movs	r1, #2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 f8e0 	bl	80078ae <check_crc>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f083 0301 	eor.w	r3, r3, #1
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <shtc3_get_temp_and_hum+0x80>
		return -1;
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295
 80076fe:	e022      	b.n	8007746 <shtc3_get_temp_and_hum+0xc6>
	}

	me->temp = calc_temp((uint16_t)((data[0] << 8) | (data[1])));
 8007700:	7b3b      	ldrb	r3, [r7, #12]
 8007702:	b21b      	sxth	r3, r3
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	b21a      	sxth	r2, r3
 8007708:	7b7b      	ldrb	r3, [r7, #13]
 800770a:	b21b      	sxth	r3, r3
 800770c:	4313      	orrs	r3, r2
 800770e:	b21b      	sxth	r3, r3
 8007710:	b29b      	uxth	r3, r3
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f8e4 	bl	80078e0 <calc_temp>
 8007718:	eef0 7a40 	vmov.f32	s15, s0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	edc3 7a03 	vstr	s15, [r3, #12]
	me->hum = calc_hum((uint16_t)((data[3] << 8) | (data[4])));
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	b21b      	sxth	r3, r3
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	b21a      	sxth	r2, r3
 800772a:	7c3b      	ldrb	r3, [r7, #16]
 800772c:	b21b      	sxth	r3, r3
 800772e:	4313      	orrs	r3, r2
 8007730:	b21b      	sxth	r3, r3
 8007732:	b29b      	uxth	r3, r3
 8007734:	4618      	mov	r0, r3
 8007736:	f000 f8f7 	bl	8007928 <calc_hum>
 800773a:	eef0 7a40 	vmov.f32	s15, s0
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	edc3 7a04 	vstr	s15, [r3, #16]

	/* Return 0 */
	return ret;
 8007744:	697b      	ldr	r3, [r7, #20]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <shtc3_sleep>:

/**
 * @brief Function to put the device in sleep mode
 */
int shtc3_sleep(shtc3_t *const me)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_SLEEP, &me->i2c_dev);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4619      	mov	r1, r3
 800775e:	f24b 0098 	movw	r0, #45208	@ 0xb098
 8007762:	f000 f83e 	bl	80077e2 <shtc3_reg_write>

	/* Return 0 */
	return ret;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <shtc3_wakeup>:

/**
 * @brief Function to wakeup the device from sleep mode
 */
int shtc3_wakeup(shtc3_t *const me)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_WAKEUP, &me->i2c_dev);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4619      	mov	r1, r3
 8007780:	f243 5017 	movw	r0, #13591	@ 0x3517
 8007784:	f000 f82d 	bl	80077e2 <shtc3_reg_write>

	HAL_Delay(1);
 8007788:	2001      	movs	r0, #1
 800778a:	f7f9 faad 	bl	8000ce8 <HAL_Delay>

	/* Return 0 */
	return ret;
 800778e:	68fb      	ldr	r3, [r7, #12]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <shtc3_reg_read>:
/* Private function definitions ----------------------------------------------*/
/**
 * @brief Function that implements the default I2C read transaction
 */
static int8_t shtc3_reg_read(uint8_t *data, uint32_t data_len, void *intf)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Receive(i2c_dev->handle, (i2c_dev->addr << 1) | 0x01,
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	6858      	ldr	r0, [r3, #4]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b21b      	sxth	r3, r3
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	b21b      	sxth	r3, r3
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	b21b      	sxth	r3, r3
 80077bc:	b299      	uxth	r1, r3
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	2264      	movs	r2, #100	@ 0x64
 80077c4:	9200      	str	r2, [sp, #0]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	f7f9 ffbe 	bl	8001748 <HAL_I2C_Master_Receive>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <shtc3_reg_read+0x40>
			data, data_len, 100) > 0) {
		return -1;
 80077d2:	f04f 33ff 	mov.w	r3, #4294967295
 80077d6:	e000      	b.n	80077da <shtc3_reg_read+0x42>
	}

	return 0;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <shtc3_reg_write>:

/**
 * @brief Function that implements the default I2C write transaction
 */
static int8_t shtc3_reg_write(uint16_t data, void *intf)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b088      	sub	sp, #32
 80077e6:	af02      	add	r7, sp, #8
 80077e8:	4603      	mov	r3, r0
 80077ea:	6039      	str	r1, [r7, #0]
 80077ec:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 80077ee:	f107 030c 	add.w	r3, r7, #12
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	605a      	str	r2, [r3, #4]
			(uint8_t)((data >> 8) & 0xFF),
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	0a1b      	lsrs	r3, r3, #8
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8007800:	733b      	strb	r3, [r7, #12]
			(uint8_t)(data & 0xFF)
 8007802:	88fb      	ldrh	r3, [r7, #6]
 8007804:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8007806:	737b      	strb	r3, [r7, #13]
	};

	/* Transmit buffer */
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Transmit(i2c_dev->handle, i2c_dev->addr << 1, buffer, 2,
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	6858      	ldr	r0, [r3, #4]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	b299      	uxth	r1, r3
 8007818:	f107 020c 	add.w	r2, r7, #12
 800781c:	2364      	movs	r3, #100	@ 0x64
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	2302      	movs	r3, #2
 8007822:	f7f9 fe93 	bl	800154c <HAL_I2C_Master_Transmit>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <shtc3_reg_write+0x50>
			100)) {
		return -1;
 800782c:	f04f 33ff 	mov.w	r3, #4294967295
 8007830:	e000      	b.n	8007834 <shtc3_reg_write+0x52>
	}

	return 0;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <generate_crc>:

/**
 * @brief Function that generates a CRC byte for a given data
 */
static uint8_t generate_crc(const uint8_t *data, uint16_t count) {
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	807b      	strh	r3, [r7, #2]
  uint16_t current_byte;
  uint8_t crc = CRC8_INIT;
 8007848:	23ff      	movs	r3, #255	@ 0xff
 800784a:	737b      	strb	r3, [r7, #13]
  uint8_t crc_bit;

  /* calculates 8-Bit checksum with given polynomial */
  for (current_byte = 0; current_byte < count; ++current_byte) {
 800784c:	2300      	movs	r3, #0
 800784e:	81fb      	strh	r3, [r7, #14]
 8007850:	e022      	b.n	8007898 <generate_crc+0x5c>
  	crc ^= (data[current_byte]);
 8007852:	89fb      	ldrh	r3, [r7, #14]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	781a      	ldrb	r2, [r3, #0]
 800785a:	7b7b      	ldrb	r3, [r7, #13]
 800785c:	4053      	eors	r3, r2
 800785e:	737b      	strb	r3, [r7, #13]

  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8007860:	2308      	movs	r3, #8
 8007862:	733b      	strb	r3, [r7, #12]
 8007864:	e012      	b.n	800788c <generate_crc+0x50>
  		if (crc & 0x80) {
 8007866:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800786a:	2b00      	cmp	r3, #0
 800786c:	da08      	bge.n	8007880 <generate_crc+0x44>
  			crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800786e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	b25b      	sxtb	r3, r3
 8007876:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 800787a:	b25b      	sxtb	r3, r3
 800787c:	737b      	strb	r3, [r7, #13]
 800787e:	e002      	b.n	8007886 <generate_crc+0x4a>
  		}
  		else {
  			crc = (crc << 1);
 8007880:	7b7b      	ldrb	r3, [r7, #13]
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	737b      	strb	r3, [r7, #13]
  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8007886:	7b3b      	ldrb	r3, [r7, #12]
 8007888:	3b01      	subs	r3, #1
 800788a:	733b      	strb	r3, [r7, #12]
 800788c:	7b3b      	ldrb	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e9      	bne.n	8007866 <generate_crc+0x2a>
  for (current_byte = 0; current_byte < count; ++current_byte) {
 8007892:	89fb      	ldrh	r3, [r7, #14]
 8007894:	3301      	adds	r3, #1
 8007896:	81fb      	strh	r3, [r7, #14]
 8007898:	89fa      	ldrh	r2, [r7, #14]
 800789a:	887b      	ldrh	r3, [r7, #2]
 800789c:	429a      	cmp	r2, r3
 800789e:	d3d8      	bcc.n	8007852 <generate_crc+0x16>
  		}
  	}
  }
  return crc;
 80078a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <check_crc>:

/**
 * @brief Function that checks the CRC for the received data
 */
static bool check_crc(const uint8_t *data, uint16_t count, uint8_t checksum) {
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	460b      	mov	r3, r1
 80078b8:	807b      	strh	r3, [r7, #2]
 80078ba:	4613      	mov	r3, r2
 80078bc:	707b      	strb	r3, [r7, #1]
	if (generate_crc(data, count) != checksum) {
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff ffba 	bl	800783c <generate_crc>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	787b      	ldrb	r3, [r7, #1]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d001      	beq.n	80078d6 <check_crc+0x28>
		return false;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e000      	b.n	80078d8 <check_crc+0x2a>
	}

	return true;
 80078d6:	2301      	movs	r3, #1
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <calc_temp>:

static float calc_temp(uint16_t raw_temp)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	80fb      	strh	r3, [r7, #6]
	return 175 * (float)raw_temp / 65536.0f - 45.0f;
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800791c <calc_temp+0x3c>
 80078f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078fc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8007920 <calc_temp+0x40>
 8007900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007904:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007924 <calc_temp+0x44>
 8007908:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800790c:	eeb0 0a67 	vmov.f32	s0, s15
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	432f0000 	.word	0x432f0000
 8007920:	47800000 	.word	0x47800000
 8007924:	42340000 	.word	0x42340000

08007928 <calc_hum>:

static float calc_hum(uint16_t raw_hum)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	80fb      	strh	r3, [r7, #6]
	return 100 * (float)raw_hum / 65536.0f;
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	ee07 3a90 	vmov	s15, r3
 8007938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8007960 <calc_hum+0x38>
 8007940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007944:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007964 <calc_hum+0x3c>
 8007948:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800794c:	eef0 7a66 	vmov.f32	s15, s13
}
 8007950:	eeb0 0a67 	vmov.f32	s0, s15
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	42c80000 	.word	0x42c80000
 8007964:	47800000 	.word	0x47800000

08007968 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800796c:	2200      	movs	r2, #0
 800796e:	4912      	ldr	r1, [pc, #72]	@ (80079b8 <MX_USB_DEVICE_Init+0x50>)
 8007970:	4812      	ldr	r0, [pc, #72]	@ (80079bc <MX_USB_DEVICE_Init+0x54>)
 8007972:	f7fe fb0d 	bl	8005f90 <USBD_Init>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800797c:	f7f9 f820 	bl	80009c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007980:	490f      	ldr	r1, [pc, #60]	@ (80079c0 <MX_USB_DEVICE_Init+0x58>)
 8007982:	480e      	ldr	r0, [pc, #56]	@ (80079bc <MX_USB_DEVICE_Init+0x54>)
 8007984:	f7fe fb34 	bl	8005ff0 <USBD_RegisterClass>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800798e:	f7f9 f817 	bl	80009c0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007992:	490c      	ldr	r1, [pc, #48]	@ (80079c4 <MX_USB_DEVICE_Init+0x5c>)
 8007994:	4809      	ldr	r0, [pc, #36]	@ (80079bc <MX_USB_DEVICE_Init+0x54>)
 8007996:	f7fe fae1 	bl	8005f5c <USBD_CUSTOM_HID_RegisterInterface>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079a0:	f7f9 f80e 	bl	80009c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079a4:	4805      	ldr	r0, [pc, #20]	@ (80079bc <MX_USB_DEVICE_Init+0x54>)
 80079a6:	f7fe fb59 	bl	800605c <USBD_Start>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079b0:	f7f9 f806 	bl	80009c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079b4:	bf00      	nop
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	200000b4 	.word	0x200000b4
 80079bc:	200001e8 	.word	0x200001e8
 80079c0:	2000000c 	.word	0x2000000c
 80079c4:	200000a4 	.word	0x200000a4

080079c8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPIN_SIZE);  // IN
 80079cc:	2340      	movs	r3, #64	@ 0x40
 80079ce:	2203      	movs	r2, #3
 80079d0:	2181      	movs	r1, #129	@ 0x81
 80079d2:	4806      	ldr	r0, [pc, #24]	@ (80079ec <CUSTOM_HID_Init_FS+0x24>)
 80079d4:	f000 faf5 	bl	8007fc2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPOUT_SIZE); // OUT
 80079d8:	2340      	movs	r3, #64	@ 0x40
 80079da:	2203      	movs	r2, #3
 80079dc:	2101      	movs	r1, #1
 80079de:	4803      	ldr	r0, [pc, #12]	@ (80079ec <CUSTOM_HID_Init_FS+0x24>)
 80079e0:	f000 faef 	bl	8007fc2 <USBD_LL_OpenEP>
  return (USBD_OK);
 80079e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	200001e8 	.word	0x200001e8

080079f0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR);
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR);
  return (USBD_OK);
 80079f4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *buffer)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8007a08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a0c:	480a      	ldr	r0, [pc, #40]	@ (8007a38 <CUSTOM_HID_OutEvent_FS+0x38>)
 8007a0e:	f7f9 fc3e 	bl	800128e <HAL_GPIO_TogglePin>

  usb_parser(buffer, 64);
 8007a12:	2140      	movs	r1, #64	@ 0x40
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7f8 ff35 	bl	8000884 <usb_parser>

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8007a1a:	4808      	ldr	r0, [pc, #32]	@ (8007a3c <CUSTOM_HID_OutEvent_FS+0x3c>)
 8007a1c:	f7fe fa3e 	bl	8005e9c <USBD_CUSTOM_HID_ReceivePacket>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <CUSTOM_HID_OutEvent_FS+0x2c>
  {
    return -1;
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	e000      	b.n	8007a2e <CUSTOM_HID_OutEvent_FS+0x2e>
  }

  return (USBD_OK);
 8007a2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40020c00 	.word	0x40020c00
 8007a3c:	200001e8 	.word	0x200001e8

08007a40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	6039      	str	r1, [r7, #0]
 8007a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2212      	movs	r2, #18
 8007a50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a52:	4b03      	ldr	r3, [pc, #12]	@ (8007a60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	200000d0 	.word	0x200000d0

08007a64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2204      	movs	r2, #4
 8007a74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a76:	4b03      	ldr	r3, [pc, #12]	@ (8007a84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	200000e4 	.word	0x200000e4

08007a88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d105      	bne.n	8007aa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4907      	ldr	r1, [pc, #28]	@ (8007abc <USBD_FS_ProductStrDescriptor+0x34>)
 8007a9e:	4808      	ldr	r0, [pc, #32]	@ (8007ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007aa0:	f7ff fca2 	bl	80073e8 <USBD_GetString>
 8007aa4:	e004      	b.n	8007ab0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	4904      	ldr	r1, [pc, #16]	@ (8007abc <USBD_FS_ProductStrDescriptor+0x34>)
 8007aaa:	4805      	ldr	r0, [pc, #20]	@ (8007ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007aac:	f7ff fc9c 	bl	80073e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ab0:	4b02      	ldr	r3, [pc, #8]	@ (8007abc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	200004c4 	.word	0x200004c4
 8007ac0:	0800830c 	.word	0x0800830c

08007ac4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	6039      	str	r1, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	4904      	ldr	r1, [pc, #16]	@ (8007ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ad4:	4804      	ldr	r0, [pc, #16]	@ (8007ae8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ad6:	f7ff fc87 	bl	80073e8 <USBD_GetString>
  return USBD_StrDesc;
 8007ada:	4b02      	ldr	r3, [pc, #8]	@ (8007ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	200004c4 	.word	0x200004c4
 8007ae8:	0800831c 	.word	0x0800831c

08007aec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	221a      	movs	r2, #26
 8007afc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007afe:	f000 f843 	bl	8007b88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b02:	4b02      	ldr	r3, [pc, #8]	@ (8007b0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	200000e8 	.word	0x200000e8

08007b10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d105      	bne.n	8007b2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4907      	ldr	r1, [pc, #28]	@ (8007b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b26:	4808      	ldr	r0, [pc, #32]	@ (8007b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b28:	f7ff fc5e 	bl	80073e8 <USBD_GetString>
 8007b2c:	e004      	b.n	8007b38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	4904      	ldr	r1, [pc, #16]	@ (8007b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b32:	4805      	ldr	r0, [pc, #20]	@ (8007b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b34:	f7ff fc58 	bl	80073e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b38:	4b02      	ldr	r3, [pc, #8]	@ (8007b44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	200004c4 	.word	0x200004c4
 8007b48:	08008330 	.word	0x08008330

08007b4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	6039      	str	r1, [r7, #0]
 8007b56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d105      	bne.n	8007b6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4907      	ldr	r1, [pc, #28]	@ (8007b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b62:	4808      	ldr	r0, [pc, #32]	@ (8007b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b64:	f7ff fc40 	bl	80073e8 <USBD_GetString>
 8007b68:	e004      	b.n	8007b74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4904      	ldr	r1, [pc, #16]	@ (8007b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b6e:	4805      	ldr	r0, [pc, #20]	@ (8007b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b70:	f7ff fc3a 	bl	80073e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b74:	4b02      	ldr	r3, [pc, #8]	@ (8007b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200004c4 	.word	0x200004c4
 8007b84:	08008344 	.word	0x08008344

08007b88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007bcc <Get_SerialNum+0x44>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b94:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd0 <Get_SerialNum+0x48>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd4 <Get_SerialNum+0x4c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bae:	2208      	movs	r2, #8
 8007bb0:	4909      	ldr	r1, [pc, #36]	@ (8007bd8 <Get_SerialNum+0x50>)
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f814 	bl	8007be0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bb8:	2204      	movs	r2, #4
 8007bba:	4908      	ldr	r1, [pc, #32]	@ (8007bdc <Get_SerialNum+0x54>)
 8007bbc:	68b8      	ldr	r0, [r7, #8]
 8007bbe:	f000 f80f 	bl	8007be0 <IntToUnicode>
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	1fff7a10 	.word	0x1fff7a10
 8007bd0:	1fff7a14 	.word	0x1fff7a14
 8007bd4:	1fff7a18 	.word	0x1fff7a18
 8007bd8:	200000ea 	.word	0x200000ea
 8007bdc:	200000fa 	.word	0x200000fa

08007be0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	4613      	mov	r3, r2
 8007bec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	75fb      	strb	r3, [r7, #23]
 8007bf6:	e027      	b.n	8007c48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	0f1b      	lsrs	r3, r3, #28
 8007bfc:	2b09      	cmp	r3, #9
 8007bfe:	d80b      	bhi.n	8007c18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	0f1b      	lsrs	r3, r3, #28
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	440b      	add	r3, r1
 8007c10:	3230      	adds	r2, #48	@ 0x30
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	e00a      	b.n	8007c2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	0f1b      	lsrs	r3, r3, #28
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	4619      	mov	r1, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	440b      	add	r3, r1
 8007c28:	3237      	adds	r2, #55	@ 0x37
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	3301      	adds	r3, #1
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	3301      	adds	r3, #1
 8007c46:	75fb      	strb	r3, [r7, #23]
 8007c48:	7dfa      	ldrb	r2, [r7, #23]
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d3d3      	bcc.n	8007bf8 <IntToUnicode+0x18>
  }
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	@ 0x28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c68:	f107 0314 	add.w	r3, r7, #20
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	605a      	str	r2, [r3, #4]
 8007c72:	609a      	str	r2, [r3, #8]
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c80:	d147      	bne.n	8007d12 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	4b25      	ldr	r3, [pc, #148]	@ (8007d1c <HAL_PCD_MspInit+0xbc>)
 8007c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c8a:	4a24      	ldr	r2, [pc, #144]	@ (8007d1c <HAL_PCD_MspInit+0xbc>)
 8007c8c:	f043 0301 	orr.w	r3, r3, #1
 8007c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c92:	4b22      	ldr	r3, [pc, #136]	@ (8007d1c <HAL_PCD_MspInit+0xbc>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007cac:	f107 0314 	add.w	r3, r7, #20
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	481b      	ldr	r0, [pc, #108]	@ (8007d20 <HAL_PCD_MspInit+0xc0>)
 8007cb4:	f7f9 f94e 	bl	8000f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007cb8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cca:	230a      	movs	r3, #10
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cce:	f107 0314 	add.w	r3, r7, #20
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4812      	ldr	r0, [pc, #72]	@ (8007d20 <HAL_PCD_MspInit+0xc0>)
 8007cd6:	f7f9 f93d 	bl	8000f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007cda:	4b10      	ldr	r3, [pc, #64]	@ (8007d1c <HAL_PCD_MspInit+0xbc>)
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cde:	4a0f      	ldr	r2, [pc, #60]	@ (8007d1c <HAL_PCD_MspInit+0xbc>)
 8007ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce4:	6353      	str	r3, [r2, #52]	@ 0x34
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	4b0c      	ldr	r3, [pc, #48]	@ (8007d1c <HAL_PCD_MspInit+0xbc>)
 8007cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cee:	4a0b      	ldr	r2, [pc, #44]	@ (8007d1c <HAL_PCD_MspInit+0xbc>)
 8007cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007cf6:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <HAL_PCD_MspInit+0xbc>)
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d02:	2200      	movs	r2, #0
 8007d04:	2100      	movs	r1, #0
 8007d06:	2043      	movs	r0, #67	@ 0x43
 8007d08:	f7f9 f8ed 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d0c:	2043      	movs	r0, #67	@ 0x43
 8007d0e:	f7f9 f906 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d12:	bf00      	nop
 8007d14:	3728      	adds	r7, #40	@ 0x28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	40023800 	.word	0x40023800
 8007d20:	40020000 	.word	0x40020000

08007d24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f7fe f9db 	bl	80060f6 <USBD_LL_SetupStage>
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	4619      	mov	r1, r3
 8007d72:	f7fe fa15 	bl	80061a0 <USBD_LL_DataOutStage>
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	4613      	mov	r3, r2
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	3320      	adds	r3, #32
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	4619      	mov	r1, r3
 8007da6:	f7fe fab7 	bl	8006318 <USBD_LL_DataInStage>
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe fbfb 	bl	80065bc <USBD_LL_SOF>
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	79db      	ldrb	r3, [r3, #7]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d001      	beq.n	8007de6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007de2:	f7f8 fded 	bl	80009c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dec:	7bfa      	ldrb	r2, [r7, #15]
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fb9f 	bl	8006534 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe fb46 	bl	800648e <USBD_LL_Reset>
}
 8007e02:	bf00      	nop
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fb9a 	bl	8006554 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6812      	ldr	r2, [r2, #0]
 8007e2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7adb      	ldrb	r3, [r3, #11]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e40:	4b04      	ldr	r3, [pc, #16]	@ (8007e54 <HAL_PCD_SuspendCallback+0x48>)
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	4a03      	ldr	r2, [pc, #12]	@ (8007e54 <HAL_PCD_SuspendCallback+0x48>)
 8007e46:	f043 0306 	orr.w	r3, r3, #6
 8007e4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	e000ed00 	.word	0xe000ed00

08007e58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fb90 	bl	800658c <USBD_LL_Resume>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe fbe8 	bl	8006660 <USBD_LL_IsoOUTIncomplete>
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fba4 	bl	80065fc <USBD_LL_IsoINIncomplete>
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fbfa 	bl	80066c4 <USBD_LL_DevConnected>
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fbf7 	bl	80066da <USBD_LL_DevDisconnected>
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d13c      	bne.n	8007f7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f04:	4a20      	ldr	r2, [pc, #128]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f10:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f14:	4b1c      	ldr	r3, [pc, #112]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007f1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f1e:	2204      	movs	r2, #4
 8007f20:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f22:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f24:	2202      	movs	r2, #2
 8007f26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f28:	4b17      	ldr	r3, [pc, #92]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f2e:	4b16      	ldr	r3, [pc, #88]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f30:	2202      	movs	r2, #2
 8007f32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f34:	4b14      	ldr	r3, [pc, #80]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f3a:	4b13      	ldr	r3, [pc, #76]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f40:	4b11      	ldr	r3, [pc, #68]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f46:	4b10      	ldr	r3, [pc, #64]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f52:	480d      	ldr	r0, [pc, #52]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f54:	f7fa f9b0 	bl	80022b8 <HAL_PCD_Init>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f5e:	f7f8 fd2f 	bl	80009c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f62:	2180      	movs	r1, #128	@ 0x80
 8007f64:	4808      	ldr	r0, [pc, #32]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f66:	f7fb fbc4 	bl	80036f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f6a:	2240      	movs	r2, #64	@ 0x40
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4806      	ldr	r0, [pc, #24]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f70:	f7fb fb78 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f74:	2280      	movs	r2, #128	@ 0x80
 8007f76:	2101      	movs	r1, #1
 8007f78:	4803      	ldr	r0, [pc, #12]	@ (8007f88 <USBD_LL_Init+0x94>)
 8007f7a:	f7fb fb73 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	200006c4 	.word	0x200006c4

08007f8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fa fa97 	bl	80024d6 <HAL_PCD_Start>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f930 	bl	8008214 <USBD_Get_USB_Status>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	4608      	mov	r0, r1
 8007fcc:	4611      	mov	r1, r2
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	70fb      	strb	r3, [r7, #3]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70bb      	strb	r3, [r7, #2]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fea:	78bb      	ldrb	r3, [r7, #2]
 8007fec:	883a      	ldrh	r2, [r7, #0]
 8007fee:	78f9      	ldrb	r1, [r7, #3]
 8007ff0:	f7fa ff6b 	bl	8002eca <HAL_PCD_EP_Open>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f90a 	bl	8008214 <USBD_Get_USB_Status>
 8008000:	4603      	mov	r3, r0
 8008002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008004:	7bbb      	ldrb	r3, [r7, #14]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f7fa ffb6 	bl	8002f9e <HAL_PCD_EP_Close>
 8008032:	4603      	mov	r3, r0
 8008034:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f8eb 	bl	8008214 <USBD_Get_USB_Status>
 800803e:	4603      	mov	r3, r0
 8008040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008042:	7bbb      	ldrb	r3, [r7, #14]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008066:	78fa      	ldrb	r2, [r7, #3]
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f7fb f856 	bl	800311c <HAL_PCD_EP_SetStall>
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 f8cc 	bl	8008214 <USBD_Get_USB_Status>
 800807c:	4603      	mov	r3, r0
 800807e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008080:	7bbb      	ldrb	r3, [r7, #14]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080a4:	78fa      	ldrb	r2, [r7, #3]
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fb f89a 	bl	80031e2 <HAL_PCD_EP_ClrStall>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 f8ad 	bl	8008214 <USBD_Get_USB_Status>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080be:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	da0b      	bge.n	80080fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	4613      	mov	r3, r2
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	3316      	adds	r3, #22
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	e00b      	b.n	8008114 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	4613      	mov	r3, r2
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008112:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f7fa fe9f 	bl	8002e82 <HAL_PCD_SetAddress>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f862 	bl	8008214 <USBD_Get_USB_Status>
 8008150:	4603      	mov	r3, r0
 8008152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008154:	7bbb      	ldrb	r3, [r7, #14]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b086      	sub	sp, #24
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
 800816a:	460b      	mov	r3, r1
 800816c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800817c:	7af9      	ldrb	r1, [r7, #11]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	f7fa ff91 	bl	80030a8 <HAL_PCD_EP_Transmit>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	4618      	mov	r0, r3
 800818e:	f000 f841 	bl	8008214 <USBD_Get_USB_Status>
 8008192:	4603      	mov	r3, r0
 8008194:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008196:	7dbb      	ldrb	r3, [r7, #22]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	460b      	mov	r3, r1
 80081ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80081be:	7af9      	ldrb	r1, [r7, #11]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	f7fa ff35 	bl	8003032 <HAL_PCD_EP_Receive>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f820 	bl	8008214 <USBD_Get_USB_Status>
 80081d4:	4603      	mov	r3, r0
 80081d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80081ec:	4b03      	ldr	r3, [pc, #12]	@ (80081fc <USBD_static_malloc+0x18>)
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000ba8 	.word	0x20000ba8

08008200 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	2b03      	cmp	r3, #3
 8008226:	d817      	bhi.n	8008258 <USBD_Get_USB_Status+0x44>
 8008228:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <USBD_Get_USB_Status+0x1c>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008241 	.word	0x08008241
 8008234:	08008247 	.word	0x08008247
 8008238:	0800824d 	.word	0x0800824d
 800823c:	08008253 	.word	0x08008253
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
    break;
 8008244:	e00b      	b.n	800825e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008246:	2303      	movs	r3, #3
 8008248:	73fb      	strb	r3, [r7, #15]
    break;
 800824a:	e008      	b.n	800825e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800824c:	2301      	movs	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
    break;
 8008250:	e005      	b.n	800825e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008252:	2303      	movs	r3, #3
 8008254:	73fb      	strb	r3, [r7, #15]
    break;
 8008256:	e002      	b.n	800825e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008258:	2303      	movs	r3, #3
 800825a:	73fb      	strb	r3, [r7, #15]
    break;
 800825c:	bf00      	nop
  }
  return usb_status;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <memset>:
 800826c:	4402      	add	r2, r0
 800826e:	4603      	mov	r3, r0
 8008270:	4293      	cmp	r3, r2
 8008272:	d100      	bne.n	8008276 <memset+0xa>
 8008274:	4770      	bx	lr
 8008276:	f803 1b01 	strb.w	r1, [r3], #1
 800827a:	e7f9      	b.n	8008270 <memset+0x4>

0800827c <strncmp>:
 800827c:	b510      	push	{r4, lr}
 800827e:	b16a      	cbz	r2, 800829c <strncmp+0x20>
 8008280:	3901      	subs	r1, #1
 8008282:	1884      	adds	r4, r0, r2
 8008284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008288:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800828c:	429a      	cmp	r2, r3
 800828e:	d103      	bne.n	8008298 <strncmp+0x1c>
 8008290:	42a0      	cmp	r0, r4
 8008292:	d001      	beq.n	8008298 <strncmp+0x1c>
 8008294:	2a00      	cmp	r2, #0
 8008296:	d1f5      	bne.n	8008284 <strncmp+0x8>
 8008298:	1ad0      	subs	r0, r2, r3
 800829a:	bd10      	pop	{r4, pc}
 800829c:	4610      	mov	r0, r2
 800829e:	e7fc      	b.n	800829a <strncmp+0x1e>

080082a0 <__libc_init_array>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	4d0d      	ldr	r5, [pc, #52]	@ (80082d8 <__libc_init_array+0x38>)
 80082a4:	4c0d      	ldr	r4, [pc, #52]	@ (80082dc <__libc_init_array+0x3c>)
 80082a6:	1b64      	subs	r4, r4, r5
 80082a8:	10a4      	asrs	r4, r4, #2
 80082aa:	2600      	movs	r6, #0
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	d109      	bne.n	80082c4 <__libc_init_array+0x24>
 80082b0:	4d0b      	ldr	r5, [pc, #44]	@ (80082e0 <__libc_init_array+0x40>)
 80082b2:	4c0c      	ldr	r4, [pc, #48]	@ (80082e4 <__libc_init_array+0x44>)
 80082b4:	f000 f818 	bl	80082e8 <_init>
 80082b8:	1b64      	subs	r4, r4, r5
 80082ba:	10a4      	asrs	r4, r4, #2
 80082bc:	2600      	movs	r6, #0
 80082be:	42a6      	cmp	r6, r4
 80082c0:	d105      	bne.n	80082ce <__libc_init_array+0x2e>
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c8:	4798      	blx	r3
 80082ca:	3601      	adds	r6, #1
 80082cc:	e7ee      	b.n	80082ac <__libc_init_array+0xc>
 80082ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d2:	4798      	blx	r3
 80082d4:	3601      	adds	r6, #1
 80082d6:	e7f2      	b.n	80082be <__libc_init_array+0x1e>
 80082d8:	0800837c 	.word	0x0800837c
 80082dc:	0800837c 	.word	0x0800837c
 80082e0:	0800837c 	.word	0x0800837c
 80082e4:	08008380 	.word	0x08008380

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	bf00      	nop
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	bf00      	nop
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr
