
SWIS_USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080090b0  080090b0  0000a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f4  080092f4  0000b154  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080092f4  080092f4  0000a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092fc  080092fc  0000b154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092fc  080092fc  0000a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009300  08009300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08009304  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c8c  20000154  08009458  0000b154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de0  08009458  0000bde0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137f8  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b9  00000000  00000000  0001e97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00022138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd5  00000000  00000000  00023228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198db  00000000  00000000  00023efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bcf  00000000  00000000  0003d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c87b  00000000  00000000  000553a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa8  00000000  00000000  000e1c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e6710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009098 	.word	0x08009098

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	08009098 	.word	0x08009098

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	@ 0x30
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
 80005d6:	4b82      	ldr	r3, [pc, #520]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a81      	ldr	r2, [pc, #516]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005dc:	f043 0310 	orr.w	r3, r3, #16
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b7f      	ldr	r3, [pc, #508]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0310 	and.w	r3, r3, #16
 80005ea:	61bb      	str	r3, [r7, #24]
 80005ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	4b7b      	ldr	r3, [pc, #492]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a7a      	ldr	r2, [pc, #488]	@ (80007e0 <MX_GPIO_Init+0x224>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b78      	ldr	r3, [pc, #480]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	4b74      	ldr	r3, [pc, #464]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a73      	ldr	r2, [pc, #460]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b71      	ldr	r3, [pc, #452]	@ (80007e0 <MX_GPIO_Init+0x224>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b6d      	ldr	r3, [pc, #436]	@ (80007e0 <MX_GPIO_Init+0x224>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a6c      	ldr	r2, [pc, #432]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b6a      	ldr	r3, [pc, #424]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b66      	ldr	r3, [pc, #408]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a65      	ldr	r2, [pc, #404]	@ (80007e0 <MX_GPIO_Init+0x224>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b63      	ldr	r3, [pc, #396]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b5f      	ldr	r3, [pc, #380]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a5e      	ldr	r2, [pc, #376]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b5c      	ldr	r3, [pc, #368]	@ (80007e0 <MX_GPIO_Init+0x224>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2108      	movs	r1, #8
 800067e:	4859      	ldr	r0, [pc, #356]	@ (80007e4 <MX_GPIO_Init+0x228>)
 8000680:	f000 ffc8 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	4857      	ldr	r0, [pc, #348]	@ (80007e8 <MX_GPIO_Init+0x22c>)
 800068a:	f000 ffc3 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800068e:	2200      	movs	r2, #0
 8000690:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000694:	4855      	ldr	r0, [pc, #340]	@ (80007ec <MX_GPIO_Init+0x230>)
 8000696:	f000 ffbd 	bl	8001614 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800069a:	2304      	movs	r3, #4
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	484d      	ldr	r0, [pc, #308]	@ (80007e4 <MX_GPIO_Init+0x228>)
 80006ae:	f000 fe2d 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006b2:	2308      	movs	r3, #8
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4846      	ldr	r0, [pc, #280]	@ (80007e4 <MX_GPIO_Init+0x228>)
 80006ca:	f000 fe1f 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4840      	ldr	r0, [pc, #256]	@ (80007e4 <MX_GPIO_Init+0x228>)
 80006e4:	f000 fe12 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	483a      	ldr	r0, [pc, #232]	@ (80007e8 <MX_GPIO_Init+0x22c>)
 8000700:	f000 fe04 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000704:	2308      	movs	r3, #8
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000714:	2305      	movs	r3, #5
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4832      	ldr	r0, [pc, #200]	@ (80007e8 <MX_GPIO_Init+0x22c>)
 8000720:	f000 fdf4 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000724:	2301      	movs	r3, #1
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000728:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	482d      	ldr	r0, [pc, #180]	@ (80007f0 <MX_GPIO_Init+0x234>)
 800073a:	f000 fde7 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800073e:	2310      	movs	r3, #16
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800074e:	2306      	movs	r3, #6
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4825      	ldr	r0, [pc, #148]	@ (80007f0 <MX_GPIO_Init+0x234>)
 800075a:	f000 fdd7 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800075e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000770:	2305      	movs	r3, #5
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <MX_GPIO_Init+0x238>)
 800077c:	f000 fdc6 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000780:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000784:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4814      	ldr	r0, [pc, #80]	@ (80007ec <MX_GPIO_Init+0x230>)
 800079a:	f000 fdb7 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800079e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007b0:	2306      	movs	r3, #6
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <MX_GPIO_Init+0x22c>)
 80007bc:	f000 fda6 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007c0:	2320      	movs	r3, #32
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	@ (80007ec <MX_GPIO_Init+0x230>)
 80007d4:	f000 fd9a 	bl	800130c <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3730      	adds	r7, #48	@ 0x30
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020400 	.word	0x40020400

080007f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2C1_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	@ (800084c <MX_I2C1_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000804:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <MX_I2C1_Init+0x58>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800081a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000836:	f000 ff21 	bl	800167c <HAL_I2C_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000840:	f000 fa64 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000170 	.word	0x20000170
 800084c:	40005400 	.word	0x40005400
 8000850:	000186a0 	.word	0x000186a0

08000854 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a19      	ldr	r2, [pc, #100]	@ (80008d8 <HAL_I2C_MspInit+0x84>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d12c      	bne.n	80008d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHTC3_SDA_Pin|SHTC3_SCL_Pin;
 8000892:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000898:	2312      	movs	r3, #18
 800089a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a4:	2304      	movs	r3, #4
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <HAL_I2C_MspInit+0x8c>)
 80008b0:	f000 fd2c 	bl	800130c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_I2C_MspInit+0x88>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40005400 	.word	0x40005400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b092      	sub	sp, #72	@ 0x48
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fb67 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f9a1 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff fe63 	bl	80005bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008f6:	f007 fa23 	bl	8007d40 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80008fa:	f7ff ff7d 	bl	80007f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80008fe:	f000 fa0b 	bl	8000d18 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(0 == SIMULATE)
  {
	  shtc3_init(&shtc3_sensor, &hi2c1, SHTC3_I2C_ADDR);
 8000902:	2270      	movs	r2, #112	@ 0x70
 8000904:	4927      	ldr	r1, [pc, #156]	@ (80009a4 <main+0xc0>)
 8000906:	4828      	ldr	r0, [pc, #160]	@ (80009a8 <main+0xc4>)
 8000908:	f007 f83d 	bl	8007986 <shtc3_init>
	  shtc3_wakeup(&shtc3_sensor);
 800090c:	4826      	ldr	r0, [pc, #152]	@ (80009a8 <main+0xc4>)
 800090e:	f007 f91b 	bl	8007b48 <shtc3_wakeup>
	  shtc3_get_id(&shtc3_sensor);
 8000912:	4825      	ldr	r0, [pc, #148]	@ (80009a8 <main+0xc4>)
 8000914:	f007 f853 	bl	80079be <shtc3_get_id>
	  shtc3_sleep(&shtc3_sensor);
 8000918:	4823      	ldr	r0, [pc, #140]	@ (80009a8 <main+0xc4>)
 800091a:	f007 f904 	bl	8007b26 <shtc3_sleep>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(0 == SIMULATE)
	{
		uint8_t ret	= 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		switch(shtc3_sensor.state)
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <main+0xc4>)
 8000926:	7a9b      	ldrb	r3, [r3, #10]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d006      	beq.n	800093a <main+0x56>
 800092c:	2b03      	cmp	r3, #3
 800092e:	dc33      	bgt.n	8000998 <main+0xb4>
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00f      	beq.n	8000954 <main+0x70>
 8000934:	2b02      	cmp	r3, #2
 8000936:	d031      	beq.n	800099c <main+0xb8>
				break;

			case SHTC3_IDLE:
			default:
	//			shtc3_get_temp_and_hum(&shtc3_sensor);
				break;
 8000938:	e02e      	b.n	8000998 <main+0xb4>
				 ret = shtc3_raw_write_temp_and_hum(&shtc3_sensor);
 800093a:	481b      	ldr	r0, [pc, #108]	@ (80009a8 <main+0xc4>)
 800093c:	f007 f87c 	bl	8007a38 <shtc3_raw_write_temp_and_hum>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				if(0 == ret) {shtc3_sensor.state = SHTC3_SINGLE_MEASURE;}
 8000946:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <main+0x70>
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <main+0xc4>)
 8000950:	2201      	movs	r2, #1
 8000952:	729a      	strb	r2, [r3, #10]
				uint8_t report[64] = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2240      	movs	r2, #64	@ 0x40
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 ff0c 	bl	8008778 <memset>
				ret = shtc3_raw_read_temp_and_hum(&shtc3_sensor);
 8000960:	4811      	ldr	r0, [pc, #68]	@ (80009a8 <main+0xc4>)
 8000962:	f007 f87f 	bl	8007a64 <shtc3_raw_read_temp_and_hum>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				if(0 == ret)
 800096c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000970:	2b00      	cmp	r3, #0
 8000972:	d115      	bne.n	80009a0 <main+0xbc>
					shtc3_sleep(&shtc3_sensor);
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <main+0xc4>)
 8000976:	f007 f8d6 	bl	8007b26 <shtc3_sleep>
					memcpy(&report[0], &shtc3_sensor.temp, sizeof(shtc3_sensor.temp));
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <main+0xc4>)
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	607b      	str	r3, [r7, #4]
					memcpy(&report[4], &shtc3_sensor.hum, sizeof(shtc3_sensor.hum));
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <main+0xc4>)
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	60bb      	str	r3, [r7, #8]
					usbSend(report, 8);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2108      	movs	r1, #8
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f832 	bl	80009f4 <usbSend>
					shtc3_sensor.state = SHTC3_IDLE;
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <main+0xc4>)
 8000992:	2200      	movs	r2, #0
 8000994:	729a      	strb	r2, [r3, #10]
				break;
 8000996:	e003      	b.n	80009a0 <main+0xbc>
				break;
 8000998:	bf00      	nop
 800099a:	e7c0      	b.n	800091e <main+0x3a>
				break;
 800099c:	bf00      	nop
 800099e:	e7be      	b.n	800091e <main+0x3a>
				break;
 80009a0:	bf00      	nop
	if(0 == SIMULATE)
 80009a2:	e7bc      	b.n	800091e <main+0x3a>
 80009a4:	20000170 	.word	0x20000170
 80009a8:	200001c4 	.word	0x200001c4

080009ac <compareStrings>:
  }
  /* USER CODE END 3 */
}

static bool compareStrings(uint8_t *buffer, char *str, uint16_t max_len)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	4613      	mov	r3, r2
 80009b8:	80fb      	strh	r3, [r7, #6]
	return (0 == strncmp((char *)buffer, str, (strlen(str) > max_len ? max_len : strlen(str))));
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	f7ff fc10 	bl	80001e0 <strlen>
 80009c0:	4602      	mov	r2, r0
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d901      	bls.n	80009cc <compareStrings+0x20>
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	e003      	b.n	80009d4 <compareStrings+0x28>
 80009cc:	68b8      	ldr	r0, [r7, #8]
 80009ce:	f7ff fc07 	bl	80001e0 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	68b9      	ldr	r1, [r7, #8]
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f007 fed5 	bl	8008788 <strncmp>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf0c      	ite	eq
 80009e4:	2301      	moveq	r3, #1
 80009e6:	2300      	movne	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <usbSend>:

static void usbSend(uint8_t *report, uint8_t len)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <usbSend+0x40>)
 8000a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d10e      	bne.n	8000a2a <usbSend+0x36>
	{
		while (((USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData)->state != CUSTOM_HID_IDLE);
 8000a0c:	bf00      	nop
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <usbSend+0x40>)
 8000a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000a14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1f8      	bne.n	8000a0e <usbSend+0x1a>
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <usbSend+0x40>)
 8000a26:	f005 fb09 	bl	800603c <USBD_CUSTOM_HID_SendReport>
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000280 	.word	0x20000280

08000a38 <shtc3ParsePeriod>:

static bool shtc3ParsePeriod(const uint8_t *buffer, uint32_t *period_out)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    if (!buffer || !period_out)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <shtc3ParsePeriod+0x16>
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <shtc3ParsePeriod+0x1a>
        return false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e021      	b.n	8000a96 <shtc3ParsePeriod+0x5e>

    uint32_t prefix_len = strlen(SHTC3_CMD_SET_PERIOD);
 8000a52:	230d      	movs	r3, #13
 8000a54:	617b      	str	r3, [r7, #20]

    // Sprawdzenie prefiksu
    if (strncmp((const char *)buffer, SHTC3_CMD_SET_PERIOD, prefix_len) != 0)
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	4911      	ldr	r1, [pc, #68]	@ (8000aa0 <shtc3ParsePeriod+0x68>)
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f007 fe94 	bl	8008788 <strncmp>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <shtc3ParsePeriod+0x32>
        return false;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e015      	b.n	8000a96 <shtc3ParsePeriod+0x5e>

    // Wskaźnik do miejsca po "SHTC3 PERIOD:"
    const char *number_str = (const char *)(buffer + prefix_len);
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	4413      	add	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]

    // Parsowanie liczby
    char *endptr;
    unsigned long val = strtoul(number_str, &endptr, 10);
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	220a      	movs	r2, #10
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6938      	ldr	r0, [r7, #16]
 8000a7c:	f007 fe50 	bl	8008720 <strtoul>
 8000a80:	60f8      	str	r0, [r7, #12]

    // Sprawdzenie, czy udało się sparsować oraz czy nie przekroczono uint32_t
    if (number_str == endptr || val > UINT32_MAX || val < 0)
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d101      	bne.n	8000a8e <shtc3ParsePeriod+0x56>
        return false;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e003      	b.n	8000a96 <shtc3ParsePeriod+0x5e>

    *period_out = (uint32_t)val;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	601a      	str	r2, [r3, #0]
    return true;
 8000a94:	2301      	movs	r3, #1
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	080090b0 	.word	0x080090b0

08000aa4 <usb_parser>:

void usb_parser(uint8_t *buffer, uint16_t max_len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
	memset(report, 0,sizeof(report));
 8000ab0:	2240      	movs	r2, #64	@ 0x40
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4853      	ldr	r0, [pc, #332]	@ (8000c04 <usb_parser+0x160>)
 8000ab6:	f007 fe5f 	bl	8008778 <memset>
	if(compareStrings(buffer, SHTC3_CMD_READ_DATA, max_len))
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4952      	ldr	r1, [pc, #328]	@ (8000c08 <usb_parser+0x164>)
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff73 	bl	80009ac <compareStrings>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00c      	beq.n	8000ae6 <usb_parser+0x42>
	{
		memcpy(&report[0], &shtc3_sensor.temp, sizeof(shtc3_sensor.temp));
 8000acc:	4b4f      	ldr	r3, [pc, #316]	@ (8000c0c <usb_parser+0x168>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4a4c      	ldr	r2, [pc, #304]	@ (8000c04 <usb_parser+0x160>)
 8000ad2:	6013      	str	r3, [r2, #0]
		memcpy(&report[4], &shtc3_sensor.hum, sizeof(shtc3_sensor.hum));
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8000c0c <usb_parser+0x168>)
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8000c04 <usb_parser+0x160>)
 8000ada:	6053      	str	r3, [r2, #4]
		usbSend(report, 8);
 8000adc:	2108      	movs	r1, #8
 8000ade:	4849      	ldr	r0, [pc, #292]	@ (8000c04 <usb_parser+0x160>)
 8000ae0:	f7ff ff88 	bl	80009f4 <usbSend>
		{
			sprintf((char *)report, "SHTC3 PERIOD INCORRECT");
			usbSend(report, strlen((char *)report));
		}
	}
}
 8000ae4:	e08a      	b.n	8000bfc <usb_parser+0x158>
	else if(compareStrings(buffer, SHTC3_CMD_READ_STATE, max_len))
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4949      	ldr	r1, [pc, #292]	@ (8000c10 <usb_parser+0x16c>)
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff5d 	bl	80009ac <compareStrings>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d02d      	beq.n	8000b54 <usb_parser+0xb0>
		switch (shtc3_sensor.state)
 8000af8:	4b44      	ldr	r3, [pc, #272]	@ (8000c0c <usb_parser+0x168>)
 8000afa:	7a9b      	ldrb	r3, [r3, #10]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d81a      	bhi.n	8000b36 <usb_parser+0x92>
 8000b00:	a201      	add	r2, pc, #4	@ (adr r2, 8000b08 <usb_parser+0x64>)
 8000b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b06:	bf00      	nop
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000b23 	.word	0x08000b23
 8000b10:	08000b2d 	.word	0x08000b2d
 8000b14:	08000b23 	.word	0x08000b23
				sprintf((char *)report, "SHTC3 IDLE");
 8000b18:	493e      	ldr	r1, [pc, #248]	@ (8000c14 <usb_parser+0x170>)
 8000b1a:	483a      	ldr	r0, [pc, #232]	@ (8000c04 <usb_parser+0x160>)
 8000b1c:	f007 fe0a 	bl	8008734 <siprintf>
				break;
 8000b20:	e00e      	b.n	8000b40 <usb_parser+0x9c>
				sprintf((char *)report, "SHTC3 SINGLE MEASURE");
 8000b22:	493d      	ldr	r1, [pc, #244]	@ (8000c18 <usb_parser+0x174>)
 8000b24:	4837      	ldr	r0, [pc, #220]	@ (8000c04 <usb_parser+0x160>)
 8000b26:	f007 fe05 	bl	8008734 <siprintf>
				break;
 8000b2a:	e009      	b.n	8000b40 <usb_parser+0x9c>
				sprintf((char *)report, "SHTC3 CYCLIC MEASURE");
 8000b2c:	493b      	ldr	r1, [pc, #236]	@ (8000c1c <usb_parser+0x178>)
 8000b2e:	4835      	ldr	r0, [pc, #212]	@ (8000c04 <usb_parser+0x160>)
 8000b30:	f007 fe00 	bl	8008734 <siprintf>
				break;
 8000b34:	e004      	b.n	8000b40 <usb_parser+0x9c>
				sprintf((char *)report, "SHTC3 UNKNOW");
 8000b36:	493a      	ldr	r1, [pc, #232]	@ (8000c20 <usb_parser+0x17c>)
 8000b38:	4832      	ldr	r0, [pc, #200]	@ (8000c04 <usb_parser+0x160>)
 8000b3a:	f007 fdfb 	bl	8008734 <siprintf>
				break;
 8000b3e:	bf00      	nop
		usbSend(report, strlen((char *)report));
 8000b40:	4830      	ldr	r0, [pc, #192]	@ (8000c04 <usb_parser+0x160>)
 8000b42:	f7ff fb4d 	bl	80001e0 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	482d      	ldr	r0, [pc, #180]	@ (8000c04 <usb_parser+0x160>)
 8000b4e:	f7ff ff51 	bl	80009f4 <usbSend>
}
 8000b52:	e053      	b.n	8000bfc <usb_parser+0x158>
	else if(compareStrings(buffer, SHTC3_CMD_SET_SINGLE, max_len))
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4932      	ldr	r1, [pc, #200]	@ (8000c24 <usb_parser+0x180>)
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff26 	bl	80009ac <compareStrings>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d00c      	beq.n	8000b80 <usb_parser+0xdc>
		switch (shtc3_sensor.state)
 8000b66:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <usb_parser+0x168>)
 8000b68:	7a9b      	ldrb	r3, [r3, #10]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <usb_parser+0xd2>
				shtc3_sensor.state = SHTC3_SINGLE_MEASURE_START;
 8000b6e:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <usb_parser+0x168>)
 8000b70:	2203      	movs	r2, #3
 8000b72:	729a      	strb	r2, [r3, #10]
				break;
 8000b74:	e042      	b.n	8000bfc <usb_parser+0x158>
				sprintf((char *)report, "SHTC3 BUSY");
 8000b76:	492c      	ldr	r1, [pc, #176]	@ (8000c28 <usb_parser+0x184>)
 8000b78:	4822      	ldr	r0, [pc, #136]	@ (8000c04 <usb_parser+0x160>)
 8000b7a:	f007 fddb 	bl	8008734 <siprintf>
				break;
 8000b7e:	e03d      	b.n	8000bfc <usb_parser+0x158>
	else if(compareStrings(buffer, SHTC3_CMD_SET_PERIOD, max_len))
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4929      	ldr	r1, [pc, #164]	@ (8000c2c <usb_parser+0x188>)
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff10 	bl	80009ac <compareStrings>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d034      	beq.n	8000bfc <usb_parser+0x158>
		if(strlen((char *)buffer) < strlen(SHTC3_CMD_SET_PERIOD))
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fb24 	bl	80001e0 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b0c      	cmp	r3, #12
 8000b9c:	d80c      	bhi.n	8000bb8 <usb_parser+0x114>
			sprintf((char *)report, "SHTC3 PERIOD INCORRECT");
 8000b9e:	4924      	ldr	r1, [pc, #144]	@ (8000c30 <usb_parser+0x18c>)
 8000ba0:	4818      	ldr	r0, [pc, #96]	@ (8000c04 <usb_parser+0x160>)
 8000ba2:	f007 fdc7 	bl	8008734 <siprintf>
			usbSend(report, strlen((char *)report));
 8000ba6:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <usb_parser+0x160>)
 8000ba8:	f7ff fb1a 	bl	80001e0 <strlen>
 8000bac:	4603      	mov	r3, r0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <usb_parser+0x160>)
 8000bb4:	f7ff ff1e 	bl	80009f4 <usbSend>
		uint32_t periodTmp = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
		bool ret = shtc3ParsePeriod(buffer, &periodTmp);
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff38 	bl	8000a38 <shtc3ParsePeriod>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
		if(ret)
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d006      	beq.n	8000be0 <usb_parser+0x13c>
			shtc3_sensor.state = SHTC3_CYCLIC_MEASURE_START;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <usb_parser+0x168>)
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	729a      	strb	r2, [r3, #10]
			shtc3_sensor.period_ms = periodTmp;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <usb_parser+0x168>)
 8000bdc:	6153      	str	r3, [r2, #20]
}
 8000bde:	e00d      	b.n	8000bfc <usb_parser+0x158>
			sprintf((char *)report, "SHTC3 PERIOD INCORRECT");
 8000be0:	4913      	ldr	r1, [pc, #76]	@ (8000c30 <usb_parser+0x18c>)
 8000be2:	4808      	ldr	r0, [pc, #32]	@ (8000c04 <usb_parser+0x160>)
 8000be4:	f007 fda6 	bl	8008734 <siprintf>
			usbSend(report, strlen((char *)report));
 8000be8:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <usb_parser+0x160>)
 8000bea:	f7ff faf9 	bl	80001e0 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <usb_parser+0x160>)
 8000bf6:	f7ff fefd 	bl	80009f4 <usbSend>
}
 8000bfa:	e7ff      	b.n	8000bfc <usb_parser+0x158>
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200001dc 	.word	0x200001dc
 8000c08:	080090c0 	.word	0x080090c0
 8000c0c:	200001c4 	.word	0x200001c4
 8000c10:	080090cc 	.word	0x080090cc
 8000c14:	080090d8 	.word	0x080090d8
 8000c18:	080090e4 	.word	0x080090e4
 8000c1c:	080090fc 	.word	0x080090fc
 8000c20:	08009114 	.word	0x08009114
 8000c24:	08009124 	.word	0x08009124
 8000c28:	08009134 	.word	0x08009134
 8000c2c:	080090b0 	.word	0x080090b0
 8000c30:	08009140 	.word	0x08009140

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	@ 0x50
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	2230      	movs	r2, #48	@ 0x30
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f007 fd98 	bl	8008778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <SystemClock_Config+0xd0>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	4a28      	ldr	r2, [pc, #160]	@ (8000d04 <SystemClock_Config+0xd0>)
 8000c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c68:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <SystemClock_Config+0xd0>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <SystemClock_Config+0xd4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <SystemClock_Config+0xd4>)
 8000c7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <SystemClock_Config+0xd4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c90:	2303      	movs	r3, #3
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cb0:	2348      	movs	r3, #72	@ 0x48
 8000cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 ff0f 	bl	8003ae4 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ccc:	f000 f81e 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 f971 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cf8:	f000 f808 	bl	8000d0c <Error_Handler>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3750      	adds	r7, #80	@ 0x50
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40007000 	.word	0x40007000

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <Error_Handler+0x8>

08000d18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d1e:	4a18      	ldr	r2, [pc, #96]	@ (8000d80 <MX_SPI1_Init+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d64:	220a      	movs	r2, #10
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <MX_SPI1_Init+0x64>)
 8000d6a:	f003 fb3f 	bl	80043ec <HAL_SPI_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d74:	f7ff ffca 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000021c 	.word	0x2000021c
 8000d80:	40013000 	.word	0x40013000

08000d84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_SPI_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BME280_SCK_Pin|BME280_MISO_Pin|BME280_MOSI_Pin;
 8000dde:	23e0      	movs	r3, #224	@ 0xe0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <HAL_SPI_MspInit+0x8c>)
 8000dfa:	f000 fa87 	bl	800130c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e52:	2007      	movs	r0, #7
 8000e54:	f000 fa18 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <NMI_Handler+0x4>

08000e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eba:	f000 f8d1 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <OTG_FS_IRQHandler+0x10>)
 8000eca:	f001 fd15 	bl	80028f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000075c 	.word	0x2000075c

08000ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <_sbrk+0x5c>)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <_sbrk+0x60>)
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <_sbrk+0x64>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <_sbrk+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d207      	bcs.n	8000f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f08:	f007 fc50 	bl	80087ac <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e009      	b.n	8000f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <_sbrk+0x64>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20020000 	.word	0x20020000
 8000f38:	00000400 	.word	0x00000400
 8000f3c:	20000274 	.word	0x20000274
 8000f40:	20000de0 	.word	0x20000de0

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f007 fc0f 	bl	80087b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fca3 	bl	80008e4 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8000fac:	08009304 	.word	0x08009304
  ldr r2, =_sbss
 8000fb0:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8000fb4:	20000de0 	.word	0x20000de0

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f94f 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff ff10 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f967 	bl	80012f2 <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f000 f92f 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	@ (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20000278 	.word	0x20000278

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000278 	.word	0x20000278

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	@ (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	@ (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff29 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff3e 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff8e 	bl	80011dc <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff31 	bl	800114c <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	@ 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e159      	b.n	80015dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 8148 	bne.w	80015d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d005      	beq.n	800135e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	2b02      	cmp	r3, #2
 800135c:	d130      	bne.n	80013c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001394:	2201      	movs	r2, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 0201 	and.w	r2, r3, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d017      	beq.n	80013fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a2 	beq.w	80015d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b57      	ldr	r3, [pc, #348]	@ (80015f4 <HAL_GPIO_Init+0x2e8>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	4a56      	ldr	r2, [pc, #344]	@ (80015f4 <HAL_GPIO_Init+0x2e8>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a2:	4b54      	ldr	r3, [pc, #336]	@ (80015f4 <HAL_GPIO_Init+0x2e8>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ae:	4a52      	ldr	r2, [pc, #328]	@ (80015f8 <HAL_GPIO_Init+0x2ec>)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a49      	ldr	r2, [pc, #292]	@ (80015fc <HAL_GPIO_Init+0x2f0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_GPIO_Init+0x202>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a48      	ldr	r2, [pc, #288]	@ (8001600 <HAL_GPIO_Init+0x2f4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0x1fe>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a47      	ldr	r2, [pc, #284]	@ (8001604 <HAL_GPIO_Init+0x2f8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_Init+0x1fa>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a46      	ldr	r2, [pc, #280]	@ (8001608 <HAL_GPIO_Init+0x2fc>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x1f6>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a45      	ldr	r2, [pc, #276]	@ (800160c <HAL_GPIO_Init+0x300>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_Init+0x1f2>
 80014fa:	2304      	movs	r3, #4
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x204>
 80014fe:	2307      	movs	r3, #7
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x204>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x204>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x204>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x204>
 800150e:	2300      	movs	r3, #0
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001520:	4935      	ldr	r1, [pc, #212]	@ (80015f8 <HAL_GPIO_Init+0x2ec>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152e:	4b38      	ldr	r3, [pc, #224]	@ (8001610 <HAL_GPIO_Init+0x304>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001552:	4a2f      	ldr	r2, [pc, #188]	@ (8001610 <HAL_GPIO_Init+0x304>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001558:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_GPIO_Init+0x304>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800157c:	4a24      	ldr	r2, [pc, #144]	@ (8001610 <HAL_GPIO_Init+0x304>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001582:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <HAL_GPIO_Init+0x304>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001610 <HAL_GPIO_Init+0x304>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_GPIO_Init+0x304>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <HAL_GPIO_Init+0x304>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	f67f aea2 	bls.w	8001328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	@ 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013800 	.word	0x40013800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40013c00 	.word	0x40013c00

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001630:	e003      	b.n	800163a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	041a      	lsls	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001658:	887a      	ldrh	r2, [r7, #2]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	041a      	lsls	r2, r3, #16
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43d9      	mvns	r1, r3
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	400b      	ands	r3, r1
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	619a      	str	r2, [r3, #24]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e12b      	b.n	80018e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff f8d6 	bl	8000854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2224      	movs	r2, #36	@ 0x24
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e0:	f002 fe70 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 80016e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4a81      	ldr	r2, [pc, #516]	@ (80018f0 <HAL_I2C_Init+0x274>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d807      	bhi.n	8001700 <HAL_I2C_Init+0x84>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a80      	ldr	r2, [pc, #512]	@ (80018f4 <HAL_I2C_Init+0x278>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	bf94      	ite	ls
 80016f8:	2301      	movls	r3, #1
 80016fa:	2300      	movhi	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e006      	b.n	800170e <HAL_I2C_Init+0x92>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a7d      	ldr	r2, [pc, #500]	@ (80018f8 <HAL_I2C_Init+0x27c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0e7      	b.n	80018e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4a78      	ldr	r2, [pc, #480]	@ (80018fc <HAL_I2C_Init+0x280>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a6a      	ldr	r2, [pc, #424]	@ (80018f0 <HAL_I2C_Init+0x274>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d802      	bhi.n	8001750 <HAL_I2C_Init+0xd4>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	e009      	b.n	8001764 <HAL_I2C_Init+0xe8>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4a69      	ldr	r2, [pc, #420]	@ (8001900 <HAL_I2C_Init+0x284>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	3301      	adds	r3, #1
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001776:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	495c      	ldr	r1, [pc, #368]	@ (80018f0 <HAL_I2C_Init+0x274>)
 8001780:	428b      	cmp	r3, r1
 8001782:	d819      	bhi.n	80017b8 <HAL_I2C_Init+0x13c>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1e59      	subs	r1, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001798:	400b      	ands	r3, r1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_I2C_Init+0x138>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e59      	subs	r1, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b2:	e051      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 80017b4:	2304      	movs	r3, #4
 80017b6:	e04f      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_I2C_Init+0x168>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1e58      	subs	r0, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	e012      	b.n	800180a <HAL_I2C_Init+0x18e>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e58      	subs	r0, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Init+0x196>
 800180e:	2301      	movs	r3, #1
 8001810:	e022      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10e      	bne.n	8001838 <HAL_I2C_Init+0x1bc>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e58      	subs	r0, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	440b      	add	r3, r1
 8001828:	fbb0 f3f3 	udiv	r3, r0, r3
 800182c:	3301      	adds	r3, #1
 800182e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001836:	e00f      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	0099      	lsls	r1, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	6809      	ldr	r1, [r1, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6911      	ldr	r1, [r2, #16]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68d2      	ldr	r2, [r2, #12]
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	000186a0 	.word	0x000186a0
 80018f4:	001e847f 	.word	0x001e847f
 80018f8:	003d08ff 	.word	0x003d08ff
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	461a      	mov	r2, r3
 8001910:	460b      	mov	r3, r1
 8001912:	817b      	strh	r3, [r7, #10]
 8001914:	4613      	mov	r3, r2
 8001916:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff fbb6 	bl	8001088 <HAL_GetTick>
 800191c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b20      	cmp	r3, #32
 8001928:	f040 80e0 	bne.w	8001aec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2319      	movs	r3, #25
 8001932:	2201      	movs	r2, #1
 8001934:	4970      	ldr	r1, [pc, #448]	@ (8001af8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fc64 	bl	8002204 <I2C_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001942:	2302      	movs	r3, #2
 8001944:	e0d3      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_I2C_Master_Transmit+0x50>
 8001950:	2302      	movs	r3, #2
 8001952:	e0cc      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d007      	beq.n	800197a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001988:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2221      	movs	r2, #33	@ 0x21
 800198e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2210      	movs	r2, #16
 8001996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	893a      	ldrh	r2, [r7, #8]
 80019aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a50      	ldr	r2, [pc, #320]	@ (8001afc <HAL_I2C_Master_Transmit+0x1f8>)
 80019ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019bc:	8979      	ldrh	r1, [r7, #10]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 face 	bl	8001f64 <I2C_MasterRequestWrite>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e08d      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019e8:	e066      	b.n	8001ab8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fd22 	bl	8002438 <I2C_WaitOnTXEFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d107      	bne.n	8001a12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e06b      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d11b      	bne.n	8001a8c <HAL_I2C_Master_Transmit+0x188>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d017      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	6a39      	ldr	r1, [r7, #32]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fd19 	bl	80024c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d107      	bne.n	8001ab4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e01a      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d194      	bne.n	80019ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e000      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
  }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	00100002 	.word	0x00100002
 8001afc:	ffff0000 	.word	0xffff0000

08001b00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	@ 0x30
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	817b      	strh	r3, [r7, #10]
 8001b10:	4613      	mov	r3, r2
 8001b12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff fab8 	bl	8001088 <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	f040 8217 	bne.w	8001f56 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2319      	movs	r3, #25
 8001b2e:	2201      	movs	r2, #1
 8001b30:	497c      	ldr	r1, [pc, #496]	@ (8001d24 <HAL_I2C_Master_Receive+0x224>)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fb66 	bl	8002204 <I2C_WaitOnFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e20a      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_I2C_Master_Receive+0x50>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e203      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d007      	beq.n	8001b76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2222      	movs	r2, #34	@ 0x22
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2210      	movs	r2, #16
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	893a      	ldrh	r2, [r7, #8]
 8001ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4a5c      	ldr	r2, [pc, #368]	@ (8001d28 <HAL_I2C_Master_Receive+0x228>)
 8001bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bb8:	8979      	ldrh	r1, [r7, #10]
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fa52 	bl	8002068 <I2C_MasterRequestRead>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1c4      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d113      	bne.n	8001bfe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	623b      	str	r3, [r7, #32]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	623b      	str	r3, [r7, #32]
 8001bea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e198      	b.n	8001f30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d11b      	bne.n	8001c3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e178      	b.n	8001f30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d11b      	bne.n	8001c7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	e158      	b.n	8001f30 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ca4:	e144      	b.n	8001f30 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	f200 80f1 	bhi.w	8001e92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d123      	bne.n	8001d00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fc4b 	bl	8002558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e145      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cfe:	e117      	b.n	8001f30 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d14e      	bne.n	8001da6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4906      	ldr	r1, [pc, #24]	@ (8001d2c <HAL_I2C_Master_Receive+0x22c>)
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fa76 	bl	8002204 <I2C_WaitOnFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e11a      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
 8001d22:	bf00      	nop
 8001d24:	00100002 	.word	0x00100002
 8001d28:	ffff0000 	.word	0xffff0000
 8001d2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001da4:	e0c4      	b.n	8001f30 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dac:	2200      	movs	r2, #0
 8001dae:	496c      	ldr	r1, [pc, #432]	@ (8001f60 <HAL_I2C_Master_Receive+0x460>)
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fa27 	bl	8002204 <I2C_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0cb      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4955      	ldr	r1, [pc, #340]	@ (8001f60 <HAL_I2C_Master_Receive+0x460>)
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f9f9 	bl	8002204 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e09d      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e90:	e04e      	b.n	8001f30 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 fb5e 	bl	8002558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e058      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d124      	bne.n	8001f30 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001efc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f47f aeb6 	bne.w	8001ca6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3728      	adds	r7, #40	@ 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	00010004 	.word	0x00010004

08001f64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	460b      	mov	r3, r1
 8001f72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d006      	beq.n	8001f8e <I2C_MasterRequestWrite+0x2a>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d003      	beq.n	8001f8e <I2C_MasterRequestWrite+0x2a>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f8c:	d108      	bne.n	8001fa0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e00b      	b.n	8001fb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	2b12      	cmp	r3, #18
 8001fa6:	d107      	bne.n	8001fb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f91d 	bl	8002204 <I2C_WaitOnFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00d      	beq.n	8001fec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fde:	d103      	bne.n	8001fe8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e035      	b.n	8002058 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ff4:	d108      	bne.n	8002008 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ff6:	897b      	ldrh	r3, [r7, #10]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002004:	611a      	str	r2, [r3, #16]
 8002006:	e01b      	b.n	8002040 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	11db      	asrs	r3, r3, #7
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f003 0306 	and.w	r3, r3, #6
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f063 030f 	orn	r3, r3, #15
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	490e      	ldr	r1, [pc, #56]	@ (8002060 <I2C_MasterRequestWrite+0xfc>)
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f966 	bl	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e010      	b.n	8002058 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4907      	ldr	r1, [pc, #28]	@ (8002064 <I2C_MasterRequestWrite+0x100>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f956 	bl	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	00010008 	.word	0x00010008
 8002064:	00010002 	.word	0x00010002

08002068 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	460b      	mov	r3, r1
 8002076:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800208c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d006      	beq.n	80020a2 <I2C_MasterRequestRead+0x3a>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d003      	beq.n	80020a2 <I2C_MasterRequestRead+0x3a>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020a0:	d108      	bne.n	80020b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e00b      	b.n	80020cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	2b11      	cmp	r3, #17
 80020ba:	d107      	bne.n	80020cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f893 	bl	8002204 <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00d      	beq.n	8002100 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020f2:	d103      	bne.n	80020fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e079      	b.n	80021f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002108:	d108      	bne.n	800211c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800210a:	897b      	ldrh	r3, [r7, #10]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]
 800211a:	e05f      	b.n	80021dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800211c:	897b      	ldrh	r3, [r7, #10]
 800211e:	11db      	asrs	r3, r3, #7
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 0306 	and.w	r3, r3, #6
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f063 030f 	orn	r3, r3, #15
 800212c:	b2da      	uxtb	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4930      	ldr	r1, [pc, #192]	@ (80021fc <I2C_MasterRequestRead+0x194>)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f8dc 	bl	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e054      	b.n	80021f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800214a:	897b      	ldrh	r3, [r7, #10]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4929      	ldr	r1, [pc, #164]	@ (8002200 <I2C_MasterRequestRead+0x198>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f8cc 	bl	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e044      	b.n	80021f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800218e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f831 	bl	8002204 <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00d      	beq.n	80021c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021b6:	d103      	bne.n	80021c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021be:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e017      	b.n	80021f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	11db      	asrs	r3, r3, #7
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f003 0306 	and.w	r3, r3, #6
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f063 030e 	orn	r3, r3, #14
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4907      	ldr	r1, [pc, #28]	@ (8002200 <I2C_MasterRequestRead+0x198>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f888 	bl	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	00010008 	.word	0x00010008
 8002200:	00010002 	.word	0x00010002

08002204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002214:	e048      	b.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d044      	beq.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221e:	f7fe ff33 	bl	8001088 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d302      	bcc.n	8002234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d139      	bne.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0c1b      	lsrs	r3, r3, #16
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d10d      	bne.n	800225a <I2C_WaitOnFlagUntilTimeout+0x56>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	43da      	mvns	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4013      	ands	r3, r2
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	e00c      	b.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x70>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	43da      	mvns	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	429a      	cmp	r2, r3
 8002278:	d116      	bne.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e023      	b.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d10d      	bne.n	80022ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	e00c      	b.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d093      	beq.n	8002216 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002306:	e071      	b.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002316:	d123      	bne.n	8002360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002326:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f043 0204 	orr.w	r2, r3, #4
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e067      	b.n	8002430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002366:	d041      	beq.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002368:	f7fe fe8e 	bl	8001088 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d302      	bcc.n	800237e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d136      	bne.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10c      	bne.n	80023a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4013      	ands	r3, r2
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	e00b      	b.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	43da      	mvns	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	4013      	ands	r3, r2
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e021      	b.n	8002430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d10c      	bne.n	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	43da      	mvns	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	4013      	ands	r3, r2
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e00b      	b.n	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4013      	ands	r3, r2
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f47f af6d 	bne.w	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002444:	e034      	b.n	80024b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f8e3 	bl	8002612 <I2C_IsAcknowledgeFailed>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e034      	b.n	80024c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d028      	beq.n	80024b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245e:	f7fe fe13 	bl	8001088 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	429a      	cmp	r2, r3
 800246c:	d302      	bcc.n	8002474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11d      	bne.n	80024b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b80      	cmp	r3, #128	@ 0x80
 8002480:	d016      	beq.n	80024b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e007      	b.n	80024c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ba:	2b80      	cmp	r3, #128	@ 0x80
 80024bc:	d1c3      	bne.n	8002446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024d4:	e034      	b.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f89b 	bl	8002612 <I2C_IsAcknowledgeFailed>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e034      	b.n	8002550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d028      	beq.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7fe fdcb 	bl	8001088 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11d      	bne.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b04      	cmp	r3, #4
 8002510:	d016      	beq.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e007      	b.n	8002550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d1c3      	bne.n	80024d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002564:	e049      	b.n	80025fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b10      	cmp	r3, #16
 8002572:	d119      	bne.n	80025a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0210 	mvn.w	r2, #16
 800257c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e030      	b.n	800260a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a8:	f7fe fd6e 	bl	8001088 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d302      	bcc.n	80025be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11d      	bne.n	80025fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c8:	2b40      	cmp	r3, #64	@ 0x40
 80025ca:	d016      	beq.n	80025fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f043 0220 	orr.w	r2, r3, #32
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e007      	b.n	800260a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002604:	2b40      	cmp	r3, #64	@ 0x40
 8002606:	d1ae      	bne.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002628:	d11b      	bne.n	8002662 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002632:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e101      	b.n	8002886 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f005 fccb 	bl	8008038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026b0:	d102      	bne.n	80026b8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f002 f836 	bl	800472e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7c1a      	ldrb	r2, [r3, #16]
 80026ca:	f88d 2000 	strb.w	r2, [sp]
 80026ce:	3304      	adds	r3, #4
 80026d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d2:	f001 ff14 	bl	80044fe <USB_CoreInit>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0ce      	b.n	8002886 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 f82e 	bl	8004750 <USB_SetCurrentMode>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0bf      	b.n	8002886 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	e04a      	b.n	80027a2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3315      	adds	r3, #21
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3314      	adds	r3, #20
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	b298      	uxth	r0, r3
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	332e      	adds	r3, #46	@ 0x2e
 8002748:	4602      	mov	r2, r0
 800274a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3318      	adds	r3, #24
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	331c      	adds	r3, #28
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3320      	adds	r3, #32
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3324      	adds	r3, #36	@ 0x24
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	3301      	adds	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d3af      	bcc.n	800270c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e044      	b.n	800283c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	3301      	adds	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	791b      	ldrb	r3, [r3, #4]
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	429a      	cmp	r2, r3
 8002844:	d3b5      	bcc.n	80027b2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7c1a      	ldrb	r2, [r3, #16]
 800284e:	f88d 2000 	strb.w	r2, [sp]
 8002852:	3304      	adds	r3, #4
 8002854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002856:	f001 ffc7 	bl	80047e8 <USB_DevInit>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e00c      	b.n	8002886 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 f811 	bl	80058a6 <USB_DevDisconnect>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_PCD_Start+0x1c>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e022      	b.n	80028f0 <HAL_PCD_Start+0x62>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 ff18 	bl	800470c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 ffbf 	bl	8005864 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b08d      	sub	sp, #52	@ 0x34
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 f87d 	bl	8005a0e <USB_GetMode>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 848c 	bne.w	8003234 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f002 ffe1 	bl	80058e8 <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8482 	beq.w	8003232 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 ffce 	bl	80058e8 <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d107      	bne.n	8002966 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 0202 	and.w	r2, r2, #2
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 ffbc 	bl	80058e8 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b10      	cmp	r3, #16
 8002978:	d161      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0210 	bic.w	r2, r2, #16
 8002988:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80029b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029b4:	d124      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d035      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6a38      	ldr	r0, [r7, #32]
 80029d6:	f002 fdf3 	bl	80055c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e6:	441a      	add	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	441a      	add	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	e016      	b.n	8002a2e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002a06:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a0a:	d110      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a12:	2208      	movs	r2, #8
 8002a14:	4619      	mov	r1, r3
 8002a16:	6a38      	ldr	r0, [r7, #32]
 8002a18:	f002 fdd2 	bl	80055c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a28:	441a      	add	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0210 	orr.w	r2, r2, #16
 8002a3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 ff50 	bl	80058e8 <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a4e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a52:	f040 80a7 	bne.w	8002ba4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 ff55 	bl	800590e <USB_ReadDevAllOutEpInterrupt>
 8002a64:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a66:	e099      	b.n	8002b9c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 808e 	beq.w	8002b90 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 ff79 	bl	8005976 <USB_ReadDevOutEPInterrupt>
 8002a84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00c      	beq.n	8002aaa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fe8b 	bl	80037c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00c      	beq.n	8002ace <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ac6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 ff61 	bl	8003990 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d030      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afc:	2b80      	cmp	r3, #128	@ 0x80
 8002afe:	d109      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b12:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	78db      	ldrb	r3, [r3, #3]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d108      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f005 fb84 	bl	800824c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b50:	461a      	mov	r2, r3
 8002b52:	2302      	movs	r3, #2
 8002b54:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2320      	movs	r3, #32
 8002b70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d009      	beq.n	8002b90 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b8e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	3301      	adds	r3, #1
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f af62 	bne.w	8002a68 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 fe9d 	bl	80058e8 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bb8:	f040 80db 	bne.w	8002d72 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 febe 	bl	8005942 <USB_ReadDevAllInEpInterrupt>
 8002bc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002bcc:	e0cd      	b.n	8002d6a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80c2 	beq.w	8002d5e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fee4 	bl	80059b2 <USB_ReadDevInEPInterrupt>
 8002bea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d057      	beq.n	8002ca6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69f9      	ldr	r1, [r7, #28]
 8002c12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c16:	4013      	ands	r3, r2
 8002c18:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c26:	461a      	mov	r2, r3
 8002c28:	2301      	movs	r3, #1
 8002c2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	799b      	ldrb	r3, [r3, #6]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d132      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3320      	adds	r3, #32
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4403      	add	r3, r0
 8002c54:	331c      	adds	r3, #28
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4419      	add	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4403      	add	r3, r0
 8002c68:	3320      	adds	r3, #32
 8002c6a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d113      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x3a2>
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3324      	adds	r3, #36	@ 0x24
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d108      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c92:	461a      	mov	r2, r3
 8002c94:	2101      	movs	r1, #1
 8002c96:	f002 feeb 	bl	8005a70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f005 fa58 	bl	8008156 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2310      	movs	r3, #16
 8002cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2340      	movs	r3, #64	@ 0x40
 8002cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d023      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d06:	6a38      	ldr	r0, [r7, #32]
 8002d08:	f001 fed2 	bl	8004ab0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	3310      	adds	r3, #16
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	78db      	ldrb	r3, [r3, #3]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f005 fa9b 	bl	8008270 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d46:	461a      	mov	r2, r3
 8002d48:	2302      	movs	r3, #2
 8002d4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fca5 	bl	80036a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	3301      	adds	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f47f af2e 	bne.w	8002bce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 fdb6 	bl	80058e8 <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d86:	d122      	bne.n	8002dce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d108      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dae:	2100      	movs	r1, #0
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fe8b 	bl	8003acc <HAL_PCDEx_LPM_Callback>
 8002db6:	e002      	b.n	8002dbe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f005 fa39 	bl	8008230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f002 fd88 	bl	80058e8 <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002de2:	d112      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d102      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f005 f9f5 	bl	80081e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e08:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fd6a 	bl	80058e8 <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e1e:	f040 80b7 	bne.w	8002f90 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2110      	movs	r1, #16
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 fe37 	bl	8004ab0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e46:	e046      	b.n	8002ed6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e54:	461a      	mov	r2, r3
 8002e56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e6c:	0151      	lsls	r1, r2, #5
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	440a      	add	r2, r1
 8002e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea0:	0151      	lsls	r1, r2, #5
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	440a      	add	r2, r1
 8002ea6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002eaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002eae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ec0:	0151      	lsls	r1, r2, #5
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	440a      	add	r2, r1
 8002ec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002eca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ece:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	791b      	ldrb	r3, [r3, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d3b2      	bcc.n	8002e48 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ef0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ef4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7bdb      	ldrb	r3, [r3, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f0e:	f043 030b 	orr.w	r3, r3, #11
 8002f12:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f24:	f043 030b 	orr.w	r3, r3, #11
 8002f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f2a:	e015      	b.n	8002f58 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f3e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f52:	f043 030b 	orr.w	r3, r3, #11
 8002f56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f002 fd78 	bl	8005a70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 fca7 	bl	80058e8 <USB_ReadInterrupts>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa4:	d123      	bne.n	8002fee <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f002 fd3d 	bl	8005a2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 fdf4 	bl	8004ba2 <USB_GetDevSpeed>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681c      	ldr	r4, [r3, #0]
 8002fc6:	f001 f9f1 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 8002fca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f001 faf8 	bl	80045c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f005 f8e4 	bl	80081a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 fc78 	bl	80058e8 <USB_ReadInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d10a      	bne.n	8003018 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f005 f8c1 	bl	800818a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f002 0208 	and.w	r2, r2, #8
 8003016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fc63 	bl	80058e8 <USB_ReadInterrupts>
 8003022:	4603      	mov	r3, r0
 8003024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003028:	2b80      	cmp	r3, #128	@ 0x80
 800302a:	d123      	bne.n	8003074 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003038:	2301      	movs	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
 800303c:	e014      	b.n	8003068 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	b2db      	uxtb	r3, r3
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 faf2 	bl	8003646 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	3301      	adds	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	791b      	ldrb	r3, [r3, #4]
 800306c:	461a      	mov	r2, r3
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	4293      	cmp	r3, r2
 8003072:	d3e4      	bcc.n	800303e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f002 fc35 	bl	80058e8 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003084:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003088:	d13c      	bne.n	8003104 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800308a:	2301      	movs	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
 800308e:	e02b      	b.n	80030e8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3318      	adds	r3, #24
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d115      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da12      	bge.n	80030e2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3317      	adds	r3, #23
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4619      	mov	r1, r3
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fab2 	bl	8003646 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	3301      	adds	r3, #1
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	791b      	ldrb	r3, [r3, #4]
 80030ec:	461a      	mov	r2, r3
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d3cd      	bcc.n	8003090 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f002 fbed 	bl	80058e8 <USB_ReadInterrupts>
 800310e:	4603      	mov	r3, r0
 8003110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003114:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003118:	d156      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800311a:	2301      	movs	r3, #1
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
 800311e:	e045      	b.n	80031ac <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d12e      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003148:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800314a:	2b00      	cmp	r3, #0
 800314c:	da2b      	bge.n	80031a6 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	0c1a      	lsrs	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003158:	4053      	eors	r3, r2
 800315a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d121      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800319e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a2:	6053      	str	r3, [r2, #4]
            break;
 80031a4:	e008      	b.n	80031b8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	3301      	adds	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	791b      	ldrb	r3, [r3, #4]
 80031b0:	461a      	mov	r2, r3
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d3b3      	bcc.n	8003120 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80031c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 fb8b 	bl	80058e8 <USB_ReadInterrupts>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031dc:	d10a      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f005 f858 	bl	8008294 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f002 fb75 	bl	80058e8 <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b04      	cmp	r3, #4
 8003206:	d115      	bne.n	8003234 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f005 f848 	bl	80082b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	e000      	b.n	8003234 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003232:	bf00      	nop
    }
  }
}
 8003234:	3734      	adds	r7, #52	@ 0x34
 8003236:	46bd      	mov	sp, r7
 8003238:	bd90      	pop	{r4, r7, pc}

0800323a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_PCD_SetAddress+0x1a>
 8003250:	2302      	movs	r3, #2
 8003252:	e012      	b.n	800327a <HAL_PCD_SetAddress+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f002 fad4 	bl	8005818 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	4608      	mov	r0, r1
 800328c:	4611      	mov	r1, r2
 800328e:	461a      	mov	r2, r3
 8003290:	4603      	mov	r3, r0
 8003292:	70fb      	strb	r3, [r7, #3]
 8003294:	460b      	mov	r3, r1
 8003296:	803b      	strh	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da0f      	bge.n	80032c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	3310      	adds	r3, #16
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	705a      	strb	r2, [r3, #1]
 80032c6:	e00f      	b.n	80032e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80032f4:	883b      	ldrh	r3, [r7, #0]
 80032f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	78ba      	ldrb	r2, [r7, #2]
 8003302:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	785b      	ldrb	r3, [r3, #1]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003316:	78bb      	ldrb	r3, [r7, #2]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d102      	bne.n	8003322 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_PCD_EP_Open+0xae>
 800332c:	2302      	movs	r3, #2
 800332e:	e00e      	b.n	800334e <HAL_PCD_EP_Open+0xcc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68f9      	ldr	r1, [r7, #12]
 800333e:	4618      	mov	r0, r3
 8003340:	f001 fc54 	bl	8004bec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800334c:	7afb      	ldrb	r3, [r7, #11]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003366:	2b00      	cmp	r3, #0
 8003368:	da0f      	bge.n	800338a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	3310      	adds	r3, #16
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	3304      	adds	r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	705a      	strb	r2, [r3, #1]
 8003388:	e00f      	b.n	80033aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	3304      	adds	r3, #4
 80033a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_PCD_EP_Close+0x6e>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e00e      	b.n	80033e2 <HAL_PCD_EP_Close+0x8c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 fc92 	bl	8004cfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	460b      	mov	r3, r1
 80033f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	f003 020f 	and.w	r2, r3, #15
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342c:	7afb      	ldrb	r3, [r7, #11]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	b2da      	uxtb	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	799b      	ldrb	r3, [r3, #6]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d102      	bne.n	8003446 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	799b      	ldrb	r3, [r3, #6]
 800344e:	461a      	mov	r2, r3
 8003450:	6979      	ldr	r1, [r7, #20]
 8003452:	f001 fd2f 	bl	8004eb4 <USB_EPStartXfer>

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	460b      	mov	r3, r1
 800346e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003470:	7afb      	ldrb	r3, [r7, #11]
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	3310      	adds	r3, #16
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	3304      	adds	r3, #4
 8003486:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2201      	movs	r2, #1
 800349e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034a0:	7afb      	ldrb	r3, [r7, #11]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	799b      	ldrb	r3, [r3, #6]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	799b      	ldrb	r3, [r3, #6]
 80034c2:	461a      	mov	r2, r3
 80034c4:	6979      	ldr	r1, [r7, #20]
 80034c6:	f001 fcf5 	bl	8004eb4 <USB_EPStartXfer>

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	7912      	ldrb	r2, [r2, #4]
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e04f      	b.n	8003592 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	da0f      	bge.n	800351a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	f003 020f 	and.w	r2, r3, #15
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	3310      	adds	r3, #16
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	3304      	adds	r3, #4
 8003510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	705a      	strb	r2, [r3, #1]
 8003518:	e00d      	b.n	8003536 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_PCD_EP_SetStall+0x82>
 8003552:	2302      	movs	r3, #2
 8003554:	e01d      	b.n	8003592 <HAL_PCD_EP_SetStall+0xbe>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	4618      	mov	r0, r3
 8003566:	f002 f883 	bl	8005670 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7999      	ldrb	r1, [r3, #6]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003582:	461a      	mov	r2, r3
 8003584:	f002 fa74 	bl	8005a70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	7912      	ldrb	r2, [r2, #4]
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e042      	b.n	800363e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da0f      	bge.n	80035e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 020f 	and.w	r2, r3, #15
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	3310      	adds	r3, #16
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	3304      	adds	r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	705a      	strb	r2, [r3, #1]
 80035de:	e00f      	b.n	8003600 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	f003 020f 	and.w	r2, r3, #15
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	3304      	adds	r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_PCD_EP_ClrStall+0x86>
 800361c:	2302      	movs	r3, #2
 800361e:	e00e      	b.n	800363e <HAL_PCD_EP_ClrStall+0xa4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	4618      	mov	r0, r3
 8003630:	f002 f88c 	bl	800574c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003656:	2b00      	cmp	r3, #0
 8003658:	da0c      	bge.n	8003674 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	f003 020f 	and.w	r2, r3, #15
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	3310      	adds	r3, #16
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	3304      	adds	r3, #4
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e00c      	b.n	800368e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	f003 020f 	and.w	r2, r3, #15
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	3304      	adds	r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	4618      	mov	r0, r3
 8003696:	f001 feab 	bl	80053f0 <USB_EPStopXfer>
 800369a:	4603      	mov	r3, r0
 800369c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800369e:	7afb      	ldrb	r3, [r7, #11]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	@ 0x28
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	3310      	adds	r3, #16
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	3304      	adds	r3, #4
 80036ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d901      	bls.n	80036e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e06b      	b.n	80037b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d902      	bls.n	80036fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	3303      	adds	r3, #3
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003704:	e02a      	b.n	800375c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	429a      	cmp	r2, r3
 800371a:	d902      	bls.n	8003722 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3303      	adds	r3, #3
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68d9      	ldr	r1, [r3, #12]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4603      	mov	r3, r0
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f001 ff00 	bl	8005544 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	441a      	add	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	441a      	add	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	429a      	cmp	r2, r3
 8003770:	d809      	bhi.n	8003786 <PCD_WriteEmptyTxFifo+0xde>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800377a:	429a      	cmp	r2, r3
 800377c:	d203      	bcs.n	8003786 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1bf      	bne.n	8003706 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	429a      	cmp	r2, r3
 8003790:	d811      	bhi.n	80037b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	2201      	movs	r2, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	6939      	ldr	r1, [r7, #16]
 80037ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037b2:	4013      	ands	r3, r2
 80037b4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	333c      	adds	r3, #60	@ 0x3c
 80037d8:	3304      	adds	r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	799b      	ldrb	r3, [r3, #6]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d17b      	bne.n	80038ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4a61      	ldr	r2, [pc, #388]	@ (8003988 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	f240 80b9 	bls.w	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80b3 	beq.w	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003822:	461a      	mov	r2, r3
 8003824:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003828:	6093      	str	r3, [r2, #8]
 800382a:	e0a7      	b.n	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003842:	461a      	mov	r2, r3
 8003844:	2320      	movs	r3, #32
 8003846:	6093      	str	r3, [r2, #8]
 8003848:	e098      	b.n	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	f040 8093 	bne.w	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	4a4b      	ldr	r2, [pc, #300]	@ (8003988 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d90f      	bls.n	800387e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387a:	6093      	str	r3, [r2, #8]
 800387c:	e07e      	b.n	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	4413      	add	r3, r2
 8003890:	3304      	adds	r3, #4
 8003892:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	0159      	lsls	r1, r3, #5
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	440b      	add	r3, r1
 80038a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d114      	bne.n	80038e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038c8:	461a      	mov	r2, r3
 80038ca:	2101      	movs	r1, #1
 80038cc:	f002 f8d0 	bl	8005a70 <USB_EP0_OutStart>
 80038d0:	e006      	b.n	80038e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	441a      	add	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f004 fc1a 	bl	8008120 <HAL_PCD_DataOutStageCallback>
 80038ec:	e046      	b.n	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4a26      	ldr	r2, [pc, #152]	@ (800398c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d124      	bne.n	8003940 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003912:	6093      	str	r3, [r2, #8]
 8003914:	e032      	b.n	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	2320      	movs	r3, #32
 8003930:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f004 fbf1 	bl	8008120 <HAL_PCD_DataOutStageCallback>
 800393e:	e01d      	b.n	800397c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d114      	bne.n	8003970 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d108      	bne.n	8003970 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003968:	461a      	mov	r2, r3
 800396a:	2100      	movs	r1, #0
 800396c:	f002 f880 	bl	8005a70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f004 fbd2 	bl	8008120 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	4f54300a 	.word	0x4f54300a
 800398c:	4f54310a 	.word	0x4f54310a

08003990 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	333c      	adds	r3, #60	@ 0x3c
 80039a8:	3304      	adds	r3, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a15      	ldr	r2, [pc, #84]	@ (8003a18 <PCD_EP_OutSetupPacket_int+0x88>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d90e      	bls.n	80039e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039dc:	461a      	mov	r2, r3
 80039de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f004 fb89 	bl	80080fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003a18 <PCD_EP_OutSetupPacket_int+0x88>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d90c      	bls.n	8003a0c <PCD_EP_OutSetupPacket_int+0x7c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	799b      	ldrb	r3, [r3, #6]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d108      	bne.n	8003a0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a04:	461a      	mov	r2, r3
 8003a06:	2101      	movs	r1, #1
 8003a08:	f002 f832 	bl	8005a70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	4f54300a 	.word	0x4f54300a

08003a1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d107      	bne.n	8003a4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a3a:	883b      	ldrh	r3, [r7, #0]
 8003a3c:	0419      	lsls	r1, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a48:	e028      	b.n	8003a9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4413      	add	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e00d      	b.n	8003a7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	3340      	adds	r3, #64	@ 0x40
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	4413      	add	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	3301      	adds	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3ec      	bcc.n	8003a5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a84:	883b      	ldrh	r3, [r7, #0]
 8003a86:	0418      	lsls	r0, r3, #16
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	4302      	orrs	r2, r0
 8003a94:	3340      	adds	r3, #64	@ 0x40
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e267      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d075      	beq.n	8003bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b02:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d00c      	beq.n	8003b28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0e:	4b85      	ldr	r3, [pc, #532]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d112      	bne.n	8003b40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1a:	4b82      	ldr	r3, [pc, #520]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b26:	d10b      	bne.n	8003b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	4b7e      	ldr	r3, [pc, #504]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d05b      	beq.n	8003bec <HAL_RCC_OscConfig+0x108>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d157      	bne.n	8003bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e242      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x74>
 8003b4a:	4b76      	ldr	r3, [pc, #472]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a75      	ldr	r2, [pc, #468]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e01d      	b.n	8003b94 <HAL_RCC_OscConfig+0xb0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x98>
 8003b62:	4b70      	ldr	r3, [pc, #448]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6f      	ldr	r2, [pc, #444]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6c      	ldr	r2, [pc, #432]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0xb0>
 8003b7c:	4b69      	ldr	r3, [pc, #420]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a68      	ldr	r2, [pc, #416]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b66      	ldr	r3, [pc, #408]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a65      	ldr	r2, [pc, #404]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fa74 	bl	8001088 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fd fa70 	bl	8001088 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	@ 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e207      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xc0>
 8003bc2:	e014      	b.n	8003bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fa60 	bl	8001088 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fd fa5c 	bl	8001088 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	@ 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e1f3      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	4b51      	ldr	r3, [pc, #324]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0xe8>
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d063      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c06:	4b47      	ldr	r3, [pc, #284]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d11c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c12:	4b44      	ldr	r3, [pc, #272]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d116      	bne.n	8003c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	4b41      	ldr	r3, [pc, #260]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_RCC_OscConfig+0x152>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d001      	beq.n	8003c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e1c7      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c36:	4b3b      	ldr	r3, [pc, #236]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4937      	ldr	r1, [pc, #220]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	e03a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d020      	beq.n	8003c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c54:	4b34      	ldr	r3, [pc, #208]	@ (8003d28 <HAL_RCC_OscConfig+0x244>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd fa15 	bl	8001088 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c62:	f7fd fa11 	bl	8001088 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1a8      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	4b2b      	ldr	r3, [pc, #172]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b28      	ldr	r3, [pc, #160]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4925      	ldr	r1, [pc, #148]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]
 8003c94:	e015      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c96:	4b24      	ldr	r3, [pc, #144]	@ (8003d28 <HAL_RCC_OscConfig+0x244>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd f9f4 	bl	8001088 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca4:	f7fd f9f0 	bl	8001088 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e187      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d036      	beq.n	8003d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd6:	4b15      	ldr	r3, [pc, #84]	@ (8003d2c <HAL_RCC_OscConfig+0x248>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fd f9d4 	bl	8001088 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fd f9d0 	bl	8001088 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e167      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x200>
 8003d02:	e01b      	b.n	8003d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d04:	4b09      	ldr	r3, [pc, #36]	@ (8003d2c <HAL_RCC_OscConfig+0x248>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd f9bd 	bl	8001088 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	e00e      	b.n	8003d30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d12:	f7fd f9b9 	bl	8001088 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d907      	bls.n	8003d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e150      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	42470000 	.word	0x42470000
 8003d2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d30:	4b88      	ldr	r3, [pc, #544]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ea      	bne.n	8003d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8097 	beq.w	8003e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4e:	4b81      	ldr	r3, [pc, #516]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	4a7c      	ldr	r2, [pc, #496]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b77      	ldr	r3, [pc, #476]	@ (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d86:	4b74      	ldr	r3, [pc, #464]	@ (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a73      	ldr	r2, [pc, #460]	@ (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fd f979 	bl	8001088 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fd f975 	bl	8001088 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e10c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	4b6a      	ldr	r3, [pc, #424]	@ (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x2ea>
 8003dc0:	4b64      	ldr	r3, [pc, #400]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	4a63      	ldr	r2, [pc, #396]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dcc:	e01c      	b.n	8003e08 <HAL_RCC_OscConfig+0x324>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x30c>
 8003dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	4a5e      	ldr	r2, [pc, #376]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x324>
 8003df0:	4b58      	ldr	r3, [pc, #352]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	4a57      	ldr	r2, [pc, #348]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfc:	4b55      	ldr	r3, [pc, #340]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	4a54      	ldr	r2, [pc, #336]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f023 0304 	bic.w	r3, r3, #4
 8003e06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd f93a 	bl	8001088 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e18:	f7fd f936 	bl	8001088 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0cb      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	4b49      	ldr	r3, [pc, #292]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0ee      	beq.n	8003e18 <HAL_RCC_OscConfig+0x334>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fd f924 	bl	8001088 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd f920 	bl	8001088 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0b5      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ee      	bne.n	8003e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	4a38      	ldr	r2, [pc, #224]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80a1 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e82:	4b34      	ldr	r3, [pc, #208]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d05c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d141      	bne.n	8003f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b31      	ldr	r3, [pc, #196]	@ (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd f8f4 	bl	8001088 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd f8f0 	bl	8001088 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e087      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	4b27      	ldr	r3, [pc, #156]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69da      	ldr	r2, [r3, #28]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	019b      	lsls	r3, r3, #6
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	491b      	ldr	r1, [pc, #108]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eec:	4b1b      	ldr	r3, [pc, #108]	@ (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fd f8c9 	bl	8001088 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd f8c5 	bl	8001088 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e05c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0c:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x416>
 8003f18:	e054      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1a:	4b10      	ldr	r3, [pc, #64]	@ (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd f8b2 	bl	8001088 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fd f8ae 	bl	8001088 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e045      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x444>
 8003f46:	e03d      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e038      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f60:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <HAL_RCC_OscConfig+0x4ec>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d028      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d121      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d11a      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d111      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0cc      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b68      	ldr	r3, [pc, #416]	@ (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d90c      	bls.n	8004010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b65      	ldr	r3, [pc, #404]	@ (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b63      	ldr	r3, [pc, #396]	@ (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0b8      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004028:	4b59      	ldr	r3, [pc, #356]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a58      	ldr	r2, [pc, #352]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004032:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004040:	4b53      	ldr	r3, [pc, #332]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a52      	ldr	r2, [pc, #328]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800404a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404c:	4b50      	ldr	r3, [pc, #320]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	494d      	ldr	r1, [pc, #308]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d044      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	4b47      	ldr	r3, [pc, #284]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d119      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e07f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d003      	beq.n	8004092 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408e:	2b03      	cmp	r3, #3
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	4b3f      	ldr	r3, [pc, #252]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e06f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e067      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b2:	4b37      	ldr	r3, [pc, #220]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4934      	ldr	r1, [pc, #208]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c4:	f7fc ffe0 	bl	8001088 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f7fc ffdc 	bl	8001088 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e04f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 020c 	and.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d1eb      	bne.n	80040cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f4:	4b25      	ldr	r3, [pc, #148]	@ (800418c <HAL_RCC_ClockConfig+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d20c      	bcs.n	800411c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b22      	ldr	r3, [pc, #136]	@ (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b20      	ldr	r3, [pc, #128]	@ (800418c <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e032      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004128:	4b19      	ldr	r3, [pc, #100]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4916      	ldr	r1, [pc, #88]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004146:	4b12      	ldr	r3, [pc, #72]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	490e      	ldr	r1, [pc, #56]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800415a:	f000 f821 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 800415e:	4602      	mov	r2, r0
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	490a      	ldr	r1, [pc, #40]	@ (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 800416c:	5ccb      	ldrb	r3, [r1, r3]
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	4a09      	ldr	r2, [pc, #36]	@ (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004176:	4b09      	ldr	r3, [pc, #36]	@ (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc ff40 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023c00 	.word	0x40023c00
 8004190:	40023800 	.word	0x40023800
 8004194:	080091a8 	.word	0x080091a8
 8004198:	20000000 	.word	0x20000000
 800419c:	20000004 	.word	0x20000004

080041a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a4:	b094      	sub	sp, #80	@ 0x50
 80041a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b8:	4b79      	ldr	r3, [pc, #484]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d00d      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x40>
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	f200 80e1 	bhi.w	800438c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d003      	beq.n	80041da <HAL_RCC_GetSysClockFreq+0x3a>
 80041d2:	e0db      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d4:	4b73      	ldr	r3, [pc, #460]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041d8:	e0db      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041da:	4b73      	ldr	r3, [pc, #460]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80041dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041de:	e0d8      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e0:	4b6f      	ldr	r3, [pc, #444]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ea:	4b6d      	ldr	r3, [pc, #436]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d063      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f6:	4b6a      	ldr	r3, [pc, #424]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	099b      	lsrs	r3, r3, #6
 80041fc:	2200      	movs	r2, #0
 80041fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004200:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004208:	633b      	str	r3, [r7, #48]	@ 0x30
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	@ 0x34
 800420e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	0159      	lsls	r1, r3, #5
 8004220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004224:	0150      	lsls	r0, r2, #5
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4621      	mov	r1, r4
 800422c:	1a51      	subs	r1, r2, r1
 800422e:	6139      	str	r1, [r7, #16]
 8004230:	4629      	mov	r1, r5
 8004232:	eb63 0301 	sbc.w	r3, r3, r1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004244:	4659      	mov	r1, fp
 8004246:	018b      	lsls	r3, r1, #6
 8004248:	4651      	mov	r1, sl
 800424a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800424e:	4651      	mov	r1, sl
 8004250:	018a      	lsls	r2, r1, #6
 8004252:	4651      	mov	r1, sl
 8004254:	ebb2 0801 	subs.w	r8, r2, r1
 8004258:	4659      	mov	r1, fp
 800425a:	eb63 0901 	sbc.w	r9, r3, r1
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800426a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004272:	4690      	mov	r8, r2
 8004274:	4699      	mov	r9, r3
 8004276:	4623      	mov	r3, r4
 8004278:	eb18 0303 	adds.w	r3, r8, r3
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	462b      	mov	r3, r5
 8004280:	eb49 0303 	adc.w	r3, r9, r3
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004292:	4629      	mov	r1, r5
 8004294:	024b      	lsls	r3, r1, #9
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800429c:	4621      	mov	r1, r4
 800429e:	024a      	lsls	r2, r1, #9
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a6:	2200      	movs	r2, #0
 80042a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042b0:	f7fb ffee 	bl	8000290 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4613      	mov	r3, r2
 80042ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042bc:	e058      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042be:	4b38      	ldr	r3, [pc, #224]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	099b      	lsrs	r3, r3, #6
 80042c4:	2200      	movs	r2, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	4611      	mov	r1, r2
 80042ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ce:	623b      	str	r3, [r7, #32]
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	f04f 0000 	mov.w	r0, #0
 80042e0:	f04f 0100 	mov.w	r1, #0
 80042e4:	0159      	lsls	r1, r3, #5
 80042e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ea:	0150      	lsls	r0, r2, #5
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4641      	mov	r1, r8
 80042f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042f6:	4649      	mov	r1, r9
 80042f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800430c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004310:	ebb2 040a 	subs.w	r4, r2, sl
 8004314:	eb63 050b 	sbc.w	r5, r3, fp
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	00eb      	lsls	r3, r5, #3
 8004322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4643      	mov	r3, r8
 800432e:	18e3      	adds	r3, r4, r3
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	464b      	mov	r3, r9
 8004334:	eb45 0303 	adc.w	r3, r5, r3
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004346:	4629      	mov	r1, r5
 8004348:	028b      	lsls	r3, r1, #10
 800434a:	4621      	mov	r1, r4
 800434c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004350:	4621      	mov	r1, r4
 8004352:	028a      	lsls	r2, r1, #10
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	61fa      	str	r2, [r7, #28]
 8004360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004364:	f7fb ff94 	bl	8000290 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004370:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004380:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800438a:	e002      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800438e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004394:	4618      	mov	r0, r3
 8004396:	3750      	adds	r7, #80	@ 0x50
 8004398:	46bd      	mov	sp, r7
 800439a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	007a1200 	.word	0x007a1200

080043ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b0:	4b03      	ldr	r3, [pc, #12]	@ (80043c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000000 	.word	0x20000000

080043c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043c8:	f7ff fff0 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0a9b      	lsrs	r3, r3, #10
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	@ (80043e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	080091b8 	.word	0x080091b8

080043ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e07b      	b.n	80044f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800440e:	d009      	beq.n	8004424 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	61da      	str	r2, [r3, #28]
 8004416:	e005      	b.n	8004424 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc fca0 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800445a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a8:	ea42 0103 	orr.w	r1, r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0104 	and.w	r1, r3, #4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	f003 0210 	and.w	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044fe:	b084      	sub	sp, #16
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	f107 001c 	add.w	r0, r7, #28
 800450c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004510:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004514:	2b01      	cmp	r3, #1
 8004516:	d123      	bne.n	8004560 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800452c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004540:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f001 fae9 	bl	8005b2c <USB_CoreReset>
 800455a:	4603      	mov	r3, r0
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e01b      	b.n	8004598 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f001 fadd 	bl	8005b2c <USB_CoreReset>
 8004572:	4603      	mov	r3, r0
 8004574:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004576:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	639a      	str	r2, [r3, #56]	@ 0x38
 800458a:	e005      	b.n	8004598 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004590:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004598:	7fbb      	ldrb	r3, [r7, #30]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10b      	bne.n	80045b6 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f043 0206 	orr.w	r2, r3, #6
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045c2:	b004      	add	sp, #16
 80045c4:	4770      	bx	lr
	...

080045c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d165      	bne.n	80046a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4a41      	ldr	r2, [pc, #260]	@ (80046e4 <USB_SetTurnaroundTime+0x11c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d906      	bls.n	80045f2 <USB_SetTurnaroundTime+0x2a>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a40      	ldr	r2, [pc, #256]	@ (80046e8 <USB_SetTurnaroundTime+0x120>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d202      	bcs.n	80045f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045ec:	230f      	movs	r3, #15
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e062      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4a3c      	ldr	r2, [pc, #240]	@ (80046e8 <USB_SetTurnaroundTime+0x120>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d306      	bcc.n	8004608 <USB_SetTurnaroundTime+0x40>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a3b      	ldr	r2, [pc, #236]	@ (80046ec <USB_SetTurnaroundTime+0x124>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d202      	bcs.n	8004608 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004602:	230e      	movs	r3, #14
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e057      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4a38      	ldr	r2, [pc, #224]	@ (80046ec <USB_SetTurnaroundTime+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d306      	bcc.n	800461e <USB_SetTurnaroundTime+0x56>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a37      	ldr	r2, [pc, #220]	@ (80046f0 <USB_SetTurnaroundTime+0x128>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d202      	bcs.n	800461e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004618:	230d      	movs	r3, #13
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e04c      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4a33      	ldr	r2, [pc, #204]	@ (80046f0 <USB_SetTurnaroundTime+0x128>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d306      	bcc.n	8004634 <USB_SetTurnaroundTime+0x6c>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4a32      	ldr	r2, [pc, #200]	@ (80046f4 <USB_SetTurnaroundTime+0x12c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d802      	bhi.n	8004634 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800462e:	230c      	movs	r3, #12
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e041      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4a2f      	ldr	r2, [pc, #188]	@ (80046f4 <USB_SetTurnaroundTime+0x12c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d906      	bls.n	800464a <USB_SetTurnaroundTime+0x82>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a2e      	ldr	r2, [pc, #184]	@ (80046f8 <USB_SetTurnaroundTime+0x130>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d802      	bhi.n	800464a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004644:	230b      	movs	r3, #11
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e036      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4a2a      	ldr	r2, [pc, #168]	@ (80046f8 <USB_SetTurnaroundTime+0x130>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d906      	bls.n	8004660 <USB_SetTurnaroundTime+0x98>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4a29      	ldr	r2, [pc, #164]	@ (80046fc <USB_SetTurnaroundTime+0x134>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d802      	bhi.n	8004660 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800465a:	230a      	movs	r3, #10
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e02b      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4a26      	ldr	r2, [pc, #152]	@ (80046fc <USB_SetTurnaroundTime+0x134>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d906      	bls.n	8004676 <USB_SetTurnaroundTime+0xae>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4a25      	ldr	r2, [pc, #148]	@ (8004700 <USB_SetTurnaroundTime+0x138>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d202      	bcs.n	8004676 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004670:	2309      	movs	r3, #9
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e020      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4a21      	ldr	r2, [pc, #132]	@ (8004700 <USB_SetTurnaroundTime+0x138>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d306      	bcc.n	800468c <USB_SetTurnaroundTime+0xc4>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4a20      	ldr	r2, [pc, #128]	@ (8004704 <USB_SetTurnaroundTime+0x13c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d802      	bhi.n	800468c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004686:	2308      	movs	r3, #8
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	e015      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4a1d      	ldr	r2, [pc, #116]	@ (8004704 <USB_SetTurnaroundTime+0x13c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d906      	bls.n	80046a2 <USB_SetTurnaroundTime+0xda>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4a1c      	ldr	r2, [pc, #112]	@ (8004708 <USB_SetTurnaroundTime+0x140>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d202      	bcs.n	80046a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800469c:	2307      	movs	r3, #7
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e00a      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046a2:	2306      	movs	r3, #6
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e007      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046ae:	2309      	movs	r3, #9
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e001      	b.n	80046b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046b4:	2309      	movs	r3, #9
 80046b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	029b      	lsls	r3, r3, #10
 80046cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	00d8acbf 	.word	0x00d8acbf
 80046e8:	00e4e1c0 	.word	0x00e4e1c0
 80046ec:	00f42400 	.word	0x00f42400
 80046f0:	01067380 	.word	0x01067380
 80046f4:	011a499f 	.word	0x011a499f
 80046f8:	01312cff 	.word	0x01312cff
 80046fc:	014ca43f 	.word	0x014ca43f
 8004700:	016e3600 	.word	0x016e3600
 8004704:	01a6ab1f 	.word	0x01a6ab1f
 8004708:	01e84800 	.word	0x01e84800

0800470c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 0201 	bic.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d115      	bne.n	800479e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800477e:	200a      	movs	r0, #10
 8004780:	f7fc fc8e 	bl	80010a0 <HAL_Delay>
      ms += 10U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	330a      	adds	r3, #10
 8004788:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 f93f 	bl	8005a0e <USB_GetMode>
 8004790:	4603      	mov	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d01e      	beq.n	80047d4 <USB_SetCurrentMode+0x84>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2bc7      	cmp	r3, #199	@ 0xc7
 800479a:	d9f0      	bls.n	800477e <USB_SetCurrentMode+0x2e>
 800479c:	e01a      	b.n	80047d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800479e:	78fb      	ldrb	r3, [r7, #3]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d115      	bne.n	80047d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047b0:	200a      	movs	r0, #10
 80047b2:	f7fc fc75 	bl	80010a0 <HAL_Delay>
      ms += 10U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	330a      	adds	r3, #10
 80047ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f001 f926 	bl	8005a0e <USB_GetMode>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <USB_SetCurrentMode+0x84>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80047cc:	d9f0      	bls.n	80047b0 <USB_SetCurrentMode+0x60>
 80047ce:	e001      	b.n	80047d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e005      	b.n	80047e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80047d8:	d101      	bne.n	80047de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047e8:	b084      	sub	sp, #16
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b086      	sub	sp, #24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80047f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	e009      	b.n	800481c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3340      	adds	r3, #64	@ 0x40
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	2200      	movs	r2, #0
 8004814:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3301      	adds	r3, #1
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b0e      	cmp	r3, #14
 8004820:	d9f2      	bls.n	8004808 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004822:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004826:	2b00      	cmp	r3, #0
 8004828:	d11c      	bne.n	8004864 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38
 8004862:	e00b      	b.n	800487c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004868:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004882:	461a      	mov	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004888:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10d      	bne.n	80048ac <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004894:	2b00      	cmp	r3, #0
 8004896:	d104      	bne.n	80048a2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004898:	2100      	movs	r1, #0
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f968 	bl	8004b70 <USB_SetDevSpeed>
 80048a0:	e008      	b.n	80048b4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048a2:	2101      	movs	r1, #1
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f963 	bl	8004b70 <USB_SetDevSpeed>
 80048aa:	e003      	b.n	80048b4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ac:	2103      	movs	r1, #3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f95e 	bl	8004b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048b4:	2110      	movs	r1, #16
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8fa 	bl	8004ab0 <USB_FlushTxFifo>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f924 	bl	8004b14 <USB_FlushRxFifo>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048dc:	461a      	mov	r2, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e8:	461a      	mov	r2, r3
 80048ea:	2300      	movs	r3, #0
 80048ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f4:	461a      	mov	r2, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	e043      	b.n	8004988 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004916:	d118      	bne.n	800494a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492a:	461a      	mov	r2, r3
 800492c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e013      	b.n	800495c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004940:	461a      	mov	r2, r3
 8004942:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e008      	b.n	800495c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004956:	461a      	mov	r2, r3
 8004958:	2300      	movs	r3, #0
 800495a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004968:	461a      	mov	r2, r3
 800496a:	2300      	movs	r3, #0
 800496c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497a:	461a      	mov	r2, r3
 800497c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3301      	adds	r3, #1
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800498c:	461a      	mov	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4293      	cmp	r3, r2
 8004992:	d3b5      	bcc.n	8004900 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	e043      	b.n	8004a22 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049b0:	d118      	bne.n	80049e4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c4:	461a      	mov	r2, r3
 80049c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	e013      	b.n	80049f6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049da:	461a      	mov	r2, r3
 80049dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e008      	b.n	80049f6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f0:	461a      	mov	r2, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a02:	461a      	mov	r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a14:	461a      	mov	r2, r3
 8004a16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a26:	461a      	mov	r2, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d3b5      	bcc.n	800499a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f043 0210 	orr.w	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699a      	ldr	r2, [r3, #24]
 8004a68:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <USB_DevInit+0x2c4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f043 0208 	orr.w	r2, r3, #8
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d107      	bne.n	8004a9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa8:	b004      	add	sp, #16
 8004aaa:	4770      	bx	lr
 8004aac:	803c3800 	.word	0x803c3800

08004ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aca:	d901      	bls.n	8004ad0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e01b      	b.n	8004b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	daf2      	bge.n	8004abe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	019b      	lsls	r3, r3, #6
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004af4:	d901      	bls.n	8004afa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e006      	b.n	8004b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d0f0      	beq.n	8004ae8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b2c:	d901      	bls.n	8004b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e018      	b.n	8004b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	daf2      	bge.n	8004b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2210      	movs	r2, #16
 8004b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b50:	d901      	bls.n	8004b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e006      	b.n	8004b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d0f0      	beq.n	8004b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	68f9      	ldr	r1, [r7, #12]
 8004b8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b087      	sub	sp, #28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0306 	and.w	r3, r3, #6
 8004bba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	75fb      	strb	r3, [r7, #23]
 8004bc6:	e00a      	b.n	8004bde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d002      	beq.n	8004bd4 <USB_GetDevSpeed+0x32>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d102      	bne.n	8004bda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	75fb      	strb	r3, [r7, #23]
 8004bd8:	e001      	b.n	8004bde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bda:	230f      	movs	r3, #15
 8004bdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d13a      	bne.n	8004c7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	68f9      	ldr	r1, [r7, #12]
 8004c22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d155      	bne.n	8004cec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	791b      	ldrb	r3, [r3, #4]
 8004c5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	059b      	lsls	r3, r3, #22
 8004c62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c64:	4313      	orrs	r3, r2
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	e036      	b.n	8004cec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d11a      	bne.n	8004cec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	791b      	ldrb	r3, [r3, #4]
 8004cd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d161      	bne.n	8004ddc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d2e:	d11f      	bne.n	8004d70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	2101      	movs	r1, #1
 8004d82:	fa01 f303 	lsl.w	r3, r1, r3
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	68f9      	ldr	r1, [r7, #12]
 8004d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d90:	4013      	ands	r3, r2
 8004d92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2101      	movs	r1, #1
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004db4:	4013      	ands	r3, r2
 8004db6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0159      	lsls	r1, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	440b      	add	r3, r1
 8004dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4b35      	ldr	r3, [pc, #212]	@ (8004eac <USB_DeactivateEndpoint+0x1b0>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	600b      	str	r3, [r1, #0]
 8004dda:	e060      	b.n	8004e9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df2:	d11f      	bne.n	8004e34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	68f9      	ldr	r1, [r7, #12]
 8004e50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e54:	4013      	ands	r3, r2
 8004e56:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	2101      	movs	r1, #1
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	43db      	mvns	r3, r3
 8004e72:	68f9      	ldr	r1, [r7, #12]
 8004e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0159      	lsls	r1, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	440b      	add	r3, r1
 8004e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e96:	4619      	mov	r1, r3
 8004e98:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <USB_DeactivateEndpoint+0x1b4>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	ec337800 	.word	0xec337800
 8004eb0:	eff37800 	.word	0xeff37800

08004eb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	@ 0x28
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 817f 	bne.w	80051d4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d132      	bne.n	8004f44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ef8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004efc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f3c:	0cdb      	lsrs	r3, r3, #19
 8004f3e:	04db      	lsls	r3, r3, #19
 8004f40:	6113      	str	r3, [r2, #16]
 8004f42:	e097      	b.n	8005074 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f5e:	0cdb      	lsrs	r3, r3, #19
 8004f60:	04db      	lsls	r3, r3, #19
 8004f62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f86:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d11a      	bne.n	8004fc4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d903      	bls.n	8004fa2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fc0:	6113      	str	r3, [r2, #16]
 8004fc2:	e044      	b.n	800504e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	1e5a      	subs	r2, r3, #1
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	8afb      	ldrh	r3, [r7, #22]
 8004fea:	04d9      	lsls	r1, r3, #19
 8004fec:	4ba4      	ldr	r3, [pc, #656]	@ (8005280 <USB_EPStartXfer+0x3cc>)
 8004fee:	400b      	ands	r3, r1
 8004ff0:	69b9      	ldr	r1, [r7, #24]
 8004ff2:	0148      	lsls	r0, r1, #5
 8004ff4:	69f9      	ldr	r1, [r7, #28]
 8004ff6:	4401      	add	r1, r0
 8004ff8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	791b      	ldrb	r3, [r3, #4]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d122      	bne.n	800504e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005022:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005026:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	8afb      	ldrh	r3, [r7, #22]
 8005038:	075b      	lsls	r3, r3, #29
 800503a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800503e:	69b9      	ldr	r1, [r7, #24]
 8005040:	0148      	lsls	r0, r1, #5
 8005042:	69f9      	ldr	r1, [r7, #28]
 8005044:	4401      	add	r1, r0
 8005046:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800504a:	4313      	orrs	r3, r2
 800504c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005064:	69b9      	ldr	r1, [r7, #24]
 8005066:	0148      	lsls	r0, r1, #5
 8005068:	69f9      	ldr	r1, [r7, #28]
 800506a:	4401      	add	r1, r0
 800506c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005070:	4313      	orrs	r3, r2
 8005072:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d14b      	bne.n	8005112 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508e:	461a      	mov	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	791b      	ldrb	r3, [r3, #4]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d128      	bne.n	80050f0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d110      	bne.n	80050d0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e00f      	b.n	80050f0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800510a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e166      	b.n	80053e0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800512c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005130:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	791b      	ldrb	r3, [r3, #4]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d015      	beq.n	8005166 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 814e 	beq.w	80053e0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	69f9      	ldr	r1, [r7, #28]
 800515c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005160:	4313      	orrs	r3, r2
 8005162:	634b      	str	r3, [r1, #52]	@ 0x34
 8005164:	e13c      	b.n	80053e0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005172:	2b00      	cmp	r3, #0
 8005174:	d110      	bne.n	8005198 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005190:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e00f      	b.n	80051b8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68d9      	ldr	r1, [r3, #12]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	b298      	uxth	r0, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	4603      	mov	r3, r0
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f9b9 	bl	8005544 <USB_WritePacket>
 80051d2:	e105      	b.n	80053e0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ee:	0cdb      	lsrs	r3, r3, #19
 80051f0:	04db      	lsls	r3, r3, #19
 80051f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800520e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005212:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005216:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d132      	bne.n	8005284 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524c:	69b9      	ldr	r1, [r7, #24]
 800524e:	0148      	lsls	r0, r1, #5
 8005250:	69f9      	ldr	r1, [r7, #28]
 8005252:	4401      	add	r1, r0
 8005254:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005258:	4313      	orrs	r3, r2
 800525a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005276:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800527a:	6113      	str	r3, [r2, #16]
 800527c:	e062      	b.n	8005344 <USB_EPStartXfer+0x490>
 800527e:	bf00      	nop
 8005280:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d123      	bne.n	80052d4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a2:	69b9      	ldr	r1, [r7, #24]
 80052a4:	0148      	lsls	r0, r1, #5
 80052a6:	69f9      	ldr	r1, [r7, #28]
 80052a8:	4401      	add	r1, r0
 80052aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052ae:	4313      	orrs	r3, r2
 80052b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052d0:	6113      	str	r3, [r2, #16]
 80052d2:	e037      	b.n	8005344 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	1e5a      	subs	r2, r3, #1
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	8afa      	ldrh	r2, [r7, #22]
 80052f0:	fb03 f202 	mul.w	r2, r3, r2
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	8afb      	ldrh	r3, [r7, #22]
 8005308:	04d9      	lsls	r1, r3, #19
 800530a:	4b38      	ldr	r3, [pc, #224]	@ (80053ec <USB_EPStartXfer+0x538>)
 800530c:	400b      	ands	r3, r1
 800530e:	69b9      	ldr	r1, [r7, #24]
 8005310:	0148      	lsls	r0, r1, #5
 8005312:	69f9      	ldr	r1, [r7, #28]
 8005314:	4401      	add	r1, r0
 8005316:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800531a:	4313      	orrs	r3, r2
 800531c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	0148      	lsls	r0, r1, #5
 8005338:	69f9      	ldr	r1, [r7, #28]
 800533a:	4401      	add	r1, r0
 800533c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005340:	4313      	orrs	r3, r2
 8005342:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d10d      	bne.n	8005366 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	68d9      	ldr	r1, [r3, #12]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005362:	460a      	mov	r2, r1
 8005364:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	791b      	ldrb	r3, [r3, #4]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d128      	bne.n	80053c0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d110      	bne.n	80053a0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005398:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e00f      	b.n	80053c0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	1ff80000 	.word	0x1ff80000

080053f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d14a      	bne.n	80054a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005422:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005426:	f040 8086 	bne.w	8005536 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005448:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800544c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	440a      	add	r2, r1
 8005468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800546c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005470:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3301      	adds	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800547e:	4293      	cmp	r3, r2
 8005480:	d902      	bls.n	8005488 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
          break;
 8005486:	e056      	b.n	8005536 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800549c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054a0:	d0e7      	beq.n	8005472 <USB_EPStopXfer+0x82>
 80054a2:	e048      	b.n	8005536 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054bc:	d13b      	bne.n	8005536 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005500:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005504:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3301      	adds	r3, #1
 800550a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005512:	4293      	cmp	r3, r2
 8005514:	d902      	bls.n	800551c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
          break;
 800551a:	e00c      	b.n	8005536 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005534:	d0e7      	beq.n	8005506 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
}
 8005538:	4618      	mov	r0, r3
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	@ 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	460b      	mov	r3, r1
 8005554:	71fb      	strb	r3, [r7, #7]
 8005556:	4613      	mov	r3, r2
 8005558:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005562:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d123      	bne.n	80055b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800556a:	88bb      	ldrh	r3, [r7, #4]
 800556c:	3303      	adds	r3, #3
 800556e:	089b      	lsrs	r3, r3, #2
 8005570:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005572:	2300      	movs	r3, #0
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e018      	b.n	80055aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	031a      	lsls	r2, r3, #12
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005584:	461a      	mov	r2, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3301      	adds	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	3301      	adds	r3, #1
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d3e2      	bcc.n	8005578 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3724      	adds	r7, #36	@ 0x24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b08b      	sub	sp, #44	@ 0x2c
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	b29b      	uxth	r3, r3
 80055dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	e014      	b.n	8005616 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	3301      	adds	r3, #1
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	3301      	adds	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	3301      	adds	r3, #1
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	6a3a      	ldr	r2, [r7, #32]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	429a      	cmp	r2, r3
 800561c:	d3e6      	bcc.n	80055ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800561e:	8bfb      	ldrh	r3, [r7, #30]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01e      	beq.n	8005662 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800562e:	461a      	mov	r2, r3
 8005630:	f107 0310 	add.w	r3, r7, #16
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	b2da      	uxtb	r2, r3
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	701a      	strb	r2, [r3, #0]
      i++;
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	3301      	adds	r3, #1
 800564e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	3301      	adds	r3, #1
 8005654:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005656:	8bfb      	ldrh	r3, [r7, #30]
 8005658:	3b01      	subs	r3, #1
 800565a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800565c:	8bfb      	ldrh	r3, [r7, #30]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1ea      	bne.n	8005638 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005664:	4618      	mov	r0, r3
 8005666:	372c      	adds	r7, #44	@ 0x2c
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d12c      	bne.n	80056e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	db12      	blt.n	80056c4 <USB_EPSetStall+0x54>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00f      	beq.n	80056c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	e02b      	b.n	800573e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	db12      	blt.n	800571e <USB_EPSetStall+0xae>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00f      	beq.n	800571e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005718:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800571c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800573c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d128      	bne.n	80057ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005782:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005786:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	791b      	ldrb	r3, [r3, #4]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d003      	beq.n	8005798 <USB_EPClearStall+0x4c>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	791b      	ldrb	r3, [r3, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d138      	bne.n	800580a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e027      	b.n	800580a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	791b      	ldrb	r3, [r3, #4]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d003      	beq.n	80057ea <USB_EPClearStall+0x9e>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	791b      	ldrb	r3, [r3, #4]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d10f      	bne.n	800580a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005808:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005836:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800583a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800584c:	68f9      	ldr	r1, [r7, #12]
 800584e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005892:	f023 0302 	bic.w	r3, r3, #2
 8005896:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80058c0:	f023 0303 	bic.w	r3, r3, #3
 80058c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058d4:	f043 0302 	orr.w	r3, r3, #2
 80058d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4013      	ands	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005900:	68fb      	ldr	r3, [r7, #12]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	4013      	ands	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	0c1b      	lsrs	r3, r3, #16
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	b29b      	uxth	r3, r3
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4013      	ands	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059a4:	68bb      	ldr	r3, [r7, #8]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b087      	sub	sp, #28
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	01db      	lsls	r3, r3, #7
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4013      	ands	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a00:	68bb      	ldr	r3, [r7, #8]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a48:	f023 0307 	bic.w	r3, r3, #7
 8005a4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	333c      	adds	r3, #60	@ 0x3c
 8005a86:	3304      	adds	r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4a26      	ldr	r2, [pc, #152]	@ (8005b28 <USB_EP0_OutStart+0xb8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d90a      	bls.n	8005aaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aa4:	d101      	bne.n	8005aaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e037      	b.n	8005b1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ad8:	f043 0318 	orr.w	r3, r3, #24
 8005adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005af0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005af2:	7afb      	ldrb	r3, [r7, #11]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d10f      	bne.n	8005b18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afe:	461a      	mov	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b12:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005b16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	4f54300a 	.word	0x4f54300a

08005b2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b44:	d901      	bls.n	8005b4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e022      	b.n	8005b90 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	daf2      	bge.n	8005b38 <USB_CoreReset+0xc>

  count = 10U;
 8005b52:	230a      	movs	r3, #10
 8005b54:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005b56:	e002      	b.n	8005b5e <USB_CoreReset+0x32>
  {
    count--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f9      	bne.n	8005b58 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f043 0201 	orr.w	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b7c:	d901      	bls.n	8005b82 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e006      	b.n	8005b90 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d0f0      	beq.n	8005b70 <USB_CoreReset+0x44>

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005ba8:	2054      	movs	r0, #84	@ 0x54
 8005baa:	f002 fd07 	bl	80085bc <USBD_static_malloc>
 8005bae:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	32b0      	adds	r2, #176	@ 0xb0
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e08b      	b.n	8005ce2 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	32b0      	adds	r2, #176	@ 0xb0
 8005bd4:	68f9      	ldr	r1, [r7, #12]
 8005bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	32b0      	adds	r2, #176	@ 0xb0
 8005be4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	7c1b      	ldrb	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11b      	bne.n	8005c2e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8005cec <USBD_CUSTOM_HID_Init+0x150>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 020f 	and.w	r2, r3, #15
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	331c      	adds	r3, #28
 8005c0c:	2205      	movs	r2, #5
 8005c0e:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005c10:	4b37      	ldr	r3, [pc, #220]	@ (8005cf0 <USBD_CUSTOM_HID_Init+0x154>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005c28:	2205      	movs	r2, #5
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e01a      	b.n	8005c64 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005cec <USBD_CUSTOM_HID_Init+0x150>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	f003 020f 	and.w	r2, r3, #15
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	331c      	adds	r3, #28
 8005c44:	2205      	movs	r2, #5
 8005c46:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005c48:	4b29      	ldr	r3, [pc, #164]	@ (8005cf0 <USBD_CUSTOM_HID_Init+0x154>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 020f 	and.w	r2, r3, #15
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005c60:	2205      	movs	r2, #5
 8005c62:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8005c64:	4b21      	ldr	r3, [pc, #132]	@ (8005cec <USBD_CUSTOM_HID_Init+0x150>)
 8005c66:	7819      	ldrb	r1, [r3, #0]
 8005c68:	2340      	movs	r3, #64	@ 0x40
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f002 fb94 	bl	800839a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005c72:	4b1e      	ldr	r3, [pc, #120]	@ (8005cec <USBD_CUSTOM_HID_Init+0x150>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 020f 	and.w	r2, r3, #15
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	3323      	adds	r3, #35	@ 0x23
 8005c88:	2201      	movs	r2, #1
 8005c8a:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8005c8c:	4b18      	ldr	r3, [pc, #96]	@ (8005cf0 <USBD_CUSTOM_HID_Init+0x154>)
 8005c8e:	7819      	ldrb	r1, [r3, #0]
 8005c90:	2340      	movs	r3, #64	@ 0x40
 8005c92:	2203      	movs	r2, #3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f002 fb80 	bl	800839a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8005c9a:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <USBD_CUSTOM_HID_Init+0x154>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	f003 020f 	and.w	r2, r3, #15
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	33b0      	adds	r3, #176	@ 0xb0
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005cd2:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <USBD_CUSTOM_HID_Init+0x154>)
 8005cd4:	7819      	ldrb	r1, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	2340      	movs	r3, #64	@ 0x40
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f002 fc4c 	bl	8008578 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000086 	.word	0x20000086
 8005cf0:	20000087 	.word	0x20000087

08005cf4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005d00:	4b37      	ldr	r3, [pc, #220]	@ (8005de0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f002 fb6d 	bl	80083e6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005d0c:	4b34      	ldr	r3, [pc, #208]	@ (8005de0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	f003 020f 	and.w	r2, r3, #15
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	3323      	adds	r3, #35	@ 0x23
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005d26:	4b2e      	ldr	r3, [pc, #184]	@ (8005de0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f003 020f 	and.w	r2, r3, #15
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	331c      	adds	r3, #28
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005d40:	4b28      	ldr	r3, [pc, #160]	@ (8005de4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f002 fb4d 	bl	80083e6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005d4c:	4b25      	ldr	r3, [pc, #148]	@ (8005de4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f003 020f 	and.w	r2, r3, #15
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005d68:	4b1e      	ldr	r3, [pc, #120]	@ (8005de4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f003 020f 	and.w	r2, r3, #15
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	32b0      	adds	r2, #176	@ 0xb0
 8005d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01f      	beq.n	8005dd6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	33b0      	adds	r3, #176	@ 0xb0
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	32b0      	adds	r2, #176	@ 0xb0
 8005db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f002 fc0d 	bl	80085d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	32b0      	adds	r2, #176	@ 0xb0
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000086 	.word	0x20000086
 8005de4:	20000087 	.word	0x20000087

08005de8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	32b0      	adds	r2, #176	@ 0xb0
 8005dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e00:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e108      	b.n	800602e <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d05c      	beq.n	8005ee2 <USBD_CUSTOM_HID_Setup+0xfa>
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	f040 80f8 	bne.w	800601e <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	3b02      	subs	r3, #2
 8005e34:	2b09      	cmp	r3, #9
 8005e36:	d84c      	bhi.n	8005ed2 <USBD_CUSTOM_HID_Setup+0xea>
 8005e38:	a201      	add	r2, pc, #4	@ (adr r2, 8005e40 <USBD_CUSTOM_HID_Setup+0x58>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e99 	.word	0x08005e99
 8005e44:	08005e77 	.word	0x08005e77
 8005e48:	08005ed3 	.word	0x08005ed3
 8005e4c:	08005ed3 	.word	0x08005ed3
 8005e50:	08005ed3 	.word	0x08005ed3
 8005e54:	08005ed3 	.word	0x08005ed3
 8005e58:	08005ed3 	.word	0x08005ed3
 8005e5c:	08005ea9 	.word	0x08005ea9
 8005e60:	08005e87 	.word	0x08005e87
 8005e64:	08005e69 	.word	0x08005e69
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	885b      	ldrh	r3, [r3, #2]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8005e74:	e034      	b.n	8005ee0 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	3340      	adds	r3, #64	@ 0x40
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f001 fcfa 	bl	8007878 <USBD_CtlSendData>
          break;
 8005e84:	e02c      	b.n	8005ee0 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	885b      	ldrh	r3, [r3, #2]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8005e96:	e023      	b.n	8005ee0 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3344      	adds	r3, #68	@ 0x44
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fce9 	bl	8007878 <USBD_CtlSendData>
          break;
 8005ea6:	e01b      	b.n	8005ee0 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	88db      	ldrh	r3, [r3, #6]
 8005eac:	2b40      	cmp	r3, #64	@ 0x40
 8005eae:	d905      	bls.n	8005ebc <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fc63 	bl	800777e <USBD_CtlError>
            return USBD_FAIL;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e0b8      	b.n	800602e <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005ec2:	6939      	ldr	r1, [r7, #16]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	88db      	ldrh	r3, [r3, #6]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 fd03 	bl	80078d6 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005ed0:	e006      	b.n	8005ee0 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fc52 	bl	800777e <USBD_CtlError>
          ret = USBD_FAIL;
 8005eda:	2303      	movs	r3, #3
 8005edc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ede:	bf00      	nop
      }
      break;
 8005ee0:	e0a4      	b.n	800602c <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	2b0b      	cmp	r3, #11
 8005ee8:	f200 8090 	bhi.w	800600c <USBD_CUSTOM_HID_Setup+0x224>
 8005eec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <USBD_CUSTOM_HID_Setup+0x10c>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f25 	.word	0x08005f25
 8005ef8:	0800601b 	.word	0x0800601b
 8005efc:	0800600d 	.word	0x0800600d
 8005f00:	0800600d 	.word	0x0800600d
 8005f04:	0800600d 	.word	0x0800600d
 8005f08:	0800600d 	.word	0x0800600d
 8005f0c:	08005f4f 	.word	0x08005f4f
 8005f10:	0800600d 	.word	0x0800600d
 8005f14:	0800600d 	.word	0x0800600d
 8005f18:	0800600d 	.word	0x0800600d
 8005f1c:	08005fbb 	.word	0x08005fbb
 8005f20:	08005fe5 	.word	0x08005fe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d107      	bne.n	8005f40 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f30:	f107 030e 	add.w	r3, r7, #14
 8005f34:	2202      	movs	r2, #2
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fc9d 	bl	8007878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f3e:	e06d      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 fc1b 	bl	800777e <USBD_CtlError>
            ret = USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f4c:	e066      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	885b      	ldrh	r3, [r3, #2]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b22      	cmp	r3, #34	@ 0x22
 8005f58:	d110      	bne.n	8005f7c <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	88db      	ldrh	r3, [r3, #6]
 8005f5e:	2b1b      	cmp	r3, #27
 8005f60:	bf28      	it	cs
 8005f62:	231b      	movcs	r3, #27
 8005f64:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	33b0      	adds	r3, #176	@ 0xb0
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e00d      	b.n	8005f98 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b21      	cmp	r3, #33	@ 0x21
 8005f86:	d107      	bne.n	8005f98 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005f88:	4b2b      	ldr	r3, [pc, #172]	@ (8006038 <USBD_CUSTOM_HID_Setup+0x250>)
 8005f8a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	88db      	ldrh	r3, [r3, #6]
 8005f90:	2b09      	cmp	r3, #9
 8005f92:	bf28      	it	cs
 8005f94:	2309      	movcs	r3, #9
 8005f96:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d006      	beq.n	8005fac <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f9e:	8bfb      	ldrh	r3, [r7, #30]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	69b9      	ldr	r1, [r7, #24]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fc67 	bl	8007878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005faa:	e037      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 fbe5 	bl	800777e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	75fb      	strb	r3, [r7, #23]
          break;
 8005fb8:	e030      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d107      	bne.n	8005fd6 <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3348      	adds	r3, #72	@ 0x48
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f001 fc52 	bl	8007878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fd4:	e022      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fbd0 	bl	800777e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fe2:	e01b      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d106      	bne.n	8005ffe <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	885b      	ldrh	r3, [r3, #2]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ffc:	e00e      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fbbc 	bl	800777e <USBD_CtlError>
            ret = USBD_FAIL;
 8006006:	2303      	movs	r3, #3
 8006008:	75fb      	strb	r3, [r7, #23]
          break;
 800600a:	e007      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fbb5 	bl	800777e <USBD_CtlError>
          ret = USBD_FAIL;
 8006014:	2303      	movs	r3, #3
 8006016:	75fb      	strb	r3, [r7, #23]
          break;
 8006018:	e000      	b.n	800601c <USBD_CUSTOM_HID_Setup+0x234>
          break;
 800601a:	bf00      	nop
      }
      break;
 800601c:	e006      	b.n	800602c <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fbac 	bl	800777e <USBD_CtlError>
      ret = USBD_FAIL;
 8006026:	2303      	movs	r3, #3
 8006028:	75fb      	strb	r3, [r7, #23]
      break;
 800602a:	bf00      	nop
  }
  return (uint8_t)ret;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3720      	adds	r7, #32
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000070 	.word	0x20000070

0800603c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	32b0      	adds	r2, #176	@ 0xb0
 8006054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006058:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	e019      	b.n	8006098 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b03      	cmp	r3, #3
 800606e:	d112      	bne.n	8006096 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006082:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <USBD_CUSTOM_HID_SendReport+0x64>)
 8006084:	7819      	ldrb	r1, [r3, #0]
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f002 fa53 	bl	8008536 <USBD_LL_Transmit>
 8006090:	e001      	b.n	8006096 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000086 	.word	0x20000086

080060a4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80060ac:	2181      	movs	r1, #129	@ 0x81
 80060ae:	4815      	ldr	r0, [pc, #84]	@ (8006104 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80060b0:	f000 fd2c 	bl	8006b0c <USBD_GetEpDesc>
 80060b4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80060b6:	2101      	movs	r1, #1
 80060b8:	4812      	ldr	r0, [pc, #72]	@ (8006104 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80060ba:	f000 fd27 	bl	8006b0c <USBD_GetEpDesc>
 80060be:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d009      	beq.n	80060da <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060ce:	711a      	strb	r2, [r3, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2205      	movs	r2, #5
 80060d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d009      	beq.n	80060f4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060e8:	711a      	strb	r2, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2205      	movs	r2, #5
 80060f2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2229      	movs	r2, #41	@ 0x29
 80060f8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80060fa:	4b02      	ldr	r3, [pc, #8]	@ (8006104 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000044 	.word	0x20000044

08006108 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006110:	2181      	movs	r1, #129	@ 0x81
 8006112:	4815      	ldr	r0, [pc, #84]	@ (8006168 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006114:	f000 fcfa 	bl	8006b0c <USBD_GetEpDesc>
 8006118:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800611a:	2101      	movs	r1, #1
 800611c:	4812      	ldr	r0, [pc, #72]	@ (8006168 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800611e:	f000 fcf5 	bl	8006b0c <USBD_GetEpDesc>
 8006122:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006132:	711a      	strb	r2, [r3, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2205      	movs	r2, #5
 800613c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2200      	movs	r2, #0
 8006148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800614c:	711a      	strb	r2, [r3, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2205      	movs	r2, #5
 8006156:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2229      	movs	r2, #41	@ 0x29
 800615c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800615e:	4b02      	ldr	r3, [pc, #8]	@ (8006168 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000044 	.word	0x20000044

0800616c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006174:	2181      	movs	r1, #129	@ 0x81
 8006176:	4815      	ldr	r0, [pc, #84]	@ (80061cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006178:	f000 fcc8 	bl	8006b0c <USBD_GetEpDesc>
 800617c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800617e:	2101      	movs	r1, #1
 8006180:	4812      	ldr	r0, [pc, #72]	@ (80061cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006182:	f000 fcc3 	bl	8006b0c <USBD_GetEpDesc>
 8006186:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006196:	711a      	strb	r2, [r3, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2205      	movs	r2, #5
 80061a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d009      	beq.n	80061bc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061b0:	711a      	strb	r2, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2205      	movs	r2, #5
 80061ba:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2229      	movs	r2, #41	@ 0x29
 80061c0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80061c2:	4b02      	ldr	r3, [pc, #8]	@ (80061cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000044 	.word	0x20000044

080061d0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32b0      	adds	r2, #176	@ 0xb0
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	32b0      	adds	r2, #176	@ 0xb0
 8006214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	e014      	b.n	800624a <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	32b0      	adds	r2, #176	@ 0xb0
 800622a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	33b0      	adds	r3, #176	@ 0xb0
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	32b0      	adds	r2, #176	@ 0xb0
 8006266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800626e:	2303      	movs	r3, #3
 8006270:	e00f      	b.n	8006292 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	32b0      	adds	r2, #176	@ 0xb0
 800627c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006280:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006284:	7819      	ldrb	r1, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	2340      	movs	r3, #64	@ 0x40
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f002 f974 	bl	8008578 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000087 	.word	0x20000087

080062a0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32b0      	adds	r2, #176	@ 0xb0
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062be:	2303      	movs	r3, #3
 80062c0:	e013      	b.n	80062ea <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d10e      	bne.n	80062e8 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	33b0      	adds	r3, #176	@ 0xb0
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4610      	mov	r0, r2
 80062e0:	4798      	blx	r3
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	220a      	movs	r2, #10
 8006300:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006302:	4b03      	ldr	r3, [pc, #12]	@ (8006310 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	2000007c 	.word	0x2000007c

08006314 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006324:	2303      	movs	r3, #3
 8006326:	e009      	b.n	800633c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	33b0      	adds	r3, #176	@ 0xb0
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800635c:	2303      	movs	r3, #3
 800635e:	e01f      	b.n	80063a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	79fa      	ldrb	r2, [r7, #7]
 8006392:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f001 ff99 	bl	80082cc <USBD_LL_Init>
 800639a:	4603      	mov	r3, r0
 800639c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063bc:	2303      	movs	r3, #3
 80063be:	e025      	b.n	800640c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	32ae      	adds	r2, #174	@ 0xae
 80063d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00f      	beq.n	80063fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	32ae      	adds	r2, #174	@ 0xae
 80063e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	f107 020e 	add.w	r2, r7, #14
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
 80063f4:	4602      	mov	r2, r0
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 ffa1 	bl	8008364 <USBD_LL_Start>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d009      	beq.n	8006470 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	78fa      	ldrb	r2, [r7, #3]
 8006466:	4611      	mov	r1, r2
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	4798      	blx	r3
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	4611      	mov	r1, r2
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064a0:	2303      	movs	r3, #3
 80064a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 f922 	bl	800770a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80064d4:	461a      	mov	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064e2:	f003 031f 	and.w	r3, r3, #31
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d01a      	beq.n	8006520 <USBD_LL_SetupStage+0x72>
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d822      	bhi.n	8006534 <USBD_LL_SetupStage+0x86>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <USBD_LL_SetupStage+0x4a>
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d00a      	beq.n	800650c <USBD_LL_SetupStage+0x5e>
 80064f6:	e01d      	b.n	8006534 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fb77 	bl	8006bf4 <USBD_StdDevReq>
 8006506:	4603      	mov	r3, r0
 8006508:	73fb      	strb	r3, [r7, #15]
      break;
 800650a:	e020      	b.n	800654e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fbdf 	bl	8006cd8 <USBD_StdItfReq>
 800651a:	4603      	mov	r3, r0
 800651c:	73fb      	strb	r3, [r7, #15]
      break;
 800651e:	e016      	b.n	800654e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fc41 	bl	8006db0 <USBD_StdEPReq>
 800652e:	4603      	mov	r3, r0
 8006530:	73fb      	strb	r3, [r7, #15]
      break;
 8006532:	e00c      	b.n	800654e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800653a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800653e:	b2db      	uxtb	r3, r3
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 ff6e 	bl	8008424 <USBD_LL_StallEP>
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]
      break;
 800654c:	bf00      	nop
  }

  return ret;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	460b      	mov	r3, r1
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800656a:	7afb      	ldrb	r3, [r7, #11]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d177      	bne.n	8006660 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006576:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800657e:	2b03      	cmp	r3, #3
 8006580:	f040 80a1 	bne.w	80066c6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	8992      	ldrh	r2, [r2, #12]
 800658c:	4293      	cmp	r3, r2
 800658e:	d91c      	bls.n	80065ca <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	8992      	ldrh	r2, [r2, #12]
 8006598:	1a9a      	subs	r2, r3, r2
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	8992      	ldrh	r2, [r2, #12]
 80065a6:	441a      	add	r2, r3
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6919      	ldr	r1, [r3, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	899b      	ldrh	r3, [r3, #12]
 80065b4:	461a      	mov	r2, r3
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4293      	cmp	r3, r2
 80065bc:	bf38      	it	cc
 80065be:	4613      	movcc	r3, r2
 80065c0:	461a      	mov	r2, r3
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f001 f9a8 	bl	8007918 <USBD_CtlContinueRx>
 80065c8:	e07d      	b.n	80066c6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d014      	beq.n	8006602 <USBD_LL_DataOutStage+0xaa>
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d81d      	bhi.n	8006618 <USBD_LL_DataOutStage+0xc0>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <USBD_LL_DataOutStage+0x8e>
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d003      	beq.n	80065ec <USBD_LL_DataOutStage+0x94>
 80065e4:	e018      	b.n	8006618 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	75bb      	strb	r3, [r7, #22]
            break;
 80065ea:	e018      	b.n	800661e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fa6e 	bl	8006ad8 <USBD_CoreFindIF>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006600:	e00d      	b.n	800661e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006608:	b2db      	uxtb	r3, r3
 800660a:	4619      	mov	r1, r3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fa70 	bl	8006af2 <USBD_CoreFindEP>
 8006612:	4603      	mov	r3, r0
 8006614:	75bb      	strb	r3, [r7, #22]
            break;
 8006616:	e002      	b.n	800661e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	75bb      	strb	r3, [r7, #22]
            break;
 800661c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800661e:	7dbb      	ldrb	r3, [r7, #22]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d119      	bne.n	8006658 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b03      	cmp	r3, #3
 800662e:	d113      	bne.n	8006658 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006630:	7dba      	ldrb	r2, [r7, #22]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	32ae      	adds	r2, #174	@ 0xae
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006640:	7dba      	ldrb	r2, [r7, #22]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006648:	7dba      	ldrb	r2, [r7, #22]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	32ae      	adds	r2, #174	@ 0xae
 800664e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f001 f96e 	bl	800793a <USBD_CtlSendStatus>
 800665e:	e032      	b.n	80066c6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006666:	b2db      	uxtb	r3, r3
 8006668:	4619      	mov	r1, r3
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fa41 	bl	8006af2 <USBD_CoreFindEP>
 8006670:	4603      	mov	r3, r0
 8006672:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006674:	7dbb      	ldrb	r3, [r7, #22]
 8006676:	2bff      	cmp	r3, #255	@ 0xff
 8006678:	d025      	beq.n	80066c6 <USBD_LL_DataOutStage+0x16e>
 800667a:	7dbb      	ldrb	r3, [r7, #22]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d122      	bne.n	80066c6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b03      	cmp	r3, #3
 800668a:	d117      	bne.n	80066bc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800668c:	7dba      	ldrb	r2, [r7, #22]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	32ae      	adds	r2, #174	@ 0xae
 8006692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00f      	beq.n	80066bc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800669c:	7dba      	ldrb	r2, [r7, #22]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80066a4:	7dba      	ldrb	r2, [r7, #22]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	32ae      	adds	r2, #174	@ 0xae
 80066aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	7afa      	ldrb	r2, [r7, #11]
 80066b2:	4611      	mov	r1, r2
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	4798      	blx	r3
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	e000      	b.n	80066c8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	460b      	mov	r3, r1
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80066de:	7afb      	ldrb	r3, [r7, #11]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d178      	bne.n	80067d6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3314      	adds	r3, #20
 80066e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d163      	bne.n	80067bc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	8992      	ldrh	r2, [r2, #12]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d91c      	bls.n	800673a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	8992      	ldrh	r2, [r2, #12]
 8006708:	1a9a      	subs	r2, r3, r2
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	8992      	ldrh	r2, [r2, #12]
 8006716:	441a      	add	r2, r3
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6919      	ldr	r1, [r3, #16]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	461a      	mov	r2, r3
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f001 f8c4 	bl	80078b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800672c:	2300      	movs	r3, #0
 800672e:	2200      	movs	r2, #0
 8006730:	2100      	movs	r1, #0
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f001 ff20 	bl	8008578 <USBD_LL_PrepareReceive>
 8006738:	e040      	b.n	80067bc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	899b      	ldrh	r3, [r3, #12]
 800673e:	461a      	mov	r2, r3
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	429a      	cmp	r2, r3
 8006746:	d11c      	bne.n	8006782 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006750:	4293      	cmp	r3, r2
 8006752:	d316      	bcc.n	8006782 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800675e:	429a      	cmp	r2, r3
 8006760:	d20f      	bcs.n	8006782 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f001 f8a4 	bl	80078b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006774:	2300      	movs	r3, #0
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f001 fefc 	bl	8008578 <USBD_LL_PrepareReceive>
 8006780:	e01c      	b.n	80067bc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b03      	cmp	r3, #3
 800678c:	d10f      	bne.n	80067ae <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ae:	2180      	movs	r1, #128	@ 0x80
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f001 fe37 	bl	8008424 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f001 f8d2 	bl	8007960 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d03a      	beq.n	800683c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff fe30 	bl	800642c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80067d4:	e032      	b.n	800683c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067d6:	7afb      	ldrb	r3, [r7, #11]
 80067d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	4619      	mov	r1, r3
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f986 	bl	8006af2 <USBD_CoreFindEP>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	2bff      	cmp	r3, #255	@ 0xff
 80067ee:	d025      	beq.n	800683c <USBD_LL_DataInStage+0x16c>
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d122      	bne.n	800683c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d11c      	bne.n	800683c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006802:	7dfa      	ldrb	r2, [r7, #23]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	32ae      	adds	r2, #174	@ 0xae
 8006808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d014      	beq.n	800683c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006812:	7dfa      	ldrb	r2, [r7, #23]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800681a:	7dfa      	ldrb	r2, [r7, #23]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	32ae      	adds	r2, #174	@ 0xae
 8006820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	7afa      	ldrb	r2, [r7, #11]
 8006828:	4611      	mov	r1, r2
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	4798      	blx	r3
 800682e:	4603      	mov	r3, r0
 8006830:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006832:	7dbb      	ldrb	r3, [r7, #22]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006838:	7dbb      	ldrb	r3, [r7, #22]
 800683a:	e000      	b.n	800683e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d014      	beq.n	80068ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00e      	beq.n	80068ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6852      	ldr	r2, [r2, #4]
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	4611      	mov	r1, r2
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80068a8:	2303      	movs	r3, #3
 80068aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068ac:	2340      	movs	r3, #64	@ 0x40
 80068ae:	2200      	movs	r2, #0
 80068b0:	2100      	movs	r1, #0
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fd71 	bl	800839a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2240      	movs	r2, #64	@ 0x40
 80068c4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068c8:	2340      	movs	r3, #64	@ 0x40
 80068ca:	2200      	movs	r2, #0
 80068cc:	2180      	movs	r1, #128	@ 0x80
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fd63 	bl	800839a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2240      	movs	r2, #64	@ 0x40
 80068e0:	841a      	strh	r2, [r3, #32]

  return ret;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b04      	cmp	r3, #4
 800691e:	d006      	beq.n	800692e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006926:	b2da      	uxtb	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2204      	movs	r2, #4
 8006932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b04      	cmp	r3, #4
 8006956:	d106      	bne.n	8006966 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800695e:	b2da      	uxtb	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b03      	cmp	r3, #3
 8006986:	d110      	bne.n	80069aa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	32ae      	adds	r2, #174	@ 0xae
 80069ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e01c      	b.n	8006a10 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d115      	bne.n	8006a0e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	32ae      	adds	r2, #174	@ 0xae
 80069ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	32ae      	adds	r2, #174	@ 0xae
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	78fa      	ldrb	r2, [r7, #3]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32ae      	adds	r2, #174	@ 0xae
 8006a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e01c      	b.n	8006a74 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d115      	bne.n	8006a72 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	32ae      	adds	r2, #174	@ 0xae
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	32ae      	adds	r2, #174	@ 0xae
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6852      	ldr	r2, [r2, #4]
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	4611      	mov	r1, r2
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006aca:	2303      	movs	r3, #3
 8006acc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ae4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006afe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	885b      	ldrh	r3, [r3, #2]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d91f      	bls.n	8006b72 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b38:	e013      	b.n	8006b62 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b3a:	f107 030a 	add.w	r3, r7, #10
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6978      	ldr	r0, [r7, #20]
 8006b42:	f000 f81b 	bl	8006b7c <USBD_GetNextDesc>
 8006b46:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b05      	cmp	r3, #5
 8006b4e:	d108      	bne.n	8006b62 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	789b      	ldrb	r3, [r3, #2]
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d008      	beq.n	8006b70 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	885b      	ldrh	r3, [r3, #2]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	897b      	ldrh	r3, [r7, #10]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d8e5      	bhi.n	8006b3a <USBD_GetEpDesc+0x2e>
 8006b6e:	e000      	b.n	8006b72 <USBD_GetEpDesc+0x66>
          break;
 8006b70:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b72:	693b      	ldr	r3, [r7, #16]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	7812      	ldrb	r2, [r2, #0]
 8006b92:	4413      	add	r3, r2
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	b21a      	sxth	r2, r3
 8006bda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	b21b      	sxth	r3, r3
 8006be2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006be4:	89fb      	ldrh	r3, [r7, #14]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
	...

08006bf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c0a:	2b40      	cmp	r3, #64	@ 0x40
 8006c0c:	d005      	beq.n	8006c1a <USBD_StdDevReq+0x26>
 8006c0e:	2b40      	cmp	r3, #64	@ 0x40
 8006c10:	d857      	bhi.n	8006cc2 <USBD_StdDevReq+0xce>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00f      	beq.n	8006c36 <USBD_StdDevReq+0x42>
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d153      	bne.n	8006cc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	32ae      	adds	r2, #174	@ 0xae
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	e04a      	b.n	8006ccc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	2b09      	cmp	r3, #9
 8006c3c:	d83b      	bhi.n	8006cb6 <USBD_StdDevReq+0xc2>
 8006c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c44 <USBD_StdDevReq+0x50>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006cad 	.word	0x08006cad
 8006c4c:	08006cb7 	.word	0x08006cb7
 8006c50:	08006ca3 	.word	0x08006ca3
 8006c54:	08006cb7 	.word	0x08006cb7
 8006c58:	08006c77 	.word	0x08006c77
 8006c5c:	08006c6d 	.word	0x08006c6d
 8006c60:	08006cb7 	.word	0x08006cb7
 8006c64:	08006c8f 	.word	0x08006c8f
 8006c68:	08006c81 	.word	0x08006c81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fa3e 	bl	80070f0 <USBD_GetDescriptor>
          break;
 8006c74:	e024      	b.n	8006cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fba3 	bl	80073c4 <USBD_SetAddress>
          break;
 8006c7e:	e01f      	b.n	8006cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fbe2 	bl	800744c <USBD_SetConfig>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
          break;
 8006c8c:	e018      	b.n	8006cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc85 	bl	80075a0 <USBD_GetConfig>
          break;
 8006c96:	e013      	b.n	8006cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fcb6 	bl	800760c <USBD_GetStatus>
          break;
 8006ca0:	e00e      	b.n	8006cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fce5 	bl	8007674 <USBD_SetFeature>
          break;
 8006caa:	e009      	b.n	8006cc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fd09 	bl	80076c6 <USBD_ClrFeature>
          break;
 8006cb4:	e004      	b.n	8006cc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fd60 	bl	800777e <USBD_CtlError>
          break;
 8006cbe:	bf00      	nop
      }
      break;
 8006cc0:	e004      	b.n	8006ccc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fd5a 	bl	800777e <USBD_CtlError>
      break;
 8006cca:	bf00      	nop
  }

  return ret;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop

08006cd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cee:	2b40      	cmp	r3, #64	@ 0x40
 8006cf0:	d005      	beq.n	8006cfe <USBD_StdItfReq+0x26>
 8006cf2:	2b40      	cmp	r3, #64	@ 0x40
 8006cf4:	d852      	bhi.n	8006d9c <USBD_StdItfReq+0xc4>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <USBD_StdItfReq+0x26>
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d14e      	bne.n	8006d9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d840      	bhi.n	8006d8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	889b      	ldrh	r3, [r3, #4]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d836      	bhi.n	8006d84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	889b      	ldrh	r3, [r3, #4]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff feda 	bl	8006ad8 <USBD_CoreFindIF>
 8006d24:	4603      	mov	r3, r0
 8006d26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2bff      	cmp	r3, #255	@ 0xff
 8006d2c:	d01d      	beq.n	8006d6a <USBD_StdItfReq+0x92>
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11a      	bne.n	8006d6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d34:	7bba      	ldrb	r2, [r7, #14]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32ae      	adds	r2, #174	@ 0xae
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00f      	beq.n	8006d64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d44:	7bba      	ldrb	r2, [r7, #14]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d4c:	7bba      	ldrb	r2, [r7, #14]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	32ae      	adds	r2, #174	@ 0xae
 8006d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d62:	e004      	b.n	8006d6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d64:	2303      	movs	r3, #3
 8006d66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d68:	e001      	b.n	8006d6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	88db      	ldrh	r3, [r3, #6]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d110      	bne.n	8006d98 <USBD_StdItfReq+0xc0>
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10d      	bne.n	8006d98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fddc 	bl	800793a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d82:	e009      	b.n	8006d98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fcf9 	bl	800777e <USBD_CtlError>
          break;
 8006d8c:	e004      	b.n	8006d98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fcf4 	bl	800777e <USBD_CtlError>
          break;
 8006d96:	e000      	b.n	8006d9a <USBD_StdItfReq+0xc2>
          break;
 8006d98:	bf00      	nop
      }
      break;
 8006d9a:	e004      	b.n	8006da6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fced 	bl	800777e <USBD_CtlError>
      break;
 8006da4:	bf00      	nop
  }

  return ret;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	889b      	ldrh	r3, [r3, #4]
 8006dc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dcc:	2b40      	cmp	r3, #64	@ 0x40
 8006dce:	d007      	beq.n	8006de0 <USBD_StdEPReq+0x30>
 8006dd0:	2b40      	cmp	r3, #64	@ 0x40
 8006dd2:	f200 8181 	bhi.w	80070d8 <USBD_StdEPReq+0x328>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d02a      	beq.n	8006e30 <USBD_StdEPReq+0x80>
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	f040 817c 	bne.w	80070d8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff fe84 	bl	8006af2 <USBD_CoreFindEP>
 8006dea:	4603      	mov	r3, r0
 8006dec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dee:	7b7b      	ldrb	r3, [r7, #13]
 8006df0:	2bff      	cmp	r3, #255	@ 0xff
 8006df2:	f000 8176 	beq.w	80070e2 <USBD_StdEPReq+0x332>
 8006df6:	7b7b      	ldrb	r3, [r7, #13]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f040 8172 	bne.w	80070e2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006dfe:	7b7a      	ldrb	r2, [r7, #13]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e06:	7b7a      	ldrb	r2, [r7, #13]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	32ae      	adds	r2, #174	@ 0xae
 8006e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 8165 	beq.w	80070e2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e18:	7b7a      	ldrb	r2, [r7, #13]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	32ae      	adds	r2, #174	@ 0xae
 8006e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e2e:	e158      	b.n	80070e2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d008      	beq.n	8006e4a <USBD_StdEPReq+0x9a>
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	f300 8147 	bgt.w	80070cc <USBD_StdEPReq+0x31c>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 809b 	beq.w	8006f7a <USBD_StdEPReq+0x1ca>
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d03c      	beq.n	8006ec2 <USBD_StdEPReq+0x112>
 8006e48:	e140      	b.n	80070cc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d002      	beq.n	8006e5c <USBD_StdEPReq+0xac>
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d016      	beq.n	8006e88 <USBD_StdEPReq+0xd8>
 8006e5a:	e02c      	b.n	8006eb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <USBD_StdEPReq+0xce>
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b80      	cmp	r3, #128	@ 0x80
 8006e66:	d00a      	beq.n	8006e7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 fad9 	bl	8008424 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e72:	2180      	movs	r1, #128	@ 0x80
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 fad5 	bl	8008424 <USBD_LL_StallEP>
 8006e7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e7c:	e020      	b.n	8006ec0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fc7c 	bl	800777e <USBD_CtlError>
              break;
 8006e86:	e01b      	b.n	8006ec0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	885b      	ldrh	r3, [r3, #2]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10e      	bne.n	8006eae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00b      	beq.n	8006eae <USBD_StdEPReq+0xfe>
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b80      	cmp	r3, #128	@ 0x80
 8006e9a:	d008      	beq.n	8006eae <USBD_StdEPReq+0xfe>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	88db      	ldrh	r3, [r3, #6]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fabb 	bl	8008424 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fd43 	bl	800793a <USBD_CtlSendStatus>

              break;
 8006eb4:	e004      	b.n	8006ec0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fc60 	bl	800777e <USBD_CtlError>
              break;
 8006ebe:	bf00      	nop
          }
          break;
 8006ec0:	e109      	b.n	80070d6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d002      	beq.n	8006ed4 <USBD_StdEPReq+0x124>
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d016      	beq.n	8006f00 <USBD_StdEPReq+0x150>
 8006ed2:	e04b      	b.n	8006f6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00d      	beq.n	8006ef6 <USBD_StdEPReq+0x146>
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	2b80      	cmp	r3, #128	@ 0x80
 8006ede:	d00a      	beq.n	8006ef6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fa9d 	bl	8008424 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eea:	2180      	movs	r1, #128	@ 0x80
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fa99 	bl	8008424 <USBD_LL_StallEP>
 8006ef2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ef4:	e040      	b.n	8006f78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fc40 	bl	800777e <USBD_CtlError>
              break;
 8006efe:	e03b      	b.n	8006f78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	885b      	ldrh	r3, [r3, #2]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d136      	bne.n	8006f76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d004      	beq.n	8006f1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 faa3 	bl	8008462 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fd0c 	bl	800793a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fde3 	bl	8006af2 <USBD_CoreFindEP>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f30:	7b7b      	ldrb	r3, [r7, #13]
 8006f32:	2bff      	cmp	r3, #255	@ 0xff
 8006f34:	d01f      	beq.n	8006f76 <USBD_StdEPReq+0x1c6>
 8006f36:	7b7b      	ldrb	r3, [r7, #13]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11c      	bne.n	8006f76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f3c:	7b7a      	ldrb	r2, [r7, #13]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f44:	7b7a      	ldrb	r2, [r7, #13]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	32ae      	adds	r2, #174	@ 0xae
 8006f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d010      	beq.n	8006f76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f54:	7b7a      	ldrb	r2, [r7, #13]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	32ae      	adds	r2, #174	@ 0xae
 8006f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
 8006f66:	4603      	mov	r3, r0
 8006f68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f6a:	e004      	b.n	8006f76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fc05 	bl	800777e <USBD_CtlError>
              break;
 8006f74:	e000      	b.n	8006f78 <USBD_StdEPReq+0x1c8>
              break;
 8006f76:	bf00      	nop
          }
          break;
 8006f78:	e0ad      	b.n	80070d6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d002      	beq.n	8006f8c <USBD_StdEPReq+0x1dc>
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d033      	beq.n	8006ff2 <USBD_StdEPReq+0x242>
 8006f8a:	e099      	b.n	80070c0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <USBD_StdEPReq+0x1f2>
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b80      	cmp	r3, #128	@ 0x80
 8006f96:	d004      	beq.n	8006fa2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fbef 	bl	800777e <USBD_CtlError>
                break;
 8006fa0:	e093      	b.n	80070ca <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da0b      	bge.n	8006fc2 <USBD_StdEPReq+0x212>
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	3310      	adds	r3, #16
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	e00b      	b.n	8006fda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3304      	adds	r3, #4
 8006fda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	330e      	adds	r3, #14
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fc44 	bl	8007878 <USBD_CtlSendData>
              break;
 8006ff0:	e06b      	b.n	80070ca <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da11      	bge.n	800701e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	3323      	adds	r3, #35	@ 0x23
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d117      	bne.n	8007044 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fbb1 	bl	800777e <USBD_CtlError>
                  break;
 800701c:	e055      	b.n	80070ca <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d104      	bne.n	8007044 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fb9e 	bl	800777e <USBD_CtlError>
                  break;
 8007042:	e042      	b.n	80070ca <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007048:	2b00      	cmp	r3, #0
 800704a:	da0b      	bge.n	8007064 <USBD_StdEPReq+0x2b4>
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	3310      	adds	r3, #16
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	4413      	add	r3, r2
 8007060:	3304      	adds	r3, #4
 8007062:	e00b      	b.n	800707c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	3304      	adds	r3, #4
 800707c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <USBD_StdEPReq+0x2da>
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	2b80      	cmp	r3, #128	@ 0x80
 8007088:	d103      	bne.n	8007092 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2200      	movs	r2, #0
 800708e:	739a      	strb	r2, [r3, #14]
 8007090:	e00e      	b.n	80070b0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fa02 	bl	80084a0 <USBD_LL_IsStallEP>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2201      	movs	r2, #1
 80070a6:	739a      	strb	r2, [r3, #14]
 80070a8:	e002      	b.n	80070b0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	330e      	adds	r3, #14
 80070b4:	2202      	movs	r2, #2
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fbdd 	bl	8007878 <USBD_CtlSendData>
              break;
 80070be:	e004      	b.n	80070ca <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fb5b 	bl	800777e <USBD_CtlError>
              break;
 80070c8:	bf00      	nop
          }
          break;
 80070ca:	e004      	b.n	80070d6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fb55 	bl	800777e <USBD_CtlError>
          break;
 80070d4:	bf00      	nop
      }
      break;
 80070d6:	e005      	b.n	80070e4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fb4f 	bl	800777e <USBD_CtlError>
      break;
 80070e0:	e000      	b.n	80070e4 <USBD_StdEPReq+0x334>
      break;
 80070e2:	bf00      	nop
  }

  return ret;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	885b      	ldrh	r3, [r3, #2]
 800710a:	0a1b      	lsrs	r3, r3, #8
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	2b06      	cmp	r3, #6
 8007112:	f200 8128 	bhi.w	8007366 <USBD_GetDescriptor+0x276>
 8007116:	a201      	add	r2, pc, #4	@ (adr r2, 800711c <USBD_GetDescriptor+0x2c>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007139 	.word	0x08007139
 8007120:	08007151 	.word	0x08007151
 8007124:	08007191 	.word	0x08007191
 8007128:	08007367 	.word	0x08007367
 800712c:	08007367 	.word	0x08007367
 8007130:	08007307 	.word	0x08007307
 8007134:	08007333 	.word	0x08007333
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7c12      	ldrb	r2, [r2, #16]
 8007144:	f107 0108 	add.w	r1, r7, #8
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	60f8      	str	r0, [r7, #12]
      break;
 800714e:	e112      	b.n	8007376 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	7c1b      	ldrb	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800715e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007160:	f107 0208 	add.w	r2, r7, #8
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3301      	adds	r3, #1
 800716e:	2202      	movs	r2, #2
 8007170:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007172:	e100      	b.n	8007376 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	f107 0208 	add.w	r2, r7, #8
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	2202      	movs	r2, #2
 800718c:	701a      	strb	r2, [r3, #0]
      break;
 800718e:	e0f2      	b.n	8007376 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	885b      	ldrh	r3, [r3, #2]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b05      	cmp	r3, #5
 8007198:	f200 80ac 	bhi.w	80072f4 <USBD_GetDescriptor+0x204>
 800719c:	a201      	add	r2, pc, #4	@ (adr r2, 80071a4 <USBD_GetDescriptor+0xb4>)
 800719e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a2:	bf00      	nop
 80071a4:	080071bd 	.word	0x080071bd
 80071a8:	080071f1 	.word	0x080071f1
 80071ac:	08007225 	.word	0x08007225
 80071b0:	08007259 	.word	0x08007259
 80071b4:	0800728d 	.word	0x0800728d
 80071b8:	080072c1 	.word	0x080072c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00b      	beq.n	80071e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	7c12      	ldrb	r2, [r2, #16]
 80071d4:	f107 0108 	add.w	r1, r7, #8
 80071d8:	4610      	mov	r0, r2
 80071da:	4798      	blx	r3
 80071dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071de:	e091      	b.n	8007304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 facb 	bl	800777e <USBD_CtlError>
            err++;
 80071e8:	7afb      	ldrb	r3, [r7, #11]
 80071ea:	3301      	adds	r3, #1
 80071ec:	72fb      	strb	r3, [r7, #11]
          break;
 80071ee:	e089      	b.n	8007304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7c12      	ldrb	r2, [r2, #16]
 8007208:	f107 0108 	add.w	r1, r7, #8
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007212:	e077      	b.n	8007304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fab1 	bl	800777e <USBD_CtlError>
            err++;
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	3301      	adds	r3, #1
 8007220:	72fb      	strb	r3, [r7, #11]
          break;
 8007222:	e06f      	b.n	8007304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	7c12      	ldrb	r2, [r2, #16]
 800723c:	f107 0108 	add.w	r1, r7, #8
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
 8007244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007246:	e05d      	b.n	8007304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa97 	bl	800777e <USBD_CtlError>
            err++;
 8007250:	7afb      	ldrb	r3, [r7, #11]
 8007252:	3301      	adds	r3, #1
 8007254:	72fb      	strb	r3, [r7, #11]
          break;
 8007256:	e055      	b.n	8007304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	7c12      	ldrb	r2, [r2, #16]
 8007270:	f107 0108 	add.w	r1, r7, #8
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
 8007278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800727a:	e043      	b.n	8007304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa7d 	bl	800777e <USBD_CtlError>
            err++;
 8007284:	7afb      	ldrb	r3, [r7, #11]
 8007286:	3301      	adds	r3, #1
 8007288:	72fb      	strb	r3, [r7, #11]
          break;
 800728a:	e03b      	b.n	8007304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	7c12      	ldrb	r2, [r2, #16]
 80072a4:	f107 0108 	add.w	r1, r7, #8
 80072a8:	4610      	mov	r0, r2
 80072aa:	4798      	blx	r3
 80072ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ae:	e029      	b.n	8007304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa63 	bl	800777e <USBD_CtlError>
            err++;
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	3301      	adds	r3, #1
 80072bc:	72fb      	strb	r3, [r7, #11]
          break;
 80072be:	e021      	b.n	8007304 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	7c12      	ldrb	r2, [r2, #16]
 80072d8:	f107 0108 	add.w	r1, r7, #8
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072e2:	e00f      	b.n	8007304 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa49 	bl	800777e <USBD_CtlError>
            err++;
 80072ec:	7afb      	ldrb	r3, [r7, #11]
 80072ee:	3301      	adds	r3, #1
 80072f0:	72fb      	strb	r3, [r7, #11]
          break;
 80072f2:	e007      	b.n	8007304 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa41 	bl	800777e <USBD_CtlError>
          err++;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	3301      	adds	r3, #1
 8007300:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007302:	bf00      	nop
      }
      break;
 8007304:	e037      	b.n	8007376 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7c1b      	ldrb	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007316:	f107 0208 	add.w	r2, r7, #8
 800731a:	4610      	mov	r0, r2
 800731c:	4798      	blx	r3
 800731e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007320:	e029      	b.n	8007376 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fa2a 	bl	800777e <USBD_CtlError>
        err++;
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	3301      	adds	r3, #1
 800732e:	72fb      	strb	r3, [r7, #11]
      break;
 8007330:	e021      	b.n	8007376 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	7c1b      	ldrb	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10d      	bne.n	8007356 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007342:	f107 0208 	add.w	r2, r7, #8
 8007346:	4610      	mov	r0, r2
 8007348:	4798      	blx	r3
 800734a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	2207      	movs	r2, #7
 8007352:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007354:	e00f      	b.n	8007376 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa10 	bl	800777e <USBD_CtlError>
        err++;
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	3301      	adds	r3, #1
 8007362:	72fb      	strb	r3, [r7, #11]
      break;
 8007364:	e007      	b.n	8007376 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa08 	bl	800777e <USBD_CtlError>
      err++;
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	3301      	adds	r3, #1
 8007372:	72fb      	strb	r3, [r7, #11]
      break;
 8007374:	bf00      	nop
  }

  if (err != 0U)
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d11e      	bne.n	80073ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	88db      	ldrh	r3, [r3, #6]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d016      	beq.n	80073b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007384:	893b      	ldrh	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00e      	beq.n	80073a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	88da      	ldrh	r2, [r3, #6]
 800738e:	893b      	ldrh	r3, [r7, #8]
 8007390:	4293      	cmp	r3, r2
 8007392:	bf28      	it	cs
 8007394:	4613      	movcs	r3, r2
 8007396:	b29b      	uxth	r3, r3
 8007398:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800739a:	893b      	ldrh	r3, [r7, #8]
 800739c:	461a      	mov	r2, r3
 800739e:	68f9      	ldr	r1, [r7, #12]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fa69 	bl	8007878 <USBD_CtlSendData>
 80073a6:	e009      	b.n	80073bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f9e7 	bl	800777e <USBD_CtlError>
 80073b0:	e004      	b.n	80073bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fac1 	bl	800793a <USBD_CtlSendStatus>
 80073b8:	e000      	b.n	80073bc <USBD_GetDescriptor+0x2cc>
    return;
 80073ba:	bf00      	nop
  }
}
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop

080073c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	889b      	ldrh	r3, [r3, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d131      	bne.n	800743a <USBD_SetAddress+0x76>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	88db      	ldrh	r3, [r3, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d12d      	bne.n	800743a <USBD_SetAddress+0x76>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073e4:	d829      	bhi.n	800743a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	885b      	ldrh	r3, [r3, #2]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d104      	bne.n	8007408 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9bc 	bl	800777e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007406:	e01d      	b.n	8007444 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	7bfa      	ldrb	r2, [r7, #15]
 800740c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 f86f 	bl	80084f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa8d 	bl	800793a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742e:	e009      	b.n	8007444 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007438:	e004      	b.n	8007444 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f99e 	bl	800777e <USBD_CtlError>
  }
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	885b      	ldrh	r3, [r3, #2]
 800745e:	b2da      	uxtb	r2, r3
 8007460:	4b4e      	ldr	r3, [pc, #312]	@ (800759c <USBD_SetConfig+0x150>)
 8007462:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007464:	4b4d      	ldr	r3, [pc, #308]	@ (800759c <USBD_SetConfig+0x150>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d905      	bls.n	8007478 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f985 	bl	800777e <USBD_CtlError>
    return USBD_FAIL;
 8007474:	2303      	movs	r3, #3
 8007476:	e08c      	b.n	8007592 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d002      	beq.n	800748a <USBD_SetConfig+0x3e>
 8007484:	2b03      	cmp	r3, #3
 8007486:	d029      	beq.n	80074dc <USBD_SetConfig+0x90>
 8007488:	e075      	b.n	8007576 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800748a:	4b44      	ldr	r3, [pc, #272]	@ (800759c <USBD_SetConfig+0x150>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d020      	beq.n	80074d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007492:	4b42      	ldr	r3, [pc, #264]	@ (800759c <USBD_SetConfig+0x150>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800749c:	4b3f      	ldr	r3, [pc, #252]	@ (800759c <USBD_SetConfig+0x150>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fe ffcd 	bl	8006442 <USBD_SetClassConfig>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f962 	bl	800777e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074c2:	e065      	b.n	8007590 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa38 	bl	800793a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2203      	movs	r2, #3
 80074ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074d2:	e05d      	b.n	8007590 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fa30 	bl	800793a <USBD_CtlSendStatus>
      break;
 80074da:	e059      	b.n	8007590 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074dc:	4b2f      	ldr	r3, [pc, #188]	@ (800759c <USBD_SetConfig+0x150>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d112      	bne.n	800750a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80074ec:	4b2b      	ldr	r3, [pc, #172]	@ (800759c <USBD_SetConfig+0x150>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074f6:	4b29      	ldr	r3, [pc, #164]	@ (800759c <USBD_SetConfig+0x150>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7fe ffbc 	bl	800647a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa19 	bl	800793a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007508:	e042      	b.n	8007590 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800750a:	4b24      	ldr	r3, [pc, #144]	@ (800759c <USBD_SetConfig+0x150>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	d02a      	beq.n	800756e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7fe ffaa 	bl	800647a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007526:	4b1d      	ldr	r3, [pc, #116]	@ (800759c <USBD_SetConfig+0x150>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007530:	4b1a      	ldr	r3, [pc, #104]	@ (800759c <USBD_SetConfig+0x150>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fe ff83 	bl	8006442 <USBD_SetClassConfig>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00f      	beq.n	8007566 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f918 	bl	800777e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fe ff8f 	bl	800647a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007564:	e014      	b.n	8007590 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9e7 	bl	800793a <USBD_CtlSendStatus>
      break;
 800756c:	e010      	b.n	8007590 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f9e3 	bl	800793a <USBD_CtlSendStatus>
      break;
 8007574:	e00c      	b.n	8007590 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f900 	bl	800777e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800757e:	4b07      	ldr	r3, [pc, #28]	@ (800759c <USBD_SetConfig+0x150>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7fe ff78 	bl	800647a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800758a:	2303      	movs	r3, #3
 800758c:	73fb      	strb	r3, [r7, #15]
      break;
 800758e:	bf00      	nop
  }

  return ret;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	2000027c 	.word	0x2000027c

080075a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d004      	beq.n	80075bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8e2 	bl	800777e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075ba:	e023      	b.n	8007604 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	dc02      	bgt.n	80075ce <USBD_GetConfig+0x2e>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	dc03      	bgt.n	80075d4 <USBD_GetConfig+0x34>
 80075cc:	e015      	b.n	80075fa <USBD_GetConfig+0x5a>
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d00b      	beq.n	80075ea <USBD_GetConfig+0x4a>
 80075d2:	e012      	b.n	80075fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3308      	adds	r3, #8
 80075de:	2201      	movs	r2, #1
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f948 	bl	8007878 <USBD_CtlSendData>
        break;
 80075e8:	e00c      	b.n	8007604 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3304      	adds	r3, #4
 80075ee:	2201      	movs	r2, #1
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f940 	bl	8007878 <USBD_CtlSendData>
        break;
 80075f8:	e004      	b.n	8007604 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8be 	bl	800777e <USBD_CtlError>
        break;
 8007602:	bf00      	nop
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800761c:	b2db      	uxtb	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	2b02      	cmp	r3, #2
 8007622:	d81e      	bhi.n	8007662 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	88db      	ldrh	r3, [r3, #6]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d004      	beq.n	8007636 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f8a5 	bl	800777e <USBD_CtlError>
        break;
 8007634:	e01a      	b.n	800766c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f043 0202 	orr.w	r2, r3, #2
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	330c      	adds	r3, #12
 8007656:	2202      	movs	r2, #2
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f90c 	bl	8007878 <USBD_CtlSendData>
      break;
 8007660:	e004      	b.n	800766c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f88a 	bl	800777e <USBD_CtlError>
      break;
 800766a:	bf00      	nop
  }
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	885b      	ldrh	r3, [r3, #2]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d107      	bne.n	8007696 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f953 	bl	800793a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007694:	e013      	b.n	80076be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	885b      	ldrh	r3, [r3, #2]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d10b      	bne.n	80076b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	889b      	ldrh	r3, [r3, #4]
 80076a2:	0a1b      	lsrs	r3, r3, #8
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f943 	bl	800793a <USBD_CtlSendStatus>
}
 80076b4:	e003      	b.n	80076be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f860 	bl	800777e <USBD_CtlError>
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d80b      	bhi.n	80076f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	885b      	ldrh	r3, [r3, #2]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d10c      	bne.n	8007700 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f923 	bl	800793a <USBD_CtlSendStatus>
      }
      break;
 80076f4:	e004      	b.n	8007700 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f840 	bl	800777e <USBD_CtlError>
      break;
 80076fe:	e000      	b.n	8007702 <USBD_ClrFeature+0x3c>
      break;
 8007700:	bf00      	nop
  }
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	781a      	ldrb	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff fa3d 	bl	8006bb4 <SWAPBYTE>
 800773a:	4603      	mov	r3, r0
 800773c:	461a      	mov	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7ff fa30 	bl	8006bb4 <SWAPBYTE>
 8007754:	4603      	mov	r3, r0
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fa23 	bl	8006bb4 <SWAPBYTE>
 800776e:	4603      	mov	r3, r0
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	80da      	strh	r2, [r3, #6]
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007788:	2180      	movs	r1, #128	@ 0x80
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fe4a 	bl	8008424 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007790:	2100      	movs	r1, #0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fe46 	bl	8008424 <USBD_LL_StallEP>
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d042      	beq.n	800783c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80077ba:	6938      	ldr	r0, [r7, #16]
 80077bc:	f000 f842 	bl	8007844 <USBD_GetLen>
 80077c0:	4603      	mov	r3, r0
 80077c2:	3301      	adds	r3, #1
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077ca:	d808      	bhi.n	80077de <USBD_GetString+0x3e>
 80077cc:	6938      	ldr	r0, [r7, #16]
 80077ce:	f000 f839 	bl	8007844 <USBD_GetLen>
 80077d2:	4603      	mov	r3, r0
 80077d4:	3301      	adds	r3, #1
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	e001      	b.n	80077e2 <USBD_GetString+0x42>
 80077de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	4413      	add	r3, r2
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7812      	ldrb	r2, [r2, #0]
 80077f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	3301      	adds	r3, #1
 80077f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	4413      	add	r3, r2
 80077fe:	2203      	movs	r2, #3
 8007800:	701a      	strb	r2, [r3, #0]
  idx++;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	3301      	adds	r3, #1
 8007806:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007808:	e013      	b.n	8007832 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	4413      	add	r3, r2
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	3301      	adds	r3, #1
 800781a:	613b      	str	r3, [r7, #16]
    idx++;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	3301      	adds	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	4413      	add	r3, r2
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
    idx++;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	3301      	adds	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e7      	bne.n	800780a <USBD_GetString+0x6a>
 800783a:	e000      	b.n	800783e <USBD_GetString+0x9e>
    return;
 800783c:	bf00      	nop
  }
}
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007854:	e005      	b.n	8007862 <USBD_GetLen+0x1e>
  {
    len++;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	3301      	adds	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	3301      	adds	r3, #1
 8007860:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f5      	bne.n	8007856 <USBD_GetLen+0x12>
  }

  return len;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2202      	movs	r2, #2
 8007888:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	2100      	movs	r1, #0
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fe46 	bl	8008536 <USBD_LL_Transmit>

  return USBD_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	2100      	movs	r1, #0
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fe35 	bl	8008536 <USBD_LL_Transmit>

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2203      	movs	r2, #3
 80078e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	2100      	movs	r1, #0
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 fe35 	bl	8008578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	2100      	movs	r1, #0
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fe24 	bl	8008578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2204      	movs	r2, #4
 8007946:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800794a:	2300      	movs	r3, #0
 800794c:	2200      	movs	r2, #0
 800794e:	2100      	movs	r1, #0
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fdf0 	bl	8008536 <USBD_LL_Transmit>

  return USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2205      	movs	r2, #5
 800796c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007970:	2300      	movs	r3, #0
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fdfe 	bl	8008578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <shtc3_init>:
/* Exported functions definitions --------------------------------------------*/
/**
 * @brief Function to initialize a SHTC3 instance
 */
int shtc3_init(shtc3_t *const me, void *i2c_handle, uint8_t dev_addr)
{
 8007986:	b480      	push	{r7}
 8007988:	b087      	sub	sp, #28
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	4613      	mov	r3, r2
 8007992:	71fb      	strb	r3, [r7, #7]
	/* Variable to return error code */
	int ret = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
	me->i2c_dev.handle = (I2C_HandleTypeDef *)i2c_handle;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	605a      	str	r2, [r3, #4]
	me->i2c_dev.addr = dev_addr;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	79fa      	ldrb	r2, [r7, #7]
 80079a2:	701a      	strb	r2, [r3, #0]
	me->id = 0;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	811a      	strh	r2, [r3, #8]
	me->state = SHTC3_IDLE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	729a      	strb	r2, [r3, #10]

	/* Return 0 */
	return ret;
 80079b0:	697b      	ldr	r3, [r7, #20]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <shtc3_get_id>:

/**
 * @brief Function to get the device ID
 */
int shtc3_get_id(shtc3_t *const me)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
	me->id = 0;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	811a      	strh	r2, [r3, #8]

	/* Variable to return error code */
	int ret = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_READ_ID, &me->i2c_dev);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4619      	mov	r1, r3
 80079d4:	f64e 70c8 	movw	r0, #61384	@ 0xefc8
 80079d8:	f000 f8ef 	bl	8007bba <shtc3_reg_write>

	uint8_t data[3] = {0};
 80079dc:	f107 0308 	add.w	r3, r7, #8
 80079e0:	2100      	movs	r1, #0
 80079e2:	460a      	mov	r2, r1
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	460a      	mov	r2, r1
 80079e8:	709a      	strb	r2, [r3, #2]
	shtc3_reg_read(data, 3, &me->i2c_dev);
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f107 0308 	add.w	r3, r7, #8
 80079f0:	2103      	movs	r1, #3
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f8bc 	bl	8007b70 <shtc3_reg_read>

	/* Check data received CRC */
	if (!check_crc(data, 2, data[2])) {
 80079f8:	7aba      	ldrb	r2, [r7, #10]
 80079fa:	f107 0308 	add.w	r3, r7, #8
 80079fe:	2102      	movs	r1, #2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f940 	bl	8007c86 <check_crc>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f083 0301 	eor.w	r3, r3, #1
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <shtc3_get_id+0x5a>
		return -1;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
 8007a16:	e00b      	b.n	8007a30 <shtc3_get_id+0x72>
	}

	me->id = data[0] << 8 | data[1];
 8007a18:	7a3b      	ldrb	r3, [r7, #8]
 8007a1a:	b21b      	sxth	r3, r3
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	b21a      	sxth	r2, r3
 8007a20:	7a7b      	ldrb	r3, [r7, #9]
 8007a22:	b21b      	sxth	r3, r3
 8007a24:	4313      	orrs	r3, r2
 8007a26:	b21b      	sxth	r3, r3
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	811a      	strh	r2, [r3, #8]

	/* Return 0 */
	return ret;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <shtc3_raw_write_temp_and_hum>:
	/* Return 0 */
	return ret;
}

int shtc3_raw_write_temp_and_hum(shtc3_t *const me)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]

	shtc3_wakeup(me);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f87f 	bl	8007b48 <shtc3_wakeup>

	ret = shtc3_reg_write(SHTC3_CMD_MEAS_T_RH_POLLING_NM, &me->i2c_dev);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f647 0066 	movw	r0, #30822	@ 0x7866
 8007a52:	f000 f8b2 	bl	8007bba <shtc3_reg_write>
 8007a56:	4603      	mov	r3, r0
 8007a58:	60fb      	str	r3, [r7, #12]

	return ret;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <shtc3_raw_read_temp_and_hum>:

int shtc3_raw_read_temp_and_hum(shtc3_t *const me)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]

	uint8_t data[6] = {0};
 8007a70:	f107 030c 	add.w	r3, r7, #12
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	809a      	strh	r2, [r3, #4]
	ret = shtc3_reg_read(data, 6, &me->i2c_dev);
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	f107 030c 	add.w	r3, r7, #12
 8007a80:	2106      	movs	r1, #6
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 f874 	bl	8007b70 <shtc3_reg_read>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	617b      	str	r3, [r7, #20]
	if(0 != ret) {return ret;}
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <shtc3_raw_read_temp_and_hum+0x32>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	e043      	b.n	8007b1e <shtc3_raw_read_temp_and_hum+0xba>

	/* Check data received CRC */
	if (!check_crc(&data[0], 2, data[2])) {
 8007a96:	7bba      	ldrb	r2, [r7, #14]
 8007a98:	f107 030c 	add.w	r3, r7, #12
 8007a9c:	2102      	movs	r1, #2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f8f1 	bl	8007c86 <check_crc>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f083 0301 	eor.w	r3, r3, #1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <shtc3_raw_read_temp_and_hum+0x52>
		return -1;
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	e033      	b.n	8007b1e <shtc3_raw_read_temp_and_hum+0xba>
	}

	if (!check_crc(&data[3], 2, data[5])) {
 8007ab6:	7c7a      	ldrb	r2, [r7, #17]
 8007ab8:	f107 030c 	add.w	r3, r7, #12
 8007abc:	3303      	adds	r3, #3
 8007abe:	2102      	movs	r1, #2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 f8e0 	bl	8007c86 <check_crc>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f083 0301 	eor.w	r3, r3, #1
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <shtc3_raw_read_temp_and_hum+0x74>
		return -1;
 8007ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad6:	e022      	b.n	8007b1e <shtc3_raw_read_temp_and_hum+0xba>
	}

	me->temp = calc_temp((uint16_t)((data[0] << 8) | (data[1])));
 8007ad8:	7b3b      	ldrb	r3, [r7, #12]
 8007ada:	b21b      	sxth	r3, r3
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	b21a      	sxth	r2, r3
 8007ae0:	7b7b      	ldrb	r3, [r7, #13]
 8007ae2:	b21b      	sxth	r3, r3
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	b21b      	sxth	r3, r3
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 f8e4 	bl	8007cb8 <calc_temp>
 8007af0:	eef0 7a40 	vmov.f32	s15, s0
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	edc3 7a03 	vstr	s15, [r3, #12]
	me->hum = calc_hum((uint16_t)((data[3] << 8) | (data[4])));
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	b21b      	sxth	r3, r3
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	b21a      	sxth	r2, r3
 8007b02:	7c3b      	ldrb	r3, [r7, #16]
 8007b04:	b21b      	sxth	r3, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 f8f7 	bl	8007d00 <calc_hum>
 8007b12:	eef0 7a40 	vmov.f32	s15, s0
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	edc3 7a04 	vstr	s15, [r3, #16]

	/* Return 0 */
	return ret;
 8007b1c:	697b      	ldr	r3, [r7, #20]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <shtc3_sleep>:

/**
 * @brief Function to put the device in sleep mode
 */
int shtc3_sleep(shtc3_t *const me)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_SLEEP, &me->i2c_dev);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4619      	mov	r1, r3
 8007b36:	f24b 0098 	movw	r0, #45208	@ 0xb098
 8007b3a:	f000 f83e 	bl	8007bba <shtc3_reg_write>

	/* Return 0 */
	return ret;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <shtc3_wakeup>:

/**
 * @brief Function to wakeup the device from sleep mode
 */
int shtc3_wakeup(shtc3_t *const me)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_WAKEUP, &me->i2c_dev);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4619      	mov	r1, r3
 8007b58:	f243 5017 	movw	r0, #13591	@ 0x3517
 8007b5c:	f000 f82d 	bl	8007bba <shtc3_reg_write>

	HAL_Delay(1);
 8007b60:	2001      	movs	r0, #1
 8007b62:	f7f9 fa9d 	bl	80010a0 <HAL_Delay>

	/* Return 0 */
	return ret;
 8007b66:	68fb      	ldr	r3, [r7, #12]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <shtc3_reg_read>:
/* Private function definitions ----------------------------------------------*/
/**
 * @brief Function that implements the default I2C read transaction
 */
static int8_t shtc3_reg_read(uint8_t *data, uint32_t data_len, void *intf)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Receive(i2c_dev->handle, (i2c_dev->addr << 1) | 0x01,
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	6858      	ldr	r0, [r3, #4]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	b21b      	sxth	r3, r3
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	b21b      	sxth	r3, r3
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	b21b      	sxth	r3, r3
 8007b94:	b299      	uxth	r1, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	220a      	movs	r2, #10
 8007b9c:	9200      	str	r2, [sp, #0]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	f7f9 ffae 	bl	8001b00 <HAL_I2C_Master_Receive>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <shtc3_reg_read+0x40>
			data, data_len, 10) > 0) {
		return -1;
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bae:	e000      	b.n	8007bb2 <shtc3_reg_read+0x42>
	}

	return 0;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <shtc3_reg_write>:

/**
 * @brief Function that implements the default I2C write transaction
 */
static int8_t shtc3_reg_write(uint16_t data, void *intf)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b088      	sub	sp, #32
 8007bbe:	af02      	add	r7, sp, #8
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	6039      	str	r1, [r7, #0]
 8007bc4:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8007bc6:	f107 030c 	add.w	r3, r7, #12
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	605a      	str	r2, [r3, #4]
			(uint8_t)((data >> 8) & 0xFF),
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8007bd8:	733b      	strb	r3, [r7, #12]
			(uint8_t)(data & 0xFF)
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8007bde:	737b      	strb	r3, [r7, #13]
	};

	/* Transmit buffer */
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Transmit(i2c_dev->handle, i2c_dev->addr << 1, buffer, 2,
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	6858      	ldr	r0, [r3, #4]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	b299      	uxth	r1, r3
 8007bf0:	f107 020c 	add.w	r2, r7, #12
 8007bf4:	2364      	movs	r3, #100	@ 0x64
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	f7f9 fe83 	bl	8001904 <HAL_I2C_Master_Transmit>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <shtc3_reg_write+0x50>
			100)) {
		return -1;
 8007c04:	f04f 33ff 	mov.w	r3, #4294967295
 8007c08:	e000      	b.n	8007c0c <shtc3_reg_write+0x52>
	}

	return 0;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <generate_crc>:

/**
 * @brief Function that generates a CRC byte for a given data
 */
static uint8_t generate_crc(const uint8_t *data, uint16_t count) {
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	807b      	strh	r3, [r7, #2]
  uint16_t current_byte;
  uint8_t crc = CRC8_INIT;
 8007c20:	23ff      	movs	r3, #255	@ 0xff
 8007c22:	737b      	strb	r3, [r7, #13]
  uint8_t crc_bit;

  /* calculates 8-Bit checksum with given polynomial */
  for (current_byte = 0; current_byte < count; ++current_byte) {
 8007c24:	2300      	movs	r3, #0
 8007c26:	81fb      	strh	r3, [r7, #14]
 8007c28:	e022      	b.n	8007c70 <generate_crc+0x5c>
  	crc ^= (data[current_byte]);
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	4053      	eors	r3, r2
 8007c36:	737b      	strb	r3, [r7, #13]

  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8007c38:	2308      	movs	r3, #8
 8007c3a:	733b      	strb	r3, [r7, #12]
 8007c3c:	e012      	b.n	8007c64 <generate_crc+0x50>
  		if (crc & 0x80) {
 8007c3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da08      	bge.n	8007c58 <generate_crc+0x44>
  			crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8007c46:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	b25b      	sxtb	r3, r3
 8007c4e:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8007c52:	b25b      	sxtb	r3, r3
 8007c54:	737b      	strb	r3, [r7, #13]
 8007c56:	e002      	b.n	8007c5e <generate_crc+0x4a>
  		}
  		else {
  			crc = (crc << 1);
 8007c58:	7b7b      	ldrb	r3, [r7, #13]
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	737b      	strb	r3, [r7, #13]
  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8007c5e:	7b3b      	ldrb	r3, [r7, #12]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	733b      	strb	r3, [r7, #12]
 8007c64:	7b3b      	ldrb	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e9      	bne.n	8007c3e <generate_crc+0x2a>
  for (current_byte = 0; current_byte < count; ++current_byte) {
 8007c6a:	89fb      	ldrh	r3, [r7, #14]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	81fb      	strh	r3, [r7, #14]
 8007c70:	89fa      	ldrh	r2, [r7, #14]
 8007c72:	887b      	ldrh	r3, [r7, #2]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d3d8      	bcc.n	8007c2a <generate_crc+0x16>
  		}
  	}
  }
  return crc;
 8007c78:	7b7b      	ldrb	r3, [r7, #13]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <check_crc>:

/**
 * @brief Function that checks the CRC for the received data
 */
static bool check_crc(const uint8_t *data, uint16_t count, uint8_t checksum) {
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	807b      	strh	r3, [r7, #2]
 8007c92:	4613      	mov	r3, r2
 8007c94:	707b      	strb	r3, [r7, #1]
	if (generate_crc(data, count) != checksum) {
 8007c96:	887b      	ldrh	r3, [r7, #2]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff ffba 	bl	8007c14 <generate_crc>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	787b      	ldrb	r3, [r7, #1]
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d001      	beq.n	8007cae <check_crc+0x28>
		return false;
 8007caa:	2300      	movs	r3, #0
 8007cac:	e000      	b.n	8007cb0 <check_crc+0x2a>
	}

	return true;
 8007cae:	2301      	movs	r3, #1
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <calc_temp>:

static float calc_temp(uint16_t raw_temp)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	80fb      	strh	r3, [r7, #6]
	return 175 * (float)raw_temp / 65536.0f - 45.0f;
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8007cf4 <calc_temp+0x3c>
 8007cd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007cd4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8007cf8 <calc_temp+0x40>
 8007cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cdc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007cfc <calc_temp+0x44>
 8007ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8007ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	432f0000 	.word	0x432f0000
 8007cf8:	47800000 	.word	0x47800000
 8007cfc:	42340000 	.word	0x42340000

08007d00 <calc_hum>:

static float calc_hum(uint16_t raw_hum)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	80fb      	strh	r3, [r7, #6]
	return 100 * (float)raw_hum / 65536.0f;
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	ee07 3a90 	vmov	s15, r3
 8007d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d14:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8007d38 <calc_hum+0x38>
 8007d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d1c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007d3c <calc_hum+0x3c>
 8007d20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007d24:	eef0 7a66 	vmov.f32	s15, s13
}
 8007d28:	eeb0 0a67 	vmov.f32	s0, s15
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	42c80000 	.word	0x42c80000
 8007d3c:	47800000 	.word	0x47800000

08007d40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d44:	2200      	movs	r2, #0
 8007d46:	4912      	ldr	r1, [pc, #72]	@ (8007d90 <MX_USB_DEVICE_Init+0x50>)
 8007d48:	4812      	ldr	r0, [pc, #72]	@ (8007d94 <MX_USB_DEVICE_Init+0x54>)
 8007d4a:	f7fe fafd 	bl	8006348 <USBD_Init>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d54:	f7f8 ffda 	bl	8000d0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007d58:	490f      	ldr	r1, [pc, #60]	@ (8007d98 <MX_USB_DEVICE_Init+0x58>)
 8007d5a:	480e      	ldr	r0, [pc, #56]	@ (8007d94 <MX_USB_DEVICE_Init+0x54>)
 8007d5c:	f7fe fb24 	bl	80063a8 <USBD_RegisterClass>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d66:	f7f8 ffd1 	bl	8000d0c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007d6a:	490c      	ldr	r1, [pc, #48]	@ (8007d9c <MX_USB_DEVICE_Init+0x5c>)
 8007d6c:	4809      	ldr	r0, [pc, #36]	@ (8007d94 <MX_USB_DEVICE_Init+0x54>)
 8007d6e:	f7fe fad1 	bl	8006314 <USBD_CUSTOM_HID_RegisterInterface>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d78:	f7f8 ffc8 	bl	8000d0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d7c:	4805      	ldr	r0, [pc, #20]	@ (8007d94 <MX_USB_DEVICE_Init+0x54>)
 8007d7e:	f7fe fb49 	bl	8006414 <USBD_Start>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d88:	f7f8 ffc0 	bl	8000d0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d8c:	bf00      	nop
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	200000b4 	.word	0x200000b4
 8007d94:	20000280 	.word	0x20000280
 8007d98:	2000000c 	.word	0x2000000c
 8007d9c:	200000a4 	.word	0x200000a4

08007da0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPIN_SIZE);  // IN
 8007da4:	2340      	movs	r3, #64	@ 0x40
 8007da6:	2203      	movs	r2, #3
 8007da8:	2181      	movs	r1, #129	@ 0x81
 8007daa:	4806      	ldr	r0, [pc, #24]	@ (8007dc4 <CUSTOM_HID_Init_FS+0x24>)
 8007dac:	f000 faf5 	bl	800839a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPOUT_SIZE); // OUT
 8007db0:	2340      	movs	r3, #64	@ 0x40
 8007db2:	2203      	movs	r2, #3
 8007db4:	2101      	movs	r1, #1
 8007db6:	4803      	ldr	r0, [pc, #12]	@ (8007dc4 <CUSTOM_HID_Init_FS+0x24>)
 8007db8:	f000 faef 	bl	800839a <USBD_LL_OpenEP>
  return (USBD_OK);
 8007dbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000280 	.word	0x20000280

08007dc8 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR);
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR);
  return (USBD_OK);
 8007dcc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *buffer)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8007de0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007de4:	480a      	ldr	r0, [pc, #40]	@ (8007e10 <CUSTOM_HID_OutEvent_FS+0x38>)
 8007de6:	f7f9 fc2e 	bl	8001646 <HAL_GPIO_TogglePin>

  usb_parser(buffer, 64);
 8007dea:	2140      	movs	r1, #64	@ 0x40
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7f8 fe59 	bl	8000aa4 <usb_parser>

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8007df2:	4808      	ldr	r0, [pc, #32]	@ (8007e14 <CUSTOM_HID_OutEvent_FS+0x3c>)
 8007df4:	f7fe fa2e 	bl	8006254 <USBD_CUSTOM_HID_ReceivePacket>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <CUSTOM_HID_OutEvent_FS+0x2c>
  {
    return -1;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007e02:	e000      	b.n	8007e06 <CUSTOM_HID_OutEvent_FS+0x2e>
  }

  return (USBD_OK);
 8007e04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	40020c00 	.word	0x40020c00
 8007e14:	20000280 	.word	0x20000280

08007e18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2212      	movs	r2, #18
 8007e28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e2a:	4b03      	ldr	r3, [pc, #12]	@ (8007e38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	200000d0 	.word	0x200000d0

08007e3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	6039      	str	r1, [r7, #0]
 8007e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e4e:	4b03      	ldr	r3, [pc, #12]	@ (8007e5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	200000e4 	.word	0x200000e4

08007e60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d105      	bne.n	8007e7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	4907      	ldr	r1, [pc, #28]	@ (8007e94 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e76:	4808      	ldr	r0, [pc, #32]	@ (8007e98 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e78:	f7ff fc92 	bl	80077a0 <USBD_GetString>
 8007e7c:	e004      	b.n	8007e88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	4904      	ldr	r1, [pc, #16]	@ (8007e94 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e82:	4805      	ldr	r0, [pc, #20]	@ (8007e98 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e84:	f7ff fc8c 	bl	80077a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e88:	4b02      	ldr	r3, [pc, #8]	@ (8007e94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	2000055c 	.word	0x2000055c
 8007e98:	08009158 	.word	0x08009158

08007e9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	4904      	ldr	r1, [pc, #16]	@ (8007ebc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007eac:	4804      	ldr	r0, [pc, #16]	@ (8007ec0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007eae:	f7ff fc77 	bl	80077a0 <USBD_GetString>
  return USBD_StrDesc;
 8007eb2:	4b02      	ldr	r3, [pc, #8]	@ (8007ebc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	2000055c 	.word	0x2000055c
 8007ec0:	08009168 	.word	0x08009168

08007ec4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	6039      	str	r1, [r7, #0]
 8007ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	221a      	movs	r2, #26
 8007ed4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ed6:	f000 f843 	bl	8007f60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007eda:	4b02      	ldr	r3, [pc, #8]	@ (8007ee4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200000e8 	.word	0x200000e8

08007ee8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d105      	bne.n	8007f06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	4907      	ldr	r1, [pc, #28]	@ (8007f1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007efe:	4808      	ldr	r0, [pc, #32]	@ (8007f20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f00:	f7ff fc4e 	bl	80077a0 <USBD_GetString>
 8007f04:	e004      	b.n	8007f10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	4904      	ldr	r1, [pc, #16]	@ (8007f1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f0a:	4805      	ldr	r0, [pc, #20]	@ (8007f20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f0c:	f7ff fc48 	bl	80077a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f10:	4b02      	ldr	r3, [pc, #8]	@ (8007f1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	2000055c 	.word	0x2000055c
 8007f20:	0800917c 	.word	0x0800917c

08007f24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4907      	ldr	r1, [pc, #28]	@ (8007f58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f3a:	4808      	ldr	r0, [pc, #32]	@ (8007f5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f3c:	f7ff fc30 	bl	80077a0 <USBD_GetString>
 8007f40:	e004      	b.n	8007f4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	4904      	ldr	r1, [pc, #16]	@ (8007f58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f46:	4805      	ldr	r0, [pc, #20]	@ (8007f5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f48:	f7ff fc2a 	bl	80077a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f4c:	4b02      	ldr	r3, [pc, #8]	@ (8007f58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	2000055c 	.word	0x2000055c
 8007f5c:	08009190 	.word	0x08009190

08007f60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f66:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa4 <Get_SerialNum+0x44>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa8 <Get_SerialNum+0x48>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f72:	4b0e      	ldr	r3, [pc, #56]	@ (8007fac <Get_SerialNum+0x4c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d009      	beq.n	8007f9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f86:	2208      	movs	r2, #8
 8007f88:	4909      	ldr	r1, [pc, #36]	@ (8007fb0 <Get_SerialNum+0x50>)
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f814 	bl	8007fb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f90:	2204      	movs	r2, #4
 8007f92:	4908      	ldr	r1, [pc, #32]	@ (8007fb4 <Get_SerialNum+0x54>)
 8007f94:	68b8      	ldr	r0, [r7, #8]
 8007f96:	f000 f80f 	bl	8007fb8 <IntToUnicode>
  }
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	1fff7a10 	.word	0x1fff7a10
 8007fa8:	1fff7a14 	.word	0x1fff7a14
 8007fac:	1fff7a18 	.word	0x1fff7a18
 8007fb0:	200000ea 	.word	0x200000ea
 8007fb4:	200000fa 	.word	0x200000fa

08007fb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]
 8007fce:	e027      	b.n	8008020 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	0f1b      	lsrs	r3, r3, #28
 8007fd4:	2b09      	cmp	r3, #9
 8007fd6:	d80b      	bhi.n	8007ff0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	0f1b      	lsrs	r3, r3, #28
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	440b      	add	r3, r1
 8007fe8:	3230      	adds	r2, #48	@ 0x30
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	e00a      	b.n	8008006 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	0f1b      	lsrs	r3, r3, #28
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	440b      	add	r3, r1
 8008000:	3237      	adds	r2, #55	@ 0x37
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	3301      	adds	r3, #1
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	4413      	add	r3, r2
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	3301      	adds	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]
 8008020:	7dfa      	ldrb	r2, [r7, #23]
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	429a      	cmp	r2, r3
 8008026:	d3d3      	bcc.n	8007fd0 <IntToUnicode+0x18>
  }
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
	...

08008038 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	@ 0x28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	605a      	str	r2, [r3, #4]
 800804a:	609a      	str	r2, [r3, #8]
 800804c:	60da      	str	r2, [r3, #12]
 800804e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008058:	d147      	bne.n	80080ea <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800805a:	2300      	movs	r3, #0
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	4b25      	ldr	r3, [pc, #148]	@ (80080f4 <HAL_PCD_MspInit+0xbc>)
 8008060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008062:	4a24      	ldr	r2, [pc, #144]	@ (80080f4 <HAL_PCD_MspInit+0xbc>)
 8008064:	f043 0301 	orr.w	r3, r3, #1
 8008068:	6313      	str	r3, [r2, #48]	@ 0x30
 800806a:	4b22      	ldr	r3, [pc, #136]	@ (80080f4 <HAL_PCD_MspInit+0xbc>)
 800806c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	613b      	str	r3, [r7, #16]
 8008074:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008076:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800807a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800807c:	2300      	movs	r3, #0
 800807e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008080:	2300      	movs	r3, #0
 8008082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008084:	f107 0314 	add.w	r3, r7, #20
 8008088:	4619      	mov	r1, r3
 800808a:	481b      	ldr	r0, [pc, #108]	@ (80080f8 <HAL_PCD_MspInit+0xc0>)
 800808c:	f7f9 f93e 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008090:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008096:	2302      	movs	r3, #2
 8008098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800809e:	2303      	movs	r3, #3
 80080a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080a2:	230a      	movs	r3, #10
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080a6:	f107 0314 	add.w	r3, r7, #20
 80080aa:	4619      	mov	r1, r3
 80080ac:	4812      	ldr	r0, [pc, #72]	@ (80080f8 <HAL_PCD_MspInit+0xc0>)
 80080ae:	f7f9 f92d 	bl	800130c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080b2:	4b10      	ldr	r3, [pc, #64]	@ (80080f4 <HAL_PCD_MspInit+0xbc>)
 80080b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b6:	4a0f      	ldr	r2, [pc, #60]	@ (80080f4 <HAL_PCD_MspInit+0xbc>)
 80080b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80080be:	2300      	movs	r3, #0
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <HAL_PCD_MspInit+0xbc>)
 80080c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c6:	4a0b      	ldr	r2, [pc, #44]	@ (80080f4 <HAL_PCD_MspInit+0xbc>)
 80080c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80080cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80080ce:	4b09      	ldr	r3, [pc, #36]	@ (80080f4 <HAL_PCD_MspInit+0xbc>)
 80080d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080da:	2200      	movs	r2, #0
 80080dc:	2100      	movs	r1, #0
 80080de:	2043      	movs	r0, #67	@ 0x43
 80080e0:	f7f9 f8dd 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080e4:	2043      	movs	r0, #67	@ 0x43
 80080e6:	f7f9 f8f6 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080ea:	bf00      	nop
 80080ec:	3728      	adds	r7, #40	@ 0x28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40023800 	.word	0x40023800
 80080f8:	40020000 	.word	0x40020000

080080fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008110:	4619      	mov	r1, r3
 8008112:	4610      	mov	r0, r2
 8008114:	f7fe f9cb 	bl	80064ae <USBD_LL_SetupStage>
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	440b      	add	r3, r1
 8008140:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	4619      	mov	r1, r3
 800814a:	f7fe fa05 	bl	8006558 <USBD_LL_DataOutStage>
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	460b      	mov	r3, r1
 8008160:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	4613      	mov	r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	3320      	adds	r3, #32
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	4619      	mov	r1, r3
 800817e:	f7fe faa7 	bl	80066d0 <USBD_LL_DataInStage>
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fbeb 	bl	8006974 <USBD_LL_SOF>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081ae:	2301      	movs	r3, #1
 80081b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	79db      	ldrb	r3, [r3, #7]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d001      	beq.n	80081be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80081ba:	f7f8 fda7 	bl	8000d0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081c4:	7bfa      	ldrb	r2, [r7, #15]
 80081c6:	4611      	mov	r1, r2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe fb8f 	bl	80068ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fb36 	bl	8006846 <USBD_LL_Reset>
}
 80081da:	bf00      	nop
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fb8a 	bl	800690c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6812      	ldr	r2, [r2, #0]
 8008206:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800820a:	f043 0301 	orr.w	r3, r3, #1
 800820e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7adb      	ldrb	r3, [r3, #11]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008218:	4b04      	ldr	r3, [pc, #16]	@ (800822c <HAL_PCD_SuspendCallback+0x48>)
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	4a03      	ldr	r2, [pc, #12]	@ (800822c <HAL_PCD_SuspendCallback+0x48>)
 800821e:	f043 0306 	orr.w	r3, r3, #6
 8008222:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	e000ed00 	.word	0xe000ed00

08008230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fb80 	bl	8006944 <USBD_LL_Resume>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800825e:	78fa      	ldrb	r2, [r7, #3]
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fbd8 	bl	8006a18 <USBD_LL_IsoOUTIncomplete>
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fb94 	bl	80069b4 <USBD_LL_IsoINIncomplete>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe fbea 	bl	8006a7c <USBD_LL_DevConnected>
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fbe7 	bl	8006a92 <USBD_LL_DevDisconnected>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d13c      	bne.n	8008356 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082dc:	4a20      	ldr	r2, [pc, #128]	@ (8008360 <USBD_LL_Init+0x94>)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008360 <USBD_LL_Init+0x94>)
 80082e8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008360 <USBD_LL_Init+0x94>)
 80082ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80082f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80082f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008360 <USBD_LL_Init+0x94>)
 80082f6:	2204      	movs	r2, #4
 80082f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80082fa:	4b19      	ldr	r3, [pc, #100]	@ (8008360 <USBD_LL_Init+0x94>)
 80082fc:	2202      	movs	r2, #2
 80082fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008300:	4b17      	ldr	r3, [pc, #92]	@ (8008360 <USBD_LL_Init+0x94>)
 8008302:	2200      	movs	r2, #0
 8008304:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008306:	4b16      	ldr	r3, [pc, #88]	@ (8008360 <USBD_LL_Init+0x94>)
 8008308:	2202      	movs	r2, #2
 800830a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800830c:	4b14      	ldr	r3, [pc, #80]	@ (8008360 <USBD_LL_Init+0x94>)
 800830e:	2200      	movs	r2, #0
 8008310:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008312:	4b13      	ldr	r3, [pc, #76]	@ (8008360 <USBD_LL_Init+0x94>)
 8008314:	2200      	movs	r2, #0
 8008316:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008318:	4b11      	ldr	r3, [pc, #68]	@ (8008360 <USBD_LL_Init+0x94>)
 800831a:	2200      	movs	r2, #0
 800831c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800831e:	4b10      	ldr	r3, [pc, #64]	@ (8008360 <USBD_LL_Init+0x94>)
 8008320:	2200      	movs	r2, #0
 8008322:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008324:	4b0e      	ldr	r3, [pc, #56]	@ (8008360 <USBD_LL_Init+0x94>)
 8008326:	2200      	movs	r2, #0
 8008328:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800832a:	480d      	ldr	r0, [pc, #52]	@ (8008360 <USBD_LL_Init+0x94>)
 800832c:	f7fa f9a0 	bl	8002670 <HAL_PCD_Init>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008336:	f7f8 fce9 	bl	8000d0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800833a:	2180      	movs	r1, #128	@ 0x80
 800833c:	4808      	ldr	r0, [pc, #32]	@ (8008360 <USBD_LL_Init+0x94>)
 800833e:	f7fb fbb4 	bl	8003aaa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008342:	2240      	movs	r2, #64	@ 0x40
 8008344:	2100      	movs	r1, #0
 8008346:	4806      	ldr	r0, [pc, #24]	@ (8008360 <USBD_LL_Init+0x94>)
 8008348:	f7fb fb68 	bl	8003a1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800834c:	2280      	movs	r2, #128	@ 0x80
 800834e:	2101      	movs	r1, #1
 8008350:	4803      	ldr	r0, [pc, #12]	@ (8008360 <USBD_LL_Init+0x94>)
 8008352:	f7fb fb63 	bl	8003a1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	2000075c 	.word	0x2000075c

08008364 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800837a:	4618      	mov	r0, r3
 800837c:	f7fa fa87 	bl	800288e <HAL_PCD_Start>
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f930 	bl	80085ec <USBD_Get_USB_Status>
 800838c:	4603      	mov	r3, r0
 800838e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008390:	7bbb      	ldrb	r3, [r7, #14]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	4608      	mov	r0, r1
 80083a4:	4611      	mov	r1, r2
 80083a6:	461a      	mov	r2, r3
 80083a8:	4603      	mov	r3, r0
 80083aa:	70fb      	strb	r3, [r7, #3]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70bb      	strb	r3, [r7, #2]
 80083b0:	4613      	mov	r3, r2
 80083b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083c2:	78bb      	ldrb	r3, [r7, #2]
 80083c4:	883a      	ldrh	r2, [r7, #0]
 80083c6:	78f9      	ldrb	r1, [r7, #3]
 80083c8:	f7fa ff5b 	bl	8003282 <HAL_PCD_EP_Open>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f90a 	bl	80085ec <USBD_Get_USB_Status>
 80083d8:	4603      	mov	r3, r0
 80083da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008400:	78fa      	ldrb	r2, [r7, #3]
 8008402:	4611      	mov	r1, r2
 8008404:	4618      	mov	r0, r3
 8008406:	f7fa ffa6 	bl	8003356 <HAL_PCD_EP_Close>
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 f8eb 	bl	80085ec <USBD_Get_USB_Status>
 8008416:	4603      	mov	r3, r0
 8008418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800841a:	7bbb      	ldrb	r3, [r7, #14]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800843e:	78fa      	ldrb	r2, [r7, #3]
 8008440:	4611      	mov	r1, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f7fb f846 	bl	80034d4 <HAL_PCD_EP_SetStall>
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 f8cc 	bl	80085ec <USBD_Get_USB_Status>
 8008454:	4603      	mov	r3, r0
 8008456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008458:	7bbb      	ldrb	r3, [r7, #14]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800847c:	78fa      	ldrb	r2, [r7, #3]
 800847e:	4611      	mov	r1, r2
 8008480:	4618      	mov	r0, r3
 8008482:	f7fb f88a 	bl	800359a <HAL_PCD_EP_ClrStall>
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f8ad 	bl	80085ec <USBD_Get_USB_Status>
 8008492:	4603      	mov	r3, r0
 8008494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008496:	7bbb      	ldrb	r3, [r7, #14]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	da0b      	bge.n	80084d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	4613      	mov	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	440b      	add	r3, r1
 80084ce:	3316      	adds	r3, #22
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	e00b      	b.n	80084ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	4613      	mov	r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	440b      	add	r3, r1
 80084e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80084ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008512:	78fa      	ldrb	r2, [r7, #3]
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f7fa fe8f 	bl	800323a <HAL_PCD_SetAddress>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f862 	bl	80085ec <USBD_Get_USB_Status>
 8008528:	4603      	mov	r3, r0
 800852a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852c:	7bbb      	ldrb	r3, [r7, #14]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b086      	sub	sp, #24
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
 8008542:	460b      	mov	r3, r1
 8008544:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008554:	7af9      	ldrb	r1, [r7, #11]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	f7fa ff81 	bl	8003460 <HAL_PCD_EP_Transmit>
 800855e:	4603      	mov	r3, r0
 8008560:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 f841 	bl	80085ec <USBD_Get_USB_Status>
 800856a:	4603      	mov	r3, r0
 800856c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800856e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	607a      	str	r2, [r7, #4]
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	460b      	mov	r3, r1
 8008586:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008596:	7af9      	ldrb	r1, [r7, #11]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	f7fa ff25 	bl	80033ea <HAL_PCD_EP_Receive>
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f820 	bl	80085ec <USBD_Get_USB_Status>
 80085ac:	4603      	mov	r3, r0
 80085ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80085c4:	4b03      	ldr	r3, [pc, #12]	@ (80085d4 <USBD_static_malloc+0x18>)
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000c40 	.word	0x20000c40

080085d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]

}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d817      	bhi.n	8008630 <USBD_Get_USB_Status+0x44>
 8008600:	a201      	add	r2, pc, #4	@ (adr r2, 8008608 <USBD_Get_USB_Status+0x1c>)
 8008602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008606:	bf00      	nop
 8008608:	08008619 	.word	0x08008619
 800860c:	0800861f 	.word	0x0800861f
 8008610:	08008625 	.word	0x08008625
 8008614:	0800862b 	.word	0x0800862b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
    break;
 800861c:	e00b      	b.n	8008636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	73fb      	strb	r3, [r7, #15]
    break;
 8008622:	e008      	b.n	8008636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008624:	2301      	movs	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]
    break;
 8008628:	e005      	b.n	8008636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800862a:	2303      	movs	r3, #3
 800862c:	73fb      	strb	r3, [r7, #15]
    break;
 800862e:	e002      	b.n	8008636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008630:	2303      	movs	r3, #3
 8008632:	73fb      	strb	r3, [r7, #15]
    break;
 8008634:	bf00      	nop
  }
  return usb_status;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <_strtoul_l.isra.0>:
 8008644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008648:	4e34      	ldr	r6, [pc, #208]	@ (800871c <_strtoul_l.isra.0+0xd8>)
 800864a:	4686      	mov	lr, r0
 800864c:	460d      	mov	r5, r1
 800864e:	4628      	mov	r0, r5
 8008650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008654:	5d37      	ldrb	r7, [r6, r4]
 8008656:	f017 0708 	ands.w	r7, r7, #8
 800865a:	d1f8      	bne.n	800864e <_strtoul_l.isra.0+0xa>
 800865c:	2c2d      	cmp	r4, #45	@ 0x2d
 800865e:	d110      	bne.n	8008682 <_strtoul_l.isra.0+0x3e>
 8008660:	782c      	ldrb	r4, [r5, #0]
 8008662:	2701      	movs	r7, #1
 8008664:	1c85      	adds	r5, r0, #2
 8008666:	f033 0010 	bics.w	r0, r3, #16
 800866a:	d115      	bne.n	8008698 <_strtoul_l.isra.0+0x54>
 800866c:	2c30      	cmp	r4, #48	@ 0x30
 800866e:	d10d      	bne.n	800868c <_strtoul_l.isra.0+0x48>
 8008670:	7828      	ldrb	r0, [r5, #0]
 8008672:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008676:	2858      	cmp	r0, #88	@ 0x58
 8008678:	d108      	bne.n	800868c <_strtoul_l.isra.0+0x48>
 800867a:	786c      	ldrb	r4, [r5, #1]
 800867c:	3502      	adds	r5, #2
 800867e:	2310      	movs	r3, #16
 8008680:	e00a      	b.n	8008698 <_strtoul_l.isra.0+0x54>
 8008682:	2c2b      	cmp	r4, #43	@ 0x2b
 8008684:	bf04      	itt	eq
 8008686:	782c      	ldrbeq	r4, [r5, #0]
 8008688:	1c85      	addeq	r5, r0, #2
 800868a:	e7ec      	b.n	8008666 <_strtoul_l.isra.0+0x22>
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1f6      	bne.n	800867e <_strtoul_l.isra.0+0x3a>
 8008690:	2c30      	cmp	r4, #48	@ 0x30
 8008692:	bf14      	ite	ne
 8008694:	230a      	movne	r3, #10
 8008696:	2308      	moveq	r3, #8
 8008698:	f04f 38ff 	mov.w	r8, #4294967295
 800869c:	2600      	movs	r6, #0
 800869e:	fbb8 f8f3 	udiv	r8, r8, r3
 80086a2:	fb03 f908 	mul.w	r9, r3, r8
 80086a6:	ea6f 0909 	mvn.w	r9, r9
 80086aa:	4630      	mov	r0, r6
 80086ac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80086b0:	f1bc 0f09 	cmp.w	ip, #9
 80086b4:	d810      	bhi.n	80086d8 <_strtoul_l.isra.0+0x94>
 80086b6:	4664      	mov	r4, ip
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	dd1e      	ble.n	80086fa <_strtoul_l.isra.0+0xb6>
 80086bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80086c0:	d007      	beq.n	80086d2 <_strtoul_l.isra.0+0x8e>
 80086c2:	4580      	cmp	r8, r0
 80086c4:	d316      	bcc.n	80086f4 <_strtoul_l.isra.0+0xb0>
 80086c6:	d101      	bne.n	80086cc <_strtoul_l.isra.0+0x88>
 80086c8:	45a1      	cmp	r9, r4
 80086ca:	db13      	blt.n	80086f4 <_strtoul_l.isra.0+0xb0>
 80086cc:	fb00 4003 	mla	r0, r0, r3, r4
 80086d0:	2601      	movs	r6, #1
 80086d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086d6:	e7e9      	b.n	80086ac <_strtoul_l.isra.0+0x68>
 80086d8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80086dc:	f1bc 0f19 	cmp.w	ip, #25
 80086e0:	d801      	bhi.n	80086e6 <_strtoul_l.isra.0+0xa2>
 80086e2:	3c37      	subs	r4, #55	@ 0x37
 80086e4:	e7e8      	b.n	80086b8 <_strtoul_l.isra.0+0x74>
 80086e6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80086ea:	f1bc 0f19 	cmp.w	ip, #25
 80086ee:	d804      	bhi.n	80086fa <_strtoul_l.isra.0+0xb6>
 80086f0:	3c57      	subs	r4, #87	@ 0x57
 80086f2:	e7e1      	b.n	80086b8 <_strtoul_l.isra.0+0x74>
 80086f4:	f04f 36ff 	mov.w	r6, #4294967295
 80086f8:	e7eb      	b.n	80086d2 <_strtoul_l.isra.0+0x8e>
 80086fa:	1c73      	adds	r3, r6, #1
 80086fc:	d106      	bne.n	800870c <_strtoul_l.isra.0+0xc8>
 80086fe:	2322      	movs	r3, #34	@ 0x22
 8008700:	f8ce 3000 	str.w	r3, [lr]
 8008704:	4630      	mov	r0, r6
 8008706:	b932      	cbnz	r2, 8008716 <_strtoul_l.isra.0+0xd2>
 8008708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800870c:	b107      	cbz	r7, 8008710 <_strtoul_l.isra.0+0xcc>
 800870e:	4240      	negs	r0, r0
 8008710:	2a00      	cmp	r2, #0
 8008712:	d0f9      	beq.n	8008708 <_strtoul_l.isra.0+0xc4>
 8008714:	b106      	cbz	r6, 8008718 <_strtoul_l.isra.0+0xd4>
 8008716:	1e69      	subs	r1, r5, #1
 8008718:	6011      	str	r1, [r2, #0]
 800871a:	e7f5      	b.n	8008708 <_strtoul_l.isra.0+0xc4>
 800871c:	080091c1 	.word	0x080091c1

08008720 <strtoul>:
 8008720:	4613      	mov	r3, r2
 8008722:	460a      	mov	r2, r1
 8008724:	4601      	mov	r1, r0
 8008726:	4802      	ldr	r0, [pc, #8]	@ (8008730 <strtoul+0x10>)
 8008728:	6800      	ldr	r0, [r0, #0]
 800872a:	f7ff bf8b 	b.w	8008644 <_strtoul_l.isra.0>
 800872e:	bf00      	nop
 8008730:	20000104 	.word	0x20000104

08008734 <siprintf>:
 8008734:	b40e      	push	{r1, r2, r3}
 8008736:	b510      	push	{r4, lr}
 8008738:	b09d      	sub	sp, #116	@ 0x74
 800873a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800873c:	9002      	str	r0, [sp, #8]
 800873e:	9006      	str	r0, [sp, #24]
 8008740:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008744:	480a      	ldr	r0, [pc, #40]	@ (8008770 <siprintf+0x3c>)
 8008746:	9107      	str	r1, [sp, #28]
 8008748:	9104      	str	r1, [sp, #16]
 800874a:	490a      	ldr	r1, [pc, #40]	@ (8008774 <siprintf+0x40>)
 800874c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008750:	9105      	str	r1, [sp, #20]
 8008752:	2400      	movs	r4, #0
 8008754:	a902      	add	r1, sp, #8
 8008756:	6800      	ldr	r0, [r0, #0]
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800875c:	f000 f9a6 	bl	8008aac <_svfiprintf_r>
 8008760:	9b02      	ldr	r3, [sp, #8]
 8008762:	701c      	strb	r4, [r3, #0]
 8008764:	b01d      	add	sp, #116	@ 0x74
 8008766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800876a:	b003      	add	sp, #12
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	20000104 	.word	0x20000104
 8008774:	ffff0208 	.word	0xffff0208

08008778 <memset>:
 8008778:	4402      	add	r2, r0
 800877a:	4603      	mov	r3, r0
 800877c:	4293      	cmp	r3, r2
 800877e:	d100      	bne.n	8008782 <memset+0xa>
 8008780:	4770      	bx	lr
 8008782:	f803 1b01 	strb.w	r1, [r3], #1
 8008786:	e7f9      	b.n	800877c <memset+0x4>

08008788 <strncmp>:
 8008788:	b510      	push	{r4, lr}
 800878a:	b16a      	cbz	r2, 80087a8 <strncmp+0x20>
 800878c:	3901      	subs	r1, #1
 800878e:	1884      	adds	r4, r0, r2
 8008790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008794:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008798:	429a      	cmp	r2, r3
 800879a:	d103      	bne.n	80087a4 <strncmp+0x1c>
 800879c:	42a0      	cmp	r0, r4
 800879e:	d001      	beq.n	80087a4 <strncmp+0x1c>
 80087a0:	2a00      	cmp	r2, #0
 80087a2:	d1f5      	bne.n	8008790 <strncmp+0x8>
 80087a4:	1ad0      	subs	r0, r2, r3
 80087a6:	bd10      	pop	{r4, pc}
 80087a8:	4610      	mov	r0, r2
 80087aa:	e7fc      	b.n	80087a6 <strncmp+0x1e>

080087ac <__errno>:
 80087ac:	4b01      	ldr	r3, [pc, #4]	@ (80087b4 <__errno+0x8>)
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000104 	.word	0x20000104

080087b8 <__libc_init_array>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	4d0d      	ldr	r5, [pc, #52]	@ (80087f0 <__libc_init_array+0x38>)
 80087bc:	4c0d      	ldr	r4, [pc, #52]	@ (80087f4 <__libc_init_array+0x3c>)
 80087be:	1b64      	subs	r4, r4, r5
 80087c0:	10a4      	asrs	r4, r4, #2
 80087c2:	2600      	movs	r6, #0
 80087c4:	42a6      	cmp	r6, r4
 80087c6:	d109      	bne.n	80087dc <__libc_init_array+0x24>
 80087c8:	4d0b      	ldr	r5, [pc, #44]	@ (80087f8 <__libc_init_array+0x40>)
 80087ca:	4c0c      	ldr	r4, [pc, #48]	@ (80087fc <__libc_init_array+0x44>)
 80087cc:	f000 fc64 	bl	8009098 <_init>
 80087d0:	1b64      	subs	r4, r4, r5
 80087d2:	10a4      	asrs	r4, r4, #2
 80087d4:	2600      	movs	r6, #0
 80087d6:	42a6      	cmp	r6, r4
 80087d8:	d105      	bne.n	80087e6 <__libc_init_array+0x2e>
 80087da:	bd70      	pop	{r4, r5, r6, pc}
 80087dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e0:	4798      	blx	r3
 80087e2:	3601      	adds	r6, #1
 80087e4:	e7ee      	b.n	80087c4 <__libc_init_array+0xc>
 80087e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ea:	4798      	blx	r3
 80087ec:	3601      	adds	r6, #1
 80087ee:	e7f2      	b.n	80087d6 <__libc_init_array+0x1e>
 80087f0:	080092fc 	.word	0x080092fc
 80087f4:	080092fc 	.word	0x080092fc
 80087f8:	080092fc 	.word	0x080092fc
 80087fc:	08009300 	.word	0x08009300

08008800 <__retarget_lock_acquire_recursive>:
 8008800:	4770      	bx	lr

08008802 <__retarget_lock_release_recursive>:
 8008802:	4770      	bx	lr

08008804 <_free_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4605      	mov	r5, r0
 8008808:	2900      	cmp	r1, #0
 800880a:	d041      	beq.n	8008890 <_free_r+0x8c>
 800880c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008810:	1f0c      	subs	r4, r1, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	bfb8      	it	lt
 8008816:	18e4      	addlt	r4, r4, r3
 8008818:	f000 f8e0 	bl	80089dc <__malloc_lock>
 800881c:	4a1d      	ldr	r2, [pc, #116]	@ (8008894 <_free_r+0x90>)
 800881e:	6813      	ldr	r3, [r2, #0]
 8008820:	b933      	cbnz	r3, 8008830 <_free_r+0x2c>
 8008822:	6063      	str	r3, [r4, #4]
 8008824:	6014      	str	r4, [r2, #0]
 8008826:	4628      	mov	r0, r5
 8008828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800882c:	f000 b8dc 	b.w	80089e8 <__malloc_unlock>
 8008830:	42a3      	cmp	r3, r4
 8008832:	d908      	bls.n	8008846 <_free_r+0x42>
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	1821      	adds	r1, r4, r0
 8008838:	428b      	cmp	r3, r1
 800883a:	bf01      	itttt	eq
 800883c:	6819      	ldreq	r1, [r3, #0]
 800883e:	685b      	ldreq	r3, [r3, #4]
 8008840:	1809      	addeq	r1, r1, r0
 8008842:	6021      	streq	r1, [r4, #0]
 8008844:	e7ed      	b.n	8008822 <_free_r+0x1e>
 8008846:	461a      	mov	r2, r3
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	b10b      	cbz	r3, 8008850 <_free_r+0x4c>
 800884c:	42a3      	cmp	r3, r4
 800884e:	d9fa      	bls.n	8008846 <_free_r+0x42>
 8008850:	6811      	ldr	r1, [r2, #0]
 8008852:	1850      	adds	r0, r2, r1
 8008854:	42a0      	cmp	r0, r4
 8008856:	d10b      	bne.n	8008870 <_free_r+0x6c>
 8008858:	6820      	ldr	r0, [r4, #0]
 800885a:	4401      	add	r1, r0
 800885c:	1850      	adds	r0, r2, r1
 800885e:	4283      	cmp	r3, r0
 8008860:	6011      	str	r1, [r2, #0]
 8008862:	d1e0      	bne.n	8008826 <_free_r+0x22>
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	6053      	str	r3, [r2, #4]
 800886a:	4408      	add	r0, r1
 800886c:	6010      	str	r0, [r2, #0]
 800886e:	e7da      	b.n	8008826 <_free_r+0x22>
 8008870:	d902      	bls.n	8008878 <_free_r+0x74>
 8008872:	230c      	movs	r3, #12
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	e7d6      	b.n	8008826 <_free_r+0x22>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	1821      	adds	r1, r4, r0
 800887c:	428b      	cmp	r3, r1
 800887e:	bf04      	itt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	6063      	str	r3, [r4, #4]
 8008886:	bf04      	itt	eq
 8008888:	1809      	addeq	r1, r1, r0
 800888a:	6021      	streq	r1, [r4, #0]
 800888c:	6054      	str	r4, [r2, #4]
 800888e:	e7ca      	b.n	8008826 <_free_r+0x22>
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	bf00      	nop
 8008894:	20000ddc 	.word	0x20000ddc

08008898 <sbrk_aligned>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	4e0f      	ldr	r6, [pc, #60]	@ (80088d8 <sbrk_aligned+0x40>)
 800889c:	460c      	mov	r4, r1
 800889e:	6831      	ldr	r1, [r6, #0]
 80088a0:	4605      	mov	r5, r0
 80088a2:	b911      	cbnz	r1, 80088aa <sbrk_aligned+0x12>
 80088a4:	f000 fba4 	bl	8008ff0 <_sbrk_r>
 80088a8:	6030      	str	r0, [r6, #0]
 80088aa:	4621      	mov	r1, r4
 80088ac:	4628      	mov	r0, r5
 80088ae:	f000 fb9f 	bl	8008ff0 <_sbrk_r>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d103      	bne.n	80088be <sbrk_aligned+0x26>
 80088b6:	f04f 34ff 	mov.w	r4, #4294967295
 80088ba:	4620      	mov	r0, r4
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
 80088be:	1cc4      	adds	r4, r0, #3
 80088c0:	f024 0403 	bic.w	r4, r4, #3
 80088c4:	42a0      	cmp	r0, r4
 80088c6:	d0f8      	beq.n	80088ba <sbrk_aligned+0x22>
 80088c8:	1a21      	subs	r1, r4, r0
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 fb90 	bl	8008ff0 <_sbrk_r>
 80088d0:	3001      	adds	r0, #1
 80088d2:	d1f2      	bne.n	80088ba <sbrk_aligned+0x22>
 80088d4:	e7ef      	b.n	80088b6 <sbrk_aligned+0x1e>
 80088d6:	bf00      	nop
 80088d8:	20000dd8 	.word	0x20000dd8

080088dc <_malloc_r>:
 80088dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e0:	1ccd      	adds	r5, r1, #3
 80088e2:	f025 0503 	bic.w	r5, r5, #3
 80088e6:	3508      	adds	r5, #8
 80088e8:	2d0c      	cmp	r5, #12
 80088ea:	bf38      	it	cc
 80088ec:	250c      	movcc	r5, #12
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	4606      	mov	r6, r0
 80088f2:	db01      	blt.n	80088f8 <_malloc_r+0x1c>
 80088f4:	42a9      	cmp	r1, r5
 80088f6:	d904      	bls.n	8008902 <_malloc_r+0x26>
 80088f8:	230c      	movs	r3, #12
 80088fa:	6033      	str	r3, [r6, #0]
 80088fc:	2000      	movs	r0, #0
 80088fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089d8 <_malloc_r+0xfc>
 8008906:	f000 f869 	bl	80089dc <__malloc_lock>
 800890a:	f8d8 3000 	ldr.w	r3, [r8]
 800890e:	461c      	mov	r4, r3
 8008910:	bb44      	cbnz	r4, 8008964 <_malloc_r+0x88>
 8008912:	4629      	mov	r1, r5
 8008914:	4630      	mov	r0, r6
 8008916:	f7ff ffbf 	bl	8008898 <sbrk_aligned>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	4604      	mov	r4, r0
 800891e:	d158      	bne.n	80089d2 <_malloc_r+0xf6>
 8008920:	f8d8 4000 	ldr.w	r4, [r8]
 8008924:	4627      	mov	r7, r4
 8008926:	2f00      	cmp	r7, #0
 8008928:	d143      	bne.n	80089b2 <_malloc_r+0xd6>
 800892a:	2c00      	cmp	r4, #0
 800892c:	d04b      	beq.n	80089c6 <_malloc_r+0xea>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	4639      	mov	r1, r7
 8008932:	4630      	mov	r0, r6
 8008934:	eb04 0903 	add.w	r9, r4, r3
 8008938:	f000 fb5a 	bl	8008ff0 <_sbrk_r>
 800893c:	4581      	cmp	r9, r0
 800893e:	d142      	bne.n	80089c6 <_malloc_r+0xea>
 8008940:	6821      	ldr	r1, [r4, #0]
 8008942:	1a6d      	subs	r5, r5, r1
 8008944:	4629      	mov	r1, r5
 8008946:	4630      	mov	r0, r6
 8008948:	f7ff ffa6 	bl	8008898 <sbrk_aligned>
 800894c:	3001      	adds	r0, #1
 800894e:	d03a      	beq.n	80089c6 <_malloc_r+0xea>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	442b      	add	r3, r5
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	f8d8 3000 	ldr.w	r3, [r8]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	bb62      	cbnz	r2, 80089b8 <_malloc_r+0xdc>
 800895e:	f8c8 7000 	str.w	r7, [r8]
 8008962:	e00f      	b.n	8008984 <_malloc_r+0xa8>
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	1b52      	subs	r2, r2, r5
 8008968:	d420      	bmi.n	80089ac <_malloc_r+0xd0>
 800896a:	2a0b      	cmp	r2, #11
 800896c:	d917      	bls.n	800899e <_malloc_r+0xc2>
 800896e:	1961      	adds	r1, r4, r5
 8008970:	42a3      	cmp	r3, r4
 8008972:	6025      	str	r5, [r4, #0]
 8008974:	bf18      	it	ne
 8008976:	6059      	strne	r1, [r3, #4]
 8008978:	6863      	ldr	r3, [r4, #4]
 800897a:	bf08      	it	eq
 800897c:	f8c8 1000 	streq.w	r1, [r8]
 8008980:	5162      	str	r2, [r4, r5]
 8008982:	604b      	str	r3, [r1, #4]
 8008984:	4630      	mov	r0, r6
 8008986:	f000 f82f 	bl	80089e8 <__malloc_unlock>
 800898a:	f104 000b 	add.w	r0, r4, #11
 800898e:	1d23      	adds	r3, r4, #4
 8008990:	f020 0007 	bic.w	r0, r0, #7
 8008994:	1ac2      	subs	r2, r0, r3
 8008996:	bf1c      	itt	ne
 8008998:	1a1b      	subne	r3, r3, r0
 800899a:	50a3      	strne	r3, [r4, r2]
 800899c:	e7af      	b.n	80088fe <_malloc_r+0x22>
 800899e:	6862      	ldr	r2, [r4, #4]
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	bf0c      	ite	eq
 80089a4:	f8c8 2000 	streq.w	r2, [r8]
 80089a8:	605a      	strne	r2, [r3, #4]
 80089aa:	e7eb      	b.n	8008984 <_malloc_r+0xa8>
 80089ac:	4623      	mov	r3, r4
 80089ae:	6864      	ldr	r4, [r4, #4]
 80089b0:	e7ae      	b.n	8008910 <_malloc_r+0x34>
 80089b2:	463c      	mov	r4, r7
 80089b4:	687f      	ldr	r7, [r7, #4]
 80089b6:	e7b6      	b.n	8008926 <_malloc_r+0x4a>
 80089b8:	461a      	mov	r2, r3
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	42a3      	cmp	r3, r4
 80089be:	d1fb      	bne.n	80089b8 <_malloc_r+0xdc>
 80089c0:	2300      	movs	r3, #0
 80089c2:	6053      	str	r3, [r2, #4]
 80089c4:	e7de      	b.n	8008984 <_malloc_r+0xa8>
 80089c6:	230c      	movs	r3, #12
 80089c8:	6033      	str	r3, [r6, #0]
 80089ca:	4630      	mov	r0, r6
 80089cc:	f000 f80c 	bl	80089e8 <__malloc_unlock>
 80089d0:	e794      	b.n	80088fc <_malloc_r+0x20>
 80089d2:	6005      	str	r5, [r0, #0]
 80089d4:	e7d6      	b.n	8008984 <_malloc_r+0xa8>
 80089d6:	bf00      	nop
 80089d8:	20000ddc 	.word	0x20000ddc

080089dc <__malloc_lock>:
 80089dc:	4801      	ldr	r0, [pc, #4]	@ (80089e4 <__malloc_lock+0x8>)
 80089de:	f7ff bf0f 	b.w	8008800 <__retarget_lock_acquire_recursive>
 80089e2:	bf00      	nop
 80089e4:	20000dd4 	.word	0x20000dd4

080089e8 <__malloc_unlock>:
 80089e8:	4801      	ldr	r0, [pc, #4]	@ (80089f0 <__malloc_unlock+0x8>)
 80089ea:	f7ff bf0a 	b.w	8008802 <__retarget_lock_release_recursive>
 80089ee:	bf00      	nop
 80089f0:	20000dd4 	.word	0x20000dd4

080089f4 <__ssputs_r>:
 80089f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	688e      	ldr	r6, [r1, #8]
 80089fa:	461f      	mov	r7, r3
 80089fc:	42be      	cmp	r6, r7
 80089fe:	680b      	ldr	r3, [r1, #0]
 8008a00:	4682      	mov	sl, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	4690      	mov	r8, r2
 8008a06:	d82d      	bhi.n	8008a64 <__ssputs_r+0x70>
 8008a08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a10:	d026      	beq.n	8008a60 <__ssputs_r+0x6c>
 8008a12:	6965      	ldr	r5, [r4, #20]
 8008a14:	6909      	ldr	r1, [r1, #16]
 8008a16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a1a:	eba3 0901 	sub.w	r9, r3, r1
 8008a1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a22:	1c7b      	adds	r3, r7, #1
 8008a24:	444b      	add	r3, r9
 8008a26:	106d      	asrs	r5, r5, #1
 8008a28:	429d      	cmp	r5, r3
 8008a2a:	bf38      	it	cc
 8008a2c:	461d      	movcc	r5, r3
 8008a2e:	0553      	lsls	r3, r2, #21
 8008a30:	d527      	bpl.n	8008a82 <__ssputs_r+0x8e>
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7ff ff52 	bl	80088dc <_malloc_r>
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b360      	cbz	r0, 8008a96 <__ssputs_r+0xa2>
 8008a3c:	6921      	ldr	r1, [r4, #16]
 8008a3e:	464a      	mov	r2, r9
 8008a40:	f000 fae6 	bl	8009010 <memcpy>
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	6126      	str	r6, [r4, #16]
 8008a52:	6165      	str	r5, [r4, #20]
 8008a54:	444e      	add	r6, r9
 8008a56:	eba5 0509 	sub.w	r5, r5, r9
 8008a5a:	6026      	str	r6, [r4, #0]
 8008a5c:	60a5      	str	r5, [r4, #8]
 8008a5e:	463e      	mov	r6, r7
 8008a60:	42be      	cmp	r6, r7
 8008a62:	d900      	bls.n	8008a66 <__ssputs_r+0x72>
 8008a64:	463e      	mov	r6, r7
 8008a66:	6820      	ldr	r0, [r4, #0]
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4641      	mov	r1, r8
 8008a6c:	f000 faa6 	bl	8008fbc <memmove>
 8008a70:	68a3      	ldr	r3, [r4, #8]
 8008a72:	1b9b      	subs	r3, r3, r6
 8008a74:	60a3      	str	r3, [r4, #8]
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	4433      	add	r3, r6
 8008a7a:	6023      	str	r3, [r4, #0]
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a82:	462a      	mov	r2, r5
 8008a84:	f000 fad2 	bl	800902c <_realloc_r>
 8008a88:	4606      	mov	r6, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d1e0      	bne.n	8008a50 <__ssputs_r+0x5c>
 8008a8e:	6921      	ldr	r1, [r4, #16]
 8008a90:	4650      	mov	r0, sl
 8008a92:	f7ff feb7 	bl	8008804 <_free_r>
 8008a96:	230c      	movs	r3, #12
 8008a98:	f8ca 3000 	str.w	r3, [sl]
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa2:	81a3      	strh	r3, [r4, #12]
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	e7e9      	b.n	8008a7e <__ssputs_r+0x8a>
	...

08008aac <_svfiprintf_r>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	4698      	mov	r8, r3
 8008ab2:	898b      	ldrh	r3, [r1, #12]
 8008ab4:	061b      	lsls	r3, r3, #24
 8008ab6:	b09d      	sub	sp, #116	@ 0x74
 8008ab8:	4607      	mov	r7, r0
 8008aba:	460d      	mov	r5, r1
 8008abc:	4614      	mov	r4, r2
 8008abe:	d510      	bpl.n	8008ae2 <_svfiprintf_r+0x36>
 8008ac0:	690b      	ldr	r3, [r1, #16]
 8008ac2:	b973      	cbnz	r3, 8008ae2 <_svfiprintf_r+0x36>
 8008ac4:	2140      	movs	r1, #64	@ 0x40
 8008ac6:	f7ff ff09 	bl	80088dc <_malloc_r>
 8008aca:	6028      	str	r0, [r5, #0]
 8008acc:	6128      	str	r0, [r5, #16]
 8008ace:	b930      	cbnz	r0, 8008ade <_svfiprintf_r+0x32>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	b01d      	add	sp, #116	@ 0x74
 8008ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ade:	2340      	movs	r3, #64	@ 0x40
 8008ae0:	616b      	str	r3, [r5, #20]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae6:	2320      	movs	r3, #32
 8008ae8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008af0:	2330      	movs	r3, #48	@ 0x30
 8008af2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c90 <_svfiprintf_r+0x1e4>
 8008af6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008afa:	f04f 0901 	mov.w	r9, #1
 8008afe:	4623      	mov	r3, r4
 8008b00:	469a      	mov	sl, r3
 8008b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b06:	b10a      	cbz	r2, 8008b0c <_svfiprintf_r+0x60>
 8008b08:	2a25      	cmp	r2, #37	@ 0x25
 8008b0a:	d1f9      	bne.n	8008b00 <_svfiprintf_r+0x54>
 8008b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b10:	d00b      	beq.n	8008b2a <_svfiprintf_r+0x7e>
 8008b12:	465b      	mov	r3, fp
 8008b14:	4622      	mov	r2, r4
 8008b16:	4629      	mov	r1, r5
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff ff6b 	bl	80089f4 <__ssputs_r>
 8008b1e:	3001      	adds	r0, #1
 8008b20:	f000 80a7 	beq.w	8008c72 <_svfiprintf_r+0x1c6>
 8008b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b26:	445a      	add	r2, fp
 8008b28:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 809f 	beq.w	8008c72 <_svfiprintf_r+0x1c6>
 8008b34:	2300      	movs	r3, #0
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3e:	f10a 0a01 	add.w	sl, sl, #1
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	9307      	str	r3, [sp, #28]
 8008b46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b4c:	4654      	mov	r4, sl
 8008b4e:	2205      	movs	r2, #5
 8008b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b54:	484e      	ldr	r0, [pc, #312]	@ (8008c90 <_svfiprintf_r+0x1e4>)
 8008b56:	f7f7 fb4b 	bl	80001f0 <memchr>
 8008b5a:	9a04      	ldr	r2, [sp, #16]
 8008b5c:	b9d8      	cbnz	r0, 8008b96 <_svfiprintf_r+0xea>
 8008b5e:	06d0      	lsls	r0, r2, #27
 8008b60:	bf44      	itt	mi
 8008b62:	2320      	movmi	r3, #32
 8008b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b68:	0711      	lsls	r1, r2, #28
 8008b6a:	bf44      	itt	mi
 8008b6c:	232b      	movmi	r3, #43	@ 0x2b
 8008b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b72:	f89a 3000 	ldrb.w	r3, [sl]
 8008b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b78:	d015      	beq.n	8008ba6 <_svfiprintf_r+0xfa>
 8008b7a:	9a07      	ldr	r2, [sp, #28]
 8008b7c:	4654      	mov	r4, sl
 8008b7e:	2000      	movs	r0, #0
 8008b80:	f04f 0c0a 	mov.w	ip, #10
 8008b84:	4621      	mov	r1, r4
 8008b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b8a:	3b30      	subs	r3, #48	@ 0x30
 8008b8c:	2b09      	cmp	r3, #9
 8008b8e:	d94b      	bls.n	8008c28 <_svfiprintf_r+0x17c>
 8008b90:	b1b0      	cbz	r0, 8008bc0 <_svfiprintf_r+0x114>
 8008b92:	9207      	str	r2, [sp, #28]
 8008b94:	e014      	b.n	8008bc0 <_svfiprintf_r+0x114>
 8008b96:	eba0 0308 	sub.w	r3, r0, r8
 8008b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	46a2      	mov	sl, r4
 8008ba4:	e7d2      	b.n	8008b4c <_svfiprintf_r+0xa0>
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	1d19      	adds	r1, r3, #4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	9103      	str	r1, [sp, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bfbb      	ittet	lt
 8008bb2:	425b      	neglt	r3, r3
 8008bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb8:	9307      	strge	r3, [sp, #28]
 8008bba:	9307      	strlt	r3, [sp, #28]
 8008bbc:	bfb8      	it	lt
 8008bbe:	9204      	strlt	r2, [sp, #16]
 8008bc0:	7823      	ldrb	r3, [r4, #0]
 8008bc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bc4:	d10a      	bne.n	8008bdc <_svfiprintf_r+0x130>
 8008bc6:	7863      	ldrb	r3, [r4, #1]
 8008bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bca:	d132      	bne.n	8008c32 <_svfiprintf_r+0x186>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	9203      	str	r2, [sp, #12]
 8008bd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bd8:	3402      	adds	r4, #2
 8008bda:	9305      	str	r3, [sp, #20]
 8008bdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ca0 <_svfiprintf_r+0x1f4>
 8008be0:	7821      	ldrb	r1, [r4, #0]
 8008be2:	2203      	movs	r2, #3
 8008be4:	4650      	mov	r0, sl
 8008be6:	f7f7 fb03 	bl	80001f0 <memchr>
 8008bea:	b138      	cbz	r0, 8008bfc <_svfiprintf_r+0x150>
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	eba0 000a 	sub.w	r0, r0, sl
 8008bf2:	2240      	movs	r2, #64	@ 0x40
 8008bf4:	4082      	lsls	r2, r0
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	3401      	adds	r4, #1
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c00:	4824      	ldr	r0, [pc, #144]	@ (8008c94 <_svfiprintf_r+0x1e8>)
 8008c02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c06:	2206      	movs	r2, #6
 8008c08:	f7f7 faf2 	bl	80001f0 <memchr>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d036      	beq.n	8008c7e <_svfiprintf_r+0x1d2>
 8008c10:	4b21      	ldr	r3, [pc, #132]	@ (8008c98 <_svfiprintf_r+0x1ec>)
 8008c12:	bb1b      	cbnz	r3, 8008c5c <_svfiprintf_r+0x1b0>
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	3307      	adds	r3, #7
 8008c18:	f023 0307 	bic.w	r3, r3, #7
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c22:	4433      	add	r3, r6
 8008c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c26:	e76a      	b.n	8008afe <_svfiprintf_r+0x52>
 8008c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	2001      	movs	r0, #1
 8008c30:	e7a8      	b.n	8008b84 <_svfiprintf_r+0xd8>
 8008c32:	2300      	movs	r3, #0
 8008c34:	3401      	adds	r4, #1
 8008c36:	9305      	str	r3, [sp, #20]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f04f 0c0a 	mov.w	ip, #10
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c44:	3a30      	subs	r2, #48	@ 0x30
 8008c46:	2a09      	cmp	r2, #9
 8008c48:	d903      	bls.n	8008c52 <_svfiprintf_r+0x1a6>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0c6      	beq.n	8008bdc <_svfiprintf_r+0x130>
 8008c4e:	9105      	str	r1, [sp, #20]
 8008c50:	e7c4      	b.n	8008bdc <_svfiprintf_r+0x130>
 8008c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c56:	4604      	mov	r4, r0
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e7f0      	b.n	8008c3e <_svfiprintf_r+0x192>
 8008c5c:	ab03      	add	r3, sp, #12
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	462a      	mov	r2, r5
 8008c62:	4b0e      	ldr	r3, [pc, #56]	@ (8008c9c <_svfiprintf_r+0x1f0>)
 8008c64:	a904      	add	r1, sp, #16
 8008c66:	4638      	mov	r0, r7
 8008c68:	f3af 8000 	nop.w
 8008c6c:	1c42      	adds	r2, r0, #1
 8008c6e:	4606      	mov	r6, r0
 8008c70:	d1d6      	bne.n	8008c20 <_svfiprintf_r+0x174>
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	065b      	lsls	r3, r3, #25
 8008c76:	f53f af2d 	bmi.w	8008ad4 <_svfiprintf_r+0x28>
 8008c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c7c:	e72c      	b.n	8008ad8 <_svfiprintf_r+0x2c>
 8008c7e:	ab03      	add	r3, sp, #12
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	462a      	mov	r2, r5
 8008c84:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <_svfiprintf_r+0x1f0>)
 8008c86:	a904      	add	r1, sp, #16
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f000 f879 	bl	8008d80 <_printf_i>
 8008c8e:	e7ed      	b.n	8008c6c <_svfiprintf_r+0x1c0>
 8008c90:	080092c1 	.word	0x080092c1
 8008c94:	080092cb 	.word	0x080092cb
 8008c98:	00000000 	.word	0x00000000
 8008c9c:	080089f5 	.word	0x080089f5
 8008ca0:	080092c7 	.word	0x080092c7

08008ca4 <_printf_common>:
 8008ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	4616      	mov	r6, r2
 8008caa:	4698      	mov	r8, r3
 8008cac:	688a      	ldr	r2, [r1, #8]
 8008cae:	690b      	ldr	r3, [r1, #16]
 8008cb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	bfb8      	it	lt
 8008cb8:	4613      	movlt	r3, r2
 8008cba:	6033      	str	r3, [r6, #0]
 8008cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	b10a      	cbz	r2, 8008cca <_printf_common+0x26>
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	6033      	str	r3, [r6, #0]
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	0699      	lsls	r1, r3, #26
 8008cce:	bf42      	ittt	mi
 8008cd0:	6833      	ldrmi	r3, [r6, #0]
 8008cd2:	3302      	addmi	r3, #2
 8008cd4:	6033      	strmi	r3, [r6, #0]
 8008cd6:	6825      	ldr	r5, [r4, #0]
 8008cd8:	f015 0506 	ands.w	r5, r5, #6
 8008cdc:	d106      	bne.n	8008cec <_printf_common+0x48>
 8008cde:	f104 0a19 	add.w	sl, r4, #25
 8008ce2:	68e3      	ldr	r3, [r4, #12]
 8008ce4:	6832      	ldr	r2, [r6, #0]
 8008ce6:	1a9b      	subs	r3, r3, r2
 8008ce8:	42ab      	cmp	r3, r5
 8008cea:	dc26      	bgt.n	8008d3a <_printf_common+0x96>
 8008cec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cf0:	6822      	ldr	r2, [r4, #0]
 8008cf2:	3b00      	subs	r3, #0
 8008cf4:	bf18      	it	ne
 8008cf6:	2301      	movne	r3, #1
 8008cf8:	0692      	lsls	r2, r2, #26
 8008cfa:	d42b      	bmi.n	8008d54 <_printf_common+0xb0>
 8008cfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d00:	4641      	mov	r1, r8
 8008d02:	4638      	mov	r0, r7
 8008d04:	47c8      	blx	r9
 8008d06:	3001      	adds	r0, #1
 8008d08:	d01e      	beq.n	8008d48 <_printf_common+0xa4>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	6922      	ldr	r2, [r4, #16]
 8008d0e:	f003 0306 	and.w	r3, r3, #6
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	bf02      	ittt	eq
 8008d16:	68e5      	ldreq	r5, [r4, #12]
 8008d18:	6833      	ldreq	r3, [r6, #0]
 8008d1a:	1aed      	subeq	r5, r5, r3
 8008d1c:	68a3      	ldr	r3, [r4, #8]
 8008d1e:	bf0c      	ite	eq
 8008d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d24:	2500      	movne	r5, #0
 8008d26:	4293      	cmp	r3, r2
 8008d28:	bfc4      	itt	gt
 8008d2a:	1a9b      	subgt	r3, r3, r2
 8008d2c:	18ed      	addgt	r5, r5, r3
 8008d2e:	2600      	movs	r6, #0
 8008d30:	341a      	adds	r4, #26
 8008d32:	42b5      	cmp	r5, r6
 8008d34:	d11a      	bne.n	8008d6c <_printf_common+0xc8>
 8008d36:	2000      	movs	r0, #0
 8008d38:	e008      	b.n	8008d4c <_printf_common+0xa8>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4652      	mov	r2, sl
 8008d3e:	4641      	mov	r1, r8
 8008d40:	4638      	mov	r0, r7
 8008d42:	47c8      	blx	r9
 8008d44:	3001      	adds	r0, #1
 8008d46:	d103      	bne.n	8008d50 <_printf_common+0xac>
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d50:	3501      	adds	r5, #1
 8008d52:	e7c6      	b.n	8008ce2 <_printf_common+0x3e>
 8008d54:	18e1      	adds	r1, r4, r3
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	2030      	movs	r0, #48	@ 0x30
 8008d5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d5e:	4422      	add	r2, r4
 8008d60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d68:	3302      	adds	r3, #2
 8008d6a:	e7c7      	b.n	8008cfc <_printf_common+0x58>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4622      	mov	r2, r4
 8008d70:	4641      	mov	r1, r8
 8008d72:	4638      	mov	r0, r7
 8008d74:	47c8      	blx	r9
 8008d76:	3001      	adds	r0, #1
 8008d78:	d0e6      	beq.n	8008d48 <_printf_common+0xa4>
 8008d7a:	3601      	adds	r6, #1
 8008d7c:	e7d9      	b.n	8008d32 <_printf_common+0x8e>
	...

08008d80 <_printf_i>:
 8008d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	7e0f      	ldrb	r7, [r1, #24]
 8008d86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d88:	2f78      	cmp	r7, #120	@ 0x78
 8008d8a:	4691      	mov	r9, r2
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	469a      	mov	sl, r3
 8008d92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d96:	d807      	bhi.n	8008da8 <_printf_i+0x28>
 8008d98:	2f62      	cmp	r7, #98	@ 0x62
 8008d9a:	d80a      	bhi.n	8008db2 <_printf_i+0x32>
 8008d9c:	2f00      	cmp	r7, #0
 8008d9e:	f000 80d1 	beq.w	8008f44 <_printf_i+0x1c4>
 8008da2:	2f58      	cmp	r7, #88	@ 0x58
 8008da4:	f000 80b8 	beq.w	8008f18 <_printf_i+0x198>
 8008da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008db0:	e03a      	b.n	8008e28 <_printf_i+0xa8>
 8008db2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008db6:	2b15      	cmp	r3, #21
 8008db8:	d8f6      	bhi.n	8008da8 <_printf_i+0x28>
 8008dba:	a101      	add	r1, pc, #4	@ (adr r1, 8008dc0 <_printf_i+0x40>)
 8008dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dc0:	08008e19 	.word	0x08008e19
 8008dc4:	08008e2d 	.word	0x08008e2d
 8008dc8:	08008da9 	.word	0x08008da9
 8008dcc:	08008da9 	.word	0x08008da9
 8008dd0:	08008da9 	.word	0x08008da9
 8008dd4:	08008da9 	.word	0x08008da9
 8008dd8:	08008e2d 	.word	0x08008e2d
 8008ddc:	08008da9 	.word	0x08008da9
 8008de0:	08008da9 	.word	0x08008da9
 8008de4:	08008da9 	.word	0x08008da9
 8008de8:	08008da9 	.word	0x08008da9
 8008dec:	08008f2b 	.word	0x08008f2b
 8008df0:	08008e57 	.word	0x08008e57
 8008df4:	08008ee5 	.word	0x08008ee5
 8008df8:	08008da9 	.word	0x08008da9
 8008dfc:	08008da9 	.word	0x08008da9
 8008e00:	08008f4d 	.word	0x08008f4d
 8008e04:	08008da9 	.word	0x08008da9
 8008e08:	08008e57 	.word	0x08008e57
 8008e0c:	08008da9 	.word	0x08008da9
 8008e10:	08008da9 	.word	0x08008da9
 8008e14:	08008eed 	.word	0x08008eed
 8008e18:	6833      	ldr	r3, [r6, #0]
 8008e1a:	1d1a      	adds	r2, r3, #4
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6032      	str	r2, [r6, #0]
 8008e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e09c      	b.n	8008f66 <_printf_i+0x1e6>
 8008e2c:	6833      	ldr	r3, [r6, #0]
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	1d19      	adds	r1, r3, #4
 8008e32:	6031      	str	r1, [r6, #0]
 8008e34:	0606      	lsls	r6, r0, #24
 8008e36:	d501      	bpl.n	8008e3c <_printf_i+0xbc>
 8008e38:	681d      	ldr	r5, [r3, #0]
 8008e3a:	e003      	b.n	8008e44 <_printf_i+0xc4>
 8008e3c:	0645      	lsls	r5, r0, #25
 8008e3e:	d5fb      	bpl.n	8008e38 <_printf_i+0xb8>
 8008e40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e44:	2d00      	cmp	r5, #0
 8008e46:	da03      	bge.n	8008e50 <_printf_i+0xd0>
 8008e48:	232d      	movs	r3, #45	@ 0x2d
 8008e4a:	426d      	negs	r5, r5
 8008e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e50:	4858      	ldr	r0, [pc, #352]	@ (8008fb4 <_printf_i+0x234>)
 8008e52:	230a      	movs	r3, #10
 8008e54:	e011      	b.n	8008e7a <_printf_i+0xfa>
 8008e56:	6821      	ldr	r1, [r4, #0]
 8008e58:	6833      	ldr	r3, [r6, #0]
 8008e5a:	0608      	lsls	r0, r1, #24
 8008e5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e60:	d402      	bmi.n	8008e68 <_printf_i+0xe8>
 8008e62:	0649      	lsls	r1, r1, #25
 8008e64:	bf48      	it	mi
 8008e66:	b2ad      	uxthmi	r5, r5
 8008e68:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e6a:	4852      	ldr	r0, [pc, #328]	@ (8008fb4 <_printf_i+0x234>)
 8008e6c:	6033      	str	r3, [r6, #0]
 8008e6e:	bf14      	ite	ne
 8008e70:	230a      	movne	r3, #10
 8008e72:	2308      	moveq	r3, #8
 8008e74:	2100      	movs	r1, #0
 8008e76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e7a:	6866      	ldr	r6, [r4, #4]
 8008e7c:	60a6      	str	r6, [r4, #8]
 8008e7e:	2e00      	cmp	r6, #0
 8008e80:	db05      	blt.n	8008e8e <_printf_i+0x10e>
 8008e82:	6821      	ldr	r1, [r4, #0]
 8008e84:	432e      	orrs	r6, r5
 8008e86:	f021 0104 	bic.w	r1, r1, #4
 8008e8a:	6021      	str	r1, [r4, #0]
 8008e8c:	d04b      	beq.n	8008f26 <_printf_i+0x1a6>
 8008e8e:	4616      	mov	r6, r2
 8008e90:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e94:	fb03 5711 	mls	r7, r3, r1, r5
 8008e98:	5dc7      	ldrb	r7, [r0, r7]
 8008e9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e9e:	462f      	mov	r7, r5
 8008ea0:	42bb      	cmp	r3, r7
 8008ea2:	460d      	mov	r5, r1
 8008ea4:	d9f4      	bls.n	8008e90 <_printf_i+0x110>
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d10b      	bne.n	8008ec2 <_printf_i+0x142>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	07df      	lsls	r7, r3, #31
 8008eae:	d508      	bpl.n	8008ec2 <_printf_i+0x142>
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	6861      	ldr	r1, [r4, #4]
 8008eb4:	4299      	cmp	r1, r3
 8008eb6:	bfde      	ittt	le
 8008eb8:	2330      	movle	r3, #48	@ 0x30
 8008eba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ebe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ec2:	1b92      	subs	r2, r2, r6
 8008ec4:	6122      	str	r2, [r4, #16]
 8008ec6:	f8cd a000 	str.w	sl, [sp]
 8008eca:	464b      	mov	r3, r9
 8008ecc:	aa03      	add	r2, sp, #12
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	f7ff fee7 	bl	8008ca4 <_printf_common>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	d14a      	bne.n	8008f70 <_printf_i+0x1f0>
 8008eda:	f04f 30ff 	mov.w	r0, #4294967295
 8008ede:	b004      	add	sp, #16
 8008ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	f043 0320 	orr.w	r3, r3, #32
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	4832      	ldr	r0, [pc, #200]	@ (8008fb8 <_printf_i+0x238>)
 8008eee:	2778      	movs	r7, #120	@ 0x78
 8008ef0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	6831      	ldr	r1, [r6, #0]
 8008ef8:	061f      	lsls	r7, r3, #24
 8008efa:	f851 5b04 	ldr.w	r5, [r1], #4
 8008efe:	d402      	bmi.n	8008f06 <_printf_i+0x186>
 8008f00:	065f      	lsls	r7, r3, #25
 8008f02:	bf48      	it	mi
 8008f04:	b2ad      	uxthmi	r5, r5
 8008f06:	6031      	str	r1, [r6, #0]
 8008f08:	07d9      	lsls	r1, r3, #31
 8008f0a:	bf44      	itt	mi
 8008f0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008f10:	6023      	strmi	r3, [r4, #0]
 8008f12:	b11d      	cbz	r5, 8008f1c <_printf_i+0x19c>
 8008f14:	2310      	movs	r3, #16
 8008f16:	e7ad      	b.n	8008e74 <_printf_i+0xf4>
 8008f18:	4826      	ldr	r0, [pc, #152]	@ (8008fb4 <_printf_i+0x234>)
 8008f1a:	e7e9      	b.n	8008ef0 <_printf_i+0x170>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	f023 0320 	bic.w	r3, r3, #32
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	e7f6      	b.n	8008f14 <_printf_i+0x194>
 8008f26:	4616      	mov	r6, r2
 8008f28:	e7bd      	b.n	8008ea6 <_printf_i+0x126>
 8008f2a:	6833      	ldr	r3, [r6, #0]
 8008f2c:	6825      	ldr	r5, [r4, #0]
 8008f2e:	6961      	ldr	r1, [r4, #20]
 8008f30:	1d18      	adds	r0, r3, #4
 8008f32:	6030      	str	r0, [r6, #0]
 8008f34:	062e      	lsls	r6, r5, #24
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	d501      	bpl.n	8008f3e <_printf_i+0x1be>
 8008f3a:	6019      	str	r1, [r3, #0]
 8008f3c:	e002      	b.n	8008f44 <_printf_i+0x1c4>
 8008f3e:	0668      	lsls	r0, r5, #25
 8008f40:	d5fb      	bpl.n	8008f3a <_printf_i+0x1ba>
 8008f42:	8019      	strh	r1, [r3, #0]
 8008f44:	2300      	movs	r3, #0
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	4616      	mov	r6, r2
 8008f4a:	e7bc      	b.n	8008ec6 <_printf_i+0x146>
 8008f4c:	6833      	ldr	r3, [r6, #0]
 8008f4e:	1d1a      	adds	r2, r3, #4
 8008f50:	6032      	str	r2, [r6, #0]
 8008f52:	681e      	ldr	r6, [r3, #0]
 8008f54:	6862      	ldr	r2, [r4, #4]
 8008f56:	2100      	movs	r1, #0
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f7f7 f949 	bl	80001f0 <memchr>
 8008f5e:	b108      	cbz	r0, 8008f64 <_printf_i+0x1e4>
 8008f60:	1b80      	subs	r0, r0, r6
 8008f62:	6060      	str	r0, [r4, #4]
 8008f64:	6863      	ldr	r3, [r4, #4]
 8008f66:	6123      	str	r3, [r4, #16]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f6e:	e7aa      	b.n	8008ec6 <_printf_i+0x146>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	4632      	mov	r2, r6
 8008f74:	4649      	mov	r1, r9
 8008f76:	4640      	mov	r0, r8
 8008f78:	47d0      	blx	sl
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d0ad      	beq.n	8008eda <_printf_i+0x15a>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	079b      	lsls	r3, r3, #30
 8008f82:	d413      	bmi.n	8008fac <_printf_i+0x22c>
 8008f84:	68e0      	ldr	r0, [r4, #12]
 8008f86:	9b03      	ldr	r3, [sp, #12]
 8008f88:	4298      	cmp	r0, r3
 8008f8a:	bfb8      	it	lt
 8008f8c:	4618      	movlt	r0, r3
 8008f8e:	e7a6      	b.n	8008ede <_printf_i+0x15e>
 8008f90:	2301      	movs	r3, #1
 8008f92:	4632      	mov	r2, r6
 8008f94:	4649      	mov	r1, r9
 8008f96:	4640      	mov	r0, r8
 8008f98:	47d0      	blx	sl
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	d09d      	beq.n	8008eda <_printf_i+0x15a>
 8008f9e:	3501      	adds	r5, #1
 8008fa0:	68e3      	ldr	r3, [r4, #12]
 8008fa2:	9903      	ldr	r1, [sp, #12]
 8008fa4:	1a5b      	subs	r3, r3, r1
 8008fa6:	42ab      	cmp	r3, r5
 8008fa8:	dcf2      	bgt.n	8008f90 <_printf_i+0x210>
 8008faa:	e7eb      	b.n	8008f84 <_printf_i+0x204>
 8008fac:	2500      	movs	r5, #0
 8008fae:	f104 0619 	add.w	r6, r4, #25
 8008fb2:	e7f5      	b.n	8008fa0 <_printf_i+0x220>
 8008fb4:	080092d2 	.word	0x080092d2
 8008fb8:	080092e3 	.word	0x080092e3

08008fbc <memmove>:
 8008fbc:	4288      	cmp	r0, r1
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	eb01 0402 	add.w	r4, r1, r2
 8008fc4:	d902      	bls.n	8008fcc <memmove+0x10>
 8008fc6:	4284      	cmp	r4, r0
 8008fc8:	4623      	mov	r3, r4
 8008fca:	d807      	bhi.n	8008fdc <memmove+0x20>
 8008fcc:	1e43      	subs	r3, r0, #1
 8008fce:	42a1      	cmp	r1, r4
 8008fd0:	d008      	beq.n	8008fe4 <memmove+0x28>
 8008fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fda:	e7f8      	b.n	8008fce <memmove+0x12>
 8008fdc:	4402      	add	r2, r0
 8008fde:	4601      	mov	r1, r0
 8008fe0:	428a      	cmp	r2, r1
 8008fe2:	d100      	bne.n	8008fe6 <memmove+0x2a>
 8008fe4:	bd10      	pop	{r4, pc}
 8008fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fee:	e7f7      	b.n	8008fe0 <memmove+0x24>

08008ff0 <_sbrk_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d06      	ldr	r5, [pc, #24]	@ (800900c <_sbrk_r+0x1c>)
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	602b      	str	r3, [r5, #0]
 8008ffc:	f7f7 ff6c 	bl	8000ed8 <_sbrk>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_sbrk_r+0x1a>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b103      	cbz	r3, 800900a <_sbrk_r+0x1a>
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	20000dd0 	.word	0x20000dd0

08009010 <memcpy>:
 8009010:	440a      	add	r2, r1
 8009012:	4291      	cmp	r1, r2
 8009014:	f100 33ff 	add.w	r3, r0, #4294967295
 8009018:	d100      	bne.n	800901c <memcpy+0xc>
 800901a:	4770      	bx	lr
 800901c:	b510      	push	{r4, lr}
 800901e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009026:	4291      	cmp	r1, r2
 8009028:	d1f9      	bne.n	800901e <memcpy+0xe>
 800902a:	bd10      	pop	{r4, pc}

0800902c <_realloc_r>:
 800902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009030:	4607      	mov	r7, r0
 8009032:	4614      	mov	r4, r2
 8009034:	460d      	mov	r5, r1
 8009036:	b921      	cbnz	r1, 8009042 <_realloc_r+0x16>
 8009038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800903c:	4611      	mov	r1, r2
 800903e:	f7ff bc4d 	b.w	80088dc <_malloc_r>
 8009042:	b92a      	cbnz	r2, 8009050 <_realloc_r+0x24>
 8009044:	f7ff fbde 	bl	8008804 <_free_r>
 8009048:	4625      	mov	r5, r4
 800904a:	4628      	mov	r0, r5
 800904c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009050:	f000 f81a 	bl	8009088 <_malloc_usable_size_r>
 8009054:	4284      	cmp	r4, r0
 8009056:	4606      	mov	r6, r0
 8009058:	d802      	bhi.n	8009060 <_realloc_r+0x34>
 800905a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800905e:	d8f4      	bhi.n	800904a <_realloc_r+0x1e>
 8009060:	4621      	mov	r1, r4
 8009062:	4638      	mov	r0, r7
 8009064:	f7ff fc3a 	bl	80088dc <_malloc_r>
 8009068:	4680      	mov	r8, r0
 800906a:	b908      	cbnz	r0, 8009070 <_realloc_r+0x44>
 800906c:	4645      	mov	r5, r8
 800906e:	e7ec      	b.n	800904a <_realloc_r+0x1e>
 8009070:	42b4      	cmp	r4, r6
 8009072:	4622      	mov	r2, r4
 8009074:	4629      	mov	r1, r5
 8009076:	bf28      	it	cs
 8009078:	4632      	movcs	r2, r6
 800907a:	f7ff ffc9 	bl	8009010 <memcpy>
 800907e:	4629      	mov	r1, r5
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff fbbf 	bl	8008804 <_free_r>
 8009086:	e7f1      	b.n	800906c <_realloc_r+0x40>

08009088 <_malloc_usable_size_r>:
 8009088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800908c:	1f18      	subs	r0, r3, #4
 800908e:	2b00      	cmp	r3, #0
 8009090:	bfbc      	itt	lt
 8009092:	580b      	ldrlt	r3, [r1, r0]
 8009094:	18c0      	addlt	r0, r0, r3
 8009096:	4770      	bx	lr

08009098 <_init>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	bf00      	nop
 800909c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909e:	bc08      	pop	{r3}
 80090a0:	469e      	mov	lr, r3
 80090a2:	4770      	bx	lr

080090a4 <_fini>:
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a6:	bf00      	nop
 80090a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090aa:	bc08      	pop	{r3}
 80090ac:	469e      	mov	lr, r3
 80090ae:	4770      	bx	lr
