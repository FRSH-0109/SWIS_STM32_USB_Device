
SWIS_USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006624  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080067bc  080067bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006818  08006818  0000811c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006820  08006820  0000811c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006824  08006824  00007824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08006828  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  2000011c  08006944  0000811c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08006944  00008b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c578  00000000  00000000  0000814c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002826  00000000  00000000  000146c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00016ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080f  00000000  00000000  000179e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017daa  00000000  00000000  000181f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed08  00000000  00000000  0002ffa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874f0  00000000  00000000  0003eca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000c61dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000c8d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000011c 	.word	0x2000011c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080067a4 	.word	0x080067a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000120 	.word	0x20000120
 80001d4:	080067a4 	.word	0x080067a4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	@ 0x30
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 031c 	add.w	r3, r7, #28
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
 800051e:	4b93      	ldr	r3, [pc, #588]	@ (800076c <MX_GPIO_Init+0x268>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a92      	ldr	r2, [pc, #584]	@ (800076c <MX_GPIO_Init+0x268>)
 8000524:	f043 0310 	orr.w	r3, r3, #16
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b90      	ldr	r3, [pc, #576]	@ (800076c <MX_GPIO_Init+0x268>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0310 	and.w	r3, r3, #16
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	4b8c      	ldr	r3, [pc, #560]	@ (800076c <MX_GPIO_Init+0x268>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a8b      	ldr	r2, [pc, #556]	@ (800076c <MX_GPIO_Init+0x268>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b89      	ldr	r3, [pc, #548]	@ (800076c <MX_GPIO_Init+0x268>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	4b85      	ldr	r3, [pc, #532]	@ (800076c <MX_GPIO_Init+0x268>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a84      	ldr	r2, [pc, #528]	@ (800076c <MX_GPIO_Init+0x268>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b82      	ldr	r3, [pc, #520]	@ (800076c <MX_GPIO_Init+0x268>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	4b7e      	ldr	r3, [pc, #504]	@ (800076c <MX_GPIO_Init+0x268>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a7d      	ldr	r2, [pc, #500]	@ (800076c <MX_GPIO_Init+0x268>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b7b      	ldr	r3, [pc, #492]	@ (800076c <MX_GPIO_Init+0x268>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	4b77      	ldr	r3, [pc, #476]	@ (800076c <MX_GPIO_Init+0x268>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a76      	ldr	r2, [pc, #472]	@ (800076c <MX_GPIO_Init+0x268>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b74      	ldr	r3, [pc, #464]	@ (800076c <MX_GPIO_Init+0x268>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b70      	ldr	r3, [pc, #448]	@ (800076c <MX_GPIO_Init+0x268>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a6f      	ldr	r2, [pc, #444]	@ (800076c <MX_GPIO_Init+0x268>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b6d      	ldr	r3, [pc, #436]	@ (800076c <MX_GPIO_Init+0x268>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2108      	movs	r1, #8
 80005c6:	486a      	ldr	r0, [pc, #424]	@ (8000770 <MX_GPIO_Init+0x26c>)
 80005c8:	f000 fd30 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2101      	movs	r1, #1
 80005d0:	4868      	ldr	r0, [pc, #416]	@ (8000774 <MX_GPIO_Init+0x270>)
 80005d2:	f000 fd2b 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005d6:	2200      	movs	r2, #0
 80005d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80005dc:	4866      	ldr	r0, [pc, #408]	@ (8000778 <MX_GPIO_Init+0x274>)
 80005de:	f000 fd25 	bl	800102c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005e2:	2304      	movs	r3, #4
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	485e      	ldr	r0, [pc, #376]	@ (8000770 <MX_GPIO_Init+0x26c>)
 80005f6:	f000 fb95 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005fa:	2308      	movs	r3, #8
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	4857      	ldr	r0, [pc, #348]	@ (8000770 <MX_GPIO_Init+0x26c>)
 8000612:	f000 fb87 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000616:	2332      	movs	r3, #50	@ 0x32
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800061a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800061e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4619      	mov	r1, r3
 800062a:	4851      	ldr	r0, [pc, #324]	@ (8000770 <MX_GPIO_Init+0x26c>)
 800062c:	f000 fb7a 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	484b      	ldr	r0, [pc, #300]	@ (8000774 <MX_GPIO_Init+0x270>)
 8000648:	f000 fb6c 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800064c:	2308      	movs	r3, #8
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800065c:	2305      	movs	r3, #5
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4843      	ldr	r0, [pc, #268]	@ (8000774 <MX_GPIO_Init+0x270>)
 8000668:	f000 fb5c 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000670:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	483e      	ldr	r0, [pc, #248]	@ (800077c <MX_GPIO_Init+0x278>)
 8000682:	f000 fb4f 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000686:	2310      	movs	r3, #16
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000696:	2306      	movs	r3, #6
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4836      	ldr	r0, [pc, #216]	@ (800077c <MX_GPIO_Init+0x278>)
 80006a2:	f000 fb3f 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80006a6:	23e0      	movs	r3, #224	@ 0xe0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006b6:	2305      	movs	r3, #5
 80006b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	482e      	ldr	r0, [pc, #184]	@ (800077c <MX_GPIO_Init+0x278>)
 80006c2:	f000 fb2f 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80006c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006d8:	2305      	movs	r3, #5
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4827      	ldr	r0, [pc, #156]	@ (8000780 <MX_GPIO_Init+0x27c>)
 80006e4:	f000 fb1e 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006e8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80006ec:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	481d      	ldr	r0, [pc, #116]	@ (8000778 <MX_GPIO_Init+0x274>)
 8000702:	f000 fb0f 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000706:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000718:	2306      	movs	r3, #6
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4814      	ldr	r0, [pc, #80]	@ (8000774 <MX_GPIO_Init+0x270>)
 8000724:	f000 fafe 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	480f      	ldr	r0, [pc, #60]	@ (8000778 <MX_GPIO_Init+0x274>)
 800073c:	f000 faf2 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000740:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000746:	2312      	movs	r3, #18
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000752:	2304      	movs	r3, #4
 8000754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4808      	ldr	r0, [pc, #32]	@ (8000780 <MX_GPIO_Init+0x27c>)
 800075e:	f000 fae1 	bl	8000d24 <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	@ 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40021000 	.word	0x40021000
 8000774:	40020800 	.word	0x40020800
 8000778:	40020c00 	.word	0x40020c00
 800077c:	40020000 	.word	0x40020000
 8000780:	40020400 	.word	0x40020400

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 f924 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f812 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f7ff feb8 	bl	8000504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000794:	f005 fb9e 	bl	8005ed4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <main+0x2c>)
 800079e:	f000 fc5e 	bl	800105e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007a6:	f000 f987 	bl	8000ab8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007aa:	bf00      	nop
 80007ac:	e7f4      	b.n	8000798 <main+0x14>
 80007ae:	bf00      	nop
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	@ 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 ffc2 	bl	800674c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <SystemClock_Config+0xd0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <SystemClock_Config+0xd0>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e8:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <SystemClock_Config+0xd0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a22      	ldr	r2, [pc, #136]	@ (8000888 <SystemClock_Config+0xd4>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <SystemClock_Config+0xd4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000810:	2303      	movs	r3, #3
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081a:	2301      	movs	r3, #1
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2310      	movs	r3, #16
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000830:	2348      	movs	r3, #72	@ 0x48
 8000832:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000834:	2306      	movs	r3, #6
 8000836:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000838:	2303      	movs	r3, #3
 800083a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fe61 	bl	8002508 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800084c:	f000 f81e 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f002 f8c3 	bl	80029f8 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000878:	f000 f808 	bl	800088c <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	@ 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008d6:	2007      	movs	r0, #7
 80008d8:	f000 f9e2 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <NMI_Handler+0x4>

080008f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <MemManage_Handler+0x4>

08000900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <UsageFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093e:	f000 f89b 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <OTG_FS_IRQHandler+0x10>)
 800094e:	f000 fce4 	bl	800131a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000061c 	.word	0x2000061c

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f005 fed5 	bl	800675c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fee7 	bl	8000784 <main>
  bx  lr    
 80009b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80009c4:	08006828 	.word	0x08006828
  ldr r2, =_sbss
 80009c8:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80009cc:	20000b14 	.word	0x20000b14

080009d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <HAL_Init+0x40>)
 80009de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_Init+0x40>)
 80009ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_Init+0x40>)
 80009f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f94f 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff ff46 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f967 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f92f 	bl	8000cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	@ (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000138 	.word	0x20000138

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000138 	.word	0x20000138

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff ffee 	bl	8000aa0 <HAL_GetTick>
 8000ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_Delay+0x44>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ade:	bf00      	nop
 8000ae0:	f7ff ffde 	bl	8000aa0 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	@ (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e159      	b.n	8000ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 8148 	bne.w	8000fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d005      	beq.n	8000d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d017      	beq.n	8000e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80a2 	beq.w	8000fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b57      	ldr	r3, [pc, #348]	@ (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a56      	ldr	r2, [pc, #344]	@ (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b54      	ldr	r3, [pc, #336]	@ (800100c <HAL_GPIO_Init+0x2e8>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a52      	ldr	r2, [pc, #328]	@ (8001010 <HAL_GPIO_Init+0x2ec>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a49      	ldr	r2, [pc, #292]	@ (8001014 <HAL_GPIO_Init+0x2f0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0x202>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a48      	ldr	r2, [pc, #288]	@ (8001018 <HAL_GPIO_Init+0x2f4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0x1fe>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a47      	ldr	r2, [pc, #284]	@ (800101c <HAL_GPIO_Init+0x2f8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00d      	beq.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a46      	ldr	r2, [pc, #280]	@ (8001020 <HAL_GPIO_Init+0x2fc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x1f6>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a45      	ldr	r2, [pc, #276]	@ (8001024 <HAL_GPIO_Init+0x300>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_GPIO_Init+0x1f2>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f16:	2307      	movs	r3, #7
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f26:	2300      	movs	r3, #0
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	@ (8001010 <HAL_GPIO_Init+0x2ec>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b38      	ldr	r3, [pc, #224]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a24      	ldr	r2, [pc, #144]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8001028 <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	f67f aea2 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	@ 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40013800 	.word	0x40013800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021000 	.word	0x40021000
 8001028:	40013c00 	.word	0x40013c00

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001048:	e003      	b.n	8001052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	041a      	lsls	r2, r3, #16
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43d9      	mvns	r1, r3
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	400b      	ands	r3, r1
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af02      	add	r7, sp, #8
 8001098:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e101      	b.n	80012a8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f005 f83e 	bl	8006140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010d2:	d102      	bne.n	80010da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 ff99 	bl	8003016 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7c1a      	ldrb	r2, [r3, #16]
 80010ec:	f88d 2000 	strb.w	r2, [sp]
 80010f0:	3304      	adds	r3, #4
 80010f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f4:	f001 fe78 	bl	8002de8 <USB_CoreInit>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2202      	movs	r2, #2
 8001102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0ce      	b.n	80012a8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f001 ff91 	bl	8003038 <USB_SetCurrentMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0bf      	b.n	80012a8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e04a      	b.n	80011c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	3315      	adds	r3, #21
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3314      	adds	r3, #20
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	b298      	uxth	r0, r3
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	332e      	adds	r3, #46	@ 0x2e
 800116a:	4602      	mov	r2, r0
 800116c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3318      	adds	r3, #24
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	331c      	adds	r3, #28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	3320      	adds	r3, #32
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	3324      	adds	r3, #36	@ 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d3af      	bcc.n	800112e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e044      	b.n	800125e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3b5      	bcc.n	80011d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7c1a      	ldrb	r2, [r3, #16]
 8001270:	f88d 2000 	strb.w	r2, [sp]
 8001274:	3304      	adds	r3, #4
 8001276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001278:	f001 ff2a 	bl	80030d0 <USB_DevInit>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2202      	movs	r2, #2
 8001286:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00c      	b.n	80012a8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 ff74 	bl	800418e <USB_DevDisconnect>

  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_PCD_Start+0x1c>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e022      	b.n	8001312 <HAL_PCD_Start+0x62>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d009      	beq.n	80012f4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fe7b 	bl	8002ff4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 ff22 	bl	800414c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800131a:	b590      	push	{r4, r7, lr}
 800131c:	b08d      	sub	sp, #52	@ 0x34
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 ffe0 	bl	80042f6 <USB_GetMode>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 848c 	bne.w	8001c56 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f002 ff44 	bl	80041d0 <USB_ReadInterrupts>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8482 	beq.w	8001c54 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f002 ff31 	bl	80041d0 <USB_ReadInterrupts>
 800136e:	4603      	mov	r3, r0
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b02      	cmp	r3, #2
 8001376:	d107      	bne.n	8001388 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f002 0202 	and.w	r2, r2, #2
 8001386:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 ff1f 	bl	80041d0 <USB_ReadInterrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b10      	cmp	r3, #16
 800139a:	d161      	bne.n	8001460 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0210 	bic.w	r2, r2, #16
 80013aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f003 020f 	and.w	r2, r3, #15
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	3304      	adds	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013d6:	d124      	bne.n	8001422 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d035      	beq.n	8001450 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	6a38      	ldr	r0, [r7, #32]
 80013f8:	f002 fd56 	bl	8003ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001408:	441a      	add	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141a:	441a      	add	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	e016      	b.n	8001450 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001428:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800142c:	d110      	bne.n	8001450 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001434:	2208      	movs	r2, #8
 8001436:	4619      	mov	r1, r3
 8001438:	6a38      	ldr	r0, [r7, #32]
 800143a:	f002 fd35 	bl	8003ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	441a      	add	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0210 	orr.w	r2, r2, #16
 800145e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f002 feb3 	bl	80041d0 <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001470:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001474:	f040 80a7 	bne.w	80015c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 feb8 	bl	80041f6 <USB_ReadDevAllOutEpInterrupt>
 8001486:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001488:	e099      	b.n	80015be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 808e 	beq.w	80015b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fedc 	bl	800425e <USB_ReadDevOutEPInterrupt>
 80014a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00c      	beq.n	80014cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014be:	461a      	mov	r2, r3
 80014c0:	2301      	movs	r3, #1
 80014c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fe8c 	bl	80021e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2308      	movs	r3, #8
 80014e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 ff62 	bl	80023b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001506:	461a      	mov	r2, r3
 8001508:	2310      	movs	r3, #16
 800150a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d030      	beq.n	8001578 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151e:	2b80      	cmp	r3, #128	@ 0x80
 8001520:	d109      	bne.n	8001536 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001530:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001534:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	3304      	adds	r3, #4
 800154a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2200      	movs	r2, #0
 8001558:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f004 fef7 	bl	8006354 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001572:	461a      	mov	r2, r3
 8001574:	2302      	movs	r3, #2
 8001576:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800158e:	461a      	mov	r2, r3
 8001590:	2320      	movs	r3, #32
 8001592:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015aa:	461a      	mov	r2, r3
 80015ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f af62 	bne.w	800148a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fe00 	bl	80041d0 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015da:	f040 80db 	bne.w	8001794 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fe21 	bl	800422a <USB_ReadDevAllInEpInterrupt>
 80015e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015ee:	e0cd      	b.n	800178c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80c2 	beq.w	8001780 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fe47 	bl	800429a <USB_ReadDevInEPInterrupt>
 800160c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d057      	beq.n	80016c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	2201      	movs	r2, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800162c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	69f9      	ldr	r1, [r7, #28]
 8001634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001638:	4013      	ands	r3, r2
 800163a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001648:	461a      	mov	r2, r3
 800164a:	2301      	movs	r3, #1
 800164c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d132      	bne.n	80016bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3320      	adds	r3, #32
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4403      	add	r3, r0
 8001676:	331c      	adds	r3, #28
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4419      	add	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4403      	add	r3, r0
 800168a:	3320      	adds	r3, #32
 800168c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	2b00      	cmp	r3, #0
 8001692:	d113      	bne.n	80016bc <HAL_PCD_IRQHandler+0x3a2>
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	4613      	mov	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	3324      	adds	r3, #36	@ 0x24
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d108      	bne.n	80016bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016b4:	461a      	mov	r2, r3
 80016b6:	2101      	movs	r1, #1
 80016b8:	f002 fe4e 	bl	8004358 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4619      	mov	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f004 fdcb 	bl	800625e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016de:	461a      	mov	r2, r3
 80016e0:	2308      	movs	r3, #8
 80016e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016fa:	461a      	mov	r2, r3
 80016fc:	2310      	movs	r3, #16
 80016fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001716:	461a      	mov	r2, r3
 8001718:	2340      	movs	r3, #64	@ 0x40
 800171a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d023      	beq.n	800176e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001726:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001728:	6a38      	ldr	r0, [r7, #32]
 800172a:	f001 fe35 	bl	8003398 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800172e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001730:	4613      	mov	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	3310      	adds	r3, #16
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	3304      	adds	r3, #4
 8001740:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	78db      	ldrb	r3, [r3, #3]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2200      	movs	r2, #0
 800174e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	b2db      	uxtb	r3, r3
 8001754:	4619      	mov	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f004 fe0e 	bl	8006378 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	015a      	lsls	r2, r3, #5
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	4413      	add	r3, r2
 8001764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001768:	461a      	mov	r2, r3
 800176a:	2302      	movs	r3, #2
 800176c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001778:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fca5 	bl	80020ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	3301      	adds	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	2b00      	cmp	r3, #0
 8001790:	f47f af2e 	bne.w	80015f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f002 fd19 	bl	80041d0 <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017a8:	d122      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017d0:	2100      	movs	r1, #0
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fe8c 	bl	80024f0 <HAL_PCDEx_LPM_Callback>
 80017d8:	e002      	b.n	80017e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f004 fdac 	bl	8006338 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 fceb 	bl	80041d0 <USB_ReadInterrupts>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001804:	d112      	bne.n	800182c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d102      	bne.n	800181c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f004 fd68 	bl	80062ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800182a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fccd 	bl	80041d0 <USB_ReadInterrupts>
 8001836:	4603      	mov	r3, r0
 8001838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001840:	f040 80b7 	bne.w	80019b2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2110      	movs	r1, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fd9a 	bl	8003398 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001868:	e046      	b.n	80018f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800186a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001876:	461a      	mov	r2, r3
 8001878:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800187c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800188e:	0151      	lsls	r1, r2, #5
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	440a      	add	r2, r1
 8001894:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001898:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800189c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018aa:	461a      	mov	r2, r3
 80018ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c2:	0151      	lsls	r1, r2, #5
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	440a      	add	r2, r1
 80018c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e2:	0151      	lsls	r1, r2, #5
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	440a      	add	r2, r1
 80018e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f4:	3301      	adds	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	461a      	mov	r2, r3
 80018fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001900:	4293      	cmp	r3, r2
 8001902:	d3b2      	bcc.n	800186a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001912:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001916:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7bdb      	ldrb	r3, [r3, #15]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d016      	beq.n	800194e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001930:	f043 030b 	orr.w	r3, r3, #11
 8001934:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800193e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001946:	f043 030b 	orr.w	r3, r3, #11
 800194a:	6453      	str	r3, [r2, #68]	@ 0x44
 800194c:	e015      	b.n	800197a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800195c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001960:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001964:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001974:	f043 030b 	orr.w	r3, r3, #11
 8001978:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001988:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800198c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800199c:	461a      	mov	r2, r3
 800199e:	f002 fcdb 	bl	8004358 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fc0a 	bl	80041d0 <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019c6:	d123      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fca0 	bl	8004312 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 fd57 	bl	800348a <USB_GetDevSpeed>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681c      	ldr	r4, [r3, #0]
 80019e8:	f001 f9f2 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 80019ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019f2:	461a      	mov	r2, r3
 80019f4:	4620      	mov	r0, r4
 80019f6:	f001 fa5b 	bl	8002eb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f004 fc57 	bl	80062ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 fbdb 	bl	80041d0 <USB_ReadInterrupts>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d10a      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f004 fc34 	bl	8006292 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f002 0208 	and.w	r2, r2, #8
 8001a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fbc6 	bl	80041d0 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4a:	2b80      	cmp	r3, #128	@ 0x80
 8001a4c:	d123      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5e:	e014      	b.n	8001a8a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 faf2 	bl	8002068 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	3301      	adds	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	791b      	ldrb	r3, [r3, #4]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d3e4      	bcc.n	8001a60 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fb98 	bl	80041d0 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aaa:	d13c      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aac:	2301      	movs	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab0:	e02b      	b.n	8001b0a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	3318      	adds	r3, #24
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d115      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ad8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da12      	bge.n	8001b04 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3317      	adds	r3, #23
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fab2 	bl	8002068 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	3301      	adds	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	791b      	ldrb	r3, [r3, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d3cd      	bcc.n	8001ab2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fb50 	bl	80041d0 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b3a:	d156      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b40:	e045      	b.n	8001bce <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d12e      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	da2b      	bge.n	8001bc8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	0c1a      	lsrs	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b7a:	4053      	eors	r3, r2
 8001b7c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d121      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc4:	6053      	str	r3, [r2, #4]
            break;
 8001bc6:	e008      	b.n	8001bda <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	3301      	adds	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	791b      	ldrb	r3, [r3, #4]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d3b3      	bcc.n	8001b42 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 faee 	bl	80041d0 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfe:	d10a      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f004 fbcb 	bl	800639c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fad8 	bl	80041d0 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d115      	bne.n	8001c56 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f004 fbbb 	bl	80063b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e000      	b.n	8001c56 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c54:	bf00      	nop
    }
  }
}
 8001c56:	3734      	adds	r7, #52	@ 0x34
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd90      	pop	{r4, r7, pc}

08001c5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_PCD_SetAddress+0x1a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e012      	b.n	8001c9c <HAL_PCD_SetAddress+0x40>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fa37 	bl	8004100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	70fb      	strb	r3, [r7, #3]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	803b      	strh	r3, [r7, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da0f      	bge.n	8001cea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f003 020f 	and.w	r2, r3, #15
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	3310      	adds	r3, #16
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
 8001ce8:	e00f      	b.n	8001d0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 020f 	and.w	r2, r3, #15
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d16:	883b      	ldrh	r3, [r7, #0]
 8001d18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	78ba      	ldrb	r2, [r7, #2]
 8001d24:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d38:	78bb      	ldrb	r3, [r7, #2]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d102      	bne.n	8001d44 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_PCD_EP_Open+0xae>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e00e      	b.n	8001d70 <HAL_PCD_EP_Open+0xcc>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 fbb7 	bl	80034d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da0f      	bge.n	8001dac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3310      	adds	r3, #16
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3304      	adds	r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	705a      	strb	r2, [r3, #1]
 8001daa:	e00f      	b.n	8001dcc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 020f 	and.w	r2, r3, #15
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_PCD_EP_Close+0x6e>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e00e      	b.n	8001e04 <HAL_PCD_EP_Close+0x8c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 fbf5 	bl	80035e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	f003 020f 	and.w	r2, r3, #15
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	799b      	ldrb	r3, [r3, #6]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	799b      	ldrb	r3, [r3, #6]
 8001e70:	461a      	mov	r2, r3
 8001e72:	6979      	ldr	r1, [r7, #20]
 8001e74:	f001 fc92 	bl	800379c <USB_EPStartXfer>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	f003 020f 	and.w	r2, r3, #15
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	3310      	adds	r3, #16
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	799b      	ldrb	r3, [r3, #6]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d102      	bne.n	8001edc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	799b      	ldrb	r3, [r3, #6]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6979      	ldr	r1, [r7, #20]
 8001ee8:	f001 fc58 	bl	800379c <USB_EPStartXfer>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	7912      	ldrb	r2, [r2, #4]
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e04f      	b.n	8001fb4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da0f      	bge.n	8001f3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 020f 	and.w	r2, r3, #15
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	3310      	adds	r3, #16
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	705a      	strb	r2, [r3, #1]
 8001f3a:	e00d      	b.n	8001f58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3304      	adds	r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_PCD_EP_SetStall+0x82>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e01d      	b.n	8001fb4 <HAL_PCD_EP_SetStall+0xbe>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68f9      	ldr	r1, [r7, #12]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 ffe6 	bl	8003f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7999      	ldrb	r1, [r3, #6]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f002 f9d7 	bl	8004358 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	7912      	ldrb	r2, [r2, #4]
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e042      	b.n	8002060 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da0f      	bge.n	8002002 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3310      	adds	r3, #16
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	705a      	strb	r2, [r3, #1]
 8002000:	e00f      	b.n	8002022 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 020f 	and.w	r2, r3, #15
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	3304      	adds	r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	b2da      	uxtb	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_PCD_EP_ClrStall+0x86>
 800203e:	2302      	movs	r3, #2
 8002040:	e00e      	b.n	8002060 <HAL_PCD_EP_ClrStall+0xa4>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	4618      	mov	r0, r3
 8002052:	f001 ffef 	bl	8004034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b00      	cmp	r3, #0
 800207a:	da0c      	bge.n	8002096 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3310      	adds	r3, #16
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e00c      	b.n	80020b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 020f 	and.w	r2, r3, #15
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	3304      	adds	r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f001 fe0e 	bl	8003cd8 <USB_EPStopXfer>
 80020bc:	4603      	mov	r3, r0
 80020be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020c0:	7afb      	ldrb	r3, [r7, #11]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b08a      	sub	sp, #40	@ 0x28
 80020ce:	af02      	add	r7, sp, #8
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	3310      	adds	r3, #16
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	3304      	adds	r3, #4
 80020f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d901      	bls.n	8002102 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06b      	b.n	80021da <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	429a      	cmp	r2, r3
 8002116:	d902      	bls.n	800211e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3303      	adds	r3, #3
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002126:	e02a      	b.n	800217e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	429a      	cmp	r2, r3
 800213c:	d902      	bls.n	8002144 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3303      	adds	r3, #3
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68d9      	ldr	r1, [r3, #12]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4603      	mov	r3, r0
 8002160:	6978      	ldr	r0, [r7, #20]
 8002162:	f001 fe63 	bl	8003e2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	441a      	add	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	441a      	add	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	429a      	cmp	r2, r3
 8002192:	d809      	bhi.n	80021a8 <PCD_WriteEmptyTxFifo+0xde>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800219c:	429a      	cmp	r2, r3
 800219e:	d203      	bcs.n	80021a8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1bf      	bne.n	8002128 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d811      	bhi.n	80021d8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	2201      	movs	r2, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	6939      	ldr	r1, [r7, #16]
 80021d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021d4:	4013      	ands	r3, r2
 80021d6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	333c      	adds	r3, #60	@ 0x3c
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	799b      	ldrb	r3, [r3, #6]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d17b      	bne.n	8002312 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4a61      	ldr	r2, [pc, #388]	@ (80023ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	f240 80b9 	bls.w	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80b3 	beq.w	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002246:	461a      	mov	r2, r3
 8002248:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800224c:	6093      	str	r3, [r2, #8]
 800224e:	e0a7      	b.n	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002266:	461a      	mov	r2, r3
 8002268:	2320      	movs	r3, #32
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	e098      	b.n	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 8093 	bne.w	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	4a4b      	ldr	r2, [pc, #300]	@ (80023ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d90f      	bls.n	80022a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800229e:	6093      	str	r3, [r2, #8]
 80022a0:	e07e      	b.n	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	0159      	lsls	r1, r3, #5
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	1ad2      	subs	r2, r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d114      	bne.n	8002304 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022ec:	461a      	mov	r2, r3
 80022ee:	2101      	movs	r1, #1
 80022f0:	f002 f832 	bl	8004358 <USB_EP0_OutStart>
 80022f4:	e006      	b.n	8002304 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	441a      	add	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f003 ff8c 	bl	8006228 <HAL_PCD_DataOutStageCallback>
 8002310:	e046      	b.n	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	4a26      	ldr	r2, [pc, #152]	@ (80023b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d124      	bne.n	8002364 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	4413      	add	r3, r2
 800232c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002330:	461a      	mov	r2, r3
 8002332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002336:	6093      	str	r3, [r2, #8]
 8002338:	e032      	b.n	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	4413      	add	r3, r2
 800234c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002350:	461a      	mov	r2, r3
 8002352:	2320      	movs	r3, #32
 8002354:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f003 ff63 	bl	8006228 <HAL_PCD_DataOutStageCallback>
 8002362:	e01d      	b.n	80023a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d114      	bne.n	8002394 <PCD_EP_OutXfrComplete_int+0x1b0>
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800238c:	461a      	mov	r2, r3
 800238e:	2100      	movs	r1, #0
 8002390:	f001 ffe2 	bl	8004358 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f003 ff44 	bl	8006228 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	4f54300a 	.word	0x4f54300a
 80023b0:	4f54310a 	.word	0x4f54310a

080023b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	333c      	adds	r3, #60	@ 0x3c
 80023cc:	3304      	adds	r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a15      	ldr	r2, [pc, #84]	@ (800243c <PCD_EP_OutSetupPacket_int+0x88>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d90e      	bls.n	8002408 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002400:	461a      	mov	r2, r3
 8002402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002406:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f003 fefb 	bl	8006204 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <PCD_EP_OutSetupPacket_int+0x88>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d90c      	bls.n	8002430 <PCD_EP_OutSetupPacket_int+0x7c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	799b      	ldrb	r3, [r3, #6]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002428:	461a      	mov	r2, r3
 800242a:	2101      	movs	r1, #1
 800242c:	f001 ff94 	bl	8004358 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	4f54300a 	.word	0x4f54300a

08002440 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
 800244c:	4613      	mov	r3, r2
 800244e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800245e:	883b      	ldrh	r3, [r7, #0]
 8002460:	0419      	lsls	r1, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	430a      	orrs	r2, r1
 800246a:	629a      	str	r2, [r3, #40]	@ 0x28
 800246c:	e028      	b.n	80024c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4413      	add	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e00d      	b.n	800249e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3340      	adds	r3, #64	@ 0x40
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	4413      	add	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	3301      	adds	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d3ec      	bcc.n	8002482 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024a8:	883b      	ldrh	r3, [r7, #0]
 80024aa:	0418      	lsls	r0, r3, #16
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	4302      	orrs	r2, r0
 80024b8:	3340      	adds	r3, #64	@ 0x40
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e267      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d075      	beq.n	8002612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002526:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b04      	cmp	r3, #4
 8002530:	d00c      	beq.n	800254c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002532:	4b85      	ldr	r3, [pc, #532]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253a:	2b08      	cmp	r3, #8
 800253c:	d112      	bne.n	8002564 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253e:	4b82      	ldr	r3, [pc, #520]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800254a:	d10b      	bne.n	8002564 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	4b7e      	ldr	r3, [pc, #504]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05b      	beq.n	8002610 <HAL_RCC_OscConfig+0x108>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d157      	bne.n	8002610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e242      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256c:	d106      	bne.n	800257c <HAL_RCC_OscConfig+0x74>
 800256e:	4b76      	ldr	r3, [pc, #472]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a75      	ldr	r2, [pc, #468]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e01d      	b.n	80025b8 <HAL_RCC_OscConfig+0xb0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x98>
 8002586:	4b70      	ldr	r3, [pc, #448]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6f      	ldr	r2, [pc, #444]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b6d      	ldr	r3, [pc, #436]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6c      	ldr	r2, [pc, #432]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xb0>
 80025a0:	4b69      	ldr	r3, [pc, #420]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a68      	ldr	r2, [pc, #416]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b66      	ldr	r3, [pc, #408]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a65      	ldr	r2, [pc, #404]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fa6e 	bl	8000aa0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fa6a 	bl	8000aa0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e207      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b5b      	ldr	r3, [pc, #364]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0xc0>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fa5a 	bl	8000aa0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fa56 	bl	8000aa0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1f3      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	4b51      	ldr	r3, [pc, #324]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0xe8>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d063      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800261e:	4b4a      	ldr	r3, [pc, #296]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262a:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002632:	2b08      	cmp	r3, #8
 8002634:	d11c      	bne.n	8002670 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002636:	4b44      	ldr	r3, [pc, #272]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x152>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1c7      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4937      	ldr	r1, [pc, #220]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	e03a      	b.n	80026e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002678:	4b34      	ldr	r3, [pc, #208]	@ (800274c <HAL_RCC_OscConfig+0x244>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fa0f 	bl	8000aa0 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe fa0b 	bl	8000aa0 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e1a8      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4925      	ldr	r1, [pc, #148]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ba:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_RCC_OscConfig+0x244>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe f9ee 	bl	8000aa0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c8:	f7fe f9ea 	bl	8000aa0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e187      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d036      	beq.n	8002760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_RCC_OscConfig+0x248>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe f9ce 	bl	8000aa0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe f9ca 	bl	8000aa0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e167      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800271c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x200>
 8002726:	e01b      	b.n	8002760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_OscConfig+0x248>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe f9b7 	bl	8000aa0 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	e00e      	b.n	8002754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002736:	f7fe f9b3 	bl	8000aa0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d907      	bls.n	8002754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e150      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
 8002748:	40023800 	.word	0x40023800
 800274c:	42470000 	.word	0x42470000
 8002750:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b88      	ldr	r3, [pc, #544]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ea      	bne.n	8002736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8097 	beq.w	800289c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b81      	ldr	r3, [pc, #516]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	4b7d      	ldr	r3, [pc, #500]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	4a7c      	ldr	r2, [pc, #496]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	@ 0x40
 800278e:	4b7a      	ldr	r3, [pc, #488]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b77      	ldr	r3, [pc, #476]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b74      	ldr	r3, [pc, #464]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a73      	ldr	r2, [pc, #460]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7fe f973 	bl	8000aa0 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe f96f 	bl	8000aa0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e10c      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b6a      	ldr	r3, [pc, #424]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x2ea>
 80027e4:	4b64      	ldr	r3, [pc, #400]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	4a63      	ldr	r2, [pc, #396]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x324>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x30c>
 80027fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	@ 0x70
 8002806:	4b5c      	ldr	r3, [pc, #368]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280a:	4a5b      	ldr	r2, [pc, #364]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	@ 0x70
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0x324>
 8002814:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002820:	4b55      	ldr	r3, [pc, #340]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	4a54      	ldr	r2, [pc, #336]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe f934 	bl	8000aa0 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe f930 	bl	8000aa0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0cb      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ee      	beq.n	800283c <HAL_RCC_OscConfig+0x334>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7fe f91e 	bl	8000aa0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe f91a 	bl	8000aa0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0b5      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	4b3e      	ldr	r3, [pc, #248]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ee      	bne.n	8002868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002890:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	4a38      	ldr	r2, [pc, #224]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a1 	beq.w	80029e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a6:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d05c      	beq.n	800296c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d141      	bne.n	800293e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b31      	ldr	r3, [pc, #196]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe f8ee 	bl	8000aa0 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe f8ea 	bl	8000aa0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e087      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	019b      	lsls	r3, r3, #6
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	3b01      	subs	r3, #1
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	491b      	ldr	r1, [pc, #108]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe f8c3 	bl	8000aa0 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291e:	f7fe f8bf 	bl	8000aa0 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e05c      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x416>
 800293c:	e054      	b.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe f8ac 	bl	8000aa0 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe f8a8 	bl	8000aa0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e045      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x444>
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e038      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000
 8002980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x4ec>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d028      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d121      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d11a      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b4:	4013      	ands	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029bc:	4293      	cmp	r3, r2
 80029be:	d111      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	3b01      	subs	r3, #1
 80029ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0cc      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b68      	ldr	r3, [pc, #416]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d90c      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b65      	ldr	r3, [pc, #404]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a58      	ldr	r2, [pc, #352]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d044      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d119      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e067      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b37      	ldr	r3, [pc, #220]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4934      	ldr	r1, [pc, #208]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae8:	f7fd ffda 	bl	8000aa0 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fd ffd6 	bl	8000aa0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e04f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d20c      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490a      	ldr	r1, [pc, #40]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd ff3a 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08006808 	.word	0x08006808
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc8:	b094      	sub	sp, #80	@ 0x50
 8002bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bdc:	4b79      	ldr	r3, [pc, #484]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d00d      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	f200 80e1 	bhi.w	8002db0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bf6:	e0db      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b73      	ldr	r3, [pc, #460]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bfc:	e0db      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfe:	4b73      	ldr	r3, [pc, #460]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x208>)
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c02:	e0d8      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c04:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d063      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2e:	2300      	movs	r3, #0
 8002c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c36:	4622      	mov	r2, r4
 8002c38:	462b      	mov	r3, r5
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0159      	lsls	r1, r3, #5
 8002c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c48:	0150      	lsls	r0, r2, #5
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4621      	mov	r1, r4
 8002c50:	1a51      	subs	r1, r2, r1
 8002c52:	6139      	str	r1, [r7, #16]
 8002c54:	4629      	mov	r1, r5
 8002c56:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c68:	4659      	mov	r1, fp
 8002c6a:	018b      	lsls	r3, r1, #6
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c72:	4651      	mov	r1, sl
 8002c74:	018a      	lsls	r2, r1, #6
 8002c76:	4651      	mov	r1, sl
 8002c78:	ebb2 0801 	subs.w	r8, r2, r1
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c96:	4690      	mov	r8, r2
 8002c98:	4699      	mov	r9, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	eb18 0303 	adds.w	r3, r8, r3
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	eb49 0303 	adc.w	r3, r9, r3
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	024b      	lsls	r3, r1, #9
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	024a      	lsls	r2, r1, #9
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cd4:	f7fd fa80 	bl	80001d8 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce0:	e058      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	4611      	mov	r1, r2
 8002cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	464b      	mov	r3, r9
 8002d00:	f04f 0000 	mov.w	r0, #0
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	0159      	lsls	r1, r3, #5
 8002d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0e:	0150      	lsls	r0, r2, #5
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4641      	mov	r1, r8
 8002d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d34:	ebb2 040a 	subs.w	r4, r2, sl
 8002d38:	eb63 050b 	sbc.w	r5, r3, fp
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	18e3      	adds	r3, r4, r3
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	464b      	mov	r3, r9
 8002d58:	eb45 0303 	adc.w	r3, r5, r3
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	028b      	lsls	r3, r1, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d74:	4621      	mov	r1, r4
 8002d76:	028a      	lsls	r2, r1, #10
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	61fa      	str	r2, [r7, #28]
 8002d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d88:	f7fd fa26 	bl	80001d8 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002da4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3750      	adds	r7, #80	@ 0x50
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000

08002de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002de8:	b084      	sub	sp, #16
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	f107 001c 	add.w	r0, r7, #28
 8002df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dfa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d123      	bne.n	8002e4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f001 fae8 	bl	8004414 <USB_CoreReset>
 8002e44:	4603      	mov	r3, r0
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e01b      	b.n	8002e82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f001 fadc 	bl	8004414 <USB_CoreReset>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e74:	e005      	b.n	8002e82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e82:	7fbb      	ldrb	r3, [r7, #30]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10b      	bne.n	8002ea0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f043 0206 	orr.w	r2, r3, #6
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f043 0220 	orr.w	r2, r3, #32
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eac:	b004      	add	sp, #16
 8002eae:	4770      	bx	lr

08002eb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d165      	bne.n	8002f90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4a41      	ldr	r2, [pc, #260]	@ (8002fcc <USB_SetTurnaroundTime+0x11c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d906      	bls.n	8002eda <USB_SetTurnaroundTime+0x2a>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4a40      	ldr	r2, [pc, #256]	@ (8002fd0 <USB_SetTurnaroundTime+0x120>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d202      	bcs.n	8002eda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e062      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd0 <USB_SetTurnaroundTime+0x120>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d306      	bcc.n	8002ef0 <USB_SetTurnaroundTime+0x40>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd4 <USB_SetTurnaroundTime+0x124>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d202      	bcs.n	8002ef0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002eea:	230e      	movs	r3, #14
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e057      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4a38      	ldr	r2, [pc, #224]	@ (8002fd4 <USB_SetTurnaroundTime+0x124>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d306      	bcc.n	8002f06 <USB_SetTurnaroundTime+0x56>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4a37      	ldr	r2, [pc, #220]	@ (8002fd8 <USB_SetTurnaroundTime+0x128>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d202      	bcs.n	8002f06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f00:	230d      	movs	r3, #13
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e04c      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <USB_SetTurnaroundTime+0x128>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d306      	bcc.n	8002f1c <USB_SetTurnaroundTime+0x6c>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4a32      	ldr	r2, [pc, #200]	@ (8002fdc <USB_SetTurnaroundTime+0x12c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d802      	bhi.n	8002f1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f16:	230c      	movs	r3, #12
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e041      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002fdc <USB_SetTurnaroundTime+0x12c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d906      	bls.n	8002f32 <USB_SetTurnaroundTime+0x82>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe0 <USB_SetTurnaroundTime+0x130>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d802      	bhi.n	8002f32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002f2c:	230b      	movs	r3, #11
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e036      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe0 <USB_SetTurnaroundTime+0x130>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d906      	bls.n	8002f48 <USB_SetTurnaroundTime+0x98>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4a29      	ldr	r2, [pc, #164]	@ (8002fe4 <USB_SetTurnaroundTime+0x134>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d802      	bhi.n	8002f48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f42:	230a      	movs	r3, #10
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e02b      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4a26      	ldr	r2, [pc, #152]	@ (8002fe4 <USB_SetTurnaroundTime+0x134>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d906      	bls.n	8002f5e <USB_SetTurnaroundTime+0xae>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4a25      	ldr	r2, [pc, #148]	@ (8002fe8 <USB_SetTurnaroundTime+0x138>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d202      	bcs.n	8002f5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f58:	2309      	movs	r3, #9
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e020      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <USB_SetTurnaroundTime+0x138>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d306      	bcc.n	8002f74 <USB_SetTurnaroundTime+0xc4>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4a20      	ldr	r2, [pc, #128]	@ (8002fec <USB_SetTurnaroundTime+0x13c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d802      	bhi.n	8002f74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002f6e:	2308      	movs	r3, #8
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e015      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4a1d      	ldr	r2, [pc, #116]	@ (8002fec <USB_SetTurnaroundTime+0x13c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d906      	bls.n	8002f8a <USB_SetTurnaroundTime+0xda>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff0 <USB_SetTurnaroundTime+0x140>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d202      	bcs.n	8002f8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002f84:	2307      	movs	r3, #7
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e00a      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e007      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f96:	2309      	movs	r3, #9
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e001      	b.n	8002fa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f9c:	2309      	movs	r3, #9
 8002f9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	00d8acbf 	.word	0x00d8acbf
 8002fd0:	00e4e1c0 	.word	0x00e4e1c0
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	01067380 	.word	0x01067380
 8002fdc:	011a499f 	.word	0x011a499f
 8002fe0:	01312cff 	.word	0x01312cff
 8002fe4:	014ca43f 	.word	0x014ca43f
 8002fe8:	016e3600 	.word	0x016e3600
 8002fec:	01a6ab1f 	.word	0x01a6ab1f
 8002ff0:	01e84800 	.word	0x01e84800

08002ff4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d115      	bne.n	8003086 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003066:	200a      	movs	r0, #10
 8003068:	f7fd fd26 	bl	8000ab8 <HAL_Delay>
      ms += 10U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	330a      	adds	r3, #10
 8003070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f001 f93f 	bl	80042f6 <USB_GetMode>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d01e      	beq.n	80030bc <USB_SetCurrentMode+0x84>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2bc7      	cmp	r3, #199	@ 0xc7
 8003082:	d9f0      	bls.n	8003066 <USB_SetCurrentMode+0x2e>
 8003084:	e01a      	b.n	80030bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d115      	bne.n	80030b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003098:	200a      	movs	r0, #10
 800309a:	f7fd fd0d 	bl	8000ab8 <HAL_Delay>
      ms += 10U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	330a      	adds	r3, #10
 80030a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 f926 	bl	80042f6 <USB_GetMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <USB_SetCurrentMode+0x84>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80030b4:	d9f0      	bls.n	8003098 <USB_SetCurrentMode+0x60>
 80030b6:	e001      	b.n	80030bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e005      	b.n	80030c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2bc8      	cmp	r3, #200	@ 0xc8
 80030c0:	d101      	bne.n	80030c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030d0:	b084      	sub	sp, #16
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80030de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e009      	b.n	8003104 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	3340      	adds	r3, #64	@ 0x40
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	2200      	movs	r2, #0
 80030fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	3301      	adds	r3, #1
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b0e      	cmp	r3, #14
 8003108:	d9f2      	bls.n	80030f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800310a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11c      	bne.n	800314c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	639a      	str	r2, [r3, #56]	@ 0x38
 800314a:	e00b      	b.n	8003164 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800316a:	461a      	mov	r2, r3
 800316c:	2300      	movs	r3, #0
 800316e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003170:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10d      	bne.n	8003194 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003180:	2100      	movs	r1, #0
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f968 	bl	8003458 <USB_SetDevSpeed>
 8003188:	e008      	b.n	800319c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800318a:	2101      	movs	r1, #1
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f963 	bl	8003458 <USB_SetDevSpeed>
 8003192:	e003      	b.n	800319c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003194:	2103      	movs	r1, #3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f95e 	bl	8003458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800319c:	2110      	movs	r1, #16
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8fa 	bl	8003398 <USB_FlushTxFifo>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f924 	bl	80033fc <USB_FlushRxFifo>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c4:	461a      	mov	r2, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d0:	461a      	mov	r2, r3
 80031d2:	2300      	movs	r3, #0
 80031d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031dc:	461a      	mov	r2, r3
 80031de:	2300      	movs	r3, #0
 80031e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e043      	b.n	8003270 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031fe:	d118      	bne.n	8003232 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003212:	461a      	mov	r2, r3
 8003214:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e013      	b.n	8003244 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003228:	461a      	mov	r2, r3
 800322a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e008      	b.n	8003244 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800323e:	461a      	mov	r2, r3
 8003240:	2300      	movs	r3, #0
 8003242:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003250:	461a      	mov	r2, r3
 8003252:	2300      	movs	r3, #0
 8003254:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003262:	461a      	mov	r2, r3
 8003264:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3301      	adds	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003274:	461a      	mov	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4293      	cmp	r3, r2
 800327a:	d3b5      	bcc.n	80031e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e043      	b.n	800330a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003298:	d118      	bne.n	80032cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ac:	461a      	mov	r2, r3
 80032ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e013      	b.n	80032de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e008      	b.n	80032de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d8:	461a      	mov	r2, r3
 80032da:	2300      	movs	r3, #0
 80032dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ea:	461a      	mov	r2, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	3301      	adds	r3, #1
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800330e:	461a      	mov	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4293      	cmp	r3, r2
 8003314:	d3b5      	bcc.n	8003282 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003328:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003336:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003338:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <USB_DevInit+0x2c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003358:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f043 0208 	orr.w	r2, r3, #8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800336c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003370:	2b01      	cmp	r3, #1
 8003372:	d107      	bne.n	8003384 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003384:	7dfb      	ldrb	r3, [r7, #23]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003390:	b004      	add	sp, #16
 8003392:	4770      	bx	lr
 8003394:	803c3800 	.word	0x803c3800

08003398 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033b2:	d901      	bls.n	80033b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e01b      	b.n	80033f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	daf2      	bge.n	80033a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	019b      	lsls	r3, r3, #6
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3301      	adds	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033dc:	d901      	bls.n	80033e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e006      	b.n	80033f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d0f0      	beq.n	80033d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003414:	d901      	bls.n	800341a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e018      	b.n	800344c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	daf2      	bge.n	8003408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2210      	movs	r2, #16
 800342a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003438:	d901      	bls.n	800343e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e006      	b.n	800344c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b10      	cmp	r3, #16
 8003448:	d0f0      	beq.n	800342c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800348a:	b480      	push	{r7}
 800348c:	b087      	sub	sp, #28
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0306 	and.w	r3, r3, #6
 80034a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
 80034ae:	e00a      	b.n	80034c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d002      	beq.n	80034bc <USB_GetDevSpeed+0x32>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b06      	cmp	r3, #6
 80034ba:	d102      	bne.n	80034c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80034bc:	2302      	movs	r3, #2
 80034be:	75fb      	strb	r3, [r7, #23]
 80034c0:	e001      	b.n	80034c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80034c2:	230f      	movs	r3, #15
 80034c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d13a      	bne.n	8003566 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800350e:	4313      	orrs	r3, r2
 8003510:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d155      	bne.n	80035d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	791b      	ldrb	r3, [r3, #4]
 8003542:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003544:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	059b      	lsls	r3, r3, #22
 800354a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800354c:	4313      	orrs	r3, r2
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	440a      	add	r2, r1
 8003556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e036      	b.n	80035d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003584:	4313      	orrs	r3, r2
 8003586:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d11a      	bne.n	80035d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	791b      	ldrb	r3, [r3, #4]
 80035b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035ba:	430b      	orrs	r3, r1
 80035bc:	4313      	orrs	r3, r2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	0151      	lsls	r1, r2, #5
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	440a      	add	r2, r1
 80035c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d161      	bne.n	80036c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003616:	d11f      	bne.n	8003658 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	0151      	lsls	r1, r2, #5
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	440a      	add	r2, r1
 800362e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003636:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	440a      	add	r2, r1
 800364e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800365e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	68f9      	ldr	r1, [r7, #12]
 8003674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003678:	4013      	ands	r3, r2
 800367a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	2101      	movs	r1, #1
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	b29b      	uxth	r3, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800369c:	4013      	ands	r3, r2
 800369e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	0159      	lsls	r1, r3, #5
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ba:	4619      	mov	r1, r3
 80036bc:	4b35      	ldr	r3, [pc, #212]	@ (8003794 <USB_DeactivateEndpoint+0x1b0>)
 80036be:	4013      	ands	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
 80036c2:	e060      	b.n	8003786 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036da:	d11f      	bne.n	800371c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	440a      	add	r2, r1
 8003712:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800371a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	041b      	lsls	r3, r3, #16
 8003734:	43db      	mvns	r3, r3
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800373c:	4013      	ands	r3, r2
 800373e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	43db      	mvns	r3, r3
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003760:	4013      	ands	r3, r2
 8003762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	0159      	lsls	r1, r3, #5
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	440b      	add	r3, r1
 800377a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377e:	4619      	mov	r1, r3
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <USB_DeactivateEndpoint+0x1b4>)
 8003782:	4013      	ands	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	ec337800 	.word	0xec337800
 8003798:	eff37800 	.word	0xeff37800

0800379c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	@ 0x28
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 817f 	bne.w	8003abc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d132      	bne.n	800382c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	0151      	lsls	r1, r2, #5
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	440a      	add	r2, r1
 80037dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80037e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	0151      	lsls	r1, r2, #5
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	440a      	add	r2, r1
 8003800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	0151      	lsls	r1, r2, #5
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	440a      	add	r2, r1
 8003820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003824:	0cdb      	lsrs	r3, r3, #19
 8003826:	04db      	lsls	r3, r3, #19
 8003828:	6113      	str	r3, [r2, #16]
 800382a:	e097      	b.n	800395c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	440a      	add	r2, r1
 8003842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003846:	0cdb      	lsrs	r3, r3, #19
 8003848:	04db      	lsls	r3, r3, #19
 800384a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	0151      	lsls	r1, r2, #5
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	440a      	add	r2, r1
 8003862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003866:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800386a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800386e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11a      	bne.n	80038ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d903      	bls.n	800388a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	0151      	lsls	r1, r2, #5
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	440a      	add	r2, r1
 80038a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038a8:	6113      	str	r3, [r2, #16]
 80038aa:	e044      	b.n	8003936 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4413      	add	r3, r2
 80038b6:	1e5a      	subs	r2, r3, #1
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	8afb      	ldrh	r3, [r7, #22]
 80038d2:	04d9      	lsls	r1, r3, #19
 80038d4:	4ba4      	ldr	r3, [pc, #656]	@ (8003b68 <USB_EPStartXfer+0x3cc>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	69b9      	ldr	r1, [r7, #24]
 80038da:	0148      	lsls	r0, r1, #5
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	4401      	add	r1, r0
 80038e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80038e4:	4313      	orrs	r3, r2
 80038e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	791b      	ldrb	r3, [r3, #4]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d122      	bne.n	8003936 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800390a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800390e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	8afb      	ldrh	r3, [r7, #22]
 8003920:	075b      	lsls	r3, r3, #29
 8003922:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	0148      	lsls	r0, r1, #5
 800392a:	69f9      	ldr	r1, [r7, #28]
 800392c:	4401      	add	r1, r0
 800392e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	0148      	lsls	r0, r1, #5
 8003950:	69f9      	ldr	r1, [r7, #28]
 8003952:	4401      	add	r1, r0
 8003954:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003958:	4313      	orrs	r3, r2
 800395a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d14b      	bne.n	80039fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	791b      	ldrb	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d128      	bne.n	80039d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d110      	bne.n	80039b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e00f      	b.n	80039d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e166      	b.n	8003cc8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a18:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	791b      	ldrb	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d015      	beq.n	8003a4e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 814e 	beq.w	8003cc8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	634b      	str	r3, [r1, #52]	@ 0x34
 8003a4c:	e13c      	b.n	8003cc8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d110      	bne.n	8003a80 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	0151      	lsls	r1, r2, #5
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	440a      	add	r2, r1
 8003a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e00f      	b.n	8003aa0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	68d9      	ldr	r1, [r3, #12]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781a      	ldrb	r2, [r3, #0]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	b298      	uxth	r0, r3
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f9b9 	bl	8003e2c <USB_WritePacket>
 8003aba:	e105      	b.n	8003cc8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ad6:	0cdb      	lsrs	r3, r3, #19
 8003ad8:	04db      	lsls	r3, r3, #19
 8003ada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003af6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003afa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003afe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d132      	bne.n	8003b6c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	0148      	lsls	r0, r1, #5
 8003b38:	69f9      	ldr	r1, [r7, #28]
 8003b3a:	4401      	add	r1, r0
 8003b3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b40:	4313      	orrs	r3, r2
 8003b42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b62:	6113      	str	r3, [r2, #16]
 8003b64:	e062      	b.n	8003c2c <USB_EPStartXfer+0x490>
 8003b66:	bf00      	nop
 8003b68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d123      	bne.n	8003bbc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	0148      	lsls	r0, r1, #5
 8003b8e:	69f9      	ldr	r1, [r7, #28]
 8003b90:	4401      	add	r1, r0
 8003b92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003b96:	4313      	orrs	r3, r2
 8003b98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	0151      	lsls	r1, r2, #5
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	440a      	add	r2, r1
 8003bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003bb8:	6113      	str	r3, [r2, #16]
 8003bba:	e037      	b.n	8003c2c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	8afa      	ldrh	r2, [r7, #22]
 8003bd8:	fb03 f202 	mul.w	r2, r3, r2
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	8afb      	ldrh	r3, [r7, #22]
 8003bf0:	04d9      	lsls	r1, r3, #19
 8003bf2:	4b38      	ldr	r3, [pc, #224]	@ (8003cd4 <USB_EPStartXfer+0x538>)
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	0148      	lsls	r0, r1, #5
 8003bfa:	69f9      	ldr	r1, [r7, #28]
 8003bfc:	4401      	add	r1, r0
 8003bfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c02:	4313      	orrs	r3, r2
 8003c04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	0148      	lsls	r0, r1, #5
 8003c20:	69f9      	ldr	r1, [r7, #28]
 8003c22:	4401      	add	r1, r0
 8003c24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d10d      	bne.n	8003c4e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	68d9      	ldr	r1, [r3, #12]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c4a:	460a      	mov	r2, r1
 8003c4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	791b      	ldrb	r3, [r3, #4]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d128      	bne.n	8003ca8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d110      	bne.n	8003c88 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e00f      	b.n	8003ca8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	0151      	lsls	r1, r2, #5
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	440a      	add	r2, r1
 8003c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	1ff80000 	.word	0x1ff80000

08003cd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	785b      	ldrb	r3, [r3, #1]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d14a      	bne.n	8003d8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d0e:	f040 8086 	bne.w	8003e1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	0151      	lsls	r1, r2, #5
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	440a      	add	r2, r1
 8003d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	7812      	ldrb	r2, [r2, #0]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d902      	bls.n	8003d70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8003d6e:	e056      	b.n	8003e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d88:	d0e7      	beq.n	8003d5a <USB_EPStopXfer+0x82>
 8003d8a:	e048      	b.n	8003e1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003da4:	d13b      	bne.n	8003e1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003dc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	0151      	lsls	r1, r2, #5
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	440a      	add	r2, r1
 8003de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d902      	bls.n	8003e04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
          break;
 8003e02:	e00c      	b.n	8003e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e1c:	d0e7      	beq.n	8003dee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	@ 0x24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4611      	mov	r1, r2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	71fb      	strb	r3, [r7, #7]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d123      	bne.n	8003e9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e52:	88bb      	ldrh	r3, [r7, #4]
 8003e54:	3303      	adds	r3, #3
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	e018      	b.n	8003e92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	031a      	lsls	r2, r3, #12
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	3301      	adds	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d3e2      	bcc.n	8003e60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3724      	adds	r7, #36	@ 0x24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b08b      	sub	sp, #44	@ 0x2c
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
 8003ed2:	e014      	b.n	8003efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	3301      	adds	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	3301      	adds	r3, #1
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	3301      	adds	r3, #1
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	6a3a      	ldr	r2, [r7, #32]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d3e6      	bcc.n	8003ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f06:	8bfb      	ldrh	r3, [r7, #30]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01e      	beq.n	8003f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f16:	461a      	mov	r2, r3
 8003f18:	f107 0310 	add.w	r3, r7, #16
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	701a      	strb	r2, [r3, #0]
      i++;
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	3301      	adds	r3, #1
 8003f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003f3e:	8bfb      	ldrh	r3, [r7, #30]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f44:	8bfb      	ldrh	r3, [r7, #30]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ea      	bne.n	8003f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	372c      	adds	r7, #44	@ 0x2c
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d12c      	bne.n	8003fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	db12      	blt.n	8003fac <USB_EPSetStall+0x54>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00f      	beq.n	8003fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	0151      	lsls	r1, r2, #5
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e02b      	b.n	8004026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	db12      	blt.n	8004006 <USB_EPSetStall+0xae>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00f      	beq.n	8004006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004000:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d128      	bne.n	80040a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800406a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800406e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	791b      	ldrb	r3, [r3, #4]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d003      	beq.n	8004080 <USB_EPClearStall+0x4c>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	791b      	ldrb	r3, [r3, #4]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d138      	bne.n	80040f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e027      	b.n	80040f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	791b      	ldrb	r3, [r3, #4]
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d003      	beq.n	80040d2 <USB_EPClearStall+0x9e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	791b      	ldrb	r3, [r3, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d10f      	bne.n	80040f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800417a:	f023 0302 	bic.w	r3, r3, #2
 800417e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80041a8:	f023 0303 	bic.w	r3, r3, #3
 80041ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4013      	ands	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041e8:	68fb      	ldr	r3, [r7, #12]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	0c1b      	lsrs	r3, r3, #16
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	b29b      	uxth	r3, r3
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800428c:	68bb      	ldr	r3, [r7, #8]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800429a:	b480      	push	{r7}
 800429c:	b087      	sub	sp, #28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	01db      	lsls	r3, r3, #7
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042e8:	68bb      	ldr	r3, [r7, #8]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0301 	and.w	r3, r3, #1
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800432c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004330:	f023 0307 	bic.w	r3, r3, #7
 8004334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	460b      	mov	r3, r1
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	333c      	adds	r3, #60	@ 0x3c
 800436e:	3304      	adds	r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4a26      	ldr	r2, [pc, #152]	@ (8004410 <USB_EP0_OutStart+0xb8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d90a      	bls.n	8004392 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800438c:	d101      	bne.n	8004392 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e037      	b.n	8004402 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	2300      	movs	r3, #0
 800439c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043c0:	f043 0318 	orr.w	r3, r3, #24
 80043c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80043d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80043da:	7afb      	ldrb	r3, [r7, #11]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d10f      	bne.n	8004400 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e6:	461a      	mov	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80043fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	4f54300a 	.word	0x4f54300a

08004414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800442c:	d901      	bls.n	8004432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e022      	b.n	8004478 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	daf2      	bge.n	8004420 <USB_CoreReset+0xc>

  count = 10U;
 800443a:	230a      	movs	r3, #10
 800443c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800443e:	e002      	b.n	8004446 <USB_CoreReset+0x32>
  {
    count--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3b01      	subs	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f9      	bne.n	8004440 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3301      	adds	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004464:	d901      	bls.n	800446a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e006      	b.n	8004478 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d0f0      	beq.n	8004458 <USB_CoreReset+0x44>

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004490:	2010      	movs	r0, #16
 8004492:	f002 f917 	bl	80066c4 <USBD_static_malloc>
 8004496:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	32b0      	adds	r2, #176	@ 0xb0
 80044a8:	2100      	movs	r1, #0
 80044aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80044ae:	2302      	movs	r3, #2
 80044b0:	e048      	b.n	8004544 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	32b0      	adds	r2, #176	@ 0xb0
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	32b0      	adds	r2, #176	@ 0xb0
 80044cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7c1b      	ldrb	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80044de:	4b1b      	ldr	r3, [pc, #108]	@ (800454c <USBD_HID_Init+0xc8>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	f003 020f 	and.w	r2, r3, #15
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	331c      	adds	r3, #28
 80044f4:	2207      	movs	r2, #7
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	e00c      	b.n	8004514 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80044fa:	4b14      	ldr	r3, [pc, #80]	@ (800454c <USBD_HID_Init+0xc8>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	331c      	adds	r3, #28
 8004510:	220a      	movs	r2, #10
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004514:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <USBD_HID_Init+0xc8>)
 8004516:	7819      	ldrb	r1, [r3, #0]
 8004518:	2304      	movs	r3, #4
 800451a:	2203      	movs	r2, #3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 ffc0 	bl	80064a2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <USBD_HID_Init+0xc8>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	f003 020f 	and.w	r2, r3, #15
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	3323      	adds	r3, #35	@ 0x23
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200000ca 	.word	0x200000ca

08004550 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800455c:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <USBD_HID_DeInit+0x8c>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f001 ffc3 	bl	80064ee <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004568:	4b1c      	ldr	r3, [pc, #112]	@ (80045dc <USBD_HID_DeInit+0x8c>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3323      	adds	r3, #35	@ 0x23
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004582:	4b16      	ldr	r3, [pc, #88]	@ (80045dc <USBD_HID_DeInit+0x8c>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	331c      	adds	r3, #28
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	32b0      	adds	r2, #176	@ 0xb0
 80045a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d011      	beq.n	80045d2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	32b0      	adds	r2, #176	@ 0xb0
 80045b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045bc:	4618      	mov	r0, r3
 80045be:	f002 f88f 	bl	80066e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	32b0      	adds	r2, #176	@ 0xb0
 80045cc:	2100      	movs	r1, #0
 80045ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	200000ca 	.word	0x200000ca

080045e0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	32b0      	adds	r2, #176	@ 0xb0
 80045f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004608:	2303      	movs	r3, #3
 800460a:	e0e8      	b.n	80047de <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004614:	2b00      	cmp	r3, #0
 8004616:	d046      	beq.n	80046a6 <USBD_HID_Setup+0xc6>
 8004618:	2b20      	cmp	r3, #32
 800461a:	f040 80d8 	bne.w	80047ce <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	3b02      	subs	r3, #2
 8004624:	2b09      	cmp	r3, #9
 8004626:	d836      	bhi.n	8004696 <USBD_HID_Setup+0xb6>
 8004628:	a201      	add	r2, pc, #4	@ (adr r2, 8004630 <USBD_HID_Setup+0x50>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004687 	.word	0x08004687
 8004634:	08004667 	.word	0x08004667
 8004638:	08004697 	.word	0x08004697
 800463c:	08004697 	.word	0x08004697
 8004640:	08004697 	.word	0x08004697
 8004644:	08004697 	.word	0x08004697
 8004648:	08004697 	.word	0x08004697
 800464c:	08004697 	.word	0x08004697
 8004650:	08004675 	.word	0x08004675
 8004654:	08004659 	.word	0x08004659
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	885b      	ldrh	r3, [r3, #2]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	601a      	str	r2, [r3, #0]
          break;
 8004664:	e01e      	b.n	80046a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 fbcb 	bl	8005e08 <USBD_CtlSendData>
          break;
 8004672:	e017      	b.n	80046a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	885b      	ldrh	r3, [r3, #2]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	b29b      	uxth	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	605a      	str	r2, [r3, #4]
          break;
 8004684:	e00e      	b.n	80046a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3304      	adds	r3, #4
 800468a:	2201      	movs	r2, #1
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f001 fbba 	bl	8005e08 <USBD_CtlSendData>
          break;
 8004694:	e006      	b.n	80046a4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f001 fb38 	bl	8005d0e <USBD_CtlError>
          ret = USBD_FAIL;
 800469e:	2303      	movs	r3, #3
 80046a0:	75fb      	strb	r3, [r7, #23]
          break;
 80046a2:	bf00      	nop
      }
      break;
 80046a4:	e09a      	b.n	80047dc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	2b0b      	cmp	r3, #11
 80046ac:	f200 8086 	bhi.w	80047bc <USBD_HID_Setup+0x1dc>
 80046b0:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <USBD_HID_Setup+0xd8>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046e9 	.word	0x080046e9
 80046bc:	080047cb 	.word	0x080047cb
 80046c0:	080047bd 	.word	0x080047bd
 80046c4:	080047bd 	.word	0x080047bd
 80046c8:	080047bd 	.word	0x080047bd
 80046cc:	080047bd 	.word	0x080047bd
 80046d0:	08004713 	.word	0x08004713
 80046d4:	080047bd 	.word	0x080047bd
 80046d8:	080047bd 	.word	0x080047bd
 80046dc:	080047bd 	.word	0x080047bd
 80046e0:	0800476b 	.word	0x0800476b
 80046e4:	08004795 	.word	0x08004795
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d107      	bne.n	8004704 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80046f4:	f107 030a 	add.w	r3, r7, #10
 80046f8:	2202      	movs	r2, #2
 80046fa:	4619      	mov	r1, r3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f001 fb83 	bl	8005e08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004702:	e063      	b.n	80047cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f001 fb01 	bl	8005d0e <USBD_CtlError>
            ret = USBD_FAIL;
 800470c:	2303      	movs	r3, #3
 800470e:	75fb      	strb	r3, [r7, #23]
          break;
 8004710:	e05c      	b.n	80047cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	885b      	ldrh	r3, [r3, #2]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b22      	cmp	r3, #34	@ 0x22
 800471c:	d108      	bne.n	8004730 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	88db      	ldrh	r3, [r3, #6]
 8004722:	2b4a      	cmp	r3, #74	@ 0x4a
 8004724:	bf28      	it	cs
 8004726:	234a      	movcs	r3, #74	@ 0x4a
 8004728:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <USBD_HID_Setup+0x208>)
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e015      	b.n	800475c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	885b      	ldrh	r3, [r3, #2]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b21      	cmp	r3, #33	@ 0x21
 800473a:	d108      	bne.n	800474e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800473c:	4b2b      	ldr	r3, [pc, #172]	@ (80047ec <USBD_HID_Setup+0x20c>)
 800473e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	88db      	ldrh	r3, [r3, #6]
 8004744:	2b09      	cmp	r3, #9
 8004746:	bf28      	it	cs
 8004748:	2309      	movcs	r3, #9
 800474a:	82bb      	strh	r3, [r7, #20]
 800474c:	e006      	b.n	800475c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800474e:	6839      	ldr	r1, [r7, #0]
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f001 fadc 	bl	8005d0e <USBD_CtlError>
            ret = USBD_FAIL;
 8004756:	2303      	movs	r3, #3
 8004758:	75fb      	strb	r3, [r7, #23]
            break;
 800475a:	e037      	b.n	80047cc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800475c:	8abb      	ldrh	r3, [r7, #20]
 800475e:	461a      	mov	r2, r3
 8004760:	6939      	ldr	r1, [r7, #16]
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f001 fb50 	bl	8005e08 <USBD_CtlSendData>
          break;
 8004768:	e030      	b.n	80047cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b03      	cmp	r3, #3
 8004774:	d107      	bne.n	8004786 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3308      	adds	r3, #8
 800477a:	2201      	movs	r2, #1
 800477c:	4619      	mov	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 fb42 	bl	8005e08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004784:	e022      	b.n	80047cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f001 fac0 	bl	8005d0e <USBD_CtlError>
            ret = USBD_FAIL;
 800478e:	2303      	movs	r3, #3
 8004790:	75fb      	strb	r3, [r7, #23]
          break;
 8004792:	e01b      	b.n	80047cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b03      	cmp	r3, #3
 800479e:	d106      	bne.n	80047ae <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	885b      	ldrh	r3, [r3, #2]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047ac:	e00e      	b.n	80047cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f001 faac 	bl	8005d0e <USBD_CtlError>
            ret = USBD_FAIL;
 80047b6:	2303      	movs	r3, #3
 80047b8:	75fb      	strb	r3, [r7, #23]
          break;
 80047ba:	e007      	b.n	80047cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f001 faa5 	bl	8005d0e <USBD_CtlError>
          ret = USBD_FAIL;
 80047c4:	2303      	movs	r3, #3
 80047c6:	75fb      	strb	r3, [r7, #23]
          break;
 80047c8:	e000      	b.n	80047cc <USBD_HID_Setup+0x1ec>
          break;
 80047ca:	bf00      	nop
      }
      break;
 80047cc:	e006      	b.n	80047dc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f001 fa9c 	bl	8005d0e <USBD_CtlError>
      ret = USBD_FAIL;
 80047d6:	2303      	movs	r3, #3
 80047d8:	75fb      	strb	r3, [r7, #23]
      break;
 80047da:	bf00      	nop
  }

  return (uint8_t)ret;
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000080 	.word	0x20000080
 80047ec:	20000068 	.word	0x20000068

080047f0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80047f8:	2181      	movs	r1, #129	@ 0x81
 80047fa:	4809      	ldr	r0, [pc, #36]	@ (8004820 <USBD_HID_GetFSCfgDesc+0x30>)
 80047fc:	f000 fc4e 	bl	800509c <USBD_GetEpDesc>
 8004800:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	220a      	movs	r2, #10
 800480c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2222      	movs	r2, #34	@ 0x22
 8004812:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004814:	4b02      	ldr	r3, [pc, #8]	@ (8004820 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000044 	.word	0x20000044

08004824 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800482c:	2181      	movs	r1, #129	@ 0x81
 800482e:	4809      	ldr	r0, [pc, #36]	@ (8004854 <USBD_HID_GetHSCfgDesc+0x30>)
 8004830:	f000 fc34 	bl	800509c <USBD_GetEpDesc>
 8004834:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2207      	movs	r2, #7
 8004840:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2222      	movs	r2, #34	@ 0x22
 8004846:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004848:	4b02      	ldr	r3, [pc, #8]	@ (8004854 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000044 	.word	0x20000044

08004858 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004860:	2181      	movs	r1, #129	@ 0x81
 8004862:	4809      	ldr	r0, [pc, #36]	@ (8004888 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8004864:	f000 fc1a 	bl	800509c <USBD_GetEpDesc>
 8004868:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	220a      	movs	r2, #10
 8004874:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2222      	movs	r2, #34	@ 0x22
 800487a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800487c:	4b02      	ldr	r3, [pc, #8]	@ (8004888 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000044 	.word	0x20000044

0800488c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	32b0      	adds	r2, #176	@ 0xb0
 80048a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a6:	2200      	movs	r2, #0
 80048a8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	220a      	movs	r2, #10
 80048c4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80048c6:	4b03      	ldr	r3, [pc, #12]	@ (80048d4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	20000074 	.word	0x20000074

080048d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e01f      	b.n	8004930 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	79fa      	ldrb	r2, [r7, #7]
 8004922:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f001 fd55 	bl	80063d4 <USBD_LL_Init>
 800492a:	4603      	mov	r3, r0
 800492c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800494c:	2303      	movs	r3, #3
 800494e:	e025      	b.n	800499c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	32ae      	adds	r2, #174	@ 0xae
 8004962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	32ae      	adds	r2, #174	@ 0xae
 8004976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	f107 020e 	add.w	r2, r7, #14
 8004980:	4610      	mov	r0, r2
 8004982:	4798      	blx	r3
 8004984:	4602      	mov	r2, r0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f001 fd5d 	bl	800646c <USBD_LL_Start>
 80049b2:	4603      	mov	r3, r0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80049c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	4611      	mov	r1, r2
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
 80049fc:	4603      	mov	r3, r0
 80049fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	4611      	mov	r1, r2
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004a30:	2303      	movs	r3, #3
 8004a32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 f922 	bl	8005c9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004a64:	461a      	mov	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d01a      	beq.n	8004ab0 <USBD_LL_SetupStage+0x72>
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d822      	bhi.n	8004ac4 <USBD_LL_SetupStage+0x86>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <USBD_LL_SetupStage+0x4a>
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d00a      	beq.n	8004a9c <USBD_LL_SetupStage+0x5e>
 8004a86:	e01d      	b.n	8004ac4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fb77 	bl	8005184 <USBD_StdDevReq>
 8004a96:	4603      	mov	r3, r0
 8004a98:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9a:	e020      	b.n	8004ade <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fbdf 	bl	8005268 <USBD_StdItfReq>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	73fb      	strb	r3, [r7, #15]
      break;
 8004aae:	e016      	b.n	8004ade <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fc41 	bl	8005340 <USBD_StdEPReq>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac2:	e00c      	b.n	8004ade <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004aca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 fd2a 	bl	800652c <USBD_LL_StallEP>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	73fb      	strb	r3, [r7, #15]
      break;
 8004adc:	bf00      	nop
  }

  return ret;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	460b      	mov	r3, r1
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004afa:	7afb      	ldrb	r3, [r7, #11]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d177      	bne.n	8004bf0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004b06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	f040 80a1 	bne.w	8004c56 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	8992      	ldrh	r2, [r2, #12]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d91c      	bls.n	8004b5a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	8992      	ldrh	r2, [r2, #12]
 8004b28:	1a9a      	subs	r2, r3, r2
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	8992      	ldrh	r2, [r2, #12]
 8004b36:	441a      	add	r2, r3
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6919      	ldr	r1, [r3, #16]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	899b      	ldrh	r3, [r3, #12]
 8004b44:	461a      	mov	r2, r3
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	bf38      	it	cc
 8004b4e:	4613      	movcc	r3, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f001 f987 	bl	8005e66 <USBD_CtlContinueRx>
 8004b58:	e07d      	b.n	8004c56 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d014      	beq.n	8004b92 <USBD_LL_DataOutStage+0xaa>
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d81d      	bhi.n	8004ba8 <USBD_LL_DataOutStage+0xc0>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <USBD_LL_DataOutStage+0x8e>
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d003      	beq.n	8004b7c <USBD_LL_DataOutStage+0x94>
 8004b74:	e018      	b.n	8004ba8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75bb      	strb	r3, [r7, #22]
            break;
 8004b7a:	e018      	b.n	8004bae <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	4619      	mov	r1, r3
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fa6e 	bl	8005068 <USBD_CoreFindIF>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	75bb      	strb	r3, [r7, #22]
            break;
 8004b90:	e00d      	b.n	8004bae <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fa70 	bl	8005082 <USBD_CoreFindEP>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	75bb      	strb	r3, [r7, #22]
            break;
 8004ba6:	e002      	b.n	8004bae <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	75bb      	strb	r3, [r7, #22]
            break;
 8004bac:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004bae:	7dbb      	ldrb	r3, [r7, #22]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d119      	bne.n	8004be8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d113      	bne.n	8004be8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004bc0:	7dba      	ldrb	r2, [r7, #22]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	32ae      	adds	r2, #174	@ 0xae
 8004bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8004bd0:	7dba      	ldrb	r2, [r7, #22]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004bd8:	7dba      	ldrb	r2, [r7, #22]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	32ae      	adds	r2, #174	@ 0xae
 8004bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f001 f94d 	bl	8005e88 <USBD_CtlSendStatus>
 8004bee:	e032      	b.n	8004c56 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004bf0:	7afb      	ldrb	r3, [r7, #11]
 8004bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fa41 	bl	8005082 <USBD_CoreFindEP>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004c04:	7dbb      	ldrb	r3, [r7, #22]
 8004c06:	2bff      	cmp	r3, #255	@ 0xff
 8004c08:	d025      	beq.n	8004c56 <USBD_LL_DataOutStage+0x16e>
 8004c0a:	7dbb      	ldrb	r3, [r7, #22]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d122      	bne.n	8004c56 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d117      	bne.n	8004c4c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004c1c:	7dba      	ldrb	r2, [r7, #22]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	32ae      	adds	r2, #174	@ 0xae
 8004c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00f      	beq.n	8004c4c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8004c2c:	7dba      	ldrb	r2, [r7, #22]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004c34:	7dba      	ldrb	r2, [r7, #22]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	32ae      	adds	r2, #174	@ 0xae
 8004c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	7afa      	ldrb	r2, [r7, #11]
 8004c42:	4611      	mov	r1, r2
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	4798      	blx	r3
 8004c48:	4603      	mov	r3, r0
 8004c4a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	e000      	b.n	8004c58 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004c6e:	7afb      	ldrb	r3, [r7, #11]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d178      	bne.n	8004d66 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3314      	adds	r3, #20
 8004c78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d163      	bne.n	8004d4c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	8992      	ldrh	r2, [r2, #12]
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d91c      	bls.n	8004cca <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	8992      	ldrh	r2, [r2, #12]
 8004c98:	1a9a      	subs	r2, r3, r2
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	8992      	ldrh	r2, [r2, #12]
 8004ca6:	441a      	add	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6919      	ldr	r1, [r3, #16]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f001 f8c4 	bl	8005e44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f001 fcdc 	bl	8006680 <USBD_LL_PrepareReceive>
 8004cc8:	e040      	b.n	8004d4c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	899b      	ldrh	r3, [r3, #12]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d11c      	bne.n	8004d12 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d316      	bcc.n	8004d12 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d20f      	bcs.n	8004d12 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f001 f8a4 	bl	8005e44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d04:	2300      	movs	r3, #0
 8004d06:	2200      	movs	r2, #0
 8004d08:	2100      	movs	r1, #0
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f001 fcb8 	bl	8006680 <USBD_LL_PrepareReceive>
 8004d10:	e01c      	b.n	8004d4c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d10f      	bne.n	8004d3e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d3e:	2180      	movs	r1, #128	@ 0x80
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f001 fbf3 	bl	800652c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f001 f8b1 	bl	8005eae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03a      	beq.n	8004dcc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fe30 	bl	80049bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004d64:	e032      	b.n	8004dcc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004d66:	7afb      	ldrb	r3, [r7, #11]
 8004d68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	4619      	mov	r1, r3
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f986 	bl	8005082 <USBD_CoreFindEP>
 8004d76:	4603      	mov	r3, r0
 8004d78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	2bff      	cmp	r3, #255	@ 0xff
 8004d7e:	d025      	beq.n	8004dcc <USBD_LL_DataInStage+0x16c>
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d122      	bne.n	8004dcc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d11c      	bne.n	8004dcc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004d92:	7dfa      	ldrb	r2, [r7, #23]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	32ae      	adds	r2, #174	@ 0xae
 8004d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d014      	beq.n	8004dcc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8004da2:	7dfa      	ldrb	r2, [r7, #23]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004daa:	7dfa      	ldrb	r2, [r7, #23]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	32ae      	adds	r2, #174	@ 0xae
 8004db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	7afa      	ldrb	r2, [r7, #11]
 8004db8:	4611      	mov	r1, r2
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	4798      	blx	r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004dc2:	7dbb      	ldrb	r3, [r7, #22]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8004dc8:	7dbb      	ldrb	r3, [r7, #22]
 8004dca:	e000      	b.n	8004dce <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00e      	beq.n	8004e3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6852      	ldr	r2, [r2, #4]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e3c:	2340      	movs	r3, #64	@ 0x40
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2100      	movs	r1, #0
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 fb2d 	bl	80064a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2240      	movs	r2, #64	@ 0x40
 8004e54:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e58:	2340      	movs	r3, #64	@ 0x40
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2180      	movs	r1, #128	@ 0x80
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f001 fb1f 	bl	80064a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2240      	movs	r2, #64	@ 0x40
 8004e70:	841a      	strh	r2, [r3, #32]

  return ret;
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d006      	beq.n	8004ebe <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d106      	bne.n	8004ef6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d110      	bne.n	8004f3a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	32ae      	adds	r2, #174	@ 0xae
 8004f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e01c      	b.n	8004fa0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d115      	bne.n	8004f9e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	32ae      	adds	r2, #174	@ 0xae
 8004f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	32ae      	adds	r2, #174	@ 0xae
 8004f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	32ae      	adds	r2, #174	@ 0xae
 8004fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e01c      	b.n	8005004 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d115      	bne.n	8005002 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	32ae      	adds	r2, #174	@ 0xae
 8004fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	32ae      	adds	r2, #174	@ 0xae
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6852      	ldr	r2, [r2, #4]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	4611      	mov	r1, r2
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800505a:	2303      	movs	r3, #3
 800505c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800505e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005074:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800508e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	885b      	ldrh	r3, [r3, #2]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	4293      	cmp	r3, r2
 80050c0:	d91f      	bls.n	8005102 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80050c8:	e013      	b.n	80050f2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80050ca:	f107 030a 	add.w	r3, r7, #10
 80050ce:	4619      	mov	r1, r3
 80050d0:	6978      	ldr	r0, [r7, #20]
 80050d2:	f000 f81b 	bl	800510c <USBD_GetNextDesc>
 80050d6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b05      	cmp	r3, #5
 80050de:	d108      	bne.n	80050f2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	789b      	ldrb	r3, [r3, #2]
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d008      	beq.n	8005100 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	885b      	ldrh	r3, [r3, #2]
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	897b      	ldrh	r3, [r7, #10]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d8e5      	bhi.n	80050ca <USBD_GetEpDesc+0x2e>
 80050fe:	e000      	b.n	8005102 <USBD_GetEpDesc+0x66>
          break;
 8005100:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005102:	693b      	ldr	r3, [r7, #16]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	4413      	add	r3, r2
 8005124:	b29a      	uxth	r2, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005136:	68fb      	ldr	r3, [r7, #12]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3301      	adds	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005162:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	b21a      	sxth	r2, r3
 800516a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800516e:	4313      	orrs	r3, r2
 8005170:	b21b      	sxth	r3, r3
 8005172:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005174:	89fb      	ldrh	r3, [r7, #14]
}
 8005176:	4618      	mov	r0, r3
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800519a:	2b40      	cmp	r3, #64	@ 0x40
 800519c:	d005      	beq.n	80051aa <USBD_StdDevReq+0x26>
 800519e:	2b40      	cmp	r3, #64	@ 0x40
 80051a0:	d857      	bhi.n	8005252 <USBD_StdDevReq+0xce>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00f      	beq.n	80051c6 <USBD_StdDevReq+0x42>
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d153      	bne.n	8005252 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	32ae      	adds	r2, #174	@ 0xae
 80051b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
 80051c0:	4603      	mov	r3, r0
 80051c2:	73fb      	strb	r3, [r7, #15]
      break;
 80051c4:	e04a      	b.n	800525c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	2b09      	cmp	r3, #9
 80051cc:	d83b      	bhi.n	8005246 <USBD_StdDevReq+0xc2>
 80051ce:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <USBD_StdDevReq+0x50>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	08005229 	.word	0x08005229
 80051d8:	0800523d 	.word	0x0800523d
 80051dc:	08005247 	.word	0x08005247
 80051e0:	08005233 	.word	0x08005233
 80051e4:	08005247 	.word	0x08005247
 80051e8:	08005207 	.word	0x08005207
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	08005247 	.word	0x08005247
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	08005211 	.word	0x08005211
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa3e 	bl	8005680 <USBD_GetDescriptor>
          break;
 8005204:	e024      	b.n	8005250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fba3 	bl	8005954 <USBD_SetAddress>
          break;
 800520e:	e01f      	b.n	8005250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fbe2 	bl	80059dc <USBD_SetConfig>
 8005218:	4603      	mov	r3, r0
 800521a:	73fb      	strb	r3, [r7, #15]
          break;
 800521c:	e018      	b.n	8005250 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fc85 	bl	8005b30 <USBD_GetConfig>
          break;
 8005226:	e013      	b.n	8005250 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fcb6 	bl	8005b9c <USBD_GetStatus>
          break;
 8005230:	e00e      	b.n	8005250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005232:	6839      	ldr	r1, [r7, #0]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fce5 	bl	8005c04 <USBD_SetFeature>
          break;
 800523a:	e009      	b.n	8005250 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fd09 	bl	8005c56 <USBD_ClrFeature>
          break;
 8005244:	e004      	b.n	8005250 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fd60 	bl	8005d0e <USBD_CtlError>
          break;
 800524e:	bf00      	nop
      }
      break;
 8005250:	e004      	b.n	800525c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fd5a 	bl	8005d0e <USBD_CtlError>
      break;
 800525a:	bf00      	nop
  }

  return ret;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop

08005268 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800527e:	2b40      	cmp	r3, #64	@ 0x40
 8005280:	d005      	beq.n	800528e <USBD_StdItfReq+0x26>
 8005282:	2b40      	cmp	r3, #64	@ 0x40
 8005284:	d852      	bhi.n	800532c <USBD_StdItfReq+0xc4>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <USBD_StdItfReq+0x26>
 800528a:	2b20      	cmp	r3, #32
 800528c:	d14e      	bne.n	800532c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005294:	b2db      	uxtb	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	2b02      	cmp	r3, #2
 800529a:	d840      	bhi.n	800531e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	889b      	ldrh	r3, [r3, #4]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d836      	bhi.n	8005314 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	889b      	ldrh	r3, [r3, #4]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff feda 	bl	8005068 <USBD_CoreFindIF>
 80052b4:	4603      	mov	r3, r0
 80052b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	2bff      	cmp	r3, #255	@ 0xff
 80052bc:	d01d      	beq.n	80052fa <USBD_StdItfReq+0x92>
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d11a      	bne.n	80052fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80052c4:	7bba      	ldrb	r2, [r7, #14]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	32ae      	adds	r2, #174	@ 0xae
 80052ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00f      	beq.n	80052f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80052d4:	7bba      	ldrb	r2, [r7, #14]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80052dc:	7bba      	ldrb	r2, [r7, #14]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	32ae      	adds	r2, #174	@ 0xae
 80052e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052f2:	e004      	b.n	80052fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80052f4:	2303      	movs	r3, #3
 80052f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052f8:	e001      	b.n	80052fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80052fa:	2303      	movs	r3, #3
 80052fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	88db      	ldrh	r3, [r3, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d110      	bne.n	8005328 <USBD_StdItfReq+0xc0>
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10d      	bne.n	8005328 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fdbb 	bl	8005e88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005312:	e009      	b.n	8005328 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fcf9 	bl	8005d0e <USBD_CtlError>
          break;
 800531c:	e004      	b.n	8005328 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fcf4 	bl	8005d0e <USBD_CtlError>
          break;
 8005326:	e000      	b.n	800532a <USBD_StdItfReq+0xc2>
          break;
 8005328:	bf00      	nop
      }
      break;
 800532a:	e004      	b.n	8005336 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fced 	bl	8005d0e <USBD_CtlError>
      break;
 8005334:	bf00      	nop
  }

  return ret;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	889b      	ldrh	r3, [r3, #4]
 8005352:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800535c:	2b40      	cmp	r3, #64	@ 0x40
 800535e:	d007      	beq.n	8005370 <USBD_StdEPReq+0x30>
 8005360:	2b40      	cmp	r3, #64	@ 0x40
 8005362:	f200 8181 	bhi.w	8005668 <USBD_StdEPReq+0x328>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d02a      	beq.n	80053c0 <USBD_StdEPReq+0x80>
 800536a:	2b20      	cmp	r3, #32
 800536c:	f040 817c 	bne.w	8005668 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005370:	7bbb      	ldrb	r3, [r7, #14]
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fe84 	bl	8005082 <USBD_CoreFindEP>
 800537a:	4603      	mov	r3, r0
 800537c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800537e:	7b7b      	ldrb	r3, [r7, #13]
 8005380:	2bff      	cmp	r3, #255	@ 0xff
 8005382:	f000 8176 	beq.w	8005672 <USBD_StdEPReq+0x332>
 8005386:	7b7b      	ldrb	r3, [r7, #13]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f040 8172 	bne.w	8005672 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800538e:	7b7a      	ldrb	r2, [r7, #13]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005396:	7b7a      	ldrb	r2, [r7, #13]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	32ae      	adds	r2, #174	@ 0xae
 800539c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8165 	beq.w	8005672 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80053a8:	7b7a      	ldrb	r2, [r7, #13]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	32ae      	adds	r2, #174	@ 0xae
 80053ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053be:	e158      	b.n	8005672 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d008      	beq.n	80053da <USBD_StdEPReq+0x9a>
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	f300 8147 	bgt.w	800565c <USBD_StdEPReq+0x31c>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 809b 	beq.w	800550a <USBD_StdEPReq+0x1ca>
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d03c      	beq.n	8005452 <USBD_StdEPReq+0x112>
 80053d8:	e140      	b.n	800565c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d002      	beq.n	80053ec <USBD_StdEPReq+0xac>
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d016      	beq.n	8005418 <USBD_StdEPReq+0xd8>
 80053ea:	e02c      	b.n	8005446 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053ec:	7bbb      	ldrb	r3, [r7, #14]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <USBD_StdEPReq+0xce>
 80053f2:	7bbb      	ldrb	r3, [r7, #14]
 80053f4:	2b80      	cmp	r3, #128	@ 0x80
 80053f6:	d00a      	beq.n	800540e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053f8:	7bbb      	ldrb	r3, [r7, #14]
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 f895 	bl	800652c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005402:	2180      	movs	r1, #128	@ 0x80
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 f891 	bl	800652c <USBD_LL_StallEP>
 800540a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800540c:	e020      	b.n	8005450 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fc7c 	bl	8005d0e <USBD_CtlError>
              break;
 8005416:	e01b      	b.n	8005450 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	885b      	ldrh	r3, [r3, #2]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10e      	bne.n	800543e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <USBD_StdEPReq+0xfe>
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	2b80      	cmp	r3, #128	@ 0x80
 800542a:	d008      	beq.n	800543e <USBD_StdEPReq+0xfe>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	88db      	ldrh	r3, [r3, #6]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 f877 	bl	800652c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fd22 	bl	8005e88 <USBD_CtlSendStatus>

              break;
 8005444:	e004      	b.n	8005450 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005446:	6839      	ldr	r1, [r7, #0]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fc60 	bl	8005d0e <USBD_CtlError>
              break;
 800544e:	bf00      	nop
          }
          break;
 8005450:	e109      	b.n	8005666 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d002      	beq.n	8005464 <USBD_StdEPReq+0x124>
 800545e:	2b03      	cmp	r3, #3
 8005460:	d016      	beq.n	8005490 <USBD_StdEPReq+0x150>
 8005462:	e04b      	b.n	80054fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <USBD_StdEPReq+0x146>
 800546a:	7bbb      	ldrb	r3, [r7, #14]
 800546c:	2b80      	cmp	r3, #128	@ 0x80
 800546e:	d00a      	beq.n	8005486 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005470:	7bbb      	ldrb	r3, [r7, #14]
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 f859 	bl	800652c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800547a:	2180      	movs	r1, #128	@ 0x80
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 f855 	bl	800652c <USBD_LL_StallEP>
 8005482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005484:	e040      	b.n	8005508 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fc40 	bl	8005d0e <USBD_CtlError>
              break;
 800548e:	e03b      	b.n	8005508 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	885b      	ldrh	r3, [r3, #2]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d136      	bne.n	8005506 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80054a2:	7bbb      	ldrb	r3, [r7, #14]
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 f85f 	bl	800656a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fceb 	bl	8005e88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80054b2:	7bbb      	ldrb	r3, [r7, #14]
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fde3 	bl	8005082 <USBD_CoreFindEP>
 80054bc:	4603      	mov	r3, r0
 80054be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054c0:	7b7b      	ldrb	r3, [r7, #13]
 80054c2:	2bff      	cmp	r3, #255	@ 0xff
 80054c4:	d01f      	beq.n	8005506 <USBD_StdEPReq+0x1c6>
 80054c6:	7b7b      	ldrb	r3, [r7, #13]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11c      	bne.n	8005506 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80054cc:	7b7a      	ldrb	r2, [r7, #13]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80054d4:	7b7a      	ldrb	r2, [r7, #13]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	32ae      	adds	r2, #174	@ 0xae
 80054da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d010      	beq.n	8005506 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80054e4:	7b7a      	ldrb	r2, [r7, #13]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	32ae      	adds	r2, #174	@ 0xae
 80054ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80054fa:	e004      	b.n	8005506 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fc05 	bl	8005d0e <USBD_CtlError>
              break;
 8005504:	e000      	b.n	8005508 <USBD_StdEPReq+0x1c8>
              break;
 8005506:	bf00      	nop
          }
          break;
 8005508:	e0ad      	b.n	8005666 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d002      	beq.n	800551c <USBD_StdEPReq+0x1dc>
 8005516:	2b03      	cmp	r3, #3
 8005518:	d033      	beq.n	8005582 <USBD_StdEPReq+0x242>
 800551a:	e099      	b.n	8005650 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <USBD_StdEPReq+0x1f2>
 8005522:	7bbb      	ldrb	r3, [r7, #14]
 8005524:	2b80      	cmp	r3, #128	@ 0x80
 8005526:	d004      	beq.n	8005532 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fbef 	bl	8005d0e <USBD_CtlError>
                break;
 8005530:	e093      	b.n	800565a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005536:	2b00      	cmp	r3, #0
 8005538:	da0b      	bge.n	8005552 <USBD_StdEPReq+0x212>
 800553a:	7bbb      	ldrb	r3, [r7, #14]
 800553c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	3310      	adds	r3, #16
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	3304      	adds	r3, #4
 8005550:	e00b      	b.n	800556a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005552:	7bbb      	ldrb	r3, [r7, #14]
 8005554:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	330e      	adds	r3, #14
 8005576:	2202      	movs	r2, #2
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fc44 	bl	8005e08 <USBD_CtlSendData>
              break;
 8005580:	e06b      	b.n	800565a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005586:	2b00      	cmp	r3, #0
 8005588:	da11      	bge.n	80055ae <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	f003 020f 	and.w	r2, r3, #15
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3323      	adds	r3, #35	@ 0x23
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d117      	bne.n	80055d4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fbb1 	bl	8005d0e <USBD_CtlError>
                  break;
 80055ac:	e055      	b.n	800565a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fb9e 	bl	8005d0e <USBD_CtlError>
                  break;
 80055d2:	e042      	b.n	800565a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da0b      	bge.n	80055f4 <USBD_StdEPReq+0x2b4>
 80055dc:	7bbb      	ldrb	r3, [r7, #14]
 80055de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	3310      	adds	r3, #16
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4413      	add	r3, r2
 80055f0:	3304      	adds	r3, #4
 80055f2:	e00b      	b.n	800560c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4413      	add	r3, r2
 800560a:	3304      	adds	r3, #4
 800560c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800560e:	7bbb      	ldrb	r3, [r7, #14]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <USBD_StdEPReq+0x2da>
 8005614:	7bbb      	ldrb	r3, [r7, #14]
 8005616:	2b80      	cmp	r3, #128	@ 0x80
 8005618:	d103      	bne.n	8005622 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	739a      	strb	r2, [r3, #14]
 8005620:	e00e      	b.n	8005640 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005622:	7bbb      	ldrb	r3, [r7, #14]
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 ffbe 	bl	80065a8 <USBD_LL_IsStallEP>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2201      	movs	r2, #1
 8005636:	739a      	strb	r2, [r3, #14]
 8005638:	e002      	b.n	8005640 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	330e      	adds	r3, #14
 8005644:	2202      	movs	r2, #2
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fbdd 	bl	8005e08 <USBD_CtlSendData>
              break;
 800564e:	e004      	b.n	800565a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fb5b 	bl	8005d0e <USBD_CtlError>
              break;
 8005658:	bf00      	nop
          }
          break;
 800565a:	e004      	b.n	8005666 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fb55 	bl	8005d0e <USBD_CtlError>
          break;
 8005664:	bf00      	nop
      }
      break;
 8005666:	e005      	b.n	8005674 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fb4f 	bl	8005d0e <USBD_CtlError>
      break;
 8005670:	e000      	b.n	8005674 <USBD_StdEPReq+0x334>
      break;
 8005672:	bf00      	nop
  }

  return ret;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	885b      	ldrh	r3, [r3, #2]
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	2b06      	cmp	r3, #6
 80056a2:	f200 8128 	bhi.w	80058f6 <USBD_GetDescriptor+0x276>
 80056a6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <USBD_GetDescriptor+0x2c>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056c9 	.word	0x080056c9
 80056b0:	080056e1 	.word	0x080056e1
 80056b4:	08005721 	.word	0x08005721
 80056b8:	080058f7 	.word	0x080058f7
 80056bc:	080058f7 	.word	0x080058f7
 80056c0:	08005897 	.word	0x08005897
 80056c4:	080058c3 	.word	0x080058c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	7c12      	ldrb	r2, [r2, #16]
 80056d4:	f107 0108 	add.w	r1, r7, #8
 80056d8:	4610      	mov	r0, r2
 80056da:	4798      	blx	r3
 80056dc:	60f8      	str	r0, [r7, #12]
      break;
 80056de:	e112      	b.n	8005906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	7c1b      	ldrb	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10d      	bne.n	8005704 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	f107 0208 	add.w	r2, r7, #8
 80056f4:	4610      	mov	r0, r2
 80056f6:	4798      	blx	r3
 80056f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	2202      	movs	r2, #2
 8005700:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005702:	e100      	b.n	8005906 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	f107 0208 	add.w	r2, r7, #8
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3301      	adds	r3, #1
 800571a:	2202      	movs	r2, #2
 800571c:	701a      	strb	r2, [r3, #0]
      break;
 800571e:	e0f2      	b.n	8005906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	885b      	ldrh	r3, [r3, #2]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b05      	cmp	r3, #5
 8005728:	f200 80ac 	bhi.w	8005884 <USBD_GetDescriptor+0x204>
 800572c:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <USBD_GetDescriptor+0xb4>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	0800574d 	.word	0x0800574d
 8005738:	08005781 	.word	0x08005781
 800573c:	080057b5 	.word	0x080057b5
 8005740:	080057e9 	.word	0x080057e9
 8005744:	0800581d 	.word	0x0800581d
 8005748:	08005851 	.word	0x08005851
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	7c12      	ldrb	r2, [r2, #16]
 8005764:	f107 0108 	add.w	r1, r7, #8
 8005768:	4610      	mov	r0, r2
 800576a:	4798      	blx	r3
 800576c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800576e:	e091      	b.n	8005894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 facb 	bl	8005d0e <USBD_CtlError>
            err++;
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	3301      	adds	r3, #1
 800577c:	72fb      	strb	r3, [r7, #11]
          break;
 800577e:	e089      	b.n	8005894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	7c12      	ldrb	r2, [r2, #16]
 8005798:	f107 0108 	add.w	r1, r7, #8
 800579c:	4610      	mov	r0, r2
 800579e:	4798      	blx	r3
 80057a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057a2:	e077      	b.n	8005894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fab1 	bl	8005d0e <USBD_CtlError>
            err++;
 80057ac:	7afb      	ldrb	r3, [r7, #11]
 80057ae:	3301      	adds	r3, #1
 80057b0:	72fb      	strb	r3, [r7, #11]
          break;
 80057b2:	e06f      	b.n	8005894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00b      	beq.n	80057d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	7c12      	ldrb	r2, [r2, #16]
 80057cc:	f107 0108 	add.w	r1, r7, #8
 80057d0:	4610      	mov	r0, r2
 80057d2:	4798      	blx	r3
 80057d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057d6:	e05d      	b.n	8005894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa97 	bl	8005d0e <USBD_CtlError>
            err++;
 80057e0:	7afb      	ldrb	r3, [r7, #11]
 80057e2:	3301      	adds	r3, #1
 80057e4:	72fb      	strb	r3, [r7, #11]
          break;
 80057e6:	e055      	b.n	8005894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	7c12      	ldrb	r2, [r2, #16]
 8005800:	f107 0108 	add.w	r1, r7, #8
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
 8005808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800580a:	e043      	b.n	8005894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa7d 	bl	8005d0e <USBD_CtlError>
            err++;
 8005814:	7afb      	ldrb	r3, [r7, #11]
 8005816:	3301      	adds	r3, #1
 8005818:	72fb      	strb	r3, [r7, #11]
          break;
 800581a:	e03b      	b.n	8005894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	7c12      	ldrb	r2, [r2, #16]
 8005834:	f107 0108 	add.w	r1, r7, #8
 8005838:	4610      	mov	r0, r2
 800583a:	4798      	blx	r3
 800583c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800583e:	e029      	b.n	8005894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa63 	bl	8005d0e <USBD_CtlError>
            err++;
 8005848:	7afb      	ldrb	r3, [r7, #11]
 800584a:	3301      	adds	r3, #1
 800584c:	72fb      	strb	r3, [r7, #11]
          break;
 800584e:	e021      	b.n	8005894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00b      	beq.n	8005874 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	7c12      	ldrb	r2, [r2, #16]
 8005868:	f107 0108 	add.w	r1, r7, #8
 800586c:	4610      	mov	r0, r2
 800586e:	4798      	blx	r3
 8005870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005872:	e00f      	b.n	8005894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa49 	bl	8005d0e <USBD_CtlError>
            err++;
 800587c:	7afb      	ldrb	r3, [r7, #11]
 800587e:	3301      	adds	r3, #1
 8005880:	72fb      	strb	r3, [r7, #11]
          break;
 8005882:	e007      	b.n	8005894 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa41 	bl	8005d0e <USBD_CtlError>
          err++;
 800588c:	7afb      	ldrb	r3, [r7, #11]
 800588e:	3301      	adds	r3, #1
 8005890:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005892:	bf00      	nop
      }
      break;
 8005894:	e037      	b.n	8005906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	7c1b      	ldrb	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a6:	f107 0208 	add.w	r2, r7, #8
 80058aa:	4610      	mov	r0, r2
 80058ac:	4798      	blx	r3
 80058ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058b0:	e029      	b.n	8005906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa2a 	bl	8005d0e <USBD_CtlError>
        err++;
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	3301      	adds	r3, #1
 80058be:	72fb      	strb	r3, [r7, #11]
      break;
 80058c0:	e021      	b.n	8005906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	7c1b      	ldrb	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	f107 0208 	add.w	r2, r7, #8
 80058d6:	4610      	mov	r0, r2
 80058d8:	4798      	blx	r3
 80058da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	2207      	movs	r2, #7
 80058e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058e4:	e00f      	b.n	8005906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa10 	bl	8005d0e <USBD_CtlError>
        err++;
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	3301      	adds	r3, #1
 80058f2:	72fb      	strb	r3, [r7, #11]
      break;
 80058f4:	e007      	b.n	8005906 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fa08 	bl	8005d0e <USBD_CtlError>
      err++;
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	3301      	adds	r3, #1
 8005902:	72fb      	strb	r3, [r7, #11]
      break;
 8005904:	bf00      	nop
  }

  if (err != 0U)
 8005906:	7afb      	ldrb	r3, [r7, #11]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11e      	bne.n	800594a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	88db      	ldrh	r3, [r3, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d016      	beq.n	8005942 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005914:	893b      	ldrh	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	88da      	ldrh	r2, [r3, #6]
 800591e:	893b      	ldrh	r3, [r7, #8]
 8005920:	4293      	cmp	r3, r2
 8005922:	bf28      	it	cs
 8005924:	4613      	movcs	r3, r2
 8005926:	b29b      	uxth	r3, r3
 8005928:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800592a:	893b      	ldrh	r3, [r7, #8]
 800592c:	461a      	mov	r2, r3
 800592e:	68f9      	ldr	r1, [r7, #12]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fa69 	bl	8005e08 <USBD_CtlSendData>
 8005936:	e009      	b.n	800594c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9e7 	bl	8005d0e <USBD_CtlError>
 8005940:	e004      	b.n	800594c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 faa0 	bl	8005e88 <USBD_CtlSendStatus>
 8005948:	e000      	b.n	800594c <USBD_GetDescriptor+0x2cc>
    return;
 800594a:	bf00      	nop
  }
}
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop

08005954 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	889b      	ldrh	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d131      	bne.n	80059ca <USBD_SetAddress+0x76>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	88db      	ldrh	r3, [r3, #6]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d12d      	bne.n	80059ca <USBD_SetAddress+0x76>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	885b      	ldrh	r3, [r3, #2]
 8005972:	2b7f      	cmp	r3, #127	@ 0x7f
 8005974:	d829      	bhi.n	80059ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	885b      	ldrh	r3, [r3, #2]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005980:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d104      	bne.n	8005998 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f9bc 	bl	8005d0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005996:	e01d      	b.n	80059d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7bfa      	ldrb	r2, [r7, #15]
 800599c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fe2b 	bl	8006600 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa6c 	bl	8005e88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d004      	beq.n	80059c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059be:	e009      	b.n	80059d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c8:	e004      	b.n	80059d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f99e 	bl	8005d0e <USBD_CtlError>
  }
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	885b      	ldrh	r3, [r3, #2]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	4b4e      	ldr	r3, [pc, #312]	@ (8005b2c <USBD_SetConfig+0x150>)
 80059f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059f4:	4b4d      	ldr	r3, [pc, #308]	@ (8005b2c <USBD_SetConfig+0x150>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d905      	bls.n	8005a08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f985 	bl	8005d0e <USBD_CtlError>
    return USBD_FAIL;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e08c      	b.n	8005b22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d002      	beq.n	8005a1a <USBD_SetConfig+0x3e>
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d029      	beq.n	8005a6c <USBD_SetConfig+0x90>
 8005a18:	e075      	b.n	8005b06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005a1a:	4b44      	ldr	r3, [pc, #272]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d020      	beq.n	8005a64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005a22:	4b42      	ldr	r3, [pc, #264]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fe ffcd 	bl	80049d2 <USBD_SetClassConfig>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f962 	bl	8005d0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a52:	e065      	b.n	8005b20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fa17 	bl	8005e88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005a62:	e05d      	b.n	8005b20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fa0f 	bl	8005e88 <USBD_CtlSendStatus>
      break;
 8005a6a:	e059      	b.n	8005b20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d112      	bne.n	8005a9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a86:	4b29      	ldr	r3, [pc, #164]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7fe ffbc 	bl	8004a0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9f8 	bl	8005e88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a98:	e042      	b.n	8005b20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005a9a:	4b24      	ldr	r3, [pc, #144]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d02a      	beq.n	8005afe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fe ffaa 	bl	8004a0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fe ff83 	bl	80049d2 <USBD_SetClassConfig>
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00f      	beq.n	8005af6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f918 	bl	8005d0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fe ff8f 	bl	8004a0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005af4:	e014      	b.n	8005b20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9c6 	bl	8005e88 <USBD_CtlSendStatus>
      break;
 8005afc:	e010      	b.n	8005b20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f9c2 	bl	8005e88 <USBD_CtlSendStatus>
      break;
 8005b04:	e00c      	b.n	8005b20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f900 	bl	8005d0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005b0e:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <USBD_SetConfig+0x150>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fe ff78 	bl	8004a0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1e:	bf00      	nop
  }

  return ret;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	2000013c 	.word	0x2000013c

08005b30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	88db      	ldrh	r3, [r3, #6]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d004      	beq.n	8005b4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f8e2 	bl	8005d0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b4a:	e023      	b.n	8005b94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	dc02      	bgt.n	8005b5e <USBD_GetConfig+0x2e>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dc03      	bgt.n	8005b64 <USBD_GetConfig+0x34>
 8005b5c:	e015      	b.n	8005b8a <USBD_GetConfig+0x5a>
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d00b      	beq.n	8005b7a <USBD_GetConfig+0x4a>
 8005b62:	e012      	b.n	8005b8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f948 	bl	8005e08 <USBD_CtlSendData>
        break;
 8005b78:	e00c      	b.n	8005b94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f940 	bl	8005e08 <USBD_CtlSendData>
        break;
 8005b88:	e004      	b.n	8005b94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f8be 	bl	8005d0e <USBD_CtlError>
        break;
 8005b92:	bf00      	nop
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d81e      	bhi.n	8005bf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	88db      	ldrh	r3, [r3, #6]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d004      	beq.n	8005bc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8a5 	bl	8005d0e <USBD_CtlError>
        break;
 8005bc4:	e01a      	b.n	8005bfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f043 0202 	orr.w	r2, r3, #2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	330c      	adds	r3, #12
 8005be6:	2202      	movs	r2, #2
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f90c 	bl	8005e08 <USBD_CtlSendData>
      break;
 8005bf0:	e004      	b.n	8005bfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f88a 	bl	8005d0e <USBD_CtlError>
      break;
 8005bfa:	bf00      	nop
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	885b      	ldrh	r3, [r3, #2]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d107      	bne.n	8005c26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f932 	bl	8005e88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005c24:	e013      	b.n	8005c4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	885b      	ldrh	r3, [r3, #2]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d10b      	bne.n	8005c46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	889b      	ldrh	r3, [r3, #4]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f922 	bl	8005e88 <USBD_CtlSendStatus>
}
 8005c44:	e003      	b.n	8005c4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f860 	bl	8005d0e <USBD_CtlError>
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d80b      	bhi.n	8005c86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	885b      	ldrh	r3, [r3, #2]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d10c      	bne.n	8005c90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f902 	bl	8005e88 <USBD_CtlSendStatus>
      }
      break;
 8005c84:	e004      	b.n	8005c90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f840 	bl	8005d0e <USBD_CtlError>
      break;
 8005c8e:	e000      	b.n	8005c92 <USBD_ClrFeature+0x3c>
      break;
 8005c90:	bf00      	nop
  }
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7ff fa3d 	bl	8005144 <SWAPBYTE>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff fa30 	bl	8005144 <SWAPBYTE>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff fa23 	bl	8005144 <SWAPBYTE>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	461a      	mov	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	80da      	strh	r2, [r3, #6]
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d18:	2180      	movs	r1, #128	@ 0x80
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fc06 	bl	800652c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005d20:	2100      	movs	r1, #0
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fc02 	bl	800652c <USBD_LL_StallEP>
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d042      	beq.n	8005dcc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005d4a:	6938      	ldr	r0, [r7, #16]
 8005d4c:	f000 f842 	bl	8005dd4 <USBD_GetLen>
 8005d50:	4603      	mov	r3, r0
 8005d52:	3301      	adds	r3, #1
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d5a:	d808      	bhi.n	8005d6e <USBD_GetString+0x3e>
 8005d5c:	6938      	ldr	r0, [r7, #16]
 8005d5e:	f000 f839 	bl	8005dd4 <USBD_GetLen>
 8005d62:	4603      	mov	r3, r0
 8005d64:	3301      	adds	r3, #1
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	e001      	b.n	8005d72 <USBD_GetString+0x42>
 8005d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7812      	ldrb	r2, [r2, #0]
 8005d80:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	3301      	adds	r3, #1
 8005d86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	2203      	movs	r2, #3
 8005d90:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	3301      	adds	r3, #1
 8005d96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d98:	e013      	b.n	8005dc2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	4413      	add	r3, r2
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3301      	adds	r3, #1
 8005daa:	613b      	str	r3, [r7, #16]
    idx++;
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	3301      	adds	r3, #1
 8005db0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	4413      	add	r3, r2
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
    idx++;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e7      	bne.n	8005d9a <USBD_GetString+0x6a>
 8005dca:	e000      	b.n	8005dce <USBD_GetString+0x9e>
    return;
 8005dcc:	bf00      	nop
  }
}
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005de4:	e005      	b.n	8005df2 <USBD_GetLen+0x1e>
  {
    len++;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	3301      	adds	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f5      	bne.n	8005de6 <USBD_GetLen+0x12>
  }

  return len;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	2100      	movs	r1, #0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fc02 	bl	800663e <USBD_LL_Transmit>

  return USBD_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	2100      	movs	r1, #0
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fbf1 	bl	800663e <USBD_LL_Transmit>

  return USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	2100      	movs	r1, #0
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 fc01 	bl	8006680 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2204      	movs	r2, #4
 8005e94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fbcd 	bl	800663e <USBD_LL_Transmit>

  return USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2205      	movs	r2, #5
 8005eba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fbdb 	bl	8006680 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	490e      	ldr	r1, [pc, #56]	@ (8005f14 <MX_USB_DEVICE_Init+0x40>)
 8005edc:	480e      	ldr	r0, [pc, #56]	@ (8005f18 <MX_USB_DEVICE_Init+0x44>)
 8005ede:	f7fe fcfb 	bl	80048d8 <USBD_Init>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ee8:	f7fa fcd0 	bl	800088c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005eec:	490b      	ldr	r1, [pc, #44]	@ (8005f1c <MX_USB_DEVICE_Init+0x48>)
 8005eee:	480a      	ldr	r0, [pc, #40]	@ (8005f18 <MX_USB_DEVICE_Init+0x44>)
 8005ef0:	f7fe fd22 	bl	8004938 <USBD_RegisterClass>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005efa:	f7fa fcc7 	bl	800088c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005efe:	4806      	ldr	r0, [pc, #24]	@ (8005f18 <MX_USB_DEVICE_Init+0x44>)
 8005f00:	f7fe fd50 	bl	80049a4 <USBD_Start>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005f0a:	f7fa fcbf 	bl	800088c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	200000cc 	.word	0x200000cc
 8005f18:	20000140 	.word	0x20000140
 8005f1c:	2000000c 	.word	0x2000000c

08005f20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2212      	movs	r2, #18
 8005f30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005f32:	4b03      	ldr	r3, [pc, #12]	@ (8005f40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	200000e8 	.word	0x200000e8

08005f44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2204      	movs	r2, #4
 8005f54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005f56:	4b03      	ldr	r3, [pc, #12]	@ (8005f64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	200000fc 	.word	0x200000fc

08005f68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	4907      	ldr	r1, [pc, #28]	@ (8005f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8005f7e:	4808      	ldr	r0, [pc, #32]	@ (8005fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f80:	f7ff fed6 	bl	8005d30 <USBD_GetString>
 8005f84:	e004      	b.n	8005f90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4904      	ldr	r1, [pc, #16]	@ (8005f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8005f8a:	4805      	ldr	r0, [pc, #20]	@ (8005fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f8c:	f7ff fed0 	bl	8005d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f90:	4b02      	ldr	r3, [pc, #8]	@ (8005f9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000041c 	.word	0x2000041c
 8005fa0:	080067bc 	.word	0x080067bc

08005fa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	6039      	str	r1, [r7, #0]
 8005fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	4904      	ldr	r1, [pc, #16]	@ (8005fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005fb4:	4804      	ldr	r0, [pc, #16]	@ (8005fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005fb6:	f7ff febb 	bl	8005d30 <USBD_GetString>
  return USBD_StrDesc;
 8005fba:	4b02      	ldr	r3, [pc, #8]	@ (8005fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	2000041c 	.word	0x2000041c
 8005fc8:	080067d8 	.word	0x080067d8

08005fcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6039      	str	r1, [r7, #0]
 8005fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	221a      	movs	r2, #26
 8005fdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005fde:	f000 f843 	bl	8006068 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005fe2:	4b02      	ldr	r3, [pc, #8]	@ (8005fec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000100 	.word	0x20000100

08005ff0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6039      	str	r1, [r7, #0]
 8005ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d105      	bne.n	800600e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	4907      	ldr	r1, [pc, #28]	@ (8006024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006006:	4808      	ldr	r0, [pc, #32]	@ (8006028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006008:	f7ff fe92 	bl	8005d30 <USBD_GetString>
 800600c:	e004      	b.n	8006018 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	4904      	ldr	r1, [pc, #16]	@ (8006024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006012:	4805      	ldr	r0, [pc, #20]	@ (8006028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006014:	f7ff fe8c 	bl	8005d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006018:	4b02      	ldr	r3, [pc, #8]	@ (8006024 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	2000041c 	.word	0x2000041c
 8006028:	080067ec 	.word	0x080067ec

0800602c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d105      	bne.n	800604a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4907      	ldr	r1, [pc, #28]	@ (8006060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006042:	4808      	ldr	r0, [pc, #32]	@ (8006064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006044:	f7ff fe74 	bl	8005d30 <USBD_GetString>
 8006048:	e004      	b.n	8006054 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	4904      	ldr	r1, [pc, #16]	@ (8006060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800604e:	4805      	ldr	r0, [pc, #20]	@ (8006064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006050:	f7ff fe6e 	bl	8005d30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006054:	4b02      	ldr	r3, [pc, #8]	@ (8006060 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	2000041c 	.word	0x2000041c
 8006064:	080067f8 	.word	0x080067f8

08006068 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800606e:	4b0f      	ldr	r3, [pc, #60]	@ (80060ac <Get_SerialNum+0x44>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006074:	4b0e      	ldr	r3, [pc, #56]	@ (80060b0 <Get_SerialNum+0x48>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800607a:	4b0e      	ldr	r3, [pc, #56]	@ (80060b4 <Get_SerialNum+0x4c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800608e:	2208      	movs	r2, #8
 8006090:	4909      	ldr	r1, [pc, #36]	@ (80060b8 <Get_SerialNum+0x50>)
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f814 	bl	80060c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006098:	2204      	movs	r2, #4
 800609a:	4908      	ldr	r1, [pc, #32]	@ (80060bc <Get_SerialNum+0x54>)
 800609c:	68b8      	ldr	r0, [r7, #8]
 800609e:	f000 f80f 	bl	80060c0 <IntToUnicode>
  }
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	1fff7a10 	.word	0x1fff7a10
 80060b0:	1fff7a14 	.word	0x1fff7a14
 80060b4:	1fff7a18 	.word	0x1fff7a18
 80060b8:	20000102 	.word	0x20000102
 80060bc:	20000112 	.word	0x20000112

080060c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80060d2:	2300      	movs	r3, #0
 80060d4:	75fb      	strb	r3, [r7, #23]
 80060d6:	e027      	b.n	8006128 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	0f1b      	lsrs	r3, r3, #28
 80060dc:	2b09      	cmp	r3, #9
 80060de:	d80b      	bhi.n	80060f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	0f1b      	lsrs	r3, r3, #28
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4619      	mov	r1, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	440b      	add	r3, r1
 80060f0:	3230      	adds	r2, #48	@ 0x30
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e00a      	b.n	800610e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	0f1b      	lsrs	r3, r3, #28
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	4619      	mov	r1, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	440b      	add	r3, r1
 8006108:	3237      	adds	r2, #55	@ 0x37
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	3301      	adds	r3, #1
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4413      	add	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	3301      	adds	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]
 8006128:	7dfa      	ldrb	r2, [r7, #23]
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	429a      	cmp	r2, r3
 800612e:	d3d3      	bcc.n	80060d8 <IntToUnicode+0x18>
  }
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	@ 0x28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	609a      	str	r2, [r3, #8]
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006160:	d147      	bne.n	80061f2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	4b25      	ldr	r3, [pc, #148]	@ (80061fc <HAL_PCD_MspInit+0xbc>)
 8006168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616a:	4a24      	ldr	r2, [pc, #144]	@ (80061fc <HAL_PCD_MspInit+0xbc>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6313      	str	r3, [r2, #48]	@ 0x30
 8006172:	4b22      	ldr	r3, [pc, #136]	@ (80061fc <HAL_PCD_MspInit+0xbc>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800617e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006184:	2300      	movs	r3, #0
 8006186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006188:	2300      	movs	r3, #0
 800618a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800618c:	f107 0314 	add.w	r3, r7, #20
 8006190:	4619      	mov	r1, r3
 8006192:	481b      	ldr	r0, [pc, #108]	@ (8006200 <HAL_PCD_MspInit+0xc0>)
 8006194:	f7fa fdc6 	bl	8000d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006198:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800619c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800619e:	2302      	movs	r3, #2
 80061a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061a6:	2303      	movs	r3, #3
 80061a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80061aa:	230a      	movs	r3, #10
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ae:	f107 0314 	add.w	r3, r7, #20
 80061b2:	4619      	mov	r1, r3
 80061b4:	4812      	ldr	r0, [pc, #72]	@ (8006200 <HAL_PCD_MspInit+0xc0>)
 80061b6:	f7fa fdb5 	bl	8000d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80061ba:	4b10      	ldr	r3, [pc, #64]	@ (80061fc <HAL_PCD_MspInit+0xbc>)
 80061bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061be:	4a0f      	ldr	r2, [pc, #60]	@ (80061fc <HAL_PCD_MspInit+0xbc>)
 80061c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	4b0c      	ldr	r3, [pc, #48]	@ (80061fc <HAL_PCD_MspInit+0xbc>)
 80061cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ce:	4a0b      	ldr	r2, [pc, #44]	@ (80061fc <HAL_PCD_MspInit+0xbc>)
 80061d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80061d6:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_PCD_MspInit+0xbc>)
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80061e2:	2200      	movs	r2, #0
 80061e4:	2100      	movs	r1, #0
 80061e6:	2043      	movs	r0, #67	@ 0x43
 80061e8:	f7fa fd65 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80061ec:	2043      	movs	r0, #67	@ 0x43
 80061ee:	f7fa fd7e 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80061f2:	bf00      	nop
 80061f4:	3728      	adds	r7, #40	@ 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40023800 	.word	0x40023800
 8006200:	40020000 	.word	0x40020000

08006204 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7fe fc0f 	bl	8004a3e <USBD_LL_SetupStage>
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	4619      	mov	r1, r3
 8006252:	f7fe fc49 	bl	8004ae8 <USBD_LL_DataOutStage>
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006270:	78fa      	ldrb	r2, [r7, #3]
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	3320      	adds	r3, #32
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	4619      	mov	r1, r3
 8006286:	f7fe fceb 	bl	8004c60 <USBD_LL_DataInStage>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fe fe2f 	bl	8004f04 <USBD_LL_SOF>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	79db      	ldrb	r3, [r3, #7]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d001      	beq.n	80062c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80062c2:	f7fa fae3 	bl	800088c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062cc:	7bfa      	ldrb	r2, [r7, #15]
 80062ce:	4611      	mov	r1, r2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe fdd3 	bl	8004e7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fd7a 	bl	8004dd6 <USBD_LL_Reset>
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fdce 	bl	8004e9c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	7adb      	ldrb	r3, [r3, #11]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006320:	4b04      	ldr	r3, [pc, #16]	@ (8006334 <HAL_PCD_SuspendCallback+0x48>)
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4a03      	ldr	r2, [pc, #12]	@ (8006334 <HAL_PCD_SuspendCallback+0x48>)
 8006326:	f043 0306 	orr.w	r3, r3, #6
 800632a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	e000ed00 	.word	0xe000ed00

08006338 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fdc4 	bl	8004ed4 <USBD_LL_Resume>
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	4611      	mov	r1, r2
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fe1c 	bl	8004fa8 <USBD_LL_IsoOUTIncomplete>
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	4611      	mov	r1, r2
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fdd8 	bl	8004f44 <USBD_LL_IsoINIncomplete>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fe2e 	bl	800500c <USBD_LL_DevConnected>
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fe2b 	bl	8005022 <USBD_LL_DevDisconnected>
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d13c      	bne.n	800645e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80063e4:	4a20      	ldr	r2, [pc, #128]	@ (8006468 <USBD_LL_Init+0x94>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <USBD_LL_Init+0x94>)
 80063f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80063f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006468 <USBD_LL_Init+0x94>)
 80063f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80063fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80063fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <USBD_LL_Init+0x94>)
 80063fe:	2204      	movs	r2, #4
 8006400:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006402:	4b19      	ldr	r3, [pc, #100]	@ (8006468 <USBD_LL_Init+0x94>)
 8006404:	2202      	movs	r2, #2
 8006406:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006408:	4b17      	ldr	r3, [pc, #92]	@ (8006468 <USBD_LL_Init+0x94>)
 800640a:	2200      	movs	r2, #0
 800640c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800640e:	4b16      	ldr	r3, [pc, #88]	@ (8006468 <USBD_LL_Init+0x94>)
 8006410:	2202      	movs	r2, #2
 8006412:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006414:	4b14      	ldr	r3, [pc, #80]	@ (8006468 <USBD_LL_Init+0x94>)
 8006416:	2200      	movs	r2, #0
 8006418:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800641a:	4b13      	ldr	r3, [pc, #76]	@ (8006468 <USBD_LL_Init+0x94>)
 800641c:	2200      	movs	r2, #0
 800641e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006420:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <USBD_LL_Init+0x94>)
 8006422:	2200      	movs	r2, #0
 8006424:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006426:	4b10      	ldr	r3, [pc, #64]	@ (8006468 <USBD_LL_Init+0x94>)
 8006428:	2200      	movs	r2, #0
 800642a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800642c:	4b0e      	ldr	r3, [pc, #56]	@ (8006468 <USBD_LL_Init+0x94>)
 800642e:	2200      	movs	r2, #0
 8006430:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006432:	480d      	ldr	r0, [pc, #52]	@ (8006468 <USBD_LL_Init+0x94>)
 8006434:	f7fa fe2d 	bl	8001092 <HAL_PCD_Init>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800643e:	f7fa fa25 	bl	800088c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006442:	2180      	movs	r1, #128	@ 0x80
 8006444:	4808      	ldr	r0, [pc, #32]	@ (8006468 <USBD_LL_Init+0x94>)
 8006446:	f7fc f842 	bl	80024ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800644a:	2240      	movs	r2, #64	@ 0x40
 800644c:	2100      	movs	r1, #0
 800644e:	4806      	ldr	r0, [pc, #24]	@ (8006468 <USBD_LL_Init+0x94>)
 8006450:	f7fb fff6 	bl	8002440 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006454:	2280      	movs	r2, #128	@ 0x80
 8006456:	2101      	movs	r1, #1
 8006458:	4803      	ldr	r0, [pc, #12]	@ (8006468 <USBD_LL_Init+0x94>)
 800645a:	f7fb fff1 	bl	8002440 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	2000061c 	.word	0x2000061c

0800646c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006482:	4618      	mov	r0, r3
 8006484:	f7fa ff14 	bl	80012b0 <HAL_PCD_Start>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f930 	bl	80066f4 <USBD_Get_USB_Status>
 8006494:	4603      	mov	r3, r0
 8006496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006498:	7bbb      	ldrb	r3, [r7, #14]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	4608      	mov	r0, r1
 80064ac:	4611      	mov	r1, r2
 80064ae:	461a      	mov	r2, r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	70fb      	strb	r3, [r7, #3]
 80064b4:	460b      	mov	r3, r1
 80064b6:	70bb      	strb	r3, [r7, #2]
 80064b8:	4613      	mov	r3, r2
 80064ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80064ca:	78bb      	ldrb	r3, [r7, #2]
 80064cc:	883a      	ldrh	r2, [r7, #0]
 80064ce:	78f9      	ldrb	r1, [r7, #3]
 80064d0:	f7fb fbe8 	bl	8001ca4 <HAL_PCD_EP_Open>
 80064d4:	4603      	mov	r3, r0
 80064d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 f90a 	bl	80066f4 <USBD_Get_USB_Status>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7fb fc33 	bl	8001d78 <HAL_PCD_EP_Close>
 8006512:	4603      	mov	r3, r0
 8006514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f8eb 	bl	80066f4 <USBD_Get_USB_Status>
 800651e:	4603      	mov	r3, r0
 8006520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006522:	7bbb      	ldrb	r3, [r7, #14]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	4611      	mov	r1, r2
 800654a:	4618      	mov	r0, r3
 800654c:	f7fb fcd3 	bl	8001ef6 <HAL_PCD_EP_SetStall>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f8cc 	bl	80066f4 <USBD_Get_USB_Status>
 800655c:	4603      	mov	r3, r0
 800655e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006560:	7bbb      	ldrb	r3, [r7, #14]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006584:	78fa      	ldrb	r2, [r7, #3]
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f7fb fd17 	bl	8001fbc <HAL_PCD_EP_ClrStall>
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f8ad 	bl	80066f4 <USBD_Get_USB_Status>
 800659a:	4603      	mov	r3, r0
 800659c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800659e:	7bbb      	ldrb	r3, [r7, #14]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80065bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da0b      	bge.n	80065dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	4613      	mov	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	3316      	adds	r3, #22
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	e00b      	b.n	80065f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	4613      	mov	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80065f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800661a:	78fa      	ldrb	r2, [r7, #3]
 800661c:	4611      	mov	r1, r2
 800661e:	4618      	mov	r0, r3
 8006620:	f7fb fb1c 	bl	8001c5c <HAL_PCD_SetAddress>
 8006624:	4603      	mov	r3, r0
 8006626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f862 	bl	80066f4 <USBD_Get_USB_Status>
 8006630:	4603      	mov	r3, r0
 8006632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006634:	7bbb      	ldrb	r3, [r7, #14]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
 800664a:	460b      	mov	r3, r1
 800664c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800665c:	7af9      	ldrb	r1, [r7, #11]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	f7fb fc0e 	bl	8001e82 <HAL_PCD_EP_Transmit>
 8006666:	4603      	mov	r3, r0
 8006668:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 f841 	bl	80066f4 <USBD_Get_USB_Status>
 8006672:	4603      	mov	r3, r0
 8006674:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006676:	7dbb      	ldrb	r3, [r7, #22]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	460b      	mov	r3, r1
 800668e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800669e:	7af9      	ldrb	r1, [r7, #11]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	f7fb fbb2 	bl	8001e0c <HAL_PCD_EP_Receive>
 80066a8:	4603      	mov	r3, r0
 80066aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f820 	bl	80066f4 <USBD_Get_USB_Status>
 80066b4:	4603      	mov	r3, r0
 80066b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80066cc:	4b03      	ldr	r3, [pc, #12]	@ (80066dc <USBD_static_malloc+0x18>)
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000b00 	.word	0x20000b00

080066e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	2b03      	cmp	r3, #3
 8006706:	d817      	bhi.n	8006738 <USBD_Get_USB_Status+0x44>
 8006708:	a201      	add	r2, pc, #4	@ (adr r2, 8006710 <USBD_Get_USB_Status+0x1c>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006721 	.word	0x08006721
 8006714:	08006727 	.word	0x08006727
 8006718:	0800672d 	.word	0x0800672d
 800671c:	08006733 	.word	0x08006733
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
    break;
 8006724:	e00b      	b.n	800673e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006726:	2303      	movs	r3, #3
 8006728:	73fb      	strb	r3, [r7, #15]
    break;
 800672a:	e008      	b.n	800673e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
    break;
 8006730:	e005      	b.n	800673e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006732:	2303      	movs	r3, #3
 8006734:	73fb      	strb	r3, [r7, #15]
    break;
 8006736:	e002      	b.n	800673e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006738:	2303      	movs	r3, #3
 800673a:	73fb      	strb	r3, [r7, #15]
    break;
 800673c:	bf00      	nop
  }
  return usb_status;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <memset>:
 800674c:	4402      	add	r2, r0
 800674e:	4603      	mov	r3, r0
 8006750:	4293      	cmp	r3, r2
 8006752:	d100      	bne.n	8006756 <memset+0xa>
 8006754:	4770      	bx	lr
 8006756:	f803 1b01 	strb.w	r1, [r3], #1
 800675a:	e7f9      	b.n	8006750 <memset+0x4>

0800675c <__libc_init_array>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	4d0d      	ldr	r5, [pc, #52]	@ (8006794 <__libc_init_array+0x38>)
 8006760:	4c0d      	ldr	r4, [pc, #52]	@ (8006798 <__libc_init_array+0x3c>)
 8006762:	1b64      	subs	r4, r4, r5
 8006764:	10a4      	asrs	r4, r4, #2
 8006766:	2600      	movs	r6, #0
 8006768:	42a6      	cmp	r6, r4
 800676a:	d109      	bne.n	8006780 <__libc_init_array+0x24>
 800676c:	4d0b      	ldr	r5, [pc, #44]	@ (800679c <__libc_init_array+0x40>)
 800676e:	4c0c      	ldr	r4, [pc, #48]	@ (80067a0 <__libc_init_array+0x44>)
 8006770:	f000 f818 	bl	80067a4 <_init>
 8006774:	1b64      	subs	r4, r4, r5
 8006776:	10a4      	asrs	r4, r4, #2
 8006778:	2600      	movs	r6, #0
 800677a:	42a6      	cmp	r6, r4
 800677c:	d105      	bne.n	800678a <__libc_init_array+0x2e>
 800677e:	bd70      	pop	{r4, r5, r6, pc}
 8006780:	f855 3b04 	ldr.w	r3, [r5], #4
 8006784:	4798      	blx	r3
 8006786:	3601      	adds	r6, #1
 8006788:	e7ee      	b.n	8006768 <__libc_init_array+0xc>
 800678a:	f855 3b04 	ldr.w	r3, [r5], #4
 800678e:	4798      	blx	r3
 8006790:	3601      	adds	r6, #1
 8006792:	e7f2      	b.n	800677a <__libc_init_array+0x1e>
 8006794:	08006820 	.word	0x08006820
 8006798:	08006820 	.word	0x08006820
 800679c:	08006820 	.word	0x08006820
 80067a0:	08006824 	.word	0x08006824

080067a4 <_init>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr

080067b0 <_fini>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr
