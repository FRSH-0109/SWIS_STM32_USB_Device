
SWIS_USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800bf40  0800bf40  0000cf40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c400  0800c400  0000e2cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c400  0800c400  0000d400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c408  0800c408  0000e2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c408  0800c408  0000d408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c40c  0800c40c  0000d40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800c410  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c94  200002cc  0800c6dc  0000e2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f60  0800c6dc  0000ef60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ea9  00000000  00000000  0000e2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003981  00000000  00000000  000221a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00025b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d51  00000000  00000000  00026cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a542  00000000  00000000  00027a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018507  00000000  00000000  00041f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e3f1  00000000  00000000  0005a45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e884b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005988  00000000  00000000  000e8890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ee218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf28 	.word	0x0800bf28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800bf28 	.word	0x0800bf28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	@ 0x30
 8000ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	4b82      	ldr	r3, [pc, #520]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a81      	ldr	r2, [pc, #516]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a7a      	ldr	r2, [pc, #488]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b78      	ldr	r3, [pc, #480]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b74      	ldr	r3, [pc, #464]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a73      	ldr	r2, [pc, #460]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b71      	ldr	r3, [pc, #452]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b6d      	ldr	r3, [pc, #436]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a6c      	ldr	r2, [pc, #432]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b66      	ldr	r3, [pc, #408]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a65      	ldr	r2, [pc, #404]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b63      	ldr	r3, [pc, #396]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b5c      	ldr	r3, [pc, #368]	@ (8001108 <MX_GPIO_Init+0x224>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	4859      	ldr	r0, [pc, #356]	@ (800110c <MX_GPIO_Init+0x228>)
 8000fa8:	f001 f8d0 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4857      	ldr	r0, [pc, #348]	@ (8001110 <MX_GPIO_Init+0x22c>)
 8000fb2:	f001 f8cb 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000fbc:	4855      	ldr	r0, [pc, #340]	@ (8001114 <MX_GPIO_Init+0x230>)
 8000fbe:	f001 f8c5 	bl	800214c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	484d      	ldr	r0, [pc, #308]	@ (800110c <MX_GPIO_Init+0x228>)
 8000fd6:	f000 ff35 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4846      	ldr	r0, [pc, #280]	@ (800110c <MX_GPIO_Init+0x228>)
 8000ff2:	f000 ff27 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000ff6:	2332      	movs	r3, #50	@ 0x32
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ffa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4840      	ldr	r0, [pc, #256]	@ (800110c <MX_GPIO_Init+0x228>)
 800100c:	f000 ff1a 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	483a      	ldr	r0, [pc, #232]	@ (8001110 <MX_GPIO_Init+0x22c>)
 8001028:	f000 ff0c 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800102c:	2308      	movs	r3, #8
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103c:	2305      	movs	r3, #5
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4832      	ldr	r0, [pc, #200]	@ (8001110 <MX_GPIO_Init+0x22c>)
 8001048:	f000 fefc 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104c:	2301      	movs	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001050:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	482d      	ldr	r0, [pc, #180]	@ (8001118 <MX_GPIO_Init+0x234>)
 8001062:	f000 feef 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001066:	2310      	movs	r3, #16
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001076:	2306      	movs	r3, #6
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4825      	ldr	r0, [pc, #148]	@ (8001118 <MX_GPIO_Init+0x234>)
 8001082:	f000 fedf 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001086:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001098:	2305      	movs	r3, #5
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	481e      	ldr	r0, [pc, #120]	@ (800111c <MX_GPIO_Init+0x238>)
 80010a4:	f000 fece 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010a8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80010ac:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_GPIO_Init+0x230>)
 80010c2:	f000 febf 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010c6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010d8:	2306      	movs	r3, #6
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	480b      	ldr	r0, [pc, #44]	@ (8001110 <MX_GPIO_Init+0x22c>)
 80010e4:	f000 feae 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010e8:	2320      	movs	r3, #32
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_GPIO_Init+0x230>)
 80010fc:	f000 fea2 	bl	8001e44 <HAL_GPIO_Init>

}
 8001100:	bf00      	nop
 8001102:	3730      	adds	r7, #48	@ 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40021000 	.word	0x40021000
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400

08001120 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001126:	4a13      	ldr	r2, [pc, #76]	@ (8001174 <MX_I2C1_Init+0x54>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_I2C1_Init+0x50>)
 800112c:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <MX_I2C1_Init+0x58>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_I2C1_Init+0x50>)
 800113e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001142:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_I2C1_Init+0x50>)
 800115e:	f001 f829 	bl	80021b4 <HAL_I2C_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001168:	f000 fadc 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200002e8 	.word	0x200002e8
 8001174:	40005400 	.word	0x40005400
 8001178:	000186a0 	.word	0x000186a0

0800117c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_I2C_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12c      	bne.n	80011f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHTC3_SDA_Pin|SHTC3_SCL_Pin;
 80011ba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c0:	2312      	movs	r3, #18
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011cc:	2304      	movs	r3, #4
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_I2C_MspInit+0x8c>)
 80011d8:	f000 fe34 	bl	8001e44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005400 	.word	0x40005400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fc6f 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 fa19 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f7ff fe63 	bl	8000ee4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800121e:	f007 fb2b 	bl	8008878 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001222:	f7ff ff7d 	bl	8001120 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001226:	f000 fa83 	bl	8001730 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(0 == SIMULATE)
  {
	  shtc3_init(&shtc3_sensor, &hi2c1, SHTC3_I2C_ADDR);
 800122a:	2270      	movs	r2, #112	@ 0x70
 800122c:	4945      	ldr	r1, [pc, #276]	@ (8001344 <main+0x138>)
 800122e:	4846      	ldr	r0, [pc, #280]	@ (8001348 <main+0x13c>)
 8001230:	f007 f945 	bl	80084be <shtc3_init>
	  shtc3_wakeup(&shtc3_sensor);
 8001234:	4844      	ldr	r0, [pc, #272]	@ (8001348 <main+0x13c>)
 8001236:	f007 fa23 	bl	8008680 <shtc3_wakeup>
	  shtc3_get_id(&shtc3_sensor);
 800123a:	4843      	ldr	r0, [pc, #268]	@ (8001348 <main+0x13c>)
 800123c:	f007 f95b 	bl	80084f6 <shtc3_get_id>
	  shtc3_sleep(&shtc3_sensor);
 8001240:	4841      	ldr	r0, [pc, #260]	@ (8001348 <main+0x13c>)
 8001242:	f007 fa0c 	bl	800865e <shtc3_sleep>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(0 == SIMULATE)
	{
		uint8_t ret	= 0;
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]
		switch(shtc3_sensor.state)
 800124a:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <main+0x13c>)
 800124c:	7a9b      	ldrb	r3, [r3, #10]
 800124e:	3b01      	subs	r3, #1
 8001250:	2b04      	cmp	r3, #4
 8001252:	d86d      	bhi.n	8001330 <main+0x124>
 8001254:	a201      	add	r2, pc, #4	@ (adr r2, 800125c <main+0x50>)
 8001256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125a:	bf00      	nop
 800125c:	08001287 	.word	0x08001287
 8001260:	080012df 	.word	0x080012df
 8001264:	08001271 	.word	0x08001271
 8001268:	080012bd 	.word	0x080012bd
 800126c:	08001315 	.word	0x08001315
		{
			case SHTC3_SINGLE_MEASURE_START:
				 ret = shtc3_raw_write_temp_and_hum(&shtc3_sensor);
 8001270:	4835      	ldr	r0, [pc, #212]	@ (8001348 <main+0x13c>)
 8001272:	f007 f97d 	bl	8008570 <shtc3_raw_write_temp_and_hum>
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
				if(0 == ret) {shtc3_sensor.state = SHTC3_SINGLE_MEASURE;}
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <main+0x7a>
 8001280:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <main+0x13c>)
 8001282:	2201      	movs	r2, #1
 8001284:	729a      	strb	r2, [r3, #10]
			case SHTC3_SINGLE_MEASURE:
				ret = shtc3_raw_read_temp_and_hum(&shtc3_sensor);
 8001286:	4830      	ldr	r0, [pc, #192]	@ (8001348 <main+0x13c>)
 8001288:	f007 f988 	bl	800859c <shtc3_raw_read_temp_and_hum>
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
				if(0 == ret)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d14e      	bne.n	8001334 <main+0x128>
				{
					shtc3_sleep(&shtc3_sensor);
 8001296:	482c      	ldr	r0, [pc, #176]	@ (8001348 <main+0x13c>)
 8001298:	f007 f9e1 	bl	800865e <shtc3_sleep>
					memcpy(&report[0], &shtc3_sensor.temp, sizeof(shtc3_sensor.temp));
 800129c:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <main+0x13c>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4a2a      	ldr	r2, [pc, #168]	@ (800134c <main+0x140>)
 80012a2:	6013      	str	r3, [r2, #0]
					memcpy(&report[4], &shtc3_sensor.hum, sizeof(shtc3_sensor.hum));
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <main+0x13c>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4a28      	ldr	r2, [pc, #160]	@ (800134c <main+0x140>)
 80012aa:	6053      	str	r3, [r2, #4]
					usbSend(report, 8);
 80012ac:	2108      	movs	r1, #8
 80012ae:	4827      	ldr	r0, [pc, #156]	@ (800134c <main+0x140>)
 80012b0:	f000 f872 	bl	8001398 <usbSend>
					shtc3_sensor.state = SHTC3_IDLE;
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <main+0x13c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	729a      	strb	r2, [r3, #10]
				}
				break;
 80012ba:	e03b      	b.n	8001334 <main+0x128>
			case SHTC3_CYCLIC_MEASURE_START:
				ret = shtc3_raw_write_temp_and_hum(&shtc3_sensor);
 80012bc:	4822      	ldr	r0, [pc, #136]	@ (8001348 <main+0x13c>)
 80012be:	f007 f957 	bl	8008570 <shtc3_raw_write_temp_and_hum>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
				if(0 == ret)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d135      	bne.n	8001338 <main+0x12c>
				{
					shtc3_sensor.state = SHTC3_CYCLIC_MEASURE;
 80012cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <main+0x13c>)
 80012ce:	2202      	movs	r2, #2
 80012d0:	729a      	strb	r2, [r3, #10]
					shtc3_sensor.cyclic_timestamp = HAL_GetTick();
 80012d2:	f000 fc75 	bl	8001bc0 <HAL_GetTick>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001348 <main+0x13c>)
 80012da:	6193      	str	r3, [r2, #24]
				}
				break;
 80012dc:	e02c      	b.n	8001338 <main+0x12c>
			case SHTC3_CYCLIC_MEASURE:
				ret = shtc3_raw_read_temp_and_hum(&shtc3_sensor);
 80012de:	481a      	ldr	r0, [pc, #104]	@ (8001348 <main+0x13c>)
 80012e0:	f007 f95c 	bl	800859c <shtc3_raw_read_temp_and_hum>
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
				if(0 == ret)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d126      	bne.n	800133c <main+0x130>
				{
					shtc3_sleep(&shtc3_sensor);
 80012ee:	4816      	ldr	r0, [pc, #88]	@ (8001348 <main+0x13c>)
 80012f0:	f007 f9b5 	bl	800865e <shtc3_sleep>
					memcpy(&report[0], &shtc3_sensor.temp, sizeof(shtc3_sensor.temp));
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <main+0x13c>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a14      	ldr	r2, [pc, #80]	@ (800134c <main+0x140>)
 80012fa:	6013      	str	r3, [r2, #0]
					memcpy(&report[4], &shtc3_sensor.hum, sizeof(shtc3_sensor.hum));
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <main+0x13c>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	4a12      	ldr	r2, [pc, #72]	@ (800134c <main+0x140>)
 8001302:	6053      	str	r3, [r2, #4]
					usbSend(report, 8);
 8001304:	2108      	movs	r1, #8
 8001306:	4811      	ldr	r0, [pc, #68]	@ (800134c <main+0x140>)
 8001308:	f000 f846 	bl	8001398 <usbSend>
					shtc3_sensor.state = SHTC3_CYCLIC_MEASURE_WAIT;
 800130c:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <main+0x13c>)
 800130e:	2205      	movs	r2, #5
 8001310:	729a      	strb	r2, [r3, #10]
				}
				break;
 8001312:	e013      	b.n	800133c <main+0x130>
			case SHTC3_CYCLIC_MEASURE_WAIT:
				if(HAL_GetTick() - shtc3_sensor.cyclic_timestamp >= shtc3_sensor.period_ms)
 8001314:	f000 fc54 	bl	8001bc0 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <main+0x13c>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <main+0x13c>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	d30b      	bcc.n	8001340 <main+0x134>
				{
					shtc3_sensor.state = SHTC3_CYCLIC_MEASURE_START;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <main+0x13c>)
 800132a:	2204      	movs	r2, #4
 800132c:	729a      	strb	r2, [r3, #10]
				}
				break;
 800132e:	e007      	b.n	8001340 <main+0x134>
			case SHTC3_IDLE:
			default:
	//			shtc3_get_temp_and_hum(&shtc3_sensor);
				break;
 8001330:	bf00      	nop
 8001332:	e788      	b.n	8001246 <main+0x3a>
				break;
 8001334:	bf00      	nop
 8001336:	e786      	b.n	8001246 <main+0x3a>
				break;
 8001338:	bf00      	nop
 800133a:	e784      	b.n	8001246 <main+0x3a>
				break;
 800133c:	bf00      	nop
 800133e:	e782      	b.n	8001246 <main+0x3a>
				break;
 8001340:	bf00      	nop
	if(0 == SIMULATE)
 8001342:	e780      	b.n	8001246 <main+0x3a>
 8001344:	200002e8 	.word	0x200002e8
 8001348:	2000033c 	.word	0x2000033c
 800134c:	20000358 	.word	0x20000358

08001350 <compareStrings>:
  }
  /* USER CODE END 3 */
}

static bool compareStrings(uint8_t *buffer, char *str, uint16_t max_len)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
	return (0 == strncmp((char *)buffer, str, (strlen(str) > max_len ? max_len : strlen(str))));
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f7fe ff8e 	bl	8000280 <strlen>
 8001364:	4602      	mov	r2, r0
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	429a      	cmp	r2, r3
 800136a:	d901      	bls.n	8001370 <compareStrings+0x20>
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	e003      	b.n	8001378 <compareStrings+0x28>
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f7fe ff85 	bl	8000280 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f008 fcfa 	bl	8009d76 <strncmp>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <usbSend>:

static void usbSend(uint8_t *report, uint8_t len)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <usbSend+0x40>)
 80013a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d10e      	bne.n	80013ce <usbSend+0x36>
	{
		while (((USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData)->state != CUSTOM_HID_IDLE);
 80013b0:	bf00      	nop
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <usbSend+0x40>)
 80013b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80013b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f8      	bne.n	80013b2 <usbSend+0x1a>
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <usbSend+0x40>)
 80013ca:	f005 fbd3 	bl	8006b74 <USBD_CUSTOM_HID_SendReport>
	}
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200003fc 	.word	0x200003fc

080013dc <shtc3ParsePeriod>:

static bool shtc3ParsePeriod(const uint8_t *buffer, uint32_t *period_out)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
    if (!buffer || !period_out)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <shtc3ParsePeriod+0x16>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <shtc3ParsePeriod+0x1a>
        return false;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e021      	b.n	800143a <shtc3ParsePeriod+0x5e>

    uint32_t prefix_len = strlen(SHTC3_CMD_SET_PERIOD);
 80013f6:	230d      	movs	r3, #13
 80013f8:	617b      	str	r3, [r7, #20]

    // Sprawdzenie prefiksu
    if (strncmp((const char *)buffer, SHTC3_CMD_SET_PERIOD, prefix_len) != 0)
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4911      	ldr	r1, [pc, #68]	@ (8001444 <shtc3ParsePeriod+0x68>)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f008 fcb9 	bl	8009d76 <strncmp>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <shtc3ParsePeriod+0x32>
        return false;
 800140a:	2300      	movs	r3, #0
 800140c:	e015      	b.n	800143a <shtc3ParsePeriod+0x5e>

    // Wskaźnik do miejsca po "SHTC3 PERIOD:"
    const char *number_str = (const char *)(buffer + prefix_len);
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4413      	add	r3, r2
 8001414:	613b      	str	r3, [r7, #16]

    // Parsowanie liczby
    char *endptr;
    unsigned long val = strtoul(number_str, &endptr, 10);
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	220a      	movs	r2, #10
 800141c:	4619      	mov	r1, r3
 800141e:	6938      	ldr	r0, [r7, #16]
 8001420:	f007 ff1a 	bl	8009258 <strtoul>
 8001424:	60f8      	str	r0, [r7, #12]

    // Sprawdzenie, czy udało się sparsować oraz czy nie przekroczono uint32_t
    if (number_str == endptr || val > UINT32_MAX || val < 0)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	429a      	cmp	r2, r3
 800142c:	d101      	bne.n	8001432 <shtc3ParsePeriod+0x56>
        return false;
 800142e:	2300      	movs	r3, #0
 8001430:	e003      	b.n	800143a <shtc3ParsePeriod+0x5e>

    *period_out = (uint32_t)val;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	601a      	str	r2, [r3, #0]
    return true;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800bf40 	.word	0x0800bf40

08001448 <usb_parser>:

void usb_parser(uint8_t *buffer, uint16_t max_len)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
	memset(report, 0,sizeof(report));
 8001454:	2240      	movs	r2, #64	@ 0x40
 8001456:	2100      	movs	r1, #0
 8001458:	486d      	ldr	r0, [pc, #436]	@ (8001610 <usb_parser+0x1c8>)
 800145a:	f008 fc84 	bl	8009d66 <memset>
	if(compareStrings(buffer, SHTC3_CMD_READ_DATA, max_len))
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	461a      	mov	r2, r3
 8001462:	496c      	ldr	r1, [pc, #432]	@ (8001614 <usb_parser+0x1cc>)
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff73 	bl	8001350 <compareStrings>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01f      	beq.n	80014b0 <usb_parser+0x68>
	{
		sprintf((char *)report, "SHTC3 DATA: %.3f %.3f", shtc3_sensor.temp, shtc3_sensor.hum);
 8001470:	4b69      	ldr	r3, [pc, #420]	@ (8001618 <usb_parser+0x1d0>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f86f 	bl	8000558 <__aeabi_f2d>
 800147a:	4604      	mov	r4, r0
 800147c:	460d      	mov	r5, r1
 800147e:	4b66      	ldr	r3, [pc, #408]	@ (8001618 <usb_parser+0x1d0>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f868 	bl	8000558 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	e9cd 2300 	strd	r2, r3, [sp]
 8001490:	4622      	mov	r2, r4
 8001492:	462b      	mov	r3, r5
 8001494:	4961      	ldr	r1, [pc, #388]	@ (800161c <usb_parser+0x1d4>)
 8001496:	485e      	ldr	r0, [pc, #376]	@ (8001610 <usb_parser+0x1c8>)
 8001498:	f008 fc00 	bl	8009c9c <siprintf>
		usbSend(report, strlen((char *)report));
 800149c:	485c      	ldr	r0, [pc, #368]	@ (8001610 <usb_parser+0x1c8>)
 800149e:	f7fe feef 	bl	8000280 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	4859      	ldr	r0, [pc, #356]	@ (8001610 <usb_parser+0x1c8>)
 80014aa:	f7ff ff75 	bl	8001398 <usbSend>
	else if(compareStrings(buffer, SHTC3_CMD_GET_PERIOD, max_len))
	{
		sprintf((char *)report, "SHTC3 PERIOD: %ld", shtc3_sensor.period_ms);
		usbSend(report, strlen((char *)report));
	}
}
 80014ae:	e0aa      	b.n	8001606 <usb_parser+0x1be>
	else if(compareStrings(buffer, SHTC3_CMD_READ_STATE, max_len))
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	461a      	mov	r2, r3
 80014b4:	495a      	ldr	r1, [pc, #360]	@ (8001620 <usb_parser+0x1d8>)
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff4a 	bl	8001350 <compareStrings>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d02c      	beq.n	800151c <usb_parser+0xd4>
		switch (shtc3_sensor.state)
 80014c2:	4b55      	ldr	r3, [pc, #340]	@ (8001618 <usb_parser+0x1d0>)
 80014c4:	7a9b      	ldrb	r3, [r3, #10]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d819      	bhi.n	80014fe <usb_parser+0xb6>
 80014ca:	a201      	add	r2, pc, #4	@ (adr r2, 80014d0 <usb_parser+0x88>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	080014e1 	.word	0x080014e1
 80014d4:	080014eb 	.word	0x080014eb
 80014d8:	080014f5 	.word	0x080014f5
 80014dc:	080014eb 	.word	0x080014eb
				sprintf((char *)report, "SHTC3 IDLE");
 80014e0:	4950      	ldr	r1, [pc, #320]	@ (8001624 <usb_parser+0x1dc>)
 80014e2:	484b      	ldr	r0, [pc, #300]	@ (8001610 <usb_parser+0x1c8>)
 80014e4:	f008 fbda 	bl	8009c9c <siprintf>
				break;
 80014e8:	e00e      	b.n	8001508 <usb_parser+0xc0>
				sprintf((char *)report, "SHTC3 SINGLE MEASURE");
 80014ea:	494f      	ldr	r1, [pc, #316]	@ (8001628 <usb_parser+0x1e0>)
 80014ec:	4848      	ldr	r0, [pc, #288]	@ (8001610 <usb_parser+0x1c8>)
 80014ee:	f008 fbd5 	bl	8009c9c <siprintf>
				break;
 80014f2:	e009      	b.n	8001508 <usb_parser+0xc0>
				sprintf((char *)report, "SHTC3 CYCLIC MEASURE");
 80014f4:	494d      	ldr	r1, [pc, #308]	@ (800162c <usb_parser+0x1e4>)
 80014f6:	4846      	ldr	r0, [pc, #280]	@ (8001610 <usb_parser+0x1c8>)
 80014f8:	f008 fbd0 	bl	8009c9c <siprintf>
				break;
 80014fc:	e004      	b.n	8001508 <usb_parser+0xc0>
				sprintf((char *)report, "SHTC3 UNKNOW");
 80014fe:	494c      	ldr	r1, [pc, #304]	@ (8001630 <usb_parser+0x1e8>)
 8001500:	4843      	ldr	r0, [pc, #268]	@ (8001610 <usb_parser+0x1c8>)
 8001502:	f008 fbcb 	bl	8009c9c <siprintf>
				break;
 8001506:	bf00      	nop
		usbSend(report, strlen((char *)report));
 8001508:	4841      	ldr	r0, [pc, #260]	@ (8001610 <usb_parser+0x1c8>)
 800150a:	f7fe feb9 	bl	8000280 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	483e      	ldr	r0, [pc, #248]	@ (8001610 <usb_parser+0x1c8>)
 8001516:	f7ff ff3f 	bl	8001398 <usbSend>
}
 800151a:	e074      	b.n	8001606 <usb_parser+0x1be>
	else if(compareStrings(buffer, SHTC3_CMD_SET_SINGLE, max_len))
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	461a      	mov	r2, r3
 8001520:	4944      	ldr	r1, [pc, #272]	@ (8001634 <usb_parser+0x1ec>)
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff14 	bl	8001350 <compareStrings>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <usb_parser+0x100>
		switch (shtc3_sensor.state)
 800152e:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <usb_parser+0x1d0>)
 8001530:	7a9b      	ldrb	r3, [r3, #10]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <usb_parser+0xf6>
				shtc3_sensor.state = SHTC3_SINGLE_MEASURE_START;
 8001536:	4b38      	ldr	r3, [pc, #224]	@ (8001618 <usb_parser+0x1d0>)
 8001538:	2203      	movs	r2, #3
 800153a:	729a      	strb	r2, [r3, #10]
				break;
 800153c:	e063      	b.n	8001606 <usb_parser+0x1be>
				sprintf((char *)report, "SHTC3 BUSY");
 800153e:	493e      	ldr	r1, [pc, #248]	@ (8001638 <usb_parser+0x1f0>)
 8001540:	4833      	ldr	r0, [pc, #204]	@ (8001610 <usb_parser+0x1c8>)
 8001542:	f008 fbab 	bl	8009c9c <siprintf>
				break;
 8001546:	e05e      	b.n	8001606 <usb_parser+0x1be>
	else if(compareStrings(buffer, SHTC3_CMD_SET_PERIOD, max_len))
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	461a      	mov	r2, r3
 800154c:	493b      	ldr	r1, [pc, #236]	@ (800163c <usb_parser+0x1f4>)
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fefe 	bl	8001350 <compareStrings>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d03b      	beq.n	80015d2 <usb_parser+0x18a>
		if(strlen((char *)buffer) < strlen(SHTC3_CMD_SET_PERIOD))
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7fe fe90 	bl	8000280 <strlen>
 8001560:	4603      	mov	r3, r0
 8001562:	2b0c      	cmp	r3, #12
 8001564:	d80c      	bhi.n	8001580 <usb_parser+0x138>
			sprintf((char *)report, "SHTC3 PERIOD INCORRECT");
 8001566:	4936      	ldr	r1, [pc, #216]	@ (8001640 <usb_parser+0x1f8>)
 8001568:	4829      	ldr	r0, [pc, #164]	@ (8001610 <usb_parser+0x1c8>)
 800156a:	f008 fb97 	bl	8009c9c <siprintf>
			usbSend(report, strlen((char *)report));
 800156e:	4828      	ldr	r0, [pc, #160]	@ (8001610 <usb_parser+0x1c8>)
 8001570:	f7fe fe86 	bl	8000280 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4619      	mov	r1, r3
 800157a:	4825      	ldr	r0, [pc, #148]	@ (8001610 <usb_parser+0x1c8>)
 800157c:	f7ff ff0c 	bl	8001398 <usbSend>
		uint32_t periodTmp = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
		bool ret = shtc3ParsePeriod(buffer, &periodTmp);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff26 	bl	80013dc <shtc3ParsePeriod>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
		if(ret)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00d      	beq.n	80015b6 <usb_parser+0x16e>
			shtc3_sensor.period_ms = periodTmp;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	4a1e      	ldr	r2, [pc, #120]	@ (8001618 <usb_parser+0x1d0>)
 800159e:	6153      	str	r3, [r2, #20]
			if(periodTmp != 0) { shtc3_sensor.state = SHTC3_CYCLIC_MEASURE_START;}
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <usb_parser+0x166>
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <usb_parser+0x1d0>)
 80015a8:	2204      	movs	r2, #4
 80015aa:	729a      	strb	r2, [r3, #10]
}
 80015ac:	e02b      	b.n	8001606 <usb_parser+0x1be>
			else {shtc3_sensor.state = SHTC3_IDLE;}
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <usb_parser+0x1d0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	729a      	strb	r2, [r3, #10]
}
 80015b4:	e027      	b.n	8001606 <usb_parser+0x1be>
			sprintf((char *)report, "SHTC3 PERIOD INCORRECT");
 80015b6:	4922      	ldr	r1, [pc, #136]	@ (8001640 <usb_parser+0x1f8>)
 80015b8:	4815      	ldr	r0, [pc, #84]	@ (8001610 <usb_parser+0x1c8>)
 80015ba:	f008 fb6f 	bl	8009c9c <siprintf>
			usbSend(report, strlen((char *)report));
 80015be:	4814      	ldr	r0, [pc, #80]	@ (8001610 <usb_parser+0x1c8>)
 80015c0:	f7fe fe5e 	bl	8000280 <strlen>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	4811      	ldr	r0, [pc, #68]	@ (8001610 <usb_parser+0x1c8>)
 80015cc:	f7ff fee4 	bl	8001398 <usbSend>
}
 80015d0:	e019      	b.n	8001606 <usb_parser+0x1be>
	else if(compareStrings(buffer, SHTC3_CMD_GET_PERIOD, max_len))
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	461a      	mov	r2, r3
 80015d6:	491b      	ldr	r1, [pc, #108]	@ (8001644 <usb_parser+0x1fc>)
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff feb9 	bl	8001350 <compareStrings>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d010      	beq.n	8001606 <usb_parser+0x1be>
		sprintf((char *)report, "SHTC3 PERIOD: %ld", shtc3_sensor.period_ms);
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <usb_parser+0x1d0>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4917      	ldr	r1, [pc, #92]	@ (8001648 <usb_parser+0x200>)
 80015ec:	4808      	ldr	r0, [pc, #32]	@ (8001610 <usb_parser+0x1c8>)
 80015ee:	f008 fb55 	bl	8009c9c <siprintf>
		usbSend(report, strlen((char *)report));
 80015f2:	4807      	ldr	r0, [pc, #28]	@ (8001610 <usb_parser+0x1c8>)
 80015f4:	f7fe fe44 	bl	8000280 <strlen>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4619      	mov	r1, r3
 80015fe:	4804      	ldr	r0, [pc, #16]	@ (8001610 <usb_parser+0x1c8>)
 8001600:	f7ff feca 	bl	8001398 <usbSend>
}
 8001604:	e7ff      	b.n	8001606 <usb_parser+0x1be>
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
 800160e:	bf00      	nop
 8001610:	20000358 	.word	0x20000358
 8001614:	0800bf50 	.word	0x0800bf50
 8001618:	2000033c 	.word	0x2000033c
 800161c:	0800bf5c 	.word	0x0800bf5c
 8001620:	0800bf74 	.word	0x0800bf74
 8001624:	0800bf80 	.word	0x0800bf80
 8001628:	0800bf8c 	.word	0x0800bf8c
 800162c:	0800bfa4 	.word	0x0800bfa4
 8001630:	0800bfbc 	.word	0x0800bfbc
 8001634:	0800bfcc 	.word	0x0800bfcc
 8001638:	0800bfdc 	.word	0x0800bfdc
 800163c:	0800bf40 	.word	0x0800bf40
 8001640:	0800bfe8 	.word	0x0800bfe8
 8001644:	0800c000 	.word	0x0800c000
 8001648:	0800c010 	.word	0x0800c010

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	@ 0x50
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	2230      	movs	r2, #48	@ 0x30
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f008 fb83 	bl	8009d66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <SystemClock_Config+0xd0>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	4a28      	ldr	r2, [pc, #160]	@ (800171c <SystemClock_Config+0xd0>)
 800167a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001680:	4b26      	ldr	r3, [pc, #152]	@ (800171c <SystemClock_Config+0xd0>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <SystemClock_Config+0xd4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a22      	ldr	r2, [pc, #136]	@ (8001720 <SystemClock_Config+0xd4>)
 8001696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <SystemClock_Config+0xd4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b2:	2301      	movs	r3, #1
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b6:	2310      	movs	r3, #16
 80016b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ba:	2302      	movs	r3, #2
 80016bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016c8:	2348      	movs	r3, #72	@ 0x48
 80016ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80016cc:	2306      	movs	r3, #6
 80016ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016d0:	2303      	movs	r3, #3
 80016d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 ff9f 	bl	800461c <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016e4:	f000 f81e 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	230f      	movs	r3, #15
 80016ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fa01 	bl	8004b0c <HAL_RCC_ClockConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001710:	f000 f808 	bl	8001724 <Error_Handler>
  }
}
 8001714:	bf00      	nop
 8001716:	3750      	adds	r7, #80	@ 0x50
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <Error_Handler+0x8>

08001730 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001736:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <MX_SPI1_Init+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <MX_SPI1_Init+0x64>)
 800173c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_SPI1_Init+0x64>)
 800175c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001760:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001764:	2210      	movs	r2, #16
 8001766:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_SPI1_Init+0x64>)
 800177c:	220a      	movs	r2, #10
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001782:	f003 fbcf 	bl	8004f24 <HAL_SPI_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800178c:	f7ff ffca 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000398 	.word	0x20000398
 8001798:	40013000 	.word	0x40013000

0800179c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	@ (8001820 <HAL_SPI_MspInit+0x84>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d12b      	bne.n	8001816 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_SPI_MspInit+0x88>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	4a17      	ldr	r2, [pc, #92]	@ (8001824 <HAL_SPI_MspInit+0x88>)
 80017c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_SPI_MspInit+0x88>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_SPI_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a10      	ldr	r2, [pc, #64]	@ (8001824 <HAL_SPI_MspInit+0x88>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_SPI_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BME280_SCK_Pin|BME280_MISO_Pin|BME280_MOSI_Pin;
 80017f6:	23e0      	movs	r3, #224	@ 0xe0
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001806:	2305      	movs	r3, #5
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_SPI_MspInit+0x8c>)
 8001812:	f000 fb17 	bl	8001e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	@ 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40013000 	.word	0x40013000
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000

0800182c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a0f      	ldr	r2, [pc, #60]	@ (8001878 <HAL_MspInit+0x4c>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <HAL_MspInit+0x4c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186a:	2007      	movs	r0, #7
 800186c:	f000 faa8 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d2:	f000 f961 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <OTG_FS_IRQHandler+0x10>)
 80018e2:	f001 fda5 	bl	8003430 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200008d8 	.word	0x200008d8

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190a:	f008 fa91 	bl	8009e30 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
  return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001932:	bf00      	nop
 8001934:	e7fd      	b.n	8001932 <_exit+0x12>

08001936 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e00a      	b.n	800195e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001948:	f3af 8000 	nop.w
 800194c:	4601      	mov	r1, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	60ba      	str	r2, [r7, #8]
 8001954:	b2ca      	uxtb	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	dbf0      	blt.n	8001948 <_read+0x12>
  }

  return len;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e009      	b.n	8001996 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	60ba      	str	r2, [r7, #8]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	dbf1      	blt.n	8001982 <_write+0x12>
  }
  return len;
 800199e:	687b      	ldr	r3, [r7, #4]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_close>:

int _close(int file)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d0:	605a      	str	r2, [r3, #4]
  return 0;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_isatty>:

int _isatty(int file)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f008 f9f6 	bl	8009e30 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20020000 	.word	0x20020000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	200003f0 	.word	0x200003f0
 8001a78:	20000f60 	.word	0x20000f60

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aa4:	f7ff ffea 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ace:	f008 f9b5 	bl	8009e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff fb9b 	bl	800120c <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001ae4:	0800c410 	.word	0x0800c410
  ldr r2, =_sbss
 8001ae8:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001aec:	20000f60 	.word	0x20000f60

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <HAL_Init+0x40>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_Init+0x40>)
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_Init+0x40>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f94f 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fe80 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f967 	bl	8001e2a <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 f92f 	bl	8001dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	200003f4 	.word	0x200003f4

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200003f4 	.word	0x200003f4

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	@ (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	@ (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	@ 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e159      	b.n	8002114 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 8148 	bne.w	800210e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d005      	beq.n	8001e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d130      	bne.n	8001ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 0201 	and.w	r2, r3, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d017      	beq.n	8001f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d123      	bne.n	8001f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a2 	beq.w	800210e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b57      	ldr	r3, [pc, #348]	@ (800212c <HAL_GPIO_Init+0x2e8>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	4a56      	ldr	r2, [pc, #344]	@ (800212c <HAL_GPIO_Init+0x2e8>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fda:	4b54      	ldr	r3, [pc, #336]	@ (800212c <HAL_GPIO_Init+0x2e8>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe6:	4a52      	ldr	r2, [pc, #328]	@ (8002130 <HAL_GPIO_Init+0x2ec>)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a49      	ldr	r2, [pc, #292]	@ (8002134 <HAL_GPIO_Init+0x2f0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x202>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a48      	ldr	r2, [pc, #288]	@ (8002138 <HAL_GPIO_Init+0x2f4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x1fe>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a47      	ldr	r2, [pc, #284]	@ (800213c <HAL_GPIO_Init+0x2f8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x1fa>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a46      	ldr	r2, [pc, #280]	@ (8002140 <HAL_GPIO_Init+0x2fc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x1f6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a45      	ldr	r2, [pc, #276]	@ (8002144 <HAL_GPIO_Init+0x300>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x1f2>
 8002032:	2304      	movs	r3, #4
 8002034:	e008      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002036:	2307      	movs	r3, #7
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x204>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_Init+0x204>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x204>
 8002046:	2300      	movs	r3, #0
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002058:	4935      	ldr	r1, [pc, #212]	@ (8002130 <HAL_GPIO_Init+0x2ec>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <HAL_GPIO_Init+0x304>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208a:	4a2f      	ldr	r2, [pc, #188]	@ (8002148 <HAL_GPIO_Init+0x304>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002090:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <HAL_GPIO_Init+0x304>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b4:	4a24      	ldr	r2, [pc, #144]	@ (8002148 <HAL_GPIO_Init+0x304>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ba:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <HAL_GPIO_Init+0x304>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020de:	4a1a      	ldr	r2, [pc, #104]	@ (8002148 <HAL_GPIO_Init+0x304>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e4:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <HAL_GPIO_Init+0x304>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002108:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <HAL_GPIO_Init+0x304>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	f67f aea2 	bls.w	8001e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	40013800 	.word	0x40013800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400
 800213c:	40020800 	.word	0x40020800
 8002140:	40020c00 	.word	0x40020c00
 8002144:	40021000 	.word	0x40021000
 8002148:	40013c00 	.word	0x40013c00

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002190:	887a      	ldrh	r2, [r7, #2]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	041a      	lsls	r2, r3, #16
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43d9      	mvns	r1, r3
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	400b      	ands	r3, r1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e12b      	b.n	800241e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe ffce 	bl	800117c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	@ 0x24
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002218:	f002 fe70 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a81      	ldr	r2, [pc, #516]	@ (8002428 <HAL_I2C_Init+0x274>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d807      	bhi.n	8002238 <HAL_I2C_Init+0x84>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a80      	ldr	r2, [pc, #512]	@ (800242c <HAL_I2C_Init+0x278>)
 800222c:	4293      	cmp	r3, r2
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e006      	b.n	8002246 <HAL_I2C_Init+0x92>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a7d      	ldr	r2, [pc, #500]	@ (8002430 <HAL_I2C_Init+0x27c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	bf94      	ite	ls
 8002240:	2301      	movls	r3, #1
 8002242:	2300      	movhi	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0e7      	b.n	800241e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a78      	ldr	r2, [pc, #480]	@ (8002434 <HAL_I2C_Init+0x280>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a6a      	ldr	r2, [pc, #424]	@ (8002428 <HAL_I2C_Init+0x274>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d802      	bhi.n	8002288 <HAL_I2C_Init+0xd4>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	e009      	b.n	800229c <HAL_I2C_Init+0xe8>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	4a69      	ldr	r2, [pc, #420]	@ (8002438 <HAL_I2C_Init+0x284>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	3301      	adds	r3, #1
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	495c      	ldr	r1, [pc, #368]	@ (8002428 <HAL_I2C_Init+0x274>)
 80022b8:	428b      	cmp	r3, r1
 80022ba:	d819      	bhi.n	80022f0 <HAL_I2C_Init+0x13c>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e59      	subs	r1, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ca:	1c59      	adds	r1, r3, #1
 80022cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022d0:	400b      	ands	r3, r1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_I2C_Init+0x138>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e59      	subs	r1, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	e051      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 80022ec:	2304      	movs	r3, #4
 80022ee:	e04f      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <HAL_I2C_Init+0x168>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	440b      	add	r3, r1
 8002306:	fbb0 f3f3 	udiv	r3, r0, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e012      	b.n	8002342 <HAL_I2C_Init+0x18e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Init+0x196>
 8002346:	2301      	movs	r3, #1
 8002348:	e022      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10e      	bne.n	8002370 <HAL_I2C_Init+0x1bc>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e58      	subs	r0, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	440b      	add	r3, r1
 8002360:	fbb0 f3f3 	udiv	r3, r0, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800236e:	e00f      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	0099      	lsls	r1, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	6809      	ldr	r1, [r1, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6911      	ldr	r1, [r2, #16]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68d2      	ldr	r2, [r2, #12]
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	000186a0 	.word	0x000186a0
 800242c:	001e847f 	.word	0x001e847f
 8002430:	003d08ff 	.word	0x003d08ff
 8002434:	431bde83 	.word	0x431bde83
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	461a      	mov	r2, r3
 8002448:	460b      	mov	r3, r1
 800244a:	817b      	strh	r3, [r7, #10]
 800244c:	4613      	mov	r3, r2
 800244e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff fbb6 	bl	8001bc0 <HAL_GetTick>
 8002454:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b20      	cmp	r3, #32
 8002460:	f040 80e0 	bne.w	8002624 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2319      	movs	r3, #25
 800246a:	2201      	movs	r2, #1
 800246c:	4970      	ldr	r1, [pc, #448]	@ (8002630 <HAL_I2C_Master_Transmit+0x1f4>)
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fc64 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	e0d3      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_I2C_Master_Transmit+0x50>
 8002488:	2302      	movs	r3, #2
 800248a:	e0cc      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d007      	beq.n	80024b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	@ 0x21
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2210      	movs	r2, #16
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	893a      	ldrh	r2, [r7, #8]
 80024e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a50      	ldr	r2, [pc, #320]	@ (8002634 <HAL_I2C_Master_Transmit+0x1f8>)
 80024f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 face 	bl	8002a9c <I2C_MasterRequestWrite>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e08d      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002520:	e066      	b.n	80025f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6a39      	ldr	r1, [r7, #32]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fd22 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	2b04      	cmp	r3, #4
 8002538:	d107      	bne.n	800254a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06b      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b04      	cmp	r3, #4
 800258a:	d11b      	bne.n	80025c4 <HAL_I2C_Master_Transmit+0x188>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	d017      	beq.n	80025c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	6a39      	ldr	r1, [r7, #32]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fd19 	bl	8003000 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d107      	bne.n	80025ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e01a      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d194      	bne.n	8002522 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	00100002 	.word	0x00100002
 8002634:	ffff0000 	.word	0xffff0000

08002638 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	@ 0x30
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	817b      	strh	r3, [r7, #10]
 8002648:	4613      	mov	r3, r2
 800264a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff fab8 	bl	8001bc0 <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	f040 8217 	bne.w	8002a8e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2319      	movs	r3, #25
 8002666:	2201      	movs	r2, #1
 8002668:	497c      	ldr	r1, [pc, #496]	@ (800285c <HAL_I2C_Master_Receive+0x224>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fb66 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
 8002678:	e20a      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_I2C_Master_Receive+0x50>
 8002684:	2302      	movs	r3, #2
 8002686:	e203      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d007      	beq.n	80026ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2222      	movs	r2, #34	@ 0x22
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2210      	movs	r2, #16
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	893a      	ldrh	r2, [r7, #8]
 80026de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a5c      	ldr	r2, [pc, #368]	@ (8002860 <HAL_I2C_Master_Receive+0x228>)
 80026ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026f0:	8979      	ldrh	r1, [r7, #10]
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa52 	bl	8002ba0 <I2C_MasterRequestRead>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e1c4      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d113      	bne.n	8002736 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e198      	b.n	8002a68 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273a:	2b01      	cmp	r3, #1
 800273c:	d11b      	bne.n	8002776 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800274c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e178      	b.n	8002a68 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277a:	2b02      	cmp	r3, #2
 800277c:	d11b      	bne.n	80027b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800279c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	e158      	b.n	8002a68 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027dc:	e144      	b.n	8002a68 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	f200 80f1 	bhi.w	80029ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d123      	bne.n	8002838 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fc4b 	bl	8003090 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e145      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002836:	e117      	b.n	8002a68 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	2b02      	cmp	r3, #2
 800283e:	d14e      	bne.n	80028de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	2200      	movs	r2, #0
 8002848:	4906      	ldr	r1, [pc, #24]	@ (8002864 <HAL_I2C_Master_Receive+0x22c>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fa76 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e11a      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
 800285a:	bf00      	nop
 800285c:	00100002 	.word	0x00100002
 8002860:	ffff0000 	.word	0xffff0000
 8002864:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028dc:	e0c4      	b.n	8002a68 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e4:	2200      	movs	r2, #0
 80028e6:	496c      	ldr	r1, [pc, #432]	@ (8002a98 <HAL_I2C_Master_Receive+0x460>)
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fa27 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0cb      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	2200      	movs	r2, #0
 8002942:	4955      	ldr	r1, [pc, #340]	@ (8002a98 <HAL_I2C_Master_Receive+0x460>)
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f9f9 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e09d      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029c8:	e04e      	b.n	8002a68 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fb5e 	bl	8003090 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e058      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d124      	bne.n	8002a68 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d107      	bne.n	8002a36 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a34:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f aeb6 	bne.w	80027de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e000      	b.n	8002a90 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3728      	adds	r7, #40	@ 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	00010004 	.word	0x00010004

08002a9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d006      	beq.n	8002ac6 <I2C_MasterRequestWrite+0x2a>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d003      	beq.n	8002ac6 <I2C_MasterRequestWrite+0x2a>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ac4:	d108      	bne.n	8002ad8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e00b      	b.n	8002af0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	2b12      	cmp	r3, #18
 8002ade:	d107      	bne.n	8002af0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f91d 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b16:	d103      	bne.n	8002b20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e035      	b.n	8002b90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b2c:	d108      	bne.n	8002b40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	e01b      	b.n	8002b78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b40:	897b      	ldrh	r3, [r7, #10]
 8002b42:	11db      	asrs	r3, r3, #7
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 0306 	and.w	r3, r3, #6
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f063 030f 	orn	r3, r3, #15
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	490e      	ldr	r1, [pc, #56]	@ (8002b98 <I2C_MasterRequestWrite+0xfc>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f966 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e010      	b.n	8002b90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b6e:	897b      	ldrh	r3, [r7, #10]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4907      	ldr	r1, [pc, #28]	@ (8002b9c <I2C_MasterRequestWrite+0x100>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f956 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	00010008 	.word	0x00010008
 8002b9c:	00010002 	.word	0x00010002

08002ba0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	460b      	mov	r3, r1
 8002bae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d006      	beq.n	8002bda <I2C_MasterRequestRead+0x3a>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d003      	beq.n	8002bda <I2C_MasterRequestRead+0x3a>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bd8:	d108      	bne.n	8002bec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e00b      	b.n	8002c04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf0:	2b11      	cmp	r3, #17
 8002bf2:	d107      	bne.n	8002c04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f893 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c2a:	d103      	bne.n	8002c34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e079      	b.n	8002d2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c40:	d108      	bne.n	8002c54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c42:	897b      	ldrh	r3, [r7, #10]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	611a      	str	r2, [r3, #16]
 8002c52:	e05f      	b.n	8002d14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c54:	897b      	ldrh	r3, [r7, #10]
 8002c56:	11db      	asrs	r3, r3, #7
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 0306 	and.w	r3, r3, #6
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f063 030f 	orn	r3, r3, #15
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4930      	ldr	r1, [pc, #192]	@ (8002d34 <I2C_MasterRequestRead+0x194>)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f8dc 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e054      	b.n	8002d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4929      	ldr	r1, [pc, #164]	@ (8002d38 <I2C_MasterRequestRead+0x198>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f8cc 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e044      	b.n	8002d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f831 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cee:	d103      	bne.n	8002cf8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cf6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e017      	b.n	8002d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cfc:	897b      	ldrh	r3, [r7, #10]
 8002cfe:	11db      	asrs	r3, r3, #7
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0306 	and.w	r3, r3, #6
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f063 030e 	orn	r3, r3, #14
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4907      	ldr	r1, [pc, #28]	@ (8002d38 <I2C_MasterRequestRead+0x198>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f888 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	00010008 	.word	0x00010008
 8002d38:	00010002 	.word	0x00010002

08002d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4c:	e048      	b.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d044      	beq.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe ff33 	bl	8001bc0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d139      	bne.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10d      	bne.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	e00c      	b.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d116      	bne.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e023      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d10d      	bne.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	e00c      	b.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4013      	ands	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d093      	beq.n	8002d4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e3e:	e071      	b.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4e:	d123      	bne.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e067      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d041      	beq.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea0:	f7fe fe8e 	bl	8001bc0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d136      	bne.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10c      	bne.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e00b      	b.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e021      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d10c      	bne.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e00b      	b.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f47f af6d 	bne.w	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f7c:	e034      	b.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f8e3 	bl	800314a <I2C_IsAcknowledgeFailed>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e034      	b.n	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d028      	beq.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe fe13 	bl	8001bc0 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11d      	bne.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb6:	2b80      	cmp	r3, #128	@ 0x80
 8002fb8:	d016      	beq.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff2:	2b80      	cmp	r3, #128	@ 0x80
 8002ff4:	d1c3      	bne.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800300c:	e034      	b.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f89b 	bl	800314a <I2C_IsAcknowledgeFailed>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e034      	b.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d028      	beq.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7fe fdcb 	bl	8001bc0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11d      	bne.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d016      	beq.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d1c3      	bne.n	800300e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800309c:	e049      	b.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d119      	bne.n	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0210 	mvn.w	r2, #16
 80030b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e030      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e0:	f7fe fd6e 	bl	8001bc0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d302      	bcc.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d016      	beq.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e007      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d1ae      	bne.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003160:	d11b      	bne.n	800319a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800316a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e101      	b.n	80033be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f005 fccb 	bl	8008b70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2203      	movs	r2, #3
 80031de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e8:	d102      	bne.n	80031f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 f836 	bl	8005266 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7c1a      	ldrb	r2, [r3, #16]
 8003202:	f88d 2000 	strb.w	r2, [sp]
 8003206:	3304      	adds	r3, #4
 8003208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320a:	f001 ff14 	bl	8005036 <USB_CoreInit>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0ce      	b.n	80033be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f002 f82e 	bl	8005288 <USB_SetCurrentMode>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0bf      	b.n	80033be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e04a      	b.n	80032da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3315      	adds	r3, #21
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3314      	adds	r3, #20
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	b298      	uxth	r0, r3
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	332e      	adds	r3, #46	@ 0x2e
 8003280:	4602      	mov	r2, r0
 8003282:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3318      	adds	r3, #24
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	331c      	adds	r3, #28
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3320      	adds	r3, #32
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	3324      	adds	r3, #36	@ 0x24
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	3301      	adds	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	791b      	ldrb	r3, [r3, #4]
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d3af      	bcc.n	8003244 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e044      	b.n	8003374 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	3301      	adds	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	791b      	ldrb	r3, [r3, #4]
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	429a      	cmp	r2, r3
 800337c:	d3b5      	bcc.n	80032ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7c1a      	ldrb	r2, [r3, #16]
 8003386:	f88d 2000 	strb.w	r2, [sp]
 800338a:	3304      	adds	r3, #4
 800338c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338e:	f001 ffc7 	bl	8005320 <USB_DevInit>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e00c      	b.n	80033be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 f811 	bl	80063de <USB_DevDisconnect>

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_PCD_Start+0x1c>
 80033de:	2302      	movs	r3, #2
 80033e0:	e022      	b.n	8003428 <HAL_PCD_Start+0x62>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f001 ff18 	bl	8005244 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f002 ffbf 	bl	800639c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b08d      	sub	sp, #52	@ 0x34
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f003 f87d 	bl	8006546 <USB_GetMode>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 848c 	bne.w	8003d6c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f002 ffe1 	bl	8006420 <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8482 	beq.w	8003d6a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f002 ffce 	bl	8006420 <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d107      	bne.n	800349e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f002 0202 	and.w	r2, r2, #2
 800349c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 ffbc 	bl	8006420 <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d161      	bne.n	8003576 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0210 	bic.w	r2, r2, #16
 80034c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	3304      	adds	r3, #4
 80034e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80034e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034ec:	d124      	bne.n	8003538 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d035      	beq.n	8003566 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003508:	b29b      	uxth	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	6a38      	ldr	r0, [r7, #32]
 800350e:	f002 fdf3 	bl	80060f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800351e:	441a      	add	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003530:	441a      	add	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	615a      	str	r2, [r3, #20]
 8003536:	e016      	b.n	8003566 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800353e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003542:	d110      	bne.n	8003566 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800354a:	2208      	movs	r2, #8
 800354c:	4619      	mov	r1, r3
 800354e:	6a38      	ldr	r0, [r7, #32]
 8003550:	f002 fdd2 	bl	80060f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003560:	441a      	add	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0210 	orr.w	r2, r2, #16
 8003574:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f002 ff50 	bl	8006420 <USB_ReadInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003586:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800358a:	f040 80a7 	bne.w	80036dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f002 ff55 	bl	8006446 <USB_ReadDevAllOutEpInterrupt>
 800359c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800359e:	e099      	b.n	80036d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 808e 	beq.w	80036c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f002 ff79 	bl	80064ae <USB_ReadDevOutEPInterrupt>
 80035bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00c      	beq.n	80035e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d4:	461a      	mov	r2, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fe8b 	bl	80042f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	2308      	movs	r3, #8
 80035fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 ff61 	bl	80044c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361c:	461a      	mov	r2, r3
 800361e:	2310      	movs	r3, #16
 8003620:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d030      	beq.n	800368e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003634:	2b80      	cmp	r3, #128	@ 0x80
 8003636:	d109      	bne.n	800364c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800364a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800364c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	3304      	adds	r3, #4
 8003660:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	78db      	ldrb	r3, [r3, #3]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f005 fb84 	bl	8008d84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003688:	461a      	mov	r2, r3
 800368a:	2302      	movs	r3, #2
 800368c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a4:	461a      	mov	r2, r3
 80036a6:	2320      	movs	r3, #32
 80036a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c0:	461a      	mov	r2, r3
 80036c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	3301      	adds	r3, #1
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f47f af62 	bne.w	80035a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f002 fe9d 	bl	8006420 <USB_ReadInterrupts>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036f0:	f040 80db 	bne.w	80038aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f002 febe 	bl	800647a <USB_ReadDevAllInEpInterrupt>
 80036fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003704:	e0cd      	b.n	80038a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80c2 	beq.w	8003896 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fee4 	bl	80064ea <USB_ReadDevInEPInterrupt>
 8003722:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d057      	beq.n	80037de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	2201      	movs	r2, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43db      	mvns	r3, r3
 8003748:	69f9      	ldr	r1, [r7, #28]
 800374a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800374e:	4013      	ands	r3, r2
 8003750:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375e:	461a      	mov	r2, r3
 8003760:	2301      	movs	r3, #1
 8003762:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	799b      	ldrb	r3, [r3, #6]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d132      	bne.n	80037d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	3320      	adds	r3, #32
 800377c:	6819      	ldr	r1, [r3, #0]
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4403      	add	r3, r0
 800378c:	331c      	adds	r3, #28
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4419      	add	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4403      	add	r3, r0
 80037a0:	3320      	adds	r3, #32
 80037a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d113      	bne.n	80037d2 <HAL_PCD_IRQHandler+0x3a2>
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	3324      	adds	r3, #36	@ 0x24
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037ca:	461a      	mov	r2, r3
 80037cc:	2101      	movs	r1, #1
 80037ce:	f002 feeb 	bl	80065a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f005 fa58 	bl	8008c8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f4:	461a      	mov	r2, r3
 80037f6:	2308      	movs	r3, #8
 80037f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003810:	461a      	mov	r2, r3
 8003812:	2310      	movs	r3, #16
 8003814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800382c:	461a      	mov	r2, r3
 800382e:	2340      	movs	r3, #64	@ 0x40
 8003830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d023      	beq.n	8003884 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800383c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800383e:	6a38      	ldr	r0, [r7, #32]
 8003840:	f001 fed2 	bl	80055e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3310      	adds	r3, #16
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	b2db      	uxtb	r3, r3
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f005 fa9b 	bl	8008da8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387e:	461a      	mov	r2, r3
 8003880:	2302      	movs	r3, #2
 8003882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800388e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fca5 	bl	80041e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	3301      	adds	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f47f af2e 	bne.w	8003706 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fdb6 	bl	8006420 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038be:	d122      	bne.n	8003906 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d108      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038e6:	2100      	movs	r1, #0
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fe8b 	bl	8004604 <HAL_PCDEx_LPM_Callback>
 80038ee:	e002      	b.n	80038f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f005 fa39 	bl	8008d68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f002 fd88 	bl	8006420 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800391a:	d112      	bne.n	8003942 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f005 f9f5 	bl	8008d1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003940:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f002 fd6a 	bl	8006420 <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003956:	f040 80b7 	bne.w	8003ac8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2110      	movs	r1, #16
 8003974:	4618      	mov	r0, r3
 8003976:	f001 fe37 	bl	80055e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397a:	2300      	movs	r3, #0
 800397c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800397e:	e046      	b.n	8003a0e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398c:	461a      	mov	r2, r3
 800398e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003992:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039a4:	0151      	lsls	r1, r2, #5
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	440a      	add	r2, r1
 80039aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d8:	0151      	lsls	r1, r2, #5
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	440a      	add	r2, r1
 80039de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f8:	0151      	lsls	r1, r2, #5
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	440a      	add	r2, r1
 80039fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	791b      	ldrb	r3, [r3, #4]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d3b2      	bcc.n	8003980 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a28:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003a2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7bdb      	ldrb	r3, [r3, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a46:	f043 030b 	orr.w	r3, r3, #11
 8003a4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a5c:	f043 030b 	orr.w	r3, r3, #11
 8003a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a62:	e015      	b.n	8003a90 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a76:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003a7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a8a:	f043 030b 	orr.w	r3, r3, #11
 8003a8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003aa2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f002 fd78 	bl	80065a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 fca7 	bl	8006420 <USB_ReadInterrupts>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003adc:	d123      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f002 fd3d 	bl	8006562 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 fdf4 	bl	80056da <USB_GetDevSpeed>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461a      	mov	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681c      	ldr	r4, [r3, #0]
 8003afe:	f001 f9f1 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8003b02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f001 faf8 	bl	8005100 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f005 f8e4 	bl	8008cde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 fc78 	bl	8006420 <USB_ReadInterrupts>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d10a      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f005 f8c1 	bl	8008cc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f002 0208 	and.w	r2, r2, #8
 8003b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f002 fc63 	bl	8006420 <USB_ReadInterrupts>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b60:	2b80      	cmp	r3, #128	@ 0x80
 8003b62:	d123      	bne.n	8003bac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b70:	2301      	movs	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b74:	e014      	b.n	8003ba0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 faf2 	bl	800417e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	791b      	ldrb	r3, [r3, #4]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d3e4      	bcc.n	8003b76 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f002 fc35 	bl	8006420 <USB_ReadInterrupts>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bc0:	d13c      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc6:	e02b      	b.n	8003c20 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3318      	adds	r3, #24
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d115      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	da12      	bge.n	8003c1a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	3317      	adds	r3, #23
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fab2 	bl	800417e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	791b      	ldrb	r3, [r3, #4]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d3cd      	bcc.n	8003bc8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f002 fbed 	bl	8006420 <USB_ReadInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c50:	d156      	bne.n	8003d00 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c52:	2301      	movs	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c56:	e045      	b.n	8003ce4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d12e      	bne.n	8003cde <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	da2b      	bge.n	8003cde <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	0c1a      	lsrs	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003c90:	4053      	eors	r3, r2
 8003c92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d121      	bne.n	8003cde <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cda:	6053      	str	r3, [r2, #4]
            break;
 8003cdc:	e008      	b.n	8003cf0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	791b      	ldrb	r3, [r3, #4]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d3b3      	bcc.n	8003c58 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f002 fb8b 	bl	8006420 <USB_ReadInterrupts>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d14:	d10a      	bne.n	8003d2c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f005 f858 	bl	8008dcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f002 fb75 	bl	8006420 <USB_ReadInterrupts>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d115      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f005 f848 	bl	8008de8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	e000      	b.n	8003d6c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003d6a:	bf00      	nop
    }
  }
}
 8003d6c:	3734      	adds	r7, #52	@ 0x34
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd90      	pop	{r4, r7, pc}

08003d72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_PCD_SetAddress+0x1a>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e012      	b.n	8003db2 <HAL_PCD_SetAddress+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f002 fad4 	bl	8006350 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	70fb      	strb	r3, [r7, #3]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	803b      	strh	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	da0f      	bge.n	8003e00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	3310      	adds	r3, #16
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	705a      	strb	r2, [r3, #1]
 8003dfe:	e00f      	b.n	8003e20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 020f 	and.w	r2, r3, #15
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	3304      	adds	r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003e2c:	883b      	ldrh	r3, [r7, #0]
 8003e2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	78ba      	ldrb	r2, [r7, #2]
 8003e3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	785b      	ldrb	r3, [r3, #1]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e4e:	78bb      	ldrb	r3, [r7, #2]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d102      	bne.n	8003e5a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_EP_Open+0xae>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e00e      	b.n	8003e86 <HAL_PCD_EP_Open+0xcc>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68f9      	ldr	r1, [r7, #12]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 fc54 	bl	8005724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003e84:	7afb      	ldrb	r3, [r7, #11]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da0f      	bge.n	8003ec2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3310      	adds	r3, #16
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	705a      	strb	r2, [r3, #1]
 8003ec0:	e00f      	b.n	8003ee2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3304      	adds	r3, #4
 8003eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_PCD_EP_Close+0x6e>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e00e      	b.n	8003f1a <HAL_PCD_EP_Close+0x8c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f001 fc92 	bl	8005834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	f003 020f 	and.w	r2, r3, #15
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	3304      	adds	r3, #4
 8003f4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	799b      	ldrb	r3, [r3, #6]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	799b      	ldrb	r3, [r3, #6]
 8003f86:	461a      	mov	r2, r3
 8003f88:	6979      	ldr	r1, [r7, #20]
 8003f8a:	f001 fd2f 	bl	80059ec <USB_EPStartXfer>

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa8:	7afb      	ldrb	r3, [r7, #11]
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	799b      	ldrb	r3, [r3, #6]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	799b      	ldrb	r3, [r3, #6]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6979      	ldr	r1, [r7, #20]
 8003ffe:	f001 fcf5 	bl	80059ec <USB_EPStartXfer>

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	7912      	ldrb	r2, [r2, #4]
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e04f      	b.n	80040ca <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800402a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800402e:	2b00      	cmp	r3, #0
 8004030:	da0f      	bge.n	8004052 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	3310      	adds	r3, #16
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	3304      	adds	r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	705a      	strb	r2, [r3, #1]
 8004050:	e00d      	b.n	800406e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	3304      	adds	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	b2da      	uxtb	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_PCD_EP_SetStall+0x82>
 800408a:	2302      	movs	r3, #2
 800408c:	e01d      	b.n	80040ca <HAL_PCD_EP_SetStall+0xbe>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68f9      	ldr	r1, [r7, #12]
 800409c:	4618      	mov	r0, r3
 800409e:	f002 f883 	bl	80061a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7999      	ldrb	r1, [r3, #6]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040ba:	461a      	mov	r2, r3
 80040bc:	f002 fa74 	bl	80065a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	7912      	ldrb	r2, [r2, #4]
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e042      	b.n	8004176 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da0f      	bge.n	8004118 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 020f 	and.w	r2, r3, #15
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	3310      	adds	r3, #16
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	705a      	strb	r2, [r3, #1]
 8004116:	e00f      	b.n	8004138 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_PCD_EP_ClrStall+0x86>
 8004154:	2302      	movs	r3, #2
 8004156:	e00e      	b.n	8004176 <HAL_PCD_EP_ClrStall+0xa4>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	4618      	mov	r0, r3
 8004168:	f002 f88c 	bl	8006284 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800418a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800418e:	2b00      	cmp	r3, #0
 8004190:	da0c      	bge.n	80041ac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	f003 020f 	and.w	r2, r3, #15
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	3310      	adds	r3, #16
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	3304      	adds	r3, #4
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e00c      	b.n	80041c6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	f003 020f 	and.w	r2, r3, #15
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	3304      	adds	r3, #4
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 feab 	bl	8005f28 <USB_EPStopXfer>
 80041d2:	4603      	mov	r3, r0
 80041d4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041d6:	7afb      	ldrb	r3, [r7, #11]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	3310      	adds	r3, #16
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4413      	add	r3, r2
 8004204:	3304      	adds	r3, #4
 8004206:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d901      	bls.n	8004218 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e06b      	b.n	80042f0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d902      	bls.n	8004234 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	3303      	adds	r3, #3
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800423c:	e02a      	b.n	8004294 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	429a      	cmp	r2, r3
 8004252:	d902      	bls.n	800425a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3303      	adds	r3, #3
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68d9      	ldr	r1, [r3, #12]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	4603      	mov	r3, r0
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f001 ff00 	bl	800607c <USB_WritePacket>

    ep->xfer_buff  += len;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	441a      	add	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d809      	bhi.n	80042be <PCD_WriteEmptyTxFifo+0xde>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d203      	bcs.n	80042be <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1bf      	bne.n	800423e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d811      	bhi.n	80042ee <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	2201      	movs	r2, #1
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	6939      	ldr	r1, [r7, #16]
 80042e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042ea:	4013      	ands	r3, r2
 80042ec:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	333c      	adds	r3, #60	@ 0x3c
 8004310:	3304      	adds	r3, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	799b      	ldrb	r3, [r3, #6]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d17b      	bne.n	8004426 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d015      	beq.n	8004364 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4a61      	ldr	r2, [pc, #388]	@ (80044c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	f240 80b9 	bls.w	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80b3 	beq.w	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435a:	461a      	mov	r2, r3
 800435c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004360:	6093      	str	r3, [r2, #8]
 8004362:	e0a7      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800437a:	461a      	mov	r2, r3
 800437c:	2320      	movs	r3, #32
 800437e:	6093      	str	r3, [r2, #8]
 8004380:	e098      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	f040 8093 	bne.w	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	4a4b      	ldr	r2, [pc, #300]	@ (80044c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d90f      	bls.n	80043b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ac:	461a      	mov	r2, r3
 80043ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b2:	6093      	str	r3, [r2, #8]
 80043b4:	e07e      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4413      	add	r3, r2
 80043c8:	3304      	adds	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	0159      	lsls	r1, r3, #5
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d114      	bne.n	8004418 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004400:	461a      	mov	r2, r3
 8004402:	2101      	movs	r1, #1
 8004404:	f002 f8d0 	bl	80065a8 <USB_EP0_OutStart>
 8004408:	e006      	b.n	8004418 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	441a      	add	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f004 fc1a 	bl	8008c58 <HAL_PCD_DataOutStageCallback>
 8004424:	e046      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4a26      	ldr	r2, [pc, #152]	@ (80044c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d124      	bne.n	8004478 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800444a:	6093      	str	r3, [r2, #8]
 800444c:	e032      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004464:	461a      	mov	r2, r3
 8004466:	2320      	movs	r3, #32
 8004468:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f004 fbf1 	bl	8008c58 <HAL_PCD_DataOutStageCallback>
 8004476:	e01d      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d114      	bne.n	80044a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044a0:	461a      	mov	r2, r3
 80044a2:	2100      	movs	r1, #0
 80044a4:	f002 f880 	bl	80065a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f004 fbd2 	bl	8008c58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	4f54300a 	.word	0x4f54300a
 80044c4:	4f54310a 	.word	0x4f54310a

080044c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	333c      	adds	r3, #60	@ 0x3c
 80044e0:	3304      	adds	r3, #4
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a15      	ldr	r2, [pc, #84]	@ (8004550 <PCD_EP_OutSetupPacket_int+0x88>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d90e      	bls.n	800451c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004514:	461a      	mov	r2, r3
 8004516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800451a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f004 fb89 	bl	8008c34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a0a      	ldr	r2, [pc, #40]	@ (8004550 <PCD_EP_OutSetupPacket_int+0x88>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d90c      	bls.n	8004544 <PCD_EP_OutSetupPacket_int+0x7c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	799b      	ldrb	r3, [r3, #6]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d108      	bne.n	8004544 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800453c:	461a      	mov	r2, r3
 800453e:	2101      	movs	r1, #1
 8004540:	f002 f832 	bl	80065a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	4f54300a 	.word	0x4f54300a

08004554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
 8004560:	4613      	mov	r3, r2
 8004562:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004572:	883b      	ldrh	r3, [r7, #0]
 8004574:	0419      	lsls	r1, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	430a      	orrs	r2, r1
 800457e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004580:	e028      	b.n	80045d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4413      	add	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]
 8004594:	e00d      	b.n	80045b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	3340      	adds	r3, #64	@ 0x40
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	4413      	add	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	3301      	adds	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
 80045b2:	7bfa      	ldrb	r2, [r7, #15]
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3ec      	bcc.n	8004596 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045bc:	883b      	ldrh	r3, [r7, #0]
 80045be:	0418      	lsls	r0, r3, #16
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	4302      	orrs	r2, r0
 80045cc:	3340      	adds	r3, #64	@ 0x40
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	460b      	mov	r3, r1
 80045ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	887a      	ldrh	r2, [r7, #2]
 80045f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e267      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d075      	beq.n	8004726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800463a:	4b88      	ldr	r3, [pc, #544]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b04      	cmp	r3, #4
 8004644:	d00c      	beq.n	8004660 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004646:	4b85      	ldr	r3, [pc, #532]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800464e:	2b08      	cmp	r3, #8
 8004650:	d112      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004652:	4b82      	ldr	r3, [pc, #520]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800465e:	d10b      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	4b7e      	ldr	r3, [pc, #504]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05b      	beq.n	8004724 <HAL_RCC_OscConfig+0x108>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d157      	bne.n	8004724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e242      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004680:	d106      	bne.n	8004690 <HAL_RCC_OscConfig+0x74>
 8004682:	4b76      	ldr	r3, [pc, #472]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a75      	ldr	r2, [pc, #468]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x98>
 800469a:	4b70      	ldr	r3, [pc, #448]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6f      	ldr	r2, [pc, #444]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b6d      	ldr	r3, [pc, #436]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6c      	ldr	r2, [pc, #432]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 80046b4:	4b69      	ldr	r3, [pc, #420]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a68      	ldr	r2, [pc, #416]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b66      	ldr	r3, [pc, #408]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a65      	ldr	r2, [pc, #404]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fd fa74 	bl	8001bc0 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fd fa70 	bl	8001bc0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	@ 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e207      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	4b5b      	ldr	r3, [pc, #364]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0xc0>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd fa60 	bl	8001bc0 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd fa5c 	bl	8001bc0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e1f3      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	4b51      	ldr	r3, [pc, #324]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0xe8>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d063      	beq.n	80047fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004732:	4b4a      	ldr	r3, [pc, #296]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473e:	4b47      	ldr	r3, [pc, #284]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004746:	2b08      	cmp	r3, #8
 8004748:	d11c      	bne.n	8004784 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b44      	ldr	r3, [pc, #272]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d116      	bne.n	8004784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	4b41      	ldr	r3, [pc, #260]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_RCC_OscConfig+0x152>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e1c7      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b3b      	ldr	r3, [pc, #236]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4937      	ldr	r1, [pc, #220]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	e03a      	b.n	80047fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800478c:	4b34      	ldr	r3, [pc, #208]	@ (8004860 <HAL_RCC_OscConfig+0x244>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fd fa15 	bl	8001bc0 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479a:	f7fd fa11 	bl	8001bc0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1a8      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	4b2b      	ldr	r3, [pc, #172]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b28      	ldr	r3, [pc, #160]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4925      	ldr	r1, [pc, #148]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	e015      	b.n	80047fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <HAL_RCC_OscConfig+0x244>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd f9f4 	bl	8001bc0 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fd f9f0 	bl	8001bc0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e187      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	4b1b      	ldr	r3, [pc, #108]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d036      	beq.n	8004874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480e:	4b15      	ldr	r3, [pc, #84]	@ (8004864 <HAL_RCC_OscConfig+0x248>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fd f9d4 	bl	8001bc0 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481c:	f7fd f9d0 	bl	8001bc0 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e167      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x200>
 800483a:	e01b      	b.n	8004874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483c:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <HAL_RCC_OscConfig+0x248>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004842:	f7fd f9bd 	bl	8001bc0 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004848:	e00e      	b.n	8004868 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484a:	f7fd f9b9 	bl	8001bc0 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d907      	bls.n	8004868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e150      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
 800485c:	40023800 	.word	0x40023800
 8004860:	42470000 	.word	0x42470000
 8004864:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	4b88      	ldr	r3, [pc, #544]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800486a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ea      	bne.n	800484a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8097 	beq.w	80049b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b81      	ldr	r3, [pc, #516]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10f      	bne.n	80048b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	4b7d      	ldr	r3, [pc, #500]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048a2:	4b7a      	ldr	r3, [pc, #488]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b2:	4b77      	ldr	r3, [pc, #476]	@ (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d118      	bne.n	80048f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048be:	4b74      	ldr	r3, [pc, #464]	@ (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a73      	ldr	r2, [pc, #460]	@ (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ca:	f7fd f979 	bl	8001bc0 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d2:	f7fd f975 	bl	8001bc0 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e10c      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x2ea>
 80048f8:	4b64      	ldr	r3, [pc, #400]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fc:	4a63      	ldr	r2, [pc, #396]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	@ 0x70
 8004904:	e01c      	b.n	8004940 <HAL_RCC_OscConfig+0x324>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b05      	cmp	r3, #5
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x30c>
 800490e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	4a5e      	ldr	r2, [pc, #376]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	6713      	str	r3, [r2, #112]	@ 0x70
 800491a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	4a5b      	ldr	r2, [pc, #364]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6713      	str	r3, [r2, #112]	@ 0x70
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0x324>
 8004928:	4b58      	ldr	r3, [pc, #352]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	4a57      	ldr	r2, [pc, #348]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6713      	str	r3, [r2, #112]	@ 0x70
 8004934:	4b55      	ldr	r3, [pc, #340]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004938:	4a54      	ldr	r2, [pc, #336]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800493a:	f023 0304 	bic.w	r3, r3, #4
 800493e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fd f93a 	bl	8001bc0 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fd f936 	bl	8001bc0 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0cb      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	4b49      	ldr	r3, [pc, #292]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ee      	beq.n	8004950 <HAL_RCC_OscConfig+0x334>
 8004972:	e014      	b.n	800499e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7fd f924 	bl	8001bc0 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497a:	e00a      	b.n	8004992 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497c:	f7fd f920 	bl	8001bc0 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0b5      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	4b3e      	ldr	r3, [pc, #248]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ee      	bne.n	800497c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a4:	4b39      	ldr	r3, [pc, #228]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	4a38      	ldr	r2, [pc, #224]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80a1 	beq.w	8004afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ba:	4b34      	ldr	r3, [pc, #208]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d05c      	beq.n	8004a80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d141      	bne.n	8004a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ce:	4b31      	ldr	r3, [pc, #196]	@ (8004a94 <HAL_RCC_OscConfig+0x478>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fd f8f4 	bl	8001bc0 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fd f8f0 	bl	8001bc0 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e087      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	4b27      	ldr	r3, [pc, #156]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	019b      	lsls	r3, r3, #6
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	3b01      	subs	r3, #1
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	491b      	ldr	r1, [pc, #108]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a24:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <HAL_RCC_OscConfig+0x478>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fd f8c9 	bl	8001bc0 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a32:	f7fd f8c5 	bl	8001bc0 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e05c      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a44:	4b11      	ldr	r3, [pc, #68]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x416>
 8004a50:	e054      	b.n	8004afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <HAL_RCC_OscConfig+0x478>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fd f8b2 	bl	8001bc0 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fd f8ae 	bl	8001bc0 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e045      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x444>
 8004a7e:	e03d      	b.n	8004afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d107      	bne.n	8004a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e038      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40007000 	.word	0x40007000
 8004a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a98:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_RCC_OscConfig+0x4ec>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d028      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d121      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d11a      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d111      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d107      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0cc      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b68      	ldr	r3, [pc, #416]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d90c      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b65      	ldr	r3, [pc, #404]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b63      	ldr	r3, [pc, #396]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0b8      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b60:	4b59      	ldr	r3, [pc, #356]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a58      	ldr	r2, [pc, #352]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b78:	4b53      	ldr	r3, [pc, #332]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4a52      	ldr	r2, [pc, #328]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b50      	ldr	r3, [pc, #320]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	494d      	ldr	r1, [pc, #308]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d044      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	4b47      	ldr	r3, [pc, #284]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d119      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e07f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bca:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e06f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e067      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bea:	4b37      	ldr	r3, [pc, #220]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4934      	ldr	r1, [pc, #208]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bfc:	f7fc ffe0 	bl	8001bc0 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c04:	f7fc ffdc 	bl	8001bc0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e04f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 020c 	and.w	r2, r3, #12
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d1eb      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b25      	ldr	r3, [pc, #148]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d20c      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b22      	ldr	r3, [pc, #136]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b20      	ldr	r3, [pc, #128]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e032      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	4b19      	ldr	r3, [pc, #100]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4916      	ldr	r1, [pc, #88]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7e:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	490e      	ldr	r1, [pc, #56]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c92:	f000 f821 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c96:	4602      	mov	r2, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	490a      	ldr	r1, [pc, #40]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004ca4:	5ccb      	ldrb	r3, [r1, r3]
 8004ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8004caa:	4a09      	ldr	r2, [pc, #36]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cae:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fc ff40 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023c00 	.word	0x40023c00
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	0800c074 	.word	0x0800c074
 8004cd0:	20000000 	.word	0x20000000
 8004cd4:	20000004 	.word	0x20000004

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b094      	sub	sp, #80	@ 0x50
 8004cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf0:	4b79      	ldr	r3, [pc, #484]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 030c 	and.w	r3, r3, #12
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d00d      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x40>
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	f200 80e1 	bhi.w	8004ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x34>
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d003      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d0a:	e0db      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d0c:	4b73      	ldr	r3, [pc, #460]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x204>)
 8004d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d10:	e0db      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d12:	4b73      	ldr	r3, [pc, #460]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d16:	e0d8      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d18:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d22:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d063      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	2200      	movs	r2, #0
 8004d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d42:	2300      	movs	r3, #0
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	462b      	mov	r3, r5
 8004d4e:	f04f 0000 	mov.w	r0, #0
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	0159      	lsls	r1, r3, #5
 8004d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5c:	0150      	lsls	r0, r2, #5
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4621      	mov	r1, r4
 8004d64:	1a51      	subs	r1, r2, r1
 8004d66:	6139      	str	r1, [r7, #16]
 8004d68:	4629      	mov	r1, r5
 8004d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	018b      	lsls	r3, r1, #6
 8004d80:	4651      	mov	r1, sl
 8004d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d86:	4651      	mov	r1, sl
 8004d88:	018a      	lsls	r2, r1, #6
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d90:	4659      	mov	r1, fp
 8004d92:	eb63 0901 	sbc.w	r9, r3, r1
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004daa:	4690      	mov	r8, r2
 8004dac:	4699      	mov	r9, r3
 8004dae:	4623      	mov	r3, r4
 8004db0:	eb18 0303 	adds.w	r3, r8, r3
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	462b      	mov	r3, r5
 8004db8:	eb49 0303 	adc.w	r3, r9, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dca:	4629      	mov	r1, r5
 8004dcc:	024b      	lsls	r3, r1, #9
 8004dce:	4621      	mov	r1, r4
 8004dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	024a      	lsls	r2, r1, #9
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dde:	2200      	movs	r2, #0
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004de8:	f7fb fee6 	bl	8000bb8 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df4:	e058      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df6:	4b38      	ldr	r3, [pc, #224]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	4611      	mov	r1, r2
 8004e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	0159      	lsls	r1, r3, #5
 8004e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e22:	0150      	lsls	r0, r2, #5
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4641      	mov	r1, r8
 8004e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e48:	ebb2 040a 	subs.w	r4, r2, sl
 8004e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	00eb      	lsls	r3, r5, #3
 8004e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e5e:	00e2      	lsls	r2, r4, #3
 8004e60:	4614      	mov	r4, r2
 8004e62:	461d      	mov	r5, r3
 8004e64:	4643      	mov	r3, r8
 8004e66:	18e3      	adds	r3, r4, r3
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	eb45 0303 	adc.w	r3, r5, r3
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e7e:	4629      	mov	r1, r5
 8004e80:	028b      	lsls	r3, r1, #10
 8004e82:	4621      	mov	r1, r4
 8004e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e88:	4621      	mov	r1, r4
 8004e8a:	028a      	lsls	r2, r1, #10
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e92:	2200      	movs	r2, #0
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	61fa      	str	r2, [r7, #28]
 8004e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9c:	f7fb fe8c 	bl	8000bb8 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec2:	e002      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3750      	adds	r7, #80	@ 0x50
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	007a1200 	.word	0x007a1200

08004ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000000 	.word	0x20000000

08004efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f00:	f7ff fff0 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	0a9b      	lsrs	r3, r3, #10
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	4903      	ldr	r1, [pc, #12]	@ (8004f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	0800c084 	.word	0x0800c084

08004f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e07b      	b.n	800502e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f46:	d009      	beq.n	8004f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	61da      	str	r2, [r3, #28]
 8004f4e:	e005      	b.n	8004f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc fc10 	bl	800179c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe0:	ea42 0103 	orr.w	r1, r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	f003 0104 	and.w	r1, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	f003 0210 	and.w	r2, r3, #16
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800501c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005036:	b084      	sub	sp, #16
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	f107 001c 	add.w	r0, r7, #28
 8005044:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005048:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800504c:	2b01      	cmp	r3, #1
 800504e:	d123      	bne.n	8005098 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005078:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f001 fae9 	bl	8006664 <USB_CoreReset>
 8005092:	4603      	mov	r3, r0
 8005094:	73fb      	strb	r3, [r7, #15]
 8005096:	e01b      	b.n	80050d0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 fadd 	bl	8006664 <USB_CoreReset>
 80050aa:	4603      	mov	r3, r0
 80050ac:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80050c2:	e005      	b.n	80050d0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050d0:	7fbb      	ldrb	r3, [r7, #30]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d10b      	bne.n	80050ee <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f043 0206 	orr.w	r2, r3, #6
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f043 0220 	orr.w	r2, r3, #32
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050fa:	b004      	add	sp, #16
 80050fc:	4770      	bx	lr
	...

08005100 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d165      	bne.n	80051e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4a41      	ldr	r2, [pc, #260]	@ (800521c <USB_SetTurnaroundTime+0x11c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d906      	bls.n	800512a <USB_SetTurnaroundTime+0x2a>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a40      	ldr	r2, [pc, #256]	@ (8005220 <USB_SetTurnaroundTime+0x120>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d202      	bcs.n	800512a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005124:	230f      	movs	r3, #15
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	e062      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4a3c      	ldr	r2, [pc, #240]	@ (8005220 <USB_SetTurnaroundTime+0x120>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d306      	bcc.n	8005140 <USB_SetTurnaroundTime+0x40>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4a3b      	ldr	r2, [pc, #236]	@ (8005224 <USB_SetTurnaroundTime+0x124>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d202      	bcs.n	8005140 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800513a:	230e      	movs	r3, #14
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e057      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4a38      	ldr	r2, [pc, #224]	@ (8005224 <USB_SetTurnaroundTime+0x124>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d306      	bcc.n	8005156 <USB_SetTurnaroundTime+0x56>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4a37      	ldr	r2, [pc, #220]	@ (8005228 <USB_SetTurnaroundTime+0x128>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d202      	bcs.n	8005156 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005150:	230d      	movs	r3, #13
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e04c      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4a33      	ldr	r2, [pc, #204]	@ (8005228 <USB_SetTurnaroundTime+0x128>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d306      	bcc.n	800516c <USB_SetTurnaroundTime+0x6c>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4a32      	ldr	r2, [pc, #200]	@ (800522c <USB_SetTurnaroundTime+0x12c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d802      	bhi.n	800516c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005166:	230c      	movs	r3, #12
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e041      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4a2f      	ldr	r2, [pc, #188]	@ (800522c <USB_SetTurnaroundTime+0x12c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d906      	bls.n	8005182 <USB_SetTurnaroundTime+0x82>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4a2e      	ldr	r2, [pc, #184]	@ (8005230 <USB_SetTurnaroundTime+0x130>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d802      	bhi.n	8005182 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800517c:	230b      	movs	r3, #11
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e036      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a2a      	ldr	r2, [pc, #168]	@ (8005230 <USB_SetTurnaroundTime+0x130>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d906      	bls.n	8005198 <USB_SetTurnaroundTime+0x98>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4a29      	ldr	r2, [pc, #164]	@ (8005234 <USB_SetTurnaroundTime+0x134>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d802      	bhi.n	8005198 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005192:	230a      	movs	r3, #10
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e02b      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a26      	ldr	r2, [pc, #152]	@ (8005234 <USB_SetTurnaroundTime+0x134>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d906      	bls.n	80051ae <USB_SetTurnaroundTime+0xae>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4a25      	ldr	r2, [pc, #148]	@ (8005238 <USB_SetTurnaroundTime+0x138>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d202      	bcs.n	80051ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80051a8:	2309      	movs	r3, #9
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e020      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a21      	ldr	r2, [pc, #132]	@ (8005238 <USB_SetTurnaroundTime+0x138>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d306      	bcc.n	80051c4 <USB_SetTurnaroundTime+0xc4>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4a20      	ldr	r2, [pc, #128]	@ (800523c <USB_SetTurnaroundTime+0x13c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d802      	bhi.n	80051c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80051be:	2308      	movs	r3, #8
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e015      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a1d      	ldr	r2, [pc, #116]	@ (800523c <USB_SetTurnaroundTime+0x13c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d906      	bls.n	80051da <USB_SetTurnaroundTime+0xda>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005240 <USB_SetTurnaroundTime+0x140>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d202      	bcs.n	80051da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051d4:	2307      	movs	r3, #7
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e00a      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051da:	2306      	movs	r3, #6
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e007      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80051e6:	2309      	movs	r3, #9
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e001      	b.n	80051f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051ec:	2309      	movs	r3, #9
 80051ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	00d8acbf 	.word	0x00d8acbf
 8005220:	00e4e1c0 	.word	0x00e4e1c0
 8005224:	00f42400 	.word	0x00f42400
 8005228:	01067380 	.word	0x01067380
 800522c:	011a499f 	.word	0x011a499f
 8005230:	01312cff 	.word	0x01312cff
 8005234:	014ca43f 	.word	0x014ca43f
 8005238:	016e3600 	.word	0x016e3600
 800523c:	01a6ab1f 	.word	0x01a6ab1f
 8005240:	01e84800 	.word	0x01e84800

08005244 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f043 0201 	orr.w	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d115      	bne.n	80052d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052b6:	200a      	movs	r0, #10
 80052b8:	f7fc fc8e 	bl	8001bd8 <HAL_Delay>
      ms += 10U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	330a      	adds	r3, #10
 80052c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 f93f 	bl	8006546 <USB_GetMode>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d01e      	beq.n	800530c <USB_SetCurrentMode+0x84>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80052d2:	d9f0      	bls.n	80052b6 <USB_SetCurrentMode+0x2e>
 80052d4:	e01a      	b.n	800530c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d115      	bne.n	8005308 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052e8:	200a      	movs	r0, #10
 80052ea:	f7fc fc75 	bl	8001bd8 <HAL_Delay>
      ms += 10U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	330a      	adds	r3, #10
 80052f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f001 f926 	bl	8006546 <USB_GetMode>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <USB_SetCurrentMode+0x84>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2bc7      	cmp	r3, #199	@ 0xc7
 8005304:	d9f0      	bls.n	80052e8 <USB_SetCurrentMode+0x60>
 8005306:	e001      	b.n	800530c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e005      	b.n	8005318 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005310:	d101      	bne.n	8005316 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005320:	b084      	sub	sp, #16
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800532e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e009      	b.n	8005354 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3340      	adds	r3, #64	@ 0x40
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	2200      	movs	r2, #0
 800534c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3301      	adds	r3, #1
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b0e      	cmp	r3, #14
 8005358:	d9f2      	bls.n	8005340 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800535a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800535e:	2b00      	cmp	r3, #0
 8005360:	d11c      	bne.n	800539c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005370:	f043 0302 	orr.w	r3, r3, #2
 8005374:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005386:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005392:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	639a      	str	r2, [r3, #56]	@ 0x38
 800539a:	e00b      	b.n	80053b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053ba:	461a      	mov	r2, r3
 80053bc:	2300      	movs	r3, #0
 80053be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10d      	bne.n	80053e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d104      	bne.n	80053da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053d0:	2100      	movs	r1, #0
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f968 	bl	80056a8 <USB_SetDevSpeed>
 80053d8:	e008      	b.n	80053ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053da:	2101      	movs	r1, #1
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f963 	bl	80056a8 <USB_SetDevSpeed>
 80053e2:	e003      	b.n	80053ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053e4:	2103      	movs	r1, #3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f95e 	bl	80056a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ec:	2110      	movs	r1, #16
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8fa 	bl	80055e8 <USB_FlushTxFifo>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f924 	bl	800564c <USB_FlushRxFifo>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005414:	461a      	mov	r2, r3
 8005416:	2300      	movs	r3, #0
 8005418:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542c:	461a      	mov	r2, r3
 800542e:	2300      	movs	r3, #0
 8005430:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e043      	b.n	80054c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800544a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800544e:	d118      	bne.n	8005482 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e013      	b.n	8005494 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005478:	461a      	mov	r2, r3
 800547a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	e008      	b.n	8005494 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a0:	461a      	mov	r2, r3
 80054a2:	2300      	movs	r3, #0
 80054a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b2:	461a      	mov	r2, r3
 80054b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3301      	adds	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054c4:	461a      	mov	r2, r3
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d3b5      	bcc.n	8005438 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	e043      	b.n	800555a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e8:	d118      	bne.n	800551c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fc:	461a      	mov	r2, r3
 80054fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e013      	b.n	800552e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005512:	461a      	mov	r2, r3
 8005514:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e008      	b.n	800552e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005528:	461a      	mov	r2, r3
 800552a:	2300      	movs	r3, #0
 800552c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800553a:	461a      	mov	r2, r3
 800553c:	2300      	movs	r3, #0
 800553e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554c:	461a      	mov	r2, r3
 800554e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005552:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	3301      	adds	r3, #1
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800555e:	461a      	mov	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4293      	cmp	r3, r2
 8005564:	d3b5      	bcc.n	80054d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005578:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005586:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005588:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f043 0210 	orr.w	r2, r3, #16
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <USB_DevInit+0x2c4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f043 0208 	orr.w	r2, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d107      	bne.n	80055d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055cc:	f043 0304 	orr.w	r3, r3, #4
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055e0:	b004      	add	sp, #16
 80055e2:	4770      	bx	lr
 80055e4:	803c3800 	.word	0x803c3800

080055e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005602:	d901      	bls.n	8005608 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e01b      	b.n	8005640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	daf2      	bge.n	80055f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	019b      	lsls	r3, r3, #6
 8005618:	f043 0220 	orr.w	r2, r3, #32
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3301      	adds	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800562c:	d901      	bls.n	8005632 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e006      	b.n	8005640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b20      	cmp	r3, #32
 800563c:	d0f0      	beq.n	8005620 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005664:	d901      	bls.n	800566a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e018      	b.n	800569c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	daf2      	bge.n	8005658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2210      	movs	r2, #16
 800567a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3301      	adds	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005688:	d901      	bls.n	800568e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e006      	b.n	800569c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d0f0      	beq.n	800567c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056c8:	4313      	orrs	r3, r2
 80056ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0306 	and.w	r3, r3, #6
 80056f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]
 80056fe:	e00a      	b.n	8005716 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d002      	beq.n	800570c <USB_GetDevSpeed+0x32>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d102      	bne.n	8005712 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800570c:	2302      	movs	r3, #2
 800570e:	75fb      	strb	r3, [r7, #23]
 8005710:	e001      	b.n	8005716 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005712:	230f      	movs	r3, #15
 8005714:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005716:	7dfb      	ldrb	r3, [r7, #23]
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d13a      	bne.n	80057b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	2101      	movs	r1, #1
 8005752:	fa01 f303 	lsl.w	r3, r1, r3
 8005756:	b29b      	uxth	r3, r3
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800575e:	4313      	orrs	r3, r2
 8005760:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d155      	bne.n	8005824 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	791b      	ldrb	r3, [r3, #4]
 8005792:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005794:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	059b      	lsls	r3, r3, #22
 800579a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800579c:	4313      	orrs	r3, r2
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e036      	b.n	8005824 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	2101      	movs	r1, #1
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d11a      	bne.n	8005824 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	791b      	ldrb	r3, [r3, #4]
 8005808:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800580a:	430b      	orrs	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800581a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005822:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d161      	bne.n	8005914 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005866:	d11f      	bne.n	80058a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005882:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005886:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058c8:	4013      	ands	r3, r2
 80058ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2101      	movs	r1, #1
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058ec:	4013      	ands	r3, r2
 80058ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	0159      	lsls	r1, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	440b      	add	r3, r1
 8005906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590a:	4619      	mov	r1, r3
 800590c:	4b35      	ldr	r3, [pc, #212]	@ (80059e4 <USB_DeactivateEndpoint+0x1b0>)
 800590e:	4013      	ands	r3, r2
 8005910:	600b      	str	r3, [r1, #0]
 8005912:	e060      	b.n	80059d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005926:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800592a:	d11f      	bne.n	800596c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005946:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800594a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005966:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800596a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	43db      	mvns	r3, r3
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800598c:	4013      	ands	r3, r2
 800598e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	43db      	mvns	r3, r3
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059b0:	4013      	ands	r3, r2
 80059b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	0159      	lsls	r1, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ce:	4619      	mov	r1, r3
 80059d0:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <USB_DeactivateEndpoint+0x1b4>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	ec337800 	.word	0xec337800
 80059e8:	eff37800 	.word	0xeff37800

080059ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	@ 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	f040 817f 	bne.w	8005d0c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d132      	bne.n	8005a7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a74:	0cdb      	lsrs	r3, r3, #19
 8005a76:	04db      	lsls	r3, r3, #19
 8005a78:	6113      	str	r3, [r2, #16]
 8005a7a:	e097      	b.n	8005bac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a96:	0cdb      	lsrs	r3, r3, #19
 8005a98:	04db      	lsls	r3, r3, #19
 8005a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ab6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005aba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005abe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11a      	bne.n	8005afc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d903      	bls.n	8005ada <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005af8:	6113      	str	r3, [r2, #16]
 8005afa:	e044      	b.n	8005b86 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4413      	add	r3, r2
 8005b06:	1e5a      	subs	r2, r3, #1
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	8afb      	ldrh	r3, [r7, #22]
 8005b22:	04d9      	lsls	r1, r3, #19
 8005b24:	4ba4      	ldr	r3, [pc, #656]	@ (8005db8 <USB_EPStartXfer+0x3cc>)
 8005b26:	400b      	ands	r3, r1
 8005b28:	69b9      	ldr	r1, [r7, #24]
 8005b2a:	0148      	lsls	r0, r1, #5
 8005b2c:	69f9      	ldr	r1, [r7, #28]
 8005b2e:	4401      	add	r1, r0
 8005b30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b34:	4313      	orrs	r3, r2
 8005b36:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	791b      	ldrb	r3, [r3, #4]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d122      	bne.n	8005b86 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b5a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005b5e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	8afb      	ldrh	r3, [r7, #22]
 8005b70:	075b      	lsls	r3, r3, #29
 8005b72:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005b76:	69b9      	ldr	r1, [r7, #24]
 8005b78:	0148      	lsls	r0, r1, #5
 8005b7a:	69f9      	ldr	r1, [r7, #28]
 8005b7c:	4401      	add	r1, r0
 8005b7e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b82:	4313      	orrs	r3, r2
 8005b84:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	0148      	lsls	r0, r1, #5
 8005ba0:	69f9      	ldr	r1, [r7, #28]
 8005ba2:	4401      	add	r1, r0
 8005ba4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d14b      	bne.n	8005c4a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	791b      	ldrb	r3, [r3, #4]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d128      	bne.n	8005c28 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d110      	bne.n	8005c08 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e00f      	b.n	8005c28 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c26:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c42:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	e166      	b.n	8005f18 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c64:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c68:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	791b      	ldrb	r3, [r3, #4]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d015      	beq.n	8005c9e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 814e 	beq.w	8005f18 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	69f9      	ldr	r1, [r7, #28]
 8005c94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005c9c:	e13c      	b.n	8005f18 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d110      	bne.n	8005cd0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e00f      	b.n	8005cf0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	68d9      	ldr	r1, [r3, #12]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781a      	ldrb	r2, [r3, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	b298      	uxth	r0, r3
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	4603      	mov	r3, r0
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f9b9 	bl	800607c <USB_WritePacket>
 8005d0a:	e105      	b.n	8005f18 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d26:	0cdb      	lsrs	r3, r3, #19
 8005d28:	04db      	lsls	r3, r3, #19
 8005d2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d4e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d132      	bne.n	8005dbc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	0148      	lsls	r0, r1, #5
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d90:	4313      	orrs	r3, r2
 8005d92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005db2:	6113      	str	r3, [r2, #16]
 8005db4:	e062      	b.n	8005e7c <USB_EPStartXfer+0x490>
 8005db6:	bf00      	nop
 8005db8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d123      	bne.n	8005e0c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	0148      	lsls	r0, r1, #5
 8005dde:	69f9      	ldr	r1, [r7, #28]
 8005de0:	4401      	add	r1, r0
 8005de2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005de6:	4313      	orrs	r3, r2
 8005de8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e08:	6113      	str	r3, [r2, #16]
 8005e0a:	e037      	b.n	8005e7c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4413      	add	r3, r2
 8005e16:	1e5a      	subs	r2, r3, #1
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	8afa      	ldrh	r2, [r7, #22]
 8005e28:	fb03 f202 	mul.w	r2, r3, r2
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	8afb      	ldrh	r3, [r7, #22]
 8005e40:	04d9      	lsls	r1, r3, #19
 8005e42:	4b38      	ldr	r3, [pc, #224]	@ (8005f24 <USB_EPStartXfer+0x538>)
 8005e44:	400b      	ands	r3, r1
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	0148      	lsls	r0, r1, #5
 8005e4a:	69f9      	ldr	r1, [r7, #28]
 8005e4c:	4401      	add	r1, r0
 8005e4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e52:	4313      	orrs	r3, r2
 8005e54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e6c:	69b9      	ldr	r1, [r7, #24]
 8005e6e:	0148      	lsls	r0, r1, #5
 8005e70:	69f9      	ldr	r1, [r7, #28]
 8005e72:	4401      	add	r1, r0
 8005e74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d10d      	bne.n	8005e9e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	68d9      	ldr	r1, [r3, #12]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	791b      	ldrb	r3, [r3, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d128      	bne.n	8005ef8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d110      	bne.n	8005ed8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	e00f      	b.n	8005ef8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	1ff80000 	.word	0x1ff80000

08005f28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d14a      	bne.n	8005fdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f5e:	f040 8086 	bne.w	800606e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	7812      	ldrb	r2, [r2, #0]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d902      	bls.n	8005fc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fbe:	e056      	b.n	800606e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fd8:	d0e7      	beq.n	8005faa <USB_EPStopXfer+0x82>
 8005fda:	e048      	b.n	800606e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ff4:	d13b      	bne.n	800606e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	440a      	add	r2, r1
 8006010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006014:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006018:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006038:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800603c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f242 7210 	movw	r2, #10000	@ 0x2710
 800604a:	4293      	cmp	r3, r2
 800604c:	d902      	bls.n	8006054 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
          break;
 8006052:	e00c      	b.n	800606e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006068:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800606c:	d0e7      	beq.n	800603e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006070:	4618      	mov	r0, r3
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	@ 0x24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	460b      	mov	r3, r1
 800608c:	71fb      	strb	r3, [r7, #7]
 800608e:	4613      	mov	r3, r2
 8006090:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800609a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d123      	bne.n	80060ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060a2:	88bb      	ldrh	r3, [r7, #4]
 80060a4:	3303      	adds	r3, #3
 80060a6:	089b      	lsrs	r3, r3, #2
 80060a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	e018      	b.n	80060e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	031a      	lsls	r2, r3, #12
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060bc:	461a      	mov	r2, r3
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	3301      	adds	r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	3301      	adds	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3301      	adds	r3, #1
 80060da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	3301      	adds	r3, #1
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d3e2      	bcc.n	80060b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3724      	adds	r7, #36	@ 0x24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b08b      	sub	sp, #44	@ 0x2c
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	089b      	lsrs	r3, r3, #2
 8006112:	b29b      	uxth	r3, r3
 8006114:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	e014      	b.n	800614e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	3301      	adds	r3, #1
 8006134:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	3301      	adds	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	3301      	adds	r3, #1
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	3301      	adds	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	3301      	adds	r3, #1
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	6a3a      	ldr	r2, [r7, #32]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	429a      	cmp	r2, r3
 8006154:	d3e6      	bcc.n	8006124 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006156:	8bfb      	ldrh	r3, [r7, #30]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01e      	beq.n	800619a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006166:	461a      	mov	r2, r3
 8006168:	f107 0310 	add.w	r3, r7, #16
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
 800617c:	b2da      	uxtb	r2, r3
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	701a      	strb	r2, [r3, #0]
      i++;
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	3301      	adds	r3, #1
 8006186:	623b      	str	r3, [r7, #32]
      pDest++;
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	3301      	adds	r3, #1
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800618e:	8bfb      	ldrh	r3, [r7, #30]
 8006190:	3b01      	subs	r3, #1
 8006192:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006194:	8bfb      	ldrh	r3, [r7, #30]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1ea      	bne.n	8006170 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800619c:	4618      	mov	r0, r3
 800619e:	372c      	adds	r7, #44	@ 0x2c
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d12c      	bne.n	800621e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	db12      	blt.n	80061fc <USB_EPSetStall+0x54>
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00f      	beq.n	80061fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006216:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e02b      	b.n	8006276 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	db12      	blt.n	8006256 <USB_EPSetStall+0xae>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00f      	beq.n	8006256 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	440a      	add	r2, r1
 800624c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006250:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006254:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006274:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d128      	bne.n	80062f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	791b      	ldrb	r3, [r3, #4]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d003      	beq.n	80062d0 <USB_EPClearStall+0x4c>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	791b      	ldrb	r3, [r3, #4]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d138      	bne.n	8006342 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	e027      	b.n	8006342 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800630c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d003      	beq.n	8006322 <USB_EPClearStall+0x9e>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	791b      	ldrb	r3, [r3, #4]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d10f      	bne.n	8006342 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800633c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006340:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800636e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006372:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006384:	68f9      	ldr	r1, [r7, #12]
 8006386:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800638a:	4313      	orrs	r3, r2
 800638c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ca:	f023 0302 	bic.w	r3, r3, #2
 80063ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063f8:	f023 0303 	bic.w	r3, r3, #3
 80063fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006438:	68fb      	ldr	r3, [r7, #12]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	0c1b      	lsrs	r3, r3, #16
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	4013      	ands	r3, r2
 800649c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	b29b      	uxth	r3, r3
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	4013      	ands	r3, r2
 80064da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064dc:	68bb      	ldr	r3, [r7, #8]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b087      	sub	sp, #28
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	fa22 f303 	lsr.w	r3, r2, r3
 800651a:	01db      	lsls	r3, r3, #7
 800651c:	b2db      	uxtb	r3, r3
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4013      	ands	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006538:	68bb      	ldr	r3, [r7, #8]
}
 800653a:	4618      	mov	r0, r3
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0301 	and.w	r3, r3, #1
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800657c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006580:	f023 0307 	bic.w	r3, r3, #7
 8006584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	460b      	mov	r3, r1
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	333c      	adds	r3, #60	@ 0x3c
 80065be:	3304      	adds	r3, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	4a26      	ldr	r2, [pc, #152]	@ (8006660 <USB_EP0_OutStart+0xb8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d90a      	bls.n	80065e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065dc:	d101      	bne.n	80065e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e037      	b.n	8006652 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e8:	461a      	mov	r2, r3
 80065ea:	2300      	movs	r3, #0
 80065ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006610:	f043 0318 	orr.w	r3, r3, #24
 8006614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006624:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006628:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800662a:	7afb      	ldrb	r3, [r7, #11]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10f      	bne.n	8006650 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006636:	461a      	mov	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800664a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800664e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	4f54300a 	.word	0x4f54300a

08006664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800667c:	d901      	bls.n	8006682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e022      	b.n	80066c8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	daf2      	bge.n	8006670 <USB_CoreReset+0xc>

  count = 10U;
 800668a:	230a      	movs	r3, #10
 800668c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800668e:	e002      	b.n	8006696 <USB_CoreReset+0x32>
  {
    count--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3b01      	subs	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f9      	bne.n	8006690 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f043 0201 	orr.w	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066b4:	d901      	bls.n	80066ba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e006      	b.n	80066c8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d0f0      	beq.n	80066a8 <USB_CoreReset+0x44>

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80066e0:	2054      	movs	r0, #84	@ 0x54
 80066e2:	f002 fd07 	bl	80090f4 <USBD_static_malloc>
 80066e6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	32b0      	adds	r2, #176	@ 0xb0
 80066f8:	2100      	movs	r1, #0
 80066fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066fe:	2302      	movs	r3, #2
 8006700:	e08b      	b.n	800681a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	32b0      	adds	r2, #176	@ 0xb0
 800670c:	68f9      	ldr	r1, [r7, #12]
 800670e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	32b0      	adds	r2, #176	@ 0xb0
 800671c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7c1b      	ldrb	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d11b      	bne.n	8006766 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800672e:	4b3d      	ldr	r3, [pc, #244]	@ (8006824 <USBD_CUSTOM_HID_Init+0x150>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	f003 020f 	and.w	r2, r3, #15
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	331c      	adds	r3, #28
 8006744:	2205      	movs	r2, #5
 8006746:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006748:	4b37      	ldr	r3, [pc, #220]	@ (8006828 <USBD_CUSTOM_HID_Init+0x154>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006760:	2205      	movs	r2, #5
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e01a      	b.n	800679c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006766:	4b2f      	ldr	r3, [pc, #188]	@ (8006824 <USBD_CUSTOM_HID_Init+0x150>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	f003 020f 	and.w	r2, r3, #15
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	331c      	adds	r3, #28
 800677c:	2205      	movs	r2, #5
 800677e:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006780:	4b29      	ldr	r3, [pc, #164]	@ (8006828 <USBD_CUSTOM_HID_Init+0x154>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f003 020f 	and.w	r2, r3, #15
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	440b      	add	r3, r1
 8006794:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8006798:	2205      	movs	r2, #5
 800679a:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800679c:	4b21      	ldr	r3, [pc, #132]	@ (8006824 <USBD_CUSTOM_HID_Init+0x150>)
 800679e:	7819      	ldrb	r1, [r3, #0]
 80067a0:	2340      	movs	r3, #64	@ 0x40
 80067a2:	2203      	movs	r2, #3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f002 fb94 	bl	8008ed2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80067aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006824 <USBD_CUSTOM_HID_Init+0x150>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	3323      	adds	r3, #35	@ 0x23
 80067c0:	2201      	movs	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80067c4:	4b18      	ldr	r3, [pc, #96]	@ (8006828 <USBD_CUSTOM_HID_Init+0x154>)
 80067c6:	7819      	ldrb	r1, [r3, #0]
 80067c8:	2340      	movs	r3, #64	@ 0x40
 80067ca:	2203      	movs	r2, #3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f002 fb80 	bl	8008ed2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80067d2:	4b15      	ldr	r3, [pc, #84]	@ (8006828 <USBD_CUSTOM_HID_Init+0x154>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f003 020f 	and.w	r2, r3, #15
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	33b0      	adds	r3, #176	@ 0xb0
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800680a:	4b07      	ldr	r3, [pc, #28]	@ (8006828 <USBD_CUSTOM_HID_Init+0x154>)
 800680c:	7819      	ldrb	r1, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	2340      	movs	r3, #64	@ 0x40
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f002 fc4c 	bl	80090b0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000086 	.word	0x20000086
 8006828:	20000087 	.word	0x20000087

0800682c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006838:	4b37      	ldr	r3, [pc, #220]	@ (8006918 <USBD_CUSTOM_HID_DeInit+0xec>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f002 fb6d 	bl	8008f1e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006844:	4b34      	ldr	r3, [pc, #208]	@ (8006918 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 020f 	and.w	r2, r3, #15
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	3323      	adds	r3, #35	@ 0x23
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800685e:	4b2e      	ldr	r3, [pc, #184]	@ (8006918 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	331c      	adds	r3, #28
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006878:	4b28      	ldr	r3, [pc, #160]	@ (800691c <USBD_CUSTOM_HID_DeInit+0xf0>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f002 fb4d 	bl	8008f1e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006884:	4b25      	ldr	r3, [pc, #148]	@ (800691c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 020f 	and.w	r2, r3, #15
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80068a0:	4b1e      	ldr	r3, [pc, #120]	@ (800691c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 020f 	and.w	r2, r3, #15
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32b0      	adds	r2, #176	@ 0xb0
 80068c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01f      	beq.n	800690e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	33b0      	adds	r3, #176	@ 0xb0
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	32b0      	adds	r2, #176	@ 0xb0
 80068ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f002 fc0d 	bl	8009110 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	32b0      	adds	r2, #176	@ 0xb0
 8006900:	2100      	movs	r1, #0
 8006902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000086 	.word	0x20000086
 800691c:	20000087 	.word	0x20000087

08006920 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	32b0      	adds	r2, #176	@ 0xb0
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006950:	2303      	movs	r3, #3
 8006952:	e108      	b.n	8006b66 <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800695c:	2b00      	cmp	r3, #0
 800695e:	d05c      	beq.n	8006a1a <USBD_CUSTOM_HID_Setup+0xfa>
 8006960:	2b20      	cmp	r3, #32
 8006962:	f040 80f8 	bne.w	8006b56 <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	3b02      	subs	r3, #2
 800696c:	2b09      	cmp	r3, #9
 800696e:	d84c      	bhi.n	8006a0a <USBD_CUSTOM_HID_Setup+0xea>
 8006970:	a201      	add	r2, pc, #4	@ (adr r2, 8006978 <USBD_CUSTOM_HID_Setup+0x58>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	080069d1 	.word	0x080069d1
 800697c:	080069af 	.word	0x080069af
 8006980:	08006a0b 	.word	0x08006a0b
 8006984:	08006a0b 	.word	0x08006a0b
 8006988:	08006a0b 	.word	0x08006a0b
 800698c:	08006a0b 	.word	0x08006a0b
 8006990:	08006a0b 	.word	0x08006a0b
 8006994:	080069e1 	.word	0x080069e1
 8006998:	080069bf 	.word	0x080069bf
 800699c:	080069a1 	.word	0x080069a1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	885b      	ldrh	r3, [r3, #2]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80069ac:	e034      	b.n	8006a18 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	3340      	adds	r3, #64	@ 0x40
 80069b2:	2201      	movs	r2, #1
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fcfa 	bl	80083b0 <USBD_CtlSendData>
          break;
 80069bc:	e02c      	b.n	8006a18 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	885b      	ldrh	r3, [r3, #2]
 80069c2:	0a1b      	lsrs	r3, r3, #8
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 80069ce:	e023      	b.n	8006a18 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	3344      	adds	r3, #68	@ 0x44
 80069d4:	2201      	movs	r2, #1
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fce9 	bl	80083b0 <USBD_CtlSendData>
          break;
 80069de:	e01b      	b.n	8006a18 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	88db      	ldrh	r3, [r3, #6]
 80069e4:	2b40      	cmp	r3, #64	@ 0x40
 80069e6:	d905      	bls.n	80069f4 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fc63 	bl	80082b6 <USBD_CtlError>
            return USBD_FAIL;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e0b8      	b.n	8006b66 <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2201      	movs	r2, #1
 80069f8:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80069fa:	6939      	ldr	r1, [r7, #16]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	88db      	ldrh	r3, [r3, #6]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fd03 	bl	800840e <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006a08:	e006      	b.n	8006a18 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 fc52 	bl	80082b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a12:	2303      	movs	r3, #3
 8006a14:	75fb      	strb	r3, [r7, #23]
          break;
 8006a16:	bf00      	nop
      }
      break;
 8006a18:	e0a4      	b.n	8006b64 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	2b0b      	cmp	r3, #11
 8006a20:	f200 8090 	bhi.w	8006b44 <USBD_CUSTOM_HID_Setup+0x224>
 8006a24:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <USBD_CUSTOM_HID_Setup+0x10c>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006b53 	.word	0x08006b53
 8006a34:	08006b45 	.word	0x08006b45
 8006a38:	08006b45 	.word	0x08006b45
 8006a3c:	08006b45 	.word	0x08006b45
 8006a40:	08006b45 	.word	0x08006b45
 8006a44:	08006a87 	.word	0x08006a87
 8006a48:	08006b45 	.word	0x08006b45
 8006a4c:	08006b45 	.word	0x08006b45
 8006a50:	08006b45 	.word	0x08006b45
 8006a54:	08006af3 	.word	0x08006af3
 8006a58:	08006b1d 	.word	0x08006b1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d107      	bne.n	8006a78 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a68:	f107 030e 	add.w	r3, r7, #14
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fc9d 	bl	80083b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a76:	e06d      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fc1b 	bl	80082b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	75fb      	strb	r3, [r7, #23]
          break;
 8006a84:	e066      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	885b      	ldrh	r3, [r3, #2]
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b22      	cmp	r3, #34	@ 0x22
 8006a90:	d110      	bne.n	8006ab4 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	88db      	ldrh	r3, [r3, #6]
 8006a96:	2b1b      	cmp	r3, #27
 8006a98:	bf28      	it	cs
 8006a9a:	231b      	movcs	r3, #27
 8006a9c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	33b0      	adds	r3, #176	@ 0xb0
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	e00d      	b.n	8006ad0 <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	885b      	ldrh	r3, [r3, #2]
 8006ab8:	0a1b      	lsrs	r3, r3, #8
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b21      	cmp	r3, #33	@ 0x21
 8006abe:	d107      	bne.n	8006ad0 <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b70 <USBD_CUSTOM_HID_Setup+0x250>)
 8006ac2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	88db      	ldrh	r3, [r3, #6]
 8006ac8:	2b09      	cmp	r3, #9
 8006aca:	bf28      	it	cs
 8006acc:	2309      	movcs	r3, #9
 8006ace:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d006      	beq.n	8006ae4 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ad6:	8bfb      	ldrh	r3, [r7, #30]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fc67 	bl	80083b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ae2:	e037      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fbe5 	bl	80082b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aec:	2303      	movs	r3, #3
 8006aee:	75fb      	strb	r3, [r7, #23]
          break;
 8006af0:	e030      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d107      	bne.n	8006b0e <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3348      	adds	r3, #72	@ 0x48
 8006b02:	2201      	movs	r2, #1
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fc52 	bl	80083b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b0c:	e022      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 fbd0 	bl	80082b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	75fb      	strb	r3, [r7, #23]
          break;
 8006b1a:	e01b      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d106      	bne.n	8006b36 <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	885b      	ldrh	r3, [r3, #2]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b34:	e00e      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fbbc 	bl	80082b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	75fb      	strb	r3, [r7, #23]
          break;
 8006b42:	e007      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fbb5 	bl	80082b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006b50:	e000      	b.n	8006b54 <USBD_CUSTOM_HID_Setup+0x234>
          break;
 8006b52:	bf00      	nop
      }
      break;
 8006b54:	e006      	b.n	8006b64 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fbac 	bl	80082b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	75fb      	strb	r3, [r7, #23]
      break;
 8006b62:	bf00      	nop
  }
  return (uint8_t)ret;
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000070 	.word	0x20000070

08006b74 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	32b0      	adds	r2, #176	@ 0xb0
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e019      	b.n	8006bd0 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d112      	bne.n	8006bce <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10b      	bne.n	8006bca <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006bba:	4b07      	ldr	r3, [pc, #28]	@ (8006bd8 <USBD_CUSTOM_HID_SendReport+0x64>)
 8006bbc:	7819      	ldrb	r1, [r3, #0]
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f002 fa53 	bl	800906e <USBD_LL_Transmit>
 8006bc8:	e001      	b.n	8006bce <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20000086 	.word	0x20000086

08006bdc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006be4:	2181      	movs	r1, #129	@ 0x81
 8006be6:	4815      	ldr	r0, [pc, #84]	@ (8006c3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006be8:	f000 fd2c 	bl	8007644 <USBD_GetEpDesc>
 8006bec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006bee:	2101      	movs	r1, #1
 8006bf0:	4812      	ldr	r0, [pc, #72]	@ (8006c3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006bf2:	f000 fd27 	bl	8007644 <USBD_GetEpDesc>
 8006bf6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c06:	711a      	strb	r2, [r3, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2205      	movs	r2, #5
 8006c10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d009      	beq.n	8006c2c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c20:	711a      	strb	r2, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2205      	movs	r2, #5
 8006c2a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2229      	movs	r2, #41	@ 0x29
 8006c30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006c32:	4b02      	ldr	r3, [pc, #8]	@ (8006c3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20000044 	.word	0x20000044

08006c40 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006c48:	2181      	movs	r1, #129	@ 0x81
 8006c4a:	4815      	ldr	r0, [pc, #84]	@ (8006ca0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006c4c:	f000 fcfa 	bl	8007644 <USBD_GetEpDesc>
 8006c50:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006c52:	2101      	movs	r1, #1
 8006c54:	4812      	ldr	r0, [pc, #72]	@ (8006ca0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006c56:	f000 fcf5 	bl	8007644 <USBD_GetEpDesc>
 8006c5a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c6a:	711a      	strb	r2, [r3, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2205      	movs	r2, #5
 8006c74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c84:	711a      	strb	r2, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2205      	movs	r2, #5
 8006c8e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2229      	movs	r2, #41	@ 0x29
 8006c94:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006c96:	4b02      	ldr	r3, [pc, #8]	@ (8006ca0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000044 	.word	0x20000044

08006ca4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006cac:	2181      	movs	r1, #129	@ 0x81
 8006cae:	4815      	ldr	r0, [pc, #84]	@ (8006d04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006cb0:	f000 fcc8 	bl	8007644 <USBD_GetEpDesc>
 8006cb4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	4812      	ldr	r0, [pc, #72]	@ (8006d04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006cba:	f000 fcc3 	bl	8007644 <USBD_GetEpDesc>
 8006cbe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cce:	711a      	strb	r2, [r3, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ce8:	711a      	strb	r2, [r3, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2229      	movs	r2, #41	@ 0x29
 8006cf8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006cfa:	4b02      	ldr	r3, [pc, #8]	@ (8006d04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	20000044 	.word	0x20000044

08006d08 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32b0      	adds	r2, #176	@ 0xb0
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	32b0      	adds	r2, #176	@ 0xb0
 8006d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e014      	b.n	8006d82 <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	32b0      	adds	r2, #176	@ 0xb0
 8006d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	33b0      	adds	r3, #176	@ 0xb0
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	32b0      	adds	r2, #176	@ 0xb0
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e00f      	b.n	8006dca <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	32b0      	adds	r2, #176	@ 0xb0
 8006db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006dba:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006dbc:	7819      	ldrb	r1, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	2340      	movs	r3, #64	@ 0x40
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f002 f974 	bl	80090b0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000087 	.word	0x20000087

08006dd8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	@ 0xb0
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e013      	b.n	8006e22 <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d10e      	bne.n	8006e20 <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	33b0      	adds	r3, #176	@ 0xb0
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4610      	mov	r0, r2
 8006e18:	4798      	blx	r3
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	220a      	movs	r2, #10
 8006e38:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006e3a:	4b03      	ldr	r3, [pc, #12]	@ (8006e48 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	2000007c 	.word	0x2000007c

08006e4c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e009      	b.n	8006e74 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	33b0      	adds	r3, #176	@ 0xb0
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e01f      	b.n	8006ed8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	79fa      	ldrb	r2, [r7, #7]
 8006eca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f001 ff99 	bl	8008e04 <USBD_LL_Init>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e025      	b.n	8006f44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32ae      	adds	r2, #174	@ 0xae
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00f      	beq.n	8006f34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32ae      	adds	r2, #174	@ 0xae
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	f107 020e 	add.w	r2, r7, #14
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 ffa1 	bl	8008e9c <USBD_LL_Start>
 8006f5a:	4603      	mov	r3, r0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f922 	bl	8008242 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2b02      	cmp	r3, #2
 8007020:	d01a      	beq.n	8007058 <USBD_LL_SetupStage+0x72>
 8007022:	2b02      	cmp	r3, #2
 8007024:	d822      	bhi.n	800706c <USBD_LL_SetupStage+0x86>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <USBD_LL_SetupStage+0x4a>
 800702a:	2b01      	cmp	r3, #1
 800702c:	d00a      	beq.n	8007044 <USBD_LL_SetupStage+0x5e>
 800702e:	e01d      	b.n	800706c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb77 	bl	800772c <USBD_StdDevReq>
 800703e:	4603      	mov	r3, r0
 8007040:	73fb      	strb	r3, [r7, #15]
      break;
 8007042:	e020      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fbdf 	bl	8007810 <USBD_StdItfReq>
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
      break;
 8007056:	e016      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fc41 	bl	80078e8 <USBD_StdEPReq>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]
      break;
 800706a:	e00c      	b.n	8007086 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007072:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007076:	b2db      	uxtb	r3, r3
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 ff6e 	bl	8008f5c <USBD_LL_StallEP>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
      break;
 8007084:	bf00      	nop
  }

  return ret;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	460b      	mov	r3, r1
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d177      	bne.n	8007198 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80070ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	f040 80a1 	bne.w	80071fe <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	8992      	ldrh	r2, [r2, #12]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d91c      	bls.n	8007102 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	8992      	ldrh	r2, [r2, #12]
 80070d0:	1a9a      	subs	r2, r3, r2
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	8992      	ldrh	r2, [r2, #12]
 80070de:	441a      	add	r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6919      	ldr	r1, [r3, #16]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	899b      	ldrh	r3, [r3, #12]
 80070ec:	461a      	mov	r2, r3
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4293      	cmp	r3, r2
 80070f4:	bf38      	it	cc
 80070f6:	4613      	movcc	r3, r2
 80070f8:	461a      	mov	r2, r3
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f001 f9a8 	bl	8008450 <USBD_CtlContinueRx>
 8007100:	e07d      	b.n	80071fe <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	2b02      	cmp	r3, #2
 800710e:	d014      	beq.n	800713a <USBD_LL_DataOutStage+0xaa>
 8007110:	2b02      	cmp	r3, #2
 8007112:	d81d      	bhi.n	8007150 <USBD_LL_DataOutStage+0xc0>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <USBD_LL_DataOutStage+0x8e>
 8007118:	2b01      	cmp	r3, #1
 800711a:	d003      	beq.n	8007124 <USBD_LL_DataOutStage+0x94>
 800711c:	e018      	b.n	8007150 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	75bb      	strb	r3, [r7, #22]
            break;
 8007122:	e018      	b.n	8007156 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800712a:	b2db      	uxtb	r3, r3
 800712c:	4619      	mov	r1, r3
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fa6e 	bl	8007610 <USBD_CoreFindIF>
 8007134:	4603      	mov	r3, r0
 8007136:	75bb      	strb	r3, [r7, #22]
            break;
 8007138:	e00d      	b.n	8007156 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007140:	b2db      	uxtb	r3, r3
 8007142:	4619      	mov	r1, r3
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 fa70 	bl	800762a <USBD_CoreFindEP>
 800714a:	4603      	mov	r3, r0
 800714c:	75bb      	strb	r3, [r7, #22]
            break;
 800714e:	e002      	b.n	8007156 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	75bb      	strb	r3, [r7, #22]
            break;
 8007154:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007156:	7dbb      	ldrb	r3, [r7, #22]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d119      	bne.n	8007190 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b03      	cmp	r3, #3
 8007166:	d113      	bne.n	8007190 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007168:	7dba      	ldrb	r2, [r7, #22]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	32ae      	adds	r2, #174	@ 0xae
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007178:	7dba      	ldrb	r2, [r7, #22]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007180:	7dba      	ldrb	r2, [r7, #22]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	32ae      	adds	r2, #174	@ 0xae
 8007186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f001 f96e 	bl	8008472 <USBD_CtlSendStatus>
 8007196:	e032      	b.n	80071fe <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	4619      	mov	r1, r3
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fa41 	bl	800762a <USBD_CoreFindEP>
 80071a8:	4603      	mov	r3, r0
 80071aa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071ac:	7dbb      	ldrb	r3, [r7, #22]
 80071ae:	2bff      	cmp	r3, #255	@ 0xff
 80071b0:	d025      	beq.n	80071fe <USBD_LL_DataOutStage+0x16e>
 80071b2:	7dbb      	ldrb	r3, [r7, #22]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d122      	bne.n	80071fe <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d117      	bne.n	80071f4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80071c4:	7dba      	ldrb	r2, [r7, #22]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	32ae      	adds	r2, #174	@ 0xae
 80071ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00f      	beq.n	80071f4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80071d4:	7dba      	ldrb	r2, [r7, #22]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80071dc:	7dba      	ldrb	r2, [r7, #22]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	32ae      	adds	r2, #174	@ 0xae
 80071e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	7afa      	ldrb	r2, [r7, #11]
 80071ea:	4611      	mov	r1, r2
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	4798      	blx	r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	e000      	b.n	8007200 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	460b      	mov	r3, r1
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d178      	bne.n	800730e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3314      	adds	r3, #20
 8007220:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007228:	2b02      	cmp	r3, #2
 800722a:	d163      	bne.n	80072f4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	8992      	ldrh	r2, [r2, #12]
 8007234:	4293      	cmp	r3, r2
 8007236:	d91c      	bls.n	8007272 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	8992      	ldrh	r2, [r2, #12]
 8007240:	1a9a      	subs	r2, r3, r2
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	8992      	ldrh	r2, [r2, #12]
 800724e:	441a      	add	r2, r3
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6919      	ldr	r1, [r3, #16]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	461a      	mov	r2, r3
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f001 f8c4 	bl	80083ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007264:	2300      	movs	r3, #0
 8007266:	2200      	movs	r2, #0
 8007268:	2100      	movs	r1, #0
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f001 ff20 	bl	80090b0 <USBD_LL_PrepareReceive>
 8007270:	e040      	b.n	80072f4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	899b      	ldrh	r3, [r3, #12]
 8007276:	461a      	mov	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d11c      	bne.n	80072ba <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007288:	4293      	cmp	r3, r2
 800728a:	d316      	bcc.n	80072ba <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007296:	429a      	cmp	r2, r3
 8007298:	d20f      	bcs.n	80072ba <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f001 f8a4 	bl	80083ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072ac:	2300      	movs	r3, #0
 80072ae:	2200      	movs	r2, #0
 80072b0:	2100      	movs	r1, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f001 fefc 	bl	80090b0 <USBD_LL_PrepareReceive>
 80072b8:	e01c      	b.n	80072f4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d10f      	bne.n	80072e6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80072e6:	2180      	movs	r1, #128	@ 0x80
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f001 fe37 	bl	8008f5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 f8d2 	bl	8008498 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d03a      	beq.n	8007374 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff fe30 	bl	8006f64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800730c:	e032      	b.n	8007374 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800730e:	7afb      	ldrb	r3, [r7, #11]
 8007310:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4619      	mov	r1, r3
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f986 	bl	800762a <USBD_CoreFindEP>
 800731e:	4603      	mov	r3, r0
 8007320:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	2bff      	cmp	r3, #255	@ 0xff
 8007326:	d025      	beq.n	8007374 <USBD_LL_DataInStage+0x16c>
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d122      	bne.n	8007374 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b03      	cmp	r3, #3
 8007338:	d11c      	bne.n	8007374 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800733a:	7dfa      	ldrb	r2, [r7, #23]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	32ae      	adds	r2, #174	@ 0xae
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d014      	beq.n	8007374 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800734a:	7dfa      	ldrb	r2, [r7, #23]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007352:	7dfa      	ldrb	r2, [r7, #23]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	32ae      	adds	r2, #174	@ 0xae
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	7afa      	ldrb	r2, [r7, #11]
 8007360:	4611      	mov	r1, r2
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	4798      	blx	r3
 8007366:	4603      	mov	r3, r0
 8007368:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800736a:	7dbb      	ldrb	r3, [r7, #22]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007370:	7dbb      	ldrb	r3, [r7, #22]
 8007372:	e000      	b.n	8007376 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d014      	beq.n	80073e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00e      	beq.n	80073e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6852      	ldr	r2, [r2, #4]
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	4611      	mov	r1, r2
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073e4:	2340      	movs	r3, #64	@ 0x40
 80073e6:	2200      	movs	r2, #0
 80073e8:	2100      	movs	r1, #0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 fd71 	bl	8008ed2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2240      	movs	r2, #64	@ 0x40
 80073fc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007400:	2340      	movs	r3, #64	@ 0x40
 8007402:	2200      	movs	r2, #0
 8007404:	2180      	movs	r1, #128	@ 0x80
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 fd63 	bl	8008ed2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2240      	movs	r2, #64	@ 0x40
 8007418:	841a      	strh	r2, [r3, #32]

  return ret;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b04      	cmp	r3, #4
 8007456:	d006      	beq.n	8007466 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800745e:	b2da      	uxtb	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2204      	movs	r2, #4
 800746a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b04      	cmp	r3, #4
 800748e:	d106      	bne.n	800749e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007496:	b2da      	uxtb	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d110      	bne.n	80074e2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32ae      	adds	r2, #174	@ 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800750a:	2303      	movs	r3, #3
 800750c:	e01c      	b.n	8007548 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b03      	cmp	r3, #3
 8007518:	d115      	bne.n	8007546 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	32ae      	adds	r2, #174	@ 0xae
 8007524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	32ae      	adds	r2, #174	@ 0xae
 8007538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	4611      	mov	r1, r2
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32ae      	adds	r2, #174	@ 0xae
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800756e:	2303      	movs	r3, #3
 8007570:	e01c      	b.n	80075ac <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b03      	cmp	r3, #3
 800757c:	d115      	bne.n	80075aa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	32ae      	adds	r2, #174	@ 0xae
 8007588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	32ae      	adds	r2, #174	@ 0xae
 800759c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	4611      	mov	r1, r2
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6852      	ldr	r2, [r2, #4]
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	4611      	mov	r1, r2
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800761c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007636:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	885b      	ldrh	r3, [r3, #2]
 8007660:	b29b      	uxth	r3, r3
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	7812      	ldrb	r2, [r2, #0]
 8007666:	4293      	cmp	r3, r2
 8007668:	d91f      	bls.n	80076aa <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007670:	e013      	b.n	800769a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007672:	f107 030a 	add.w	r3, r7, #10
 8007676:	4619      	mov	r1, r3
 8007678:	6978      	ldr	r0, [r7, #20]
 800767a:	f000 f81b 	bl	80076b4 <USBD_GetNextDesc>
 800767e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	2b05      	cmp	r3, #5
 8007686:	d108      	bne.n	800769a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	789b      	ldrb	r3, [r3, #2]
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	429a      	cmp	r2, r3
 8007694:	d008      	beq.n	80076a8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	885b      	ldrh	r3, [r3, #2]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	897b      	ldrh	r3, [r7, #10]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d8e5      	bhi.n	8007672 <USBD_GetEpDesc+0x2e>
 80076a6:	e000      	b.n	80076aa <USBD_GetEpDesc+0x66>
          break;
 80076a8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80076aa:	693b      	ldr	r3, [r7, #16]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	7812      	ldrb	r2, [r2, #0]
 80076ca:	4413      	add	r3, r2
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	3301      	adds	r3, #1
 8007702:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800770a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	b21a      	sxth	r2, r3
 8007712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007716:	4313      	orrs	r3, r2
 8007718:	b21b      	sxth	r3, r3
 800771a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800771c:	89fb      	ldrh	r3, [r7, #14]
}
 800771e:	4618      	mov	r0, r3
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007742:	2b40      	cmp	r3, #64	@ 0x40
 8007744:	d005      	beq.n	8007752 <USBD_StdDevReq+0x26>
 8007746:	2b40      	cmp	r3, #64	@ 0x40
 8007748:	d857      	bhi.n	80077fa <USBD_StdDevReq+0xce>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00f      	beq.n	800776e <USBD_StdDevReq+0x42>
 800774e:	2b20      	cmp	r3, #32
 8007750:	d153      	bne.n	80077fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	32ae      	adds	r2, #174	@ 0xae
 800775c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	4798      	blx	r3
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
      break;
 800776c:	e04a      	b.n	8007804 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	785b      	ldrb	r3, [r3, #1]
 8007772:	2b09      	cmp	r3, #9
 8007774:	d83b      	bhi.n	80077ee <USBD_StdDevReq+0xc2>
 8007776:	a201      	add	r2, pc, #4	@ (adr r2, 800777c <USBD_StdDevReq+0x50>)
 8007778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777c:	080077d1 	.word	0x080077d1
 8007780:	080077e5 	.word	0x080077e5
 8007784:	080077ef 	.word	0x080077ef
 8007788:	080077db 	.word	0x080077db
 800778c:	080077ef 	.word	0x080077ef
 8007790:	080077af 	.word	0x080077af
 8007794:	080077a5 	.word	0x080077a5
 8007798:	080077ef 	.word	0x080077ef
 800779c:	080077c7 	.word	0x080077c7
 80077a0:	080077b9 	.word	0x080077b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa3e 	bl	8007c28 <USBD_GetDescriptor>
          break;
 80077ac:	e024      	b.n	80077f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fba3 	bl	8007efc <USBD_SetAddress>
          break;
 80077b6:	e01f      	b.n	80077f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fbe2 	bl	8007f84 <USBD_SetConfig>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
          break;
 80077c4:	e018      	b.n	80077f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fc85 	bl	80080d8 <USBD_GetConfig>
          break;
 80077ce:	e013      	b.n	80077f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fcb6 	bl	8008144 <USBD_GetStatus>
          break;
 80077d8:	e00e      	b.n	80077f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fce5 	bl	80081ac <USBD_SetFeature>
          break;
 80077e2:	e009      	b.n	80077f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fd09 	bl	80081fe <USBD_ClrFeature>
          break;
 80077ec:	e004      	b.n	80077f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fd60 	bl	80082b6 <USBD_CtlError>
          break;
 80077f6:	bf00      	nop
      }
      break;
 80077f8:	e004      	b.n	8007804 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fd5a 	bl	80082b6 <USBD_CtlError>
      break;
 8007802:	bf00      	nop
  }

  return ret;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop

08007810 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007826:	2b40      	cmp	r3, #64	@ 0x40
 8007828:	d005      	beq.n	8007836 <USBD_StdItfReq+0x26>
 800782a:	2b40      	cmp	r3, #64	@ 0x40
 800782c:	d852      	bhi.n	80078d4 <USBD_StdItfReq+0xc4>
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <USBD_StdItfReq+0x26>
 8007832:	2b20      	cmp	r3, #32
 8007834:	d14e      	bne.n	80078d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800783c:	b2db      	uxtb	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	2b02      	cmp	r3, #2
 8007842:	d840      	bhi.n	80078c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	889b      	ldrh	r3, [r3, #4]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b01      	cmp	r3, #1
 800784c:	d836      	bhi.n	80078bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	889b      	ldrh	r3, [r3, #4]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff feda 	bl	8007610 <USBD_CoreFindIF>
 800785c:	4603      	mov	r3, r0
 800785e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2bff      	cmp	r3, #255	@ 0xff
 8007864:	d01d      	beq.n	80078a2 <USBD_StdItfReq+0x92>
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d11a      	bne.n	80078a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800786c:	7bba      	ldrb	r2, [r7, #14]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32ae      	adds	r2, #174	@ 0xae
 8007872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00f      	beq.n	800789c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800787c:	7bba      	ldrb	r2, [r7, #14]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007884:	7bba      	ldrb	r2, [r7, #14]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	32ae      	adds	r2, #174	@ 0xae
 800788a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800789a:	e004      	b.n	80078a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078a0:	e001      	b.n	80078a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078a2:	2303      	movs	r3, #3
 80078a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	88db      	ldrh	r3, [r3, #6]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d110      	bne.n	80078d0 <USBD_StdItfReq+0xc0>
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10d      	bne.n	80078d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fddc 	bl	8008472 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078ba:	e009      	b.n	80078d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fcf9 	bl	80082b6 <USBD_CtlError>
          break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fcf4 	bl	80082b6 <USBD_CtlError>
          break;
 80078ce:	e000      	b.n	80078d2 <USBD_StdItfReq+0xc2>
          break;
 80078d0:	bf00      	nop
      }
      break;
 80078d2:	e004      	b.n	80078de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fced 	bl	80082b6 <USBD_CtlError>
      break;
 80078dc:	bf00      	nop
  }

  return ret;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	889b      	ldrh	r3, [r3, #4]
 80078fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007904:	2b40      	cmp	r3, #64	@ 0x40
 8007906:	d007      	beq.n	8007918 <USBD_StdEPReq+0x30>
 8007908:	2b40      	cmp	r3, #64	@ 0x40
 800790a:	f200 8181 	bhi.w	8007c10 <USBD_StdEPReq+0x328>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d02a      	beq.n	8007968 <USBD_StdEPReq+0x80>
 8007912:	2b20      	cmp	r3, #32
 8007914:	f040 817c 	bne.w	8007c10 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff fe84 	bl	800762a <USBD_CoreFindEP>
 8007922:	4603      	mov	r3, r0
 8007924:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007926:	7b7b      	ldrb	r3, [r7, #13]
 8007928:	2bff      	cmp	r3, #255	@ 0xff
 800792a:	f000 8176 	beq.w	8007c1a <USBD_StdEPReq+0x332>
 800792e:	7b7b      	ldrb	r3, [r7, #13]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f040 8172 	bne.w	8007c1a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007936:	7b7a      	ldrb	r2, [r7, #13]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800793e:	7b7a      	ldrb	r2, [r7, #13]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	32ae      	adds	r2, #174	@ 0xae
 8007944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8165 	beq.w	8007c1a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007950:	7b7a      	ldrb	r2, [r7, #13]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32ae      	adds	r2, #174	@ 0xae
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007966:	e158      	b.n	8007c1a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b03      	cmp	r3, #3
 800796e:	d008      	beq.n	8007982 <USBD_StdEPReq+0x9a>
 8007970:	2b03      	cmp	r3, #3
 8007972:	f300 8147 	bgt.w	8007c04 <USBD_StdEPReq+0x31c>
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 809b 	beq.w	8007ab2 <USBD_StdEPReq+0x1ca>
 800797c:	2b01      	cmp	r3, #1
 800797e:	d03c      	beq.n	80079fa <USBD_StdEPReq+0x112>
 8007980:	e140      	b.n	8007c04 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d002      	beq.n	8007994 <USBD_StdEPReq+0xac>
 800798e:	2b03      	cmp	r3, #3
 8007990:	d016      	beq.n	80079c0 <USBD_StdEPReq+0xd8>
 8007992:	e02c      	b.n	80079ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <USBD_StdEPReq+0xce>
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b80      	cmp	r3, #128	@ 0x80
 800799e:	d00a      	beq.n	80079b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 fad9 	bl	8008f5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079aa:	2180      	movs	r1, #128	@ 0x80
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fad5 	bl	8008f5c <USBD_LL_StallEP>
 80079b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079b4:	e020      	b.n	80079f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fc7c 	bl	80082b6 <USBD_CtlError>
              break;
 80079be:	e01b      	b.n	80079f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	885b      	ldrh	r3, [r3, #2]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10e      	bne.n	80079e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00b      	beq.n	80079e6 <USBD_StdEPReq+0xfe>
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b80      	cmp	r3, #128	@ 0x80
 80079d2:	d008      	beq.n	80079e6 <USBD_StdEPReq+0xfe>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	88db      	ldrh	r3, [r3, #6]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fabb 	bl	8008f5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fd43 	bl	8008472 <USBD_CtlSendStatus>

              break;
 80079ec:	e004      	b.n	80079f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fc60 	bl	80082b6 <USBD_CtlError>
              break;
 80079f6:	bf00      	nop
          }
          break;
 80079f8:	e109      	b.n	8007c0e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d002      	beq.n	8007a0c <USBD_StdEPReq+0x124>
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d016      	beq.n	8007a38 <USBD_StdEPReq+0x150>
 8007a0a:	e04b      	b.n	8007aa4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00d      	beq.n	8007a2e <USBD_StdEPReq+0x146>
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b80      	cmp	r3, #128	@ 0x80
 8007a16:	d00a      	beq.n	8007a2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fa9d 	bl	8008f5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a22:	2180      	movs	r1, #128	@ 0x80
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fa99 	bl	8008f5c <USBD_LL_StallEP>
 8007a2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a2c:	e040      	b.n	8007ab0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc40 	bl	80082b6 <USBD_CtlError>
              break;
 8007a36:	e03b      	b.n	8007ab0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	885b      	ldrh	r3, [r3, #2]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d136      	bne.n	8007aae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 faa3 	bl	8008f9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fd0c 	bl	8008472 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fde3 	bl	800762a <USBD_CoreFindEP>
 8007a64:	4603      	mov	r3, r0
 8007a66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a68:	7b7b      	ldrb	r3, [r7, #13]
 8007a6a:	2bff      	cmp	r3, #255	@ 0xff
 8007a6c:	d01f      	beq.n	8007aae <USBD_StdEPReq+0x1c6>
 8007a6e:	7b7b      	ldrb	r3, [r7, #13]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d11c      	bne.n	8007aae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a74:	7b7a      	ldrb	r2, [r7, #13]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a7c:	7b7a      	ldrb	r2, [r7, #13]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	32ae      	adds	r2, #174	@ 0xae
 8007a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d010      	beq.n	8007aae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a8c:	7b7a      	ldrb	r2, [r7, #13]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	32ae      	adds	r2, #174	@ 0xae
 8007a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007aa2:	e004      	b.n	8007aae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc05 	bl	80082b6 <USBD_CtlError>
              break;
 8007aac:	e000      	b.n	8007ab0 <USBD_StdEPReq+0x1c8>
              break;
 8007aae:	bf00      	nop
          }
          break;
 8007ab0:	e0ad      	b.n	8007c0e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d002      	beq.n	8007ac4 <USBD_StdEPReq+0x1dc>
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d033      	beq.n	8007b2a <USBD_StdEPReq+0x242>
 8007ac2:	e099      	b.n	8007bf8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d007      	beq.n	8007ada <USBD_StdEPReq+0x1f2>
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b80      	cmp	r3, #128	@ 0x80
 8007ace:	d004      	beq.n	8007ada <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fbef 	bl	80082b6 <USBD_CtlError>
                break;
 8007ad8:	e093      	b.n	8007c02 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	da0b      	bge.n	8007afa <USBD_StdEPReq+0x212>
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	3310      	adds	r3, #16
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	4413      	add	r3, r2
 8007af6:	3304      	adds	r3, #4
 8007af8:	e00b      	b.n	8007b12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b00:	4613      	mov	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	4413      	add	r3, r2
 8007b10:	3304      	adds	r3, #4
 8007b12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2200      	movs	r2, #0
 8007b18:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	330e      	adds	r3, #14
 8007b1e:	2202      	movs	r2, #2
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fc44 	bl	80083b0 <USBD_CtlSendData>
              break;
 8007b28:	e06b      	b.n	8007c02 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da11      	bge.n	8007b56 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	f003 020f 	and.w	r2, r3, #15
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	3323      	adds	r3, #35	@ 0x23
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d117      	bne.n	8007b7c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fbb1 	bl	80082b6 <USBD_CtlError>
                  break;
 8007b54:	e055      	b.n	8007c02 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	f003 020f 	and.w	r2, r3, #15
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fb9e 	bl	80082b6 <USBD_CtlError>
                  break;
 8007b7a:	e042      	b.n	8007c02 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da0b      	bge.n	8007b9c <USBD_StdEPReq+0x2b4>
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	3310      	adds	r3, #16
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	3304      	adds	r3, #4
 8007b9a:	e00b      	b.n	8007bb4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <USBD_StdEPReq+0x2da>
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b80      	cmp	r3, #128	@ 0x80
 8007bc0:	d103      	bne.n	8007bca <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	739a      	strb	r2, [r3, #14]
 8007bc8:	e00e      	b.n	8007be8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fa02 	bl	8008fd8 <USBD_LL_IsStallEP>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	739a      	strb	r2, [r3, #14]
 8007be0:	e002      	b.n	8007be8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2200      	movs	r2, #0
 8007be6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	330e      	adds	r3, #14
 8007bec:	2202      	movs	r2, #2
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fbdd 	bl	80083b0 <USBD_CtlSendData>
              break;
 8007bf6:	e004      	b.n	8007c02 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fb5b 	bl	80082b6 <USBD_CtlError>
              break;
 8007c00:	bf00      	nop
          }
          break;
 8007c02:	e004      	b.n	8007c0e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fb55 	bl	80082b6 <USBD_CtlError>
          break;
 8007c0c:	bf00      	nop
      }
      break;
 8007c0e:	e005      	b.n	8007c1c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fb4f 	bl	80082b6 <USBD_CtlError>
      break;
 8007c18:	e000      	b.n	8007c1c <USBD_StdEPReq+0x334>
      break;
 8007c1a:	bf00      	nop
  }

  return ret;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	885b      	ldrh	r3, [r3, #2]
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b01      	subs	r3, #1
 8007c48:	2b06      	cmp	r3, #6
 8007c4a:	f200 8128 	bhi.w	8007e9e <USBD_GetDescriptor+0x276>
 8007c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <USBD_GetDescriptor+0x2c>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c89 	.word	0x08007c89
 8007c5c:	08007cc9 	.word	0x08007cc9
 8007c60:	08007e9f 	.word	0x08007e9f
 8007c64:	08007e9f 	.word	0x08007e9f
 8007c68:	08007e3f 	.word	0x08007e3f
 8007c6c:	08007e6b 	.word	0x08007e6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
      break;
 8007c86:	e112      	b.n	8007eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	7c1b      	ldrb	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10d      	bne.n	8007cac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c98:	f107 0208 	add.w	r2, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007caa:	e100      	b.n	8007eae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	f107 0208 	add.w	r2, r7, #8
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	701a      	strb	r2, [r3, #0]
      break;
 8007cc6:	e0f2      	b.n	8007eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	885b      	ldrh	r3, [r3, #2]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	f200 80ac 	bhi.w	8007e2c <USBD_GetDescriptor+0x204>
 8007cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <USBD_GetDescriptor+0xb4>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007d29 	.word	0x08007d29
 8007ce4:	08007d5d 	.word	0x08007d5d
 8007ce8:	08007d91 	.word	0x08007d91
 8007cec:	08007dc5 	.word	0x08007dc5
 8007cf0:	08007df9 	.word	0x08007df9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d16:	e091      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 facb 	bl	80082b6 <USBD_CtlError>
            err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
          break;
 8007d26:	e089      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	f107 0108 	add.w	r1, r7, #8
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4a:	e077      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fab1 	bl	80082b6 <USBD_CtlError>
            err++;
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	3301      	adds	r3, #1
 8007d58:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5a:	e06f      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7e:	e05d      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa97 	bl	80082b6 <USBD_CtlError>
            err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8e:	e055      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 0108 	add.w	r1, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db2:	e043      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa7d 	bl	80082b6 <USBD_CtlError>
            err++;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc2:	e03b      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de6:	e029      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa63 	bl	80082b6 <USBD_CtlError>
            err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
          break;
 8007df6:	e021      	b.n	8007e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1a:	e00f      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa49 	bl	80082b6 <USBD_CtlError>
            err++;
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	3301      	adds	r3, #1
 8007e28:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2a:	e007      	b.n	8007e3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa41 	bl	80082b6 <USBD_CtlError>
          err++;
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	3301      	adds	r3, #1
 8007e38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e3a:	bf00      	nop
      }
      break;
 8007e3c:	e037      	b.n	8007eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7c1b      	ldrb	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4e:	f107 0208 	add.w	r2, r7, #8
 8007e52:	4610      	mov	r0, r2
 8007e54:	4798      	blx	r3
 8007e56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e58:	e029      	b.n	8007eae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fa2a 	bl	80082b6 <USBD_CtlError>
        err++;
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	3301      	adds	r3, #1
 8007e66:	72fb      	strb	r3, [r7, #11]
      break;
 8007e68:	e021      	b.n	8007eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7c1b      	ldrb	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10d      	bne.n	8007e8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7a:	f107 0208 	add.w	r2, r7, #8
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4798      	blx	r3
 8007e82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	2207      	movs	r2, #7
 8007e8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e8c:	e00f      	b.n	8007eae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa10 	bl	80082b6 <USBD_CtlError>
        err++;
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e9c:	e007      	b.n	8007eae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fa08 	bl	80082b6 <USBD_CtlError>
      err++;
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	72fb      	strb	r3, [r7, #11]
      break;
 8007eac:	bf00      	nop
  }

  if (err != 0U)
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d11e      	bne.n	8007ef2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	88db      	ldrh	r3, [r3, #6]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d016      	beq.n	8007eea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ebc:	893b      	ldrh	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00e      	beq.n	8007ee0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	88da      	ldrh	r2, [r3, #6]
 8007ec6:	893b      	ldrh	r3, [r7, #8]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	bf28      	it	cs
 8007ecc:	4613      	movcs	r3, r2
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ed2:	893b      	ldrh	r3, [r7, #8]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fa69 	bl	80083b0 <USBD_CtlSendData>
 8007ede:	e009      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f9e7 	bl	80082b6 <USBD_CtlError>
 8007ee8:	e004      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fac1 	bl	8008472 <USBD_CtlSendStatus>
 8007ef0:	e000      	b.n	8007ef4 <USBD_GetDescriptor+0x2cc>
    return;
 8007ef2:	bf00      	nop
  }
}
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	889b      	ldrh	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d131      	bne.n	8007f72 <USBD_SetAddress+0x76>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88db      	ldrh	r3, [r3, #6]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d12d      	bne.n	8007f72 <USBD_SetAddress+0x76>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f1c:	d829      	bhi.n	8007f72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d104      	bne.n	8007f40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f9bc 	bl	80082b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3e:	e01d      	b.n	8007f7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	7bfa      	ldrb	r2, [r7, #15]
 8007f44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 f86f 	bl	8009030 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa8d 	bl	8008472 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f66:	e009      	b.n	8007f7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f70:	e004      	b.n	8007f7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f99e 	bl	80082b6 <USBD_CtlError>
  }
}
 8007f7a:	bf00      	nop
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	885b      	ldrh	r3, [r3, #2]
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	4b4e      	ldr	r3, [pc, #312]	@ (80080d4 <USBD_SetConfig+0x150>)
 8007f9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80080d4 <USBD_SetConfig+0x150>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d905      	bls.n	8007fb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f985 	bl	80082b6 <USBD_CtlError>
    return USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e08c      	b.n	80080ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d002      	beq.n	8007fc2 <USBD_SetConfig+0x3e>
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d029      	beq.n	8008014 <USBD_SetConfig+0x90>
 8007fc0:	e075      	b.n	80080ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007fc2:	4b44      	ldr	r3, [pc, #272]	@ (80080d4 <USBD_SetConfig+0x150>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d020      	beq.n	800800c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007fca:	4b42      	ldr	r3, [pc, #264]	@ (80080d4 <USBD_SetConfig+0x150>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80080d4 <USBD_SetConfig+0x150>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fe ffcd 	bl	8006f7a <USBD_SetClassConfig>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f962 	bl	80082b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ffa:	e065      	b.n	80080c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa38 	bl	8008472 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2203      	movs	r2, #3
 8008006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800800a:	e05d      	b.n	80080c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa30 	bl	8008472 <USBD_CtlSendStatus>
      break;
 8008012:	e059      	b.n	80080c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008014:	4b2f      	ldr	r3, [pc, #188]	@ (80080d4 <USBD_SetConfig+0x150>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d112      	bne.n	8008042 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008024:	4b2b      	ldr	r3, [pc, #172]	@ (80080d4 <USBD_SetConfig+0x150>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800802e:	4b29      	ldr	r3, [pc, #164]	@ (80080d4 <USBD_SetConfig+0x150>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7fe ffbc 	bl	8006fb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa19 	bl	8008472 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008040:	e042      	b.n	80080c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008042:	4b24      	ldr	r3, [pc, #144]	@ (80080d4 <USBD_SetConfig+0x150>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d02a      	beq.n	80080a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7fe ffaa 	bl	8006fb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800805e:	4b1d      	ldr	r3, [pc, #116]	@ (80080d4 <USBD_SetConfig+0x150>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008068:	4b1a      	ldr	r3, [pc, #104]	@ (80080d4 <USBD_SetConfig+0x150>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fe ff83 	bl	8006f7a <USBD_SetClassConfig>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00f      	beq.n	800809e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f918 	bl	80082b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7fe ff8f 	bl	8006fb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800809c:	e014      	b.n	80080c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f9e7 	bl	8008472 <USBD_CtlSendStatus>
      break;
 80080a4:	e010      	b.n	80080c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f9e3 	bl	8008472 <USBD_CtlSendStatus>
      break;
 80080ac:	e00c      	b.n	80080c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f900 	bl	80082b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080b6:	4b07      	ldr	r3, [pc, #28]	@ (80080d4 <USBD_SetConfig+0x150>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7fe ff78 	bl	8006fb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80080c2:	2303      	movs	r3, #3
 80080c4:	73fb      	strb	r3, [r7, #15]
      break;
 80080c6:	bf00      	nop
  }

  return ret;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	200003f8 	.word	0x200003f8

080080d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	88db      	ldrh	r3, [r3, #6]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d004      	beq.n	80080f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f8e2 	bl	80082b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080f2:	e023      	b.n	800813c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	dc02      	bgt.n	8008106 <USBD_GetConfig+0x2e>
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc03      	bgt.n	800810c <USBD_GetConfig+0x34>
 8008104:	e015      	b.n	8008132 <USBD_GetConfig+0x5a>
 8008106:	2b03      	cmp	r3, #3
 8008108:	d00b      	beq.n	8008122 <USBD_GetConfig+0x4a>
 800810a:	e012      	b.n	8008132 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3308      	adds	r3, #8
 8008116:	2201      	movs	r2, #1
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f948 	bl	80083b0 <USBD_CtlSendData>
        break;
 8008120:	e00c      	b.n	800813c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3304      	adds	r3, #4
 8008126:	2201      	movs	r2, #1
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f940 	bl	80083b0 <USBD_CtlSendData>
        break;
 8008130:	e004      	b.n	800813c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f8be 	bl	80082b6 <USBD_CtlError>
        break;
 800813a:	bf00      	nop
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008154:	b2db      	uxtb	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	2b02      	cmp	r3, #2
 800815a:	d81e      	bhi.n	800819a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d004      	beq.n	800816e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f8a5 	bl	80082b6 <USBD_CtlError>
        break;
 800816c:	e01a      	b.n	80081a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f043 0202 	orr.w	r2, r3, #2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	330c      	adds	r3, #12
 800818e:	2202      	movs	r2, #2
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f90c 	bl	80083b0 <USBD_CtlSendData>
      break;
 8008198:	e004      	b.n	80081a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f88a 	bl	80082b6 <USBD_CtlError>
      break;
 80081a2:	bf00      	nop
  }
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d107      	bne.n	80081ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f953 	bl	8008472 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80081cc:	e013      	b.n	80081f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d10b      	bne.n	80081ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	889b      	ldrh	r3, [r3, #4]
 80081da:	0a1b      	lsrs	r3, r3, #8
 80081dc:	b29b      	uxth	r3, r3
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f943 	bl	8008472 <USBD_CtlSendStatus>
}
 80081ec:	e003      	b.n	80081f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f860 	bl	80082b6 <USBD_CtlError>
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800820e:	b2db      	uxtb	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	2b02      	cmp	r3, #2
 8008214:	d80b      	bhi.n	800822e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	885b      	ldrh	r3, [r3, #2]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d10c      	bne.n	8008238 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f923 	bl	8008472 <USBD_CtlSendStatus>
      }
      break;
 800822c:	e004      	b.n	8008238 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f840 	bl	80082b6 <USBD_CtlError>
      break;
 8008236:	e000      	b.n	800823a <USBD_ClrFeature+0x3c>
      break;
 8008238:	bf00      	nop
  }
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	781a      	ldrb	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff fa3d 	bl	80076ec <SWAPBYTE>
 8008272:	4603      	mov	r3, r0
 8008274:	461a      	mov	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3301      	adds	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff fa30 	bl	80076ec <SWAPBYTE>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff fa23 	bl	80076ec <SWAPBYTE>
 80082a6:	4603      	mov	r3, r0
 80082a8:	461a      	mov	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	80da      	strh	r2, [r3, #6]
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c0:	2180      	movs	r1, #128	@ 0x80
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fe4a 	bl	8008f5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082c8:	2100      	movs	r1, #0
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fe46 	bl	8008f5c <USBD_LL_StallEP>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d042      	beq.n	8008374 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80082f2:	6938      	ldr	r0, [r7, #16]
 80082f4:	f000 f842 	bl	800837c <USBD_GetLen>
 80082f8:	4603      	mov	r3, r0
 80082fa:	3301      	adds	r3, #1
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008302:	d808      	bhi.n	8008316 <USBD_GetString+0x3e>
 8008304:	6938      	ldr	r0, [r7, #16]
 8008306:	f000 f839 	bl	800837c <USBD_GetLen>
 800830a:	4603      	mov	r3, r0
 800830c:	3301      	adds	r3, #1
 800830e:	b29b      	uxth	r3, r3
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	e001      	b.n	800831a <USBD_GetString+0x42>
 8008316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	4413      	add	r3, r2
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7812      	ldrb	r2, [r2, #0]
 8008328:	701a      	strb	r2, [r3, #0]
  idx++;
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	3301      	adds	r3, #1
 800832e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	4413      	add	r3, r2
 8008336:	2203      	movs	r2, #3
 8008338:	701a      	strb	r2, [r3, #0]
  idx++;
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	3301      	adds	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008340:	e013      	b.n	800836a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	4413      	add	r3, r2
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	7812      	ldrb	r2, [r2, #0]
 800834c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	3301      	adds	r3, #1
 8008352:	613b      	str	r3, [r7, #16]
    idx++;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	3301      	adds	r3, #1
 8008358:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	4413      	add	r3, r2
 8008360:	2200      	movs	r2, #0
 8008362:	701a      	strb	r2, [r3, #0]
    idx++;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
 8008366:	3301      	adds	r3, #1
 8008368:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e7      	bne.n	8008342 <USBD_GetString+0x6a>
 8008372:	e000      	b.n	8008376 <USBD_GetString+0x9e>
    return;
 8008374:	bf00      	nop
  }
}
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800838c:	e005      	b.n	800839a <USBD_GetLen+0x1e>
  {
    len++;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	3301      	adds	r3, #1
 8008392:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	3301      	adds	r3, #1
 8008398:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f5      	bne.n	800838e <USBD_GetLen+0x12>
  }

  return len;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2202      	movs	r2, #2
 80083c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	2100      	movs	r1, #0
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 fe46 	bl	800906e <USBD_LL_Transmit>

  return USBD_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	2100      	movs	r1, #0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fe35 	bl	800906e <USBD_LL_Transmit>

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2203      	movs	r2, #3
 800841e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	2100      	movs	r1, #0
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fe35 	bl	80090b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	2100      	movs	r1, #0
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fe24 	bl	80090b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2204      	movs	r2, #4
 800847e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008482:	2300      	movs	r3, #0
 8008484:	2200      	movs	r2, #0
 8008486:	2100      	movs	r1, #0
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fdf0 	bl	800906e <USBD_LL_Transmit>

  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2205      	movs	r2, #5
 80084a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084a8:	2300      	movs	r3, #0
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fdfe 	bl	80090b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <shtc3_init>:
/* Exported functions definitions --------------------------------------------*/
/**
 * @brief Function to initialize a SHTC3 instance
 */
int shtc3_init(shtc3_t *const me, void *i2c_handle, uint8_t dev_addr)
{
 80084be:	b480      	push	{r7}
 80084c0:	b087      	sub	sp, #28
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	4613      	mov	r3, r2
 80084ca:	71fb      	strb	r3, [r7, #7]
	/* Variable to return error code */
	int ret = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	617b      	str	r3, [r7, #20]
	me->i2c_dev.handle = (I2C_HandleTypeDef *)i2c_handle;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	605a      	str	r2, [r3, #4]
	me->i2c_dev.addr = dev_addr;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	79fa      	ldrb	r2, [r7, #7]
 80084da:	701a      	strb	r2, [r3, #0]
	me->id = 0;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	811a      	strh	r2, [r3, #8]
	me->state = SHTC3_IDLE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	729a      	strb	r2, [r3, #10]

	/* Return 0 */
	return ret;
 80084e8:	697b      	ldr	r3, [r7, #20]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <shtc3_get_id>:

/**
 * @brief Function to get the device ID
 */
int shtc3_get_id(shtc3_t *const me)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
	me->id = 0;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	811a      	strh	r2, [r3, #8]

	/* Variable to return error code */
	int ret = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_READ_ID, &me->i2c_dev);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4619      	mov	r1, r3
 800850c:	f64e 70c8 	movw	r0, #61384	@ 0xefc8
 8008510:	f000 f8ef 	bl	80086f2 <shtc3_reg_write>

	uint8_t data[3] = {0};
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	2100      	movs	r1, #0
 800851a:	460a      	mov	r2, r1
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	460a      	mov	r2, r1
 8008520:	709a      	strb	r2, [r3, #2]
	shtc3_reg_read(data, 3, &me->i2c_dev);
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	f107 0308 	add.w	r3, r7, #8
 8008528:	2103      	movs	r1, #3
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f8bc 	bl	80086a8 <shtc3_reg_read>

	/* Check data received CRC */
	if (!check_crc(data, 2, data[2])) {
 8008530:	7aba      	ldrb	r2, [r7, #10]
 8008532:	f107 0308 	add.w	r3, r7, #8
 8008536:	2102      	movs	r1, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f940 	bl	80087be <check_crc>
 800853e:	4603      	mov	r3, r0
 8008540:	f083 0301 	eor.w	r3, r3, #1
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <shtc3_get_id+0x5a>
		return -1;
 800854a:	f04f 33ff 	mov.w	r3, #4294967295
 800854e:	e00b      	b.n	8008568 <shtc3_get_id+0x72>
	}

	me->id = data[0] << 8 | data[1];
 8008550:	7a3b      	ldrb	r3, [r7, #8]
 8008552:	b21b      	sxth	r3, r3
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	b21a      	sxth	r2, r3
 8008558:	7a7b      	ldrb	r3, [r7, #9]
 800855a:	b21b      	sxth	r3, r3
 800855c:	4313      	orrs	r3, r2
 800855e:	b21b      	sxth	r3, r3
 8008560:	b29a      	uxth	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	811a      	strh	r2, [r3, #8]

	/* Return 0 */
	return ret;
 8008566:	68fb      	ldr	r3, [r7, #12]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <shtc3_raw_write_temp_and_hum>:
	/* Return 0 */
	return ret;
}

int shtc3_raw_write_temp_and_hum(shtc3_t *const me)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	60fb      	str	r3, [r7, #12]

	shtc3_wakeup(me);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f87f 	bl	8008680 <shtc3_wakeup>

	ret = shtc3_reg_write(SHTC3_CMD_MEAS_T_RH_POLLING_NM, &me->i2c_dev);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4619      	mov	r1, r3
 8008586:	f647 0066 	movw	r0, #30822	@ 0x7866
 800858a:	f000 f8b2 	bl	80086f2 <shtc3_reg_write>
 800858e:	4603      	mov	r3, r0
 8008590:	60fb      	str	r3, [r7, #12]

	return ret;
 8008592:	68fb      	ldr	r3, [r7, #12]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <shtc3_raw_read_temp_and_hum>:

int shtc3_raw_read_temp_and_hum(shtc3_t *const me)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	617b      	str	r3, [r7, #20]

	uint8_t data[6] = {0};
 80085a8:	f107 030c 	add.w	r3, r7, #12
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	809a      	strh	r2, [r3, #4]
	ret = shtc3_reg_read(data, 6, &me->i2c_dev);
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	f107 030c 	add.w	r3, r7, #12
 80085b8:	2106      	movs	r1, #6
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f874 	bl	80086a8 <shtc3_reg_read>
 80085c0:	4603      	mov	r3, r0
 80085c2:	617b      	str	r3, [r7, #20]
	if(0 != ret) {return ret;}
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <shtc3_raw_read_temp_and_hum+0x32>
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	e043      	b.n	8008656 <shtc3_raw_read_temp_and_hum+0xba>

	/* Check data received CRC */
	if (!check_crc(&data[0], 2, data[2])) {
 80085ce:	7bba      	ldrb	r2, [r7, #14]
 80085d0:	f107 030c 	add.w	r3, r7, #12
 80085d4:	2102      	movs	r1, #2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f8f1 	bl	80087be <check_crc>
 80085dc:	4603      	mov	r3, r0
 80085de:	f083 0301 	eor.w	r3, r3, #1
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <shtc3_raw_read_temp_and_hum+0x52>
		return -1;
 80085e8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ec:	e033      	b.n	8008656 <shtc3_raw_read_temp_and_hum+0xba>
	}

	if (!check_crc(&data[3], 2, data[5])) {
 80085ee:	7c7a      	ldrb	r2, [r7, #17]
 80085f0:	f107 030c 	add.w	r3, r7, #12
 80085f4:	3303      	adds	r3, #3
 80085f6:	2102      	movs	r1, #2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 f8e0 	bl	80087be <check_crc>
 80085fe:	4603      	mov	r3, r0
 8008600:	f083 0301 	eor.w	r3, r3, #1
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <shtc3_raw_read_temp_and_hum+0x74>
		return -1;
 800860a:	f04f 33ff 	mov.w	r3, #4294967295
 800860e:	e022      	b.n	8008656 <shtc3_raw_read_temp_and_hum+0xba>
	}

	me->temp = calc_temp((uint16_t)((data[0] << 8) | (data[1])));
 8008610:	7b3b      	ldrb	r3, [r7, #12]
 8008612:	b21b      	sxth	r3, r3
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	b21a      	sxth	r2, r3
 8008618:	7b7b      	ldrb	r3, [r7, #13]
 800861a:	b21b      	sxth	r3, r3
 800861c:	4313      	orrs	r3, r2
 800861e:	b21b      	sxth	r3, r3
 8008620:	b29b      	uxth	r3, r3
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f8e4 	bl	80087f0 <calc_temp>
 8008628:	eef0 7a40 	vmov.f32	s15, s0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	edc3 7a03 	vstr	s15, [r3, #12]
	me->hum = calc_hum((uint16_t)((data[3] << 8) | (data[4])));
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	b21b      	sxth	r3, r3
 8008636:	021b      	lsls	r3, r3, #8
 8008638:	b21a      	sxth	r2, r3
 800863a:	7c3b      	ldrb	r3, [r7, #16]
 800863c:	b21b      	sxth	r3, r3
 800863e:	4313      	orrs	r3, r2
 8008640:	b21b      	sxth	r3, r3
 8008642:	b29b      	uxth	r3, r3
 8008644:	4618      	mov	r0, r3
 8008646:	f000 f8f7 	bl	8008838 <calc_hum>
 800864a:	eef0 7a40 	vmov.f32	s15, s0
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	edc3 7a04 	vstr	s15, [r3, #16]

	/* Return 0 */
	return ret;
 8008654:	697b      	ldr	r3, [r7, #20]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <shtc3_sleep>:

/**
 * @brief Function to put the device in sleep mode
 */
int shtc3_sleep(shtc3_t *const me)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_SLEEP, &me->i2c_dev);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4619      	mov	r1, r3
 800866e:	f24b 0098 	movw	r0, #45208	@ 0xb098
 8008672:	f000 f83e 	bl	80086f2 <shtc3_reg_write>

	/* Return 0 */
	return ret;
 8008676:	68fb      	ldr	r3, [r7, #12]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <shtc3_wakeup>:

/**
 * @brief Function to wakeup the device from sleep mode
 */
int shtc3_wakeup(shtc3_t *const me)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_WAKEUP, &me->i2c_dev);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4619      	mov	r1, r3
 8008690:	f243 5017 	movw	r0, #13591	@ 0x3517
 8008694:	f000 f82d 	bl	80086f2 <shtc3_reg_write>

	HAL_Delay(1);
 8008698:	2001      	movs	r0, #1
 800869a:	f7f9 fa9d 	bl	8001bd8 <HAL_Delay>

	/* Return 0 */
	return ret;
 800869e:	68fb      	ldr	r3, [r7, #12]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <shtc3_reg_read>:
/* Private function definitions ----------------------------------------------*/
/**
 * @brief Function that implements the default I2C read transaction
 */
static int8_t shtc3_reg_read(uint8_t *data, uint32_t data_len, void *intf)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Receive(i2c_dev->handle, (i2c_dev->addr << 1) | 0x01,
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	6858      	ldr	r0, [r3, #4]
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	b21b      	sxth	r3, r3
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	b21b      	sxth	r3, r3
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	b21b      	sxth	r3, r3
 80086cc:	b299      	uxth	r1, r3
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	220a      	movs	r2, #10
 80086d4:	9200      	str	r2, [sp, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	f7f9 ffae 	bl	8002638 <HAL_I2C_Master_Receive>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <shtc3_reg_read+0x40>
			data, data_len, 10) > 0) {
		return -1;
 80086e2:	f04f 33ff 	mov.w	r3, #4294967295
 80086e6:	e000      	b.n	80086ea <shtc3_reg_read+0x42>
	}

	return 0;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <shtc3_reg_write>:

/**
 * @brief Function that implements the default I2C write transaction
 */
static int8_t shtc3_reg_write(uint16_t data, void *intf)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b088      	sub	sp, #32
 80086f6:	af02      	add	r7, sp, #8
 80086f8:	4603      	mov	r3, r0
 80086fa:	6039      	str	r1, [r7, #0]
 80086fc:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 80086fe:	f107 030c 	add.w	r3, r7, #12
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	605a      	str	r2, [r3, #4]
			(uint8_t)((data >> 8) & 0xFF),
 8008708:	88fb      	ldrh	r3, [r7, #6]
 800870a:	0a1b      	lsrs	r3, r3, #8
 800870c:	b29b      	uxth	r3, r3
 800870e:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8008710:	733b      	strb	r3, [r7, #12]
			(uint8_t)(data & 0xFF)
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 8008716:	737b      	strb	r3, [r7, #13]
	};

	/* Transmit buffer */
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Transmit(i2c_dev->handle, i2c_dev->addr << 1, buffer, 2,
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	6858      	ldr	r0, [r3, #4]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	b299      	uxth	r1, r3
 8008728:	f107 020c 	add.w	r2, r7, #12
 800872c:	2364      	movs	r3, #100	@ 0x64
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	2302      	movs	r3, #2
 8008732:	f7f9 fe83 	bl	800243c <HAL_I2C_Master_Transmit>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <shtc3_reg_write+0x50>
			100)) {
		return -1;
 800873c:	f04f 33ff 	mov.w	r3, #4294967295
 8008740:	e000      	b.n	8008744 <shtc3_reg_write+0x52>
	}

	return 0;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <generate_crc>:

/**
 * @brief Function that generates a CRC byte for a given data
 */
static uint8_t generate_crc(const uint8_t *data, uint16_t count) {
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	807b      	strh	r3, [r7, #2]
  uint16_t current_byte;
  uint8_t crc = CRC8_INIT;
 8008758:	23ff      	movs	r3, #255	@ 0xff
 800875a:	737b      	strb	r3, [r7, #13]
  uint8_t crc_bit;

  /* calculates 8-Bit checksum with given polynomial */
  for (current_byte = 0; current_byte < count; ++current_byte) {
 800875c:	2300      	movs	r3, #0
 800875e:	81fb      	strh	r3, [r7, #14]
 8008760:	e022      	b.n	80087a8 <generate_crc+0x5c>
  	crc ^= (data[current_byte]);
 8008762:	89fb      	ldrh	r3, [r7, #14]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	4413      	add	r3, r2
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	7b7b      	ldrb	r3, [r7, #13]
 800876c:	4053      	eors	r3, r2
 800876e:	737b      	strb	r3, [r7, #13]

  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8008770:	2308      	movs	r3, #8
 8008772:	733b      	strb	r3, [r7, #12]
 8008774:	e012      	b.n	800879c <generate_crc+0x50>
  		if (crc & 0x80) {
 8008776:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800877a:	2b00      	cmp	r3, #0
 800877c:	da08      	bge.n	8008790 <generate_crc+0x44>
  			crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800877e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	b25b      	sxtb	r3, r3
 8008786:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 800878a:	b25b      	sxtb	r3, r3
 800878c:	737b      	strb	r3, [r7, #13]
 800878e:	e002      	b.n	8008796 <generate_crc+0x4a>
  		}
  		else {
  			crc = (crc << 1);
 8008790:	7b7b      	ldrb	r3, [r7, #13]
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	737b      	strb	r3, [r7, #13]
  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8008796:	7b3b      	ldrb	r3, [r7, #12]
 8008798:	3b01      	subs	r3, #1
 800879a:	733b      	strb	r3, [r7, #12]
 800879c:	7b3b      	ldrb	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e9      	bne.n	8008776 <generate_crc+0x2a>
  for (current_byte = 0; current_byte < count; ++current_byte) {
 80087a2:	89fb      	ldrh	r3, [r7, #14]
 80087a4:	3301      	adds	r3, #1
 80087a6:	81fb      	strh	r3, [r7, #14]
 80087a8:	89fa      	ldrh	r2, [r7, #14]
 80087aa:	887b      	ldrh	r3, [r7, #2]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d3d8      	bcc.n	8008762 <generate_crc+0x16>
  		}
  	}
  }
  return crc;
 80087b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <check_crc>:

/**
 * @brief Function that checks the CRC for the received data
 */
static bool check_crc(const uint8_t *data, uint16_t count, uint8_t checksum) {
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	807b      	strh	r3, [r7, #2]
 80087ca:	4613      	mov	r3, r2
 80087cc:	707b      	strb	r3, [r7, #1]
	if (generate_crc(data, count) != checksum) {
 80087ce:	887b      	ldrh	r3, [r7, #2]
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff ffba 	bl	800874c <generate_crc>
 80087d8:	4603      	mov	r3, r0
 80087da:	461a      	mov	r2, r3
 80087dc:	787b      	ldrb	r3, [r7, #1]
 80087de:	4293      	cmp	r3, r2
 80087e0:	d001      	beq.n	80087e6 <check_crc+0x28>
		return false;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e000      	b.n	80087e8 <check_crc+0x2a>
	}

	return true;
 80087e6:	2301      	movs	r3, #1
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <calc_temp>:

static float calc_temp(uint16_t raw_temp)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	80fb      	strh	r3, [r7, #6]
	return 175 * (float)raw_temp / 65536.0f - 45.0f;
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008804:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800882c <calc_temp+0x3c>
 8008808:	ee27 7a87 	vmul.f32	s14, s15, s14
 800880c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8008830 <calc_temp+0x40>
 8008810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008814:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8008834 <calc_temp+0x44>
 8008818:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800881c:	eeb0 0a67 	vmov.f32	s0, s15
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	432f0000 	.word	0x432f0000
 8008830:	47800000 	.word	0x47800000
 8008834:	42340000 	.word	0x42340000

08008838 <calc_hum>:

static float calc_hum(uint16_t raw_hum)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	80fb      	strh	r3, [r7, #6]
	return 100 * (float)raw_hum / 65536.0f;
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	ee07 3a90 	vmov	s15, r3
 8008848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8008870 <calc_hum+0x38>
 8008850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008854:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8008874 <calc_hum+0x3c>
 8008858:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800885c:	eef0 7a66 	vmov.f32	s15, s13
}
 8008860:	eeb0 0a67 	vmov.f32	s0, s15
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	42c80000 	.word	0x42c80000
 8008874:	47800000 	.word	0x47800000

08008878 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800887c:	2200      	movs	r2, #0
 800887e:	4912      	ldr	r1, [pc, #72]	@ (80088c8 <MX_USB_DEVICE_Init+0x50>)
 8008880:	4812      	ldr	r0, [pc, #72]	@ (80088cc <MX_USB_DEVICE_Init+0x54>)
 8008882:	f7fe fafd 	bl	8006e80 <USBD_Init>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800888c:	f7f8 ff4a 	bl	8001724 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008890:	490f      	ldr	r1, [pc, #60]	@ (80088d0 <MX_USB_DEVICE_Init+0x58>)
 8008892:	480e      	ldr	r0, [pc, #56]	@ (80088cc <MX_USB_DEVICE_Init+0x54>)
 8008894:	f7fe fb24 	bl	8006ee0 <USBD_RegisterClass>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800889e:	f7f8 ff41 	bl	8001724 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80088a2:	490c      	ldr	r1, [pc, #48]	@ (80088d4 <MX_USB_DEVICE_Init+0x5c>)
 80088a4:	4809      	ldr	r0, [pc, #36]	@ (80088cc <MX_USB_DEVICE_Init+0x54>)
 80088a6:	f7fe fad1 	bl	8006e4c <USBD_CUSTOM_HID_RegisterInterface>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088b0:	f7f8 ff38 	bl	8001724 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088b4:	4805      	ldr	r0, [pc, #20]	@ (80088cc <MX_USB_DEVICE_Init+0x54>)
 80088b6:	f7fe fb49 	bl	8006f4c <USBD_Start>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088c0:	f7f8 ff30 	bl	8001724 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200000b4 	.word	0x200000b4
 80088cc:	200003fc 	.word	0x200003fc
 80088d0:	2000000c 	.word	0x2000000c
 80088d4:	200000a4 	.word	0x200000a4

080088d8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPIN_SIZE);  // IN
 80088dc:	2340      	movs	r3, #64	@ 0x40
 80088de:	2203      	movs	r2, #3
 80088e0:	2181      	movs	r1, #129	@ 0x81
 80088e2:	4806      	ldr	r0, [pc, #24]	@ (80088fc <CUSTOM_HID_Init_FS+0x24>)
 80088e4:	f000 faf5 	bl	8008ed2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPOUT_SIZE); // OUT
 80088e8:	2340      	movs	r3, #64	@ 0x40
 80088ea:	2203      	movs	r2, #3
 80088ec:	2101      	movs	r1, #1
 80088ee:	4803      	ldr	r0, [pc, #12]	@ (80088fc <CUSTOM_HID_Init_FS+0x24>)
 80088f0:	f000 faef 	bl	8008ed2 <USBD_LL_OpenEP>
  return (USBD_OK);
 80088f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200003fc 	.word	0x200003fc

08008900 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR);
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR);
  return (USBD_OK);
 8008904:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008906:	4618      	mov	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *buffer)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8008918:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800891c:	480a      	ldr	r0, [pc, #40]	@ (8008948 <CUSTOM_HID_OutEvent_FS+0x38>)
 800891e:	f7f9 fc2e 	bl	800217e <HAL_GPIO_TogglePin>

  usb_parser(buffer, 64);
 8008922:	2140      	movs	r1, #64	@ 0x40
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7f8 fd8f 	bl	8001448 <usb_parser>

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800892a:	4808      	ldr	r0, [pc, #32]	@ (800894c <CUSTOM_HID_OutEvent_FS+0x3c>)
 800892c:	f7fe fa2e 	bl	8006d8c <USBD_CUSTOM_HID_ReceivePacket>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <CUSTOM_HID_OutEvent_FS+0x2c>
  {
    return -1;
 8008936:	f04f 33ff 	mov.w	r3, #4294967295
 800893a:	e000      	b.n	800893e <CUSTOM_HID_OutEvent_FS+0x2e>
  }

  return (USBD_OK);
 800893c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	40020c00 	.word	0x40020c00
 800894c:	200003fc 	.word	0x200003fc

08008950 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2212      	movs	r2, #18
 8008960:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008962:	4b03      	ldr	r3, [pc, #12]	@ (8008970 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	200000d0 	.word	0x200000d0

08008974 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	6039      	str	r1, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2204      	movs	r2, #4
 8008984:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008986:	4b03      	ldr	r3, [pc, #12]	@ (8008994 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	200000e4 	.word	0x200000e4

08008998 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d105      	bne.n	80089b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	4907      	ldr	r1, [pc, #28]	@ (80089cc <USBD_FS_ProductStrDescriptor+0x34>)
 80089ae:	4808      	ldr	r0, [pc, #32]	@ (80089d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80089b0:	f7ff fc92 	bl	80082d8 <USBD_GetString>
 80089b4:	e004      	b.n	80089c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	4904      	ldr	r1, [pc, #16]	@ (80089cc <USBD_FS_ProductStrDescriptor+0x34>)
 80089ba:	4805      	ldr	r0, [pc, #20]	@ (80089d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80089bc:	f7ff fc8c 	bl	80082d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089c0:	4b02      	ldr	r3, [pc, #8]	@ (80089cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200006d8 	.word	0x200006d8
 80089d0:	0800c024 	.word	0x0800c024

080089d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	4904      	ldr	r1, [pc, #16]	@ (80089f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089e4:	4804      	ldr	r0, [pc, #16]	@ (80089f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089e6:	f7ff fc77 	bl	80082d8 <USBD_GetString>
  return USBD_StrDesc;
 80089ea:	4b02      	ldr	r3, [pc, #8]	@ (80089f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	200006d8 	.word	0x200006d8
 80089f8:	0800c034 	.word	0x0800c034

080089fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	221a      	movs	r2, #26
 8008a0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a0e:	f000 f843 	bl	8008a98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a12:	4b02      	ldr	r3, [pc, #8]	@ (8008a1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	200000e8 	.word	0x200000e8

08008a20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d105      	bne.n	8008a3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	4907      	ldr	r1, [pc, #28]	@ (8008a54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a36:	4808      	ldr	r0, [pc, #32]	@ (8008a58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a38:	f7ff fc4e 	bl	80082d8 <USBD_GetString>
 8008a3c:	e004      	b.n	8008a48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	4904      	ldr	r1, [pc, #16]	@ (8008a54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a42:	4805      	ldr	r0, [pc, #20]	@ (8008a58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a44:	f7ff fc48 	bl	80082d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a48:	4b02      	ldr	r3, [pc, #8]	@ (8008a54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200006d8 	.word	0x200006d8
 8008a58:	0800c048 	.word	0x0800c048

08008a5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	6039      	str	r1, [r7, #0]
 8008a66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d105      	bne.n	8008a7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	4907      	ldr	r1, [pc, #28]	@ (8008a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a72:	4808      	ldr	r0, [pc, #32]	@ (8008a94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a74:	f7ff fc30 	bl	80082d8 <USBD_GetString>
 8008a78:	e004      	b.n	8008a84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	4904      	ldr	r1, [pc, #16]	@ (8008a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a7e:	4805      	ldr	r0, [pc, #20]	@ (8008a94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a80:	f7ff fc2a 	bl	80082d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a84:	4b02      	ldr	r3, [pc, #8]	@ (8008a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	200006d8 	.word	0x200006d8
 8008a94:	0800c05c 	.word	0x0800c05c

08008a98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008adc <Get_SerialNum+0x44>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae0 <Get_SerialNum+0x48>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <Get_SerialNum+0x4c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d009      	beq.n	8008ad2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008abe:	2208      	movs	r2, #8
 8008ac0:	4909      	ldr	r1, [pc, #36]	@ (8008ae8 <Get_SerialNum+0x50>)
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 f814 	bl	8008af0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ac8:	2204      	movs	r2, #4
 8008aca:	4908      	ldr	r1, [pc, #32]	@ (8008aec <Get_SerialNum+0x54>)
 8008acc:	68b8      	ldr	r0, [r7, #8]
 8008ace:	f000 f80f 	bl	8008af0 <IntToUnicode>
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	1fff7a10 	.word	0x1fff7a10
 8008ae0:	1fff7a14 	.word	0x1fff7a14
 8008ae4:	1fff7a18 	.word	0x1fff7a18
 8008ae8:	200000ea 	.word	0x200000ea
 8008aec:	200000fa 	.word	0x200000fa

08008af0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]
 8008b06:	e027      	b.n	8008b58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	0f1b      	lsrs	r3, r3, #28
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	d80b      	bhi.n	8008b28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	0f1b      	lsrs	r3, r3, #28
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	440b      	add	r3, r1
 8008b20:	3230      	adds	r2, #48	@ 0x30
 8008b22:	b2d2      	uxtb	r2, r2
 8008b24:	701a      	strb	r2, [r3, #0]
 8008b26:	e00a      	b.n	8008b3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	0f1b      	lsrs	r3, r3, #28
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	4619      	mov	r1, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	440b      	add	r3, r1
 8008b38:	3237      	adds	r2, #55	@ 0x37
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	3301      	adds	r3, #1
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	3301      	adds	r3, #1
 8008b56:	75fb      	strb	r3, [r7, #23]
 8008b58:	7dfa      	ldrb	r2, [r7, #23]
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3d3      	bcc.n	8008b08 <IntToUnicode+0x18>
  }
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
	...

08008b70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08a      	sub	sp, #40	@ 0x28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b78:	f107 0314 	add.w	r3, r7, #20
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	605a      	str	r2, [r3, #4]
 8008b82:	609a      	str	r2, [r3, #8]
 8008b84:	60da      	str	r2, [r3, #12]
 8008b86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b90:	d147      	bne.n	8008c22 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b92:	2300      	movs	r3, #0
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	4b25      	ldr	r3, [pc, #148]	@ (8008c2c <HAL_PCD_MspInit+0xbc>)
 8008b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9a:	4a24      	ldr	r2, [pc, #144]	@ (8008c2c <HAL_PCD_MspInit+0xbc>)
 8008b9c:	f043 0301 	orr.w	r3, r3, #1
 8008ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ba2:	4b22      	ldr	r3, [pc, #136]	@ (8008c2c <HAL_PCD_MspInit+0xbc>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008bae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008bbc:	f107 0314 	add.w	r3, r7, #20
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	481b      	ldr	r0, [pc, #108]	@ (8008c30 <HAL_PCD_MspInit+0xc0>)
 8008bc4:	f7f9 f93e 	bl	8001e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008bc8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bce:	2302      	movs	r3, #2
 8008bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008bda:	230a      	movs	r3, #10
 8008bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bde:	f107 0314 	add.w	r3, r7, #20
 8008be2:	4619      	mov	r1, r3
 8008be4:	4812      	ldr	r0, [pc, #72]	@ (8008c30 <HAL_PCD_MspInit+0xc0>)
 8008be6:	f7f9 f92d 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bea:	4b10      	ldr	r3, [pc, #64]	@ (8008c2c <HAL_PCD_MspInit+0xbc>)
 8008bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bee:	4a0f      	ldr	r2, [pc, #60]	@ (8008c2c <HAL_PCD_MspInit+0xbc>)
 8008bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bf4:	6353      	str	r3, [r2, #52]	@ 0x34
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8008c2c <HAL_PCD_MspInit+0xbc>)
 8008bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8008c2c <HAL_PCD_MspInit+0xbc>)
 8008c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c06:	4b09      	ldr	r3, [pc, #36]	@ (8008c2c <HAL_PCD_MspInit+0xbc>)
 8008c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c12:	2200      	movs	r2, #0
 8008c14:	2100      	movs	r1, #0
 8008c16:	2043      	movs	r0, #67	@ 0x43
 8008c18:	f7f9 f8dd 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c1c:	2043      	movs	r0, #67	@ 0x43
 8008c1e:	f7f9 f8f6 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c22:	bf00      	nop
 8008c24:	3728      	adds	r7, #40	@ 0x28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	40023800 	.word	0x40023800
 8008c30:	40020000 	.word	0x40020000

08008c34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f7fe f9cb 	bl	8006fe6 <USBD_LL_SetupStage>
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	440b      	add	r3, r1
 8008c78:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	4619      	mov	r1, r3
 8008c82:	f7fe fa05 	bl	8007090 <USBD_LL_DataOutStage>
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ca0:	78fa      	ldrb	r2, [r7, #3]
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	3320      	adds	r3, #32
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	78fb      	ldrb	r3, [r7, #3]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f7fe faa7 	bl	8007208 <USBD_LL_DataInStage>
}
 8008cba:	bf00      	nop
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe fbeb 	bl	80074ac <USBD_LL_SOF>
}
 8008cd6:	bf00      	nop
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	79db      	ldrb	r3, [r3, #7]
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d001      	beq.n	8008cf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008cf2:	f7f8 fd17 	bl	8001724 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cfc:	7bfa      	ldrb	r2, [r7, #15]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fb8f 	bl	8007424 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fb36 	bl	800737e <USBD_LL_Reset>
}
 8008d12:	bf00      	nop
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fb8a 	bl	8007444 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008d42:	f043 0301 	orr.w	r3, r3, #1
 8008d46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7adb      	ldrb	r3, [r3, #11]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d50:	4b04      	ldr	r3, [pc, #16]	@ (8008d64 <HAL_PCD_SuspendCallback+0x48>)
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	4a03      	ldr	r2, [pc, #12]	@ (8008d64 <HAL_PCD_SuspendCallback+0x48>)
 8008d56:	f043 0306 	orr.w	r3, r3, #6
 8008d5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed00 	.word	0xe000ed00

08008d68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe fb80 	bl	800747c <USBD_LL_Resume>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fbd8 	bl	8007550 <USBD_LL_IsoOUTIncomplete>
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fb94 	bl	80074ec <USBD_LL_IsoINIncomplete>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe fbea 	bl	80075b4 <USBD_LL_DevConnected>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fbe7 	bl	80075ca <USBD_LL_DevDisconnected>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d13c      	bne.n	8008e8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e14:	4a20      	ldr	r2, [pc, #128]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e24:	4b1c      	ldr	r3, [pc, #112]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008e2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e2e:	2204      	movs	r2, #4
 8008e30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e32:	4b19      	ldr	r3, [pc, #100]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e34:	2202      	movs	r2, #2
 8008e36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e38:	4b17      	ldr	r3, [pc, #92]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e3e:	4b16      	ldr	r3, [pc, #88]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e40:	2202      	movs	r2, #2
 8008e42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e44:	4b14      	ldr	r3, [pc, #80]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e4a:	4b13      	ldr	r3, [pc, #76]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e50:	4b11      	ldr	r3, [pc, #68]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e56:	4b10      	ldr	r3, [pc, #64]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e62:	480d      	ldr	r0, [pc, #52]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e64:	f7fa f9a0 	bl	80031a8 <HAL_PCD_Init>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e6e:	f7f8 fc59 	bl	8001724 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e72:	2180      	movs	r1, #128	@ 0x80
 8008e74:	4808      	ldr	r0, [pc, #32]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e76:	f7fb fbb4 	bl	80045e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e7a:	2240      	movs	r2, #64	@ 0x40
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4806      	ldr	r0, [pc, #24]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e80:	f7fb fb68 	bl	8004554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e84:	2280      	movs	r2, #128	@ 0x80
 8008e86:	2101      	movs	r1, #1
 8008e88:	4803      	ldr	r0, [pc, #12]	@ (8008e98 <USBD_LL_Init+0x94>)
 8008e8a:	f7fb fb63 	bl	8004554 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	200008d8 	.word	0x200008d8

08008e9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fa fa87 	bl	80033c6 <HAL_PCD_Start>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f930 	bl	8009124 <USBD_Get_USB_Status>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	4608      	mov	r0, r1
 8008edc:	4611      	mov	r1, r2
 8008ede:	461a      	mov	r2, r3
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	70fb      	strb	r3, [r7, #3]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70bb      	strb	r3, [r7, #2]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008efa:	78bb      	ldrb	r3, [r7, #2]
 8008efc:	883a      	ldrh	r2, [r7, #0]
 8008efe:	78f9      	ldrb	r1, [r7, #3]
 8008f00:	f7fa ff5b 	bl	8003dba <HAL_PCD_EP_Open>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f90a 	bl	8009124 <USBD_Get_USB_Status>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fa ffa6 	bl	8003e8e <HAL_PCD_EP_Close>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f8eb 	bl	8009124 <USBD_Get_USB_Status>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f76:	78fa      	ldrb	r2, [r7, #3]
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fb f846 	bl	800400c <HAL_PCD_EP_SetStall>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f8cc 	bl	8009124 <USBD_Get_USB_Status>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fb4:	78fa      	ldrb	r2, [r7, #3]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fb f88a 	bl	80040d2 <HAL_PCD_EP_ClrStall>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f8ad 	bl	8009124 <USBD_Get_USB_Status>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	da0b      	bge.n	800900c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ffa:	68f9      	ldr	r1, [r7, #12]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	3316      	adds	r3, #22
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	e00b      	b.n	8009024 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	440b      	add	r3, r1
 800901e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009022:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800904a:	78fa      	ldrb	r2, [r7, #3]
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f7fa fe8f 	bl	8003d72 <HAL_PCD_SetAddress>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 f862 	bl	8009124 <USBD_Get_USB_Status>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009064:	7bbb      	ldrb	r3, [r7, #14]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b086      	sub	sp, #24
 8009072:	af00      	add	r7, sp, #0
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
 800907a:	460b      	mov	r3, r1
 800907c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800908c:	7af9      	ldrb	r1, [r7, #11]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	f7fa ff81 	bl	8003f98 <HAL_PCD_EP_Transmit>
 8009096:	4603      	mov	r3, r0
 8009098:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f841 	bl	8009124 <USBD_Get_USB_Status>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	460b      	mov	r3, r1
 80090be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80090ce:	7af9      	ldrb	r1, [r7, #11]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	f7fa ff25 	bl	8003f22 <HAL_PCD_EP_Receive>
 80090d8:	4603      	mov	r3, r0
 80090da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f820 	bl	8009124 <USBD_Get_USB_Status>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80090fc:	4b03      	ldr	r3, [pc, #12]	@ (800910c <USBD_static_malloc+0x18>)
}
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	20000dbc 	.word	0x20000dbc

08009110 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]

}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	2b03      	cmp	r3, #3
 8009136:	d817      	bhi.n	8009168 <USBD_Get_USB_Status+0x44>
 8009138:	a201      	add	r2, pc, #4	@ (adr r2, 8009140 <USBD_Get_USB_Status+0x1c>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	08009151 	.word	0x08009151
 8009144:	08009157 	.word	0x08009157
 8009148:	0800915d 	.word	0x0800915d
 800914c:	08009163 	.word	0x08009163
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73fb      	strb	r3, [r7, #15]
    break;
 8009154:	e00b      	b.n	800916e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009156:	2303      	movs	r3, #3
 8009158:	73fb      	strb	r3, [r7, #15]
    break;
 800915a:	e008      	b.n	800916e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
    break;
 8009160:	e005      	b.n	800916e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009162:	2303      	movs	r3, #3
 8009164:	73fb      	strb	r3, [r7, #15]
    break;
 8009166:	e002      	b.n	800916e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009168:	2303      	movs	r3, #3
 800916a:	73fb      	strb	r3, [r7, #15]
    break;
 800916c:	bf00      	nop
  }
  return usb_status;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <_strtoul_l.isra.0>:
 800917c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009180:	4e34      	ldr	r6, [pc, #208]	@ (8009254 <_strtoul_l.isra.0+0xd8>)
 8009182:	4686      	mov	lr, r0
 8009184:	460d      	mov	r5, r1
 8009186:	4628      	mov	r0, r5
 8009188:	f815 4b01 	ldrb.w	r4, [r5], #1
 800918c:	5d37      	ldrb	r7, [r6, r4]
 800918e:	f017 0708 	ands.w	r7, r7, #8
 8009192:	d1f8      	bne.n	8009186 <_strtoul_l.isra.0+0xa>
 8009194:	2c2d      	cmp	r4, #45	@ 0x2d
 8009196:	d110      	bne.n	80091ba <_strtoul_l.isra.0+0x3e>
 8009198:	782c      	ldrb	r4, [r5, #0]
 800919a:	2701      	movs	r7, #1
 800919c:	1c85      	adds	r5, r0, #2
 800919e:	f033 0010 	bics.w	r0, r3, #16
 80091a2:	d115      	bne.n	80091d0 <_strtoul_l.isra.0+0x54>
 80091a4:	2c30      	cmp	r4, #48	@ 0x30
 80091a6:	d10d      	bne.n	80091c4 <_strtoul_l.isra.0+0x48>
 80091a8:	7828      	ldrb	r0, [r5, #0]
 80091aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80091ae:	2858      	cmp	r0, #88	@ 0x58
 80091b0:	d108      	bne.n	80091c4 <_strtoul_l.isra.0+0x48>
 80091b2:	786c      	ldrb	r4, [r5, #1]
 80091b4:	3502      	adds	r5, #2
 80091b6:	2310      	movs	r3, #16
 80091b8:	e00a      	b.n	80091d0 <_strtoul_l.isra.0+0x54>
 80091ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80091bc:	bf04      	itt	eq
 80091be:	782c      	ldrbeq	r4, [r5, #0]
 80091c0:	1c85      	addeq	r5, r0, #2
 80091c2:	e7ec      	b.n	800919e <_strtoul_l.isra.0+0x22>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1f6      	bne.n	80091b6 <_strtoul_l.isra.0+0x3a>
 80091c8:	2c30      	cmp	r4, #48	@ 0x30
 80091ca:	bf14      	ite	ne
 80091cc:	230a      	movne	r3, #10
 80091ce:	2308      	moveq	r3, #8
 80091d0:	f04f 38ff 	mov.w	r8, #4294967295
 80091d4:	2600      	movs	r6, #0
 80091d6:	fbb8 f8f3 	udiv	r8, r8, r3
 80091da:	fb03 f908 	mul.w	r9, r3, r8
 80091de:	ea6f 0909 	mvn.w	r9, r9
 80091e2:	4630      	mov	r0, r6
 80091e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80091e8:	f1bc 0f09 	cmp.w	ip, #9
 80091ec:	d810      	bhi.n	8009210 <_strtoul_l.isra.0+0x94>
 80091ee:	4664      	mov	r4, ip
 80091f0:	42a3      	cmp	r3, r4
 80091f2:	dd1e      	ble.n	8009232 <_strtoul_l.isra.0+0xb6>
 80091f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80091f8:	d007      	beq.n	800920a <_strtoul_l.isra.0+0x8e>
 80091fa:	4580      	cmp	r8, r0
 80091fc:	d316      	bcc.n	800922c <_strtoul_l.isra.0+0xb0>
 80091fe:	d101      	bne.n	8009204 <_strtoul_l.isra.0+0x88>
 8009200:	45a1      	cmp	r9, r4
 8009202:	db13      	blt.n	800922c <_strtoul_l.isra.0+0xb0>
 8009204:	fb00 4003 	mla	r0, r0, r3, r4
 8009208:	2601      	movs	r6, #1
 800920a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800920e:	e7e9      	b.n	80091e4 <_strtoul_l.isra.0+0x68>
 8009210:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009214:	f1bc 0f19 	cmp.w	ip, #25
 8009218:	d801      	bhi.n	800921e <_strtoul_l.isra.0+0xa2>
 800921a:	3c37      	subs	r4, #55	@ 0x37
 800921c:	e7e8      	b.n	80091f0 <_strtoul_l.isra.0+0x74>
 800921e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009222:	f1bc 0f19 	cmp.w	ip, #25
 8009226:	d804      	bhi.n	8009232 <_strtoul_l.isra.0+0xb6>
 8009228:	3c57      	subs	r4, #87	@ 0x57
 800922a:	e7e1      	b.n	80091f0 <_strtoul_l.isra.0+0x74>
 800922c:	f04f 36ff 	mov.w	r6, #4294967295
 8009230:	e7eb      	b.n	800920a <_strtoul_l.isra.0+0x8e>
 8009232:	1c73      	adds	r3, r6, #1
 8009234:	d106      	bne.n	8009244 <_strtoul_l.isra.0+0xc8>
 8009236:	2322      	movs	r3, #34	@ 0x22
 8009238:	f8ce 3000 	str.w	r3, [lr]
 800923c:	4630      	mov	r0, r6
 800923e:	b932      	cbnz	r2, 800924e <_strtoul_l.isra.0+0xd2>
 8009240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009244:	b107      	cbz	r7, 8009248 <_strtoul_l.isra.0+0xcc>
 8009246:	4240      	negs	r0, r0
 8009248:	2a00      	cmp	r2, #0
 800924a:	d0f9      	beq.n	8009240 <_strtoul_l.isra.0+0xc4>
 800924c:	b106      	cbz	r6, 8009250 <_strtoul_l.isra.0+0xd4>
 800924e:	1e69      	subs	r1, r5, #1
 8009250:	6011      	str	r1, [r2, #0]
 8009252:	e7f5      	b.n	8009240 <_strtoul_l.isra.0+0xc4>
 8009254:	0800c08d 	.word	0x0800c08d

08009258 <strtoul>:
 8009258:	4613      	mov	r3, r2
 800925a:	460a      	mov	r2, r1
 800925c:	4601      	mov	r1, r0
 800925e:	4802      	ldr	r0, [pc, #8]	@ (8009268 <strtoul+0x10>)
 8009260:	6800      	ldr	r0, [r0, #0]
 8009262:	f7ff bf8b 	b.w	800917c <_strtoul_l.isra.0>
 8009266:	bf00      	nop
 8009268:	20000110 	.word	0x20000110

0800926c <__cvt>:
 800926c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009270:	ec57 6b10 	vmov	r6, r7, d0
 8009274:	2f00      	cmp	r7, #0
 8009276:	460c      	mov	r4, r1
 8009278:	4619      	mov	r1, r3
 800927a:	463b      	mov	r3, r7
 800927c:	bfbb      	ittet	lt
 800927e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009282:	461f      	movlt	r7, r3
 8009284:	2300      	movge	r3, #0
 8009286:	232d      	movlt	r3, #45	@ 0x2d
 8009288:	700b      	strb	r3, [r1, #0]
 800928a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800928c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009290:	4691      	mov	r9, r2
 8009292:	f023 0820 	bic.w	r8, r3, #32
 8009296:	bfbc      	itt	lt
 8009298:	4632      	movlt	r2, r6
 800929a:	4616      	movlt	r6, r2
 800929c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80092a0:	d005      	beq.n	80092ae <__cvt+0x42>
 80092a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80092a6:	d100      	bne.n	80092aa <__cvt+0x3e>
 80092a8:	3401      	adds	r4, #1
 80092aa:	2102      	movs	r1, #2
 80092ac:	e000      	b.n	80092b0 <__cvt+0x44>
 80092ae:	2103      	movs	r1, #3
 80092b0:	ab03      	add	r3, sp, #12
 80092b2:	9301      	str	r3, [sp, #4]
 80092b4:	ab02      	add	r3, sp, #8
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	ec47 6b10 	vmov	d0, r6, r7
 80092bc:	4653      	mov	r3, sl
 80092be:	4622      	mov	r2, r4
 80092c0:	f000 fe6e 	bl	8009fa0 <_dtoa_r>
 80092c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80092c8:	4605      	mov	r5, r0
 80092ca:	d119      	bne.n	8009300 <__cvt+0x94>
 80092cc:	f019 0f01 	tst.w	r9, #1
 80092d0:	d00e      	beq.n	80092f0 <__cvt+0x84>
 80092d2:	eb00 0904 	add.w	r9, r0, r4
 80092d6:	2200      	movs	r2, #0
 80092d8:	2300      	movs	r3, #0
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f7 fbfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80092e2:	b108      	cbz	r0, 80092e8 <__cvt+0x7c>
 80092e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80092e8:	2230      	movs	r2, #48	@ 0x30
 80092ea:	9b03      	ldr	r3, [sp, #12]
 80092ec:	454b      	cmp	r3, r9
 80092ee:	d31e      	bcc.n	800932e <__cvt+0xc2>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092f4:	1b5b      	subs	r3, r3, r5
 80092f6:	4628      	mov	r0, r5
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	b004      	add	sp, #16
 80092fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009300:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009304:	eb00 0904 	add.w	r9, r0, r4
 8009308:	d1e5      	bne.n	80092d6 <__cvt+0x6a>
 800930a:	7803      	ldrb	r3, [r0, #0]
 800930c:	2b30      	cmp	r3, #48	@ 0x30
 800930e:	d10a      	bne.n	8009326 <__cvt+0xba>
 8009310:	2200      	movs	r2, #0
 8009312:	2300      	movs	r3, #0
 8009314:	4630      	mov	r0, r6
 8009316:	4639      	mov	r1, r7
 8009318:	f7f7 fbde 	bl	8000ad8 <__aeabi_dcmpeq>
 800931c:	b918      	cbnz	r0, 8009326 <__cvt+0xba>
 800931e:	f1c4 0401 	rsb	r4, r4, #1
 8009322:	f8ca 4000 	str.w	r4, [sl]
 8009326:	f8da 3000 	ldr.w	r3, [sl]
 800932a:	4499      	add	r9, r3
 800932c:	e7d3      	b.n	80092d6 <__cvt+0x6a>
 800932e:	1c59      	adds	r1, r3, #1
 8009330:	9103      	str	r1, [sp, #12]
 8009332:	701a      	strb	r2, [r3, #0]
 8009334:	e7d9      	b.n	80092ea <__cvt+0x7e>

08009336 <__exponent>:
 8009336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009338:	2900      	cmp	r1, #0
 800933a:	bfba      	itte	lt
 800933c:	4249      	neglt	r1, r1
 800933e:	232d      	movlt	r3, #45	@ 0x2d
 8009340:	232b      	movge	r3, #43	@ 0x2b
 8009342:	2909      	cmp	r1, #9
 8009344:	7002      	strb	r2, [r0, #0]
 8009346:	7043      	strb	r3, [r0, #1]
 8009348:	dd29      	ble.n	800939e <__exponent+0x68>
 800934a:	f10d 0307 	add.w	r3, sp, #7
 800934e:	461d      	mov	r5, r3
 8009350:	270a      	movs	r7, #10
 8009352:	461a      	mov	r2, r3
 8009354:	fbb1 f6f7 	udiv	r6, r1, r7
 8009358:	fb07 1416 	mls	r4, r7, r6, r1
 800935c:	3430      	adds	r4, #48	@ 0x30
 800935e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009362:	460c      	mov	r4, r1
 8009364:	2c63      	cmp	r4, #99	@ 0x63
 8009366:	f103 33ff 	add.w	r3, r3, #4294967295
 800936a:	4631      	mov	r1, r6
 800936c:	dcf1      	bgt.n	8009352 <__exponent+0x1c>
 800936e:	3130      	adds	r1, #48	@ 0x30
 8009370:	1e94      	subs	r4, r2, #2
 8009372:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009376:	1c41      	adds	r1, r0, #1
 8009378:	4623      	mov	r3, r4
 800937a:	42ab      	cmp	r3, r5
 800937c:	d30a      	bcc.n	8009394 <__exponent+0x5e>
 800937e:	f10d 0309 	add.w	r3, sp, #9
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	42ac      	cmp	r4, r5
 8009386:	bf88      	it	hi
 8009388:	2300      	movhi	r3, #0
 800938a:	3302      	adds	r3, #2
 800938c:	4403      	add	r3, r0
 800938e:	1a18      	subs	r0, r3, r0
 8009390:	b003      	add	sp, #12
 8009392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009394:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009398:	f801 6f01 	strb.w	r6, [r1, #1]!
 800939c:	e7ed      	b.n	800937a <__exponent+0x44>
 800939e:	2330      	movs	r3, #48	@ 0x30
 80093a0:	3130      	adds	r1, #48	@ 0x30
 80093a2:	7083      	strb	r3, [r0, #2]
 80093a4:	70c1      	strb	r1, [r0, #3]
 80093a6:	1d03      	adds	r3, r0, #4
 80093a8:	e7f1      	b.n	800938e <__exponent+0x58>
	...

080093ac <_printf_float>:
 80093ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	b08d      	sub	sp, #52	@ 0x34
 80093b2:	460c      	mov	r4, r1
 80093b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80093b8:	4616      	mov	r6, r2
 80093ba:	461f      	mov	r7, r3
 80093bc:	4605      	mov	r5, r0
 80093be:	f000 fced 	bl	8009d9c <_localeconv_r>
 80093c2:	6803      	ldr	r3, [r0, #0]
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f6 ff5a 	bl	8000280 <strlen>
 80093cc:	2300      	movs	r3, #0
 80093ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80093d0:	f8d8 3000 	ldr.w	r3, [r8]
 80093d4:	9005      	str	r0, [sp, #20]
 80093d6:	3307      	adds	r3, #7
 80093d8:	f023 0307 	bic.w	r3, r3, #7
 80093dc:	f103 0208 	add.w	r2, r3, #8
 80093e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80093e4:	f8d4 b000 	ldr.w	fp, [r4]
 80093e8:	f8c8 2000 	str.w	r2, [r8]
 80093ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80093f4:	9307      	str	r3, [sp, #28]
 80093f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80093fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80093fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009402:	4b9c      	ldr	r3, [pc, #624]	@ (8009674 <_printf_float+0x2c8>)
 8009404:	f04f 32ff 	mov.w	r2, #4294967295
 8009408:	f7f7 fb98 	bl	8000b3c <__aeabi_dcmpun>
 800940c:	bb70      	cbnz	r0, 800946c <_printf_float+0xc0>
 800940e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009412:	4b98      	ldr	r3, [pc, #608]	@ (8009674 <_printf_float+0x2c8>)
 8009414:	f04f 32ff 	mov.w	r2, #4294967295
 8009418:	f7f7 fb72 	bl	8000b00 <__aeabi_dcmple>
 800941c:	bb30      	cbnz	r0, 800946c <_printf_float+0xc0>
 800941e:	2200      	movs	r2, #0
 8009420:	2300      	movs	r3, #0
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f7 fb61 	bl	8000aec <__aeabi_dcmplt>
 800942a:	b110      	cbz	r0, 8009432 <_printf_float+0x86>
 800942c:	232d      	movs	r3, #45	@ 0x2d
 800942e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009432:	4a91      	ldr	r2, [pc, #580]	@ (8009678 <_printf_float+0x2cc>)
 8009434:	4b91      	ldr	r3, [pc, #580]	@ (800967c <_printf_float+0x2d0>)
 8009436:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800943a:	bf8c      	ite	hi
 800943c:	4690      	movhi	r8, r2
 800943e:	4698      	movls	r8, r3
 8009440:	2303      	movs	r3, #3
 8009442:	6123      	str	r3, [r4, #16]
 8009444:	f02b 0304 	bic.w	r3, fp, #4
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	f04f 0900 	mov.w	r9, #0
 800944e:	9700      	str	r7, [sp, #0]
 8009450:	4633      	mov	r3, r6
 8009452:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009454:	4621      	mov	r1, r4
 8009456:	4628      	mov	r0, r5
 8009458:	f000 f9d2 	bl	8009800 <_printf_common>
 800945c:	3001      	adds	r0, #1
 800945e:	f040 808d 	bne.w	800957c <_printf_float+0x1d0>
 8009462:	f04f 30ff 	mov.w	r0, #4294967295
 8009466:	b00d      	add	sp, #52	@ 0x34
 8009468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946c:	4642      	mov	r2, r8
 800946e:	464b      	mov	r3, r9
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	f7f7 fb62 	bl	8000b3c <__aeabi_dcmpun>
 8009478:	b140      	cbz	r0, 800948c <_printf_float+0xe0>
 800947a:	464b      	mov	r3, r9
 800947c:	2b00      	cmp	r3, #0
 800947e:	bfbc      	itt	lt
 8009480:	232d      	movlt	r3, #45	@ 0x2d
 8009482:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009486:	4a7e      	ldr	r2, [pc, #504]	@ (8009680 <_printf_float+0x2d4>)
 8009488:	4b7e      	ldr	r3, [pc, #504]	@ (8009684 <_printf_float+0x2d8>)
 800948a:	e7d4      	b.n	8009436 <_printf_float+0x8a>
 800948c:	6863      	ldr	r3, [r4, #4]
 800948e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009492:	9206      	str	r2, [sp, #24]
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	d13b      	bne.n	8009510 <_printf_float+0x164>
 8009498:	2306      	movs	r3, #6
 800949a:	6063      	str	r3, [r4, #4]
 800949c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80094a0:	2300      	movs	r3, #0
 80094a2:	6022      	str	r2, [r4, #0]
 80094a4:	9303      	str	r3, [sp, #12]
 80094a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80094a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80094ac:	ab09      	add	r3, sp, #36	@ 0x24
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	6861      	ldr	r1, [r4, #4]
 80094b2:	ec49 8b10 	vmov	d0, r8, r9
 80094b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7ff fed6 	bl	800926c <__cvt>
 80094c0:	9b06      	ldr	r3, [sp, #24]
 80094c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094c4:	2b47      	cmp	r3, #71	@ 0x47
 80094c6:	4680      	mov	r8, r0
 80094c8:	d129      	bne.n	800951e <_printf_float+0x172>
 80094ca:	1cc8      	adds	r0, r1, #3
 80094cc:	db02      	blt.n	80094d4 <_printf_float+0x128>
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	4299      	cmp	r1, r3
 80094d2:	dd41      	ble.n	8009558 <_printf_float+0x1ac>
 80094d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80094d8:	fa5f fa8a 	uxtb.w	sl, sl
 80094dc:	3901      	subs	r1, #1
 80094de:	4652      	mov	r2, sl
 80094e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80094e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80094e6:	f7ff ff26 	bl	8009336 <__exponent>
 80094ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094ec:	1813      	adds	r3, r2, r0
 80094ee:	2a01      	cmp	r2, #1
 80094f0:	4681      	mov	r9, r0
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	dc02      	bgt.n	80094fc <_printf_float+0x150>
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	07d2      	lsls	r2, r2, #31
 80094fa:	d501      	bpl.n	8009500 <_printf_float+0x154>
 80094fc:	3301      	adds	r3, #1
 80094fe:	6123      	str	r3, [r4, #16]
 8009500:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0a2      	beq.n	800944e <_printf_float+0xa2>
 8009508:	232d      	movs	r3, #45	@ 0x2d
 800950a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800950e:	e79e      	b.n	800944e <_printf_float+0xa2>
 8009510:	9a06      	ldr	r2, [sp, #24]
 8009512:	2a47      	cmp	r2, #71	@ 0x47
 8009514:	d1c2      	bne.n	800949c <_printf_float+0xf0>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1c0      	bne.n	800949c <_printf_float+0xf0>
 800951a:	2301      	movs	r3, #1
 800951c:	e7bd      	b.n	800949a <_printf_float+0xee>
 800951e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009522:	d9db      	bls.n	80094dc <_printf_float+0x130>
 8009524:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009528:	d118      	bne.n	800955c <_printf_float+0x1b0>
 800952a:	2900      	cmp	r1, #0
 800952c:	6863      	ldr	r3, [r4, #4]
 800952e:	dd0b      	ble.n	8009548 <_printf_float+0x19c>
 8009530:	6121      	str	r1, [r4, #16]
 8009532:	b913      	cbnz	r3, 800953a <_printf_float+0x18e>
 8009534:	6822      	ldr	r2, [r4, #0]
 8009536:	07d0      	lsls	r0, r2, #31
 8009538:	d502      	bpl.n	8009540 <_printf_float+0x194>
 800953a:	3301      	adds	r3, #1
 800953c:	440b      	add	r3, r1
 800953e:	6123      	str	r3, [r4, #16]
 8009540:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009542:	f04f 0900 	mov.w	r9, #0
 8009546:	e7db      	b.n	8009500 <_printf_float+0x154>
 8009548:	b913      	cbnz	r3, 8009550 <_printf_float+0x1a4>
 800954a:	6822      	ldr	r2, [r4, #0]
 800954c:	07d2      	lsls	r2, r2, #31
 800954e:	d501      	bpl.n	8009554 <_printf_float+0x1a8>
 8009550:	3302      	adds	r3, #2
 8009552:	e7f4      	b.n	800953e <_printf_float+0x192>
 8009554:	2301      	movs	r3, #1
 8009556:	e7f2      	b.n	800953e <_printf_float+0x192>
 8009558:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800955c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800955e:	4299      	cmp	r1, r3
 8009560:	db05      	blt.n	800956e <_printf_float+0x1c2>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	6121      	str	r1, [r4, #16]
 8009566:	07d8      	lsls	r0, r3, #31
 8009568:	d5ea      	bpl.n	8009540 <_printf_float+0x194>
 800956a:	1c4b      	adds	r3, r1, #1
 800956c:	e7e7      	b.n	800953e <_printf_float+0x192>
 800956e:	2900      	cmp	r1, #0
 8009570:	bfd4      	ite	le
 8009572:	f1c1 0202 	rsble	r2, r1, #2
 8009576:	2201      	movgt	r2, #1
 8009578:	4413      	add	r3, r2
 800957a:	e7e0      	b.n	800953e <_printf_float+0x192>
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	055a      	lsls	r2, r3, #21
 8009580:	d407      	bmi.n	8009592 <_printf_float+0x1e6>
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	4642      	mov	r2, r8
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	47b8      	blx	r7
 800958c:	3001      	adds	r0, #1
 800958e:	d12b      	bne.n	80095e8 <_printf_float+0x23c>
 8009590:	e767      	b.n	8009462 <_printf_float+0xb6>
 8009592:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009596:	f240 80dd 	bls.w	8009754 <_printf_float+0x3a8>
 800959a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800959e:	2200      	movs	r2, #0
 80095a0:	2300      	movs	r3, #0
 80095a2:	f7f7 fa99 	bl	8000ad8 <__aeabi_dcmpeq>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d033      	beq.n	8009612 <_printf_float+0x266>
 80095aa:	4a37      	ldr	r2, [pc, #220]	@ (8009688 <_printf_float+0x2dc>)
 80095ac:	2301      	movs	r3, #1
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	f43f af54 	beq.w	8009462 <_printf_float+0xb6>
 80095ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80095be:	4543      	cmp	r3, r8
 80095c0:	db02      	blt.n	80095c8 <_printf_float+0x21c>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	07d8      	lsls	r0, r3, #31
 80095c6:	d50f      	bpl.n	80095e8 <_printf_float+0x23c>
 80095c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095cc:	4631      	mov	r1, r6
 80095ce:	4628      	mov	r0, r5
 80095d0:	47b8      	blx	r7
 80095d2:	3001      	adds	r0, #1
 80095d4:	f43f af45 	beq.w	8009462 <_printf_float+0xb6>
 80095d8:	f04f 0900 	mov.w	r9, #0
 80095dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80095e0:	f104 0a1a 	add.w	sl, r4, #26
 80095e4:	45c8      	cmp	r8, r9
 80095e6:	dc09      	bgt.n	80095fc <_printf_float+0x250>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	079b      	lsls	r3, r3, #30
 80095ec:	f100 8103 	bmi.w	80097f6 <_printf_float+0x44a>
 80095f0:	68e0      	ldr	r0, [r4, #12]
 80095f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095f4:	4298      	cmp	r0, r3
 80095f6:	bfb8      	it	lt
 80095f8:	4618      	movlt	r0, r3
 80095fa:	e734      	b.n	8009466 <_printf_float+0xba>
 80095fc:	2301      	movs	r3, #1
 80095fe:	4652      	mov	r2, sl
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	f43f af2b 	beq.w	8009462 <_printf_float+0xb6>
 800960c:	f109 0901 	add.w	r9, r9, #1
 8009610:	e7e8      	b.n	80095e4 <_printf_float+0x238>
 8009612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	dc39      	bgt.n	800968c <_printf_float+0x2e0>
 8009618:	4a1b      	ldr	r2, [pc, #108]	@ (8009688 <_printf_float+0x2dc>)
 800961a:	2301      	movs	r3, #1
 800961c:	4631      	mov	r1, r6
 800961e:	4628      	mov	r0, r5
 8009620:	47b8      	blx	r7
 8009622:	3001      	adds	r0, #1
 8009624:	f43f af1d 	beq.w	8009462 <_printf_float+0xb6>
 8009628:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800962c:	ea59 0303 	orrs.w	r3, r9, r3
 8009630:	d102      	bne.n	8009638 <_printf_float+0x28c>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	07d9      	lsls	r1, r3, #31
 8009636:	d5d7      	bpl.n	80095e8 <_printf_float+0x23c>
 8009638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	f43f af0d 	beq.w	8009462 <_printf_float+0xb6>
 8009648:	f04f 0a00 	mov.w	sl, #0
 800964c:	f104 0b1a 	add.w	fp, r4, #26
 8009650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009652:	425b      	negs	r3, r3
 8009654:	4553      	cmp	r3, sl
 8009656:	dc01      	bgt.n	800965c <_printf_float+0x2b0>
 8009658:	464b      	mov	r3, r9
 800965a:	e793      	b.n	8009584 <_printf_float+0x1d8>
 800965c:	2301      	movs	r3, #1
 800965e:	465a      	mov	r2, fp
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f aefb 	beq.w	8009462 <_printf_float+0xb6>
 800966c:	f10a 0a01 	add.w	sl, sl, #1
 8009670:	e7ee      	b.n	8009650 <_printf_float+0x2a4>
 8009672:	bf00      	nop
 8009674:	7fefffff 	.word	0x7fefffff
 8009678:	0800c191 	.word	0x0800c191
 800967c:	0800c18d 	.word	0x0800c18d
 8009680:	0800c199 	.word	0x0800c199
 8009684:	0800c195 	.word	0x0800c195
 8009688:	0800c19d 	.word	0x0800c19d
 800968c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800968e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009692:	4553      	cmp	r3, sl
 8009694:	bfa8      	it	ge
 8009696:	4653      	movge	r3, sl
 8009698:	2b00      	cmp	r3, #0
 800969a:	4699      	mov	r9, r3
 800969c:	dc36      	bgt.n	800970c <_printf_float+0x360>
 800969e:	f04f 0b00 	mov.w	fp, #0
 80096a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096a6:	f104 021a 	add.w	r2, r4, #26
 80096aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80096ac:	9306      	str	r3, [sp, #24]
 80096ae:	eba3 0309 	sub.w	r3, r3, r9
 80096b2:	455b      	cmp	r3, fp
 80096b4:	dc31      	bgt.n	800971a <_printf_float+0x36e>
 80096b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b8:	459a      	cmp	sl, r3
 80096ba:	dc3a      	bgt.n	8009732 <_printf_float+0x386>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	07da      	lsls	r2, r3, #31
 80096c0:	d437      	bmi.n	8009732 <_printf_float+0x386>
 80096c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c4:	ebaa 0903 	sub.w	r9, sl, r3
 80096c8:	9b06      	ldr	r3, [sp, #24]
 80096ca:	ebaa 0303 	sub.w	r3, sl, r3
 80096ce:	4599      	cmp	r9, r3
 80096d0:	bfa8      	it	ge
 80096d2:	4699      	movge	r9, r3
 80096d4:	f1b9 0f00 	cmp.w	r9, #0
 80096d8:	dc33      	bgt.n	8009742 <_printf_float+0x396>
 80096da:	f04f 0800 	mov.w	r8, #0
 80096de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096e2:	f104 0b1a 	add.w	fp, r4, #26
 80096e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e8:	ebaa 0303 	sub.w	r3, sl, r3
 80096ec:	eba3 0309 	sub.w	r3, r3, r9
 80096f0:	4543      	cmp	r3, r8
 80096f2:	f77f af79 	ble.w	80095e8 <_printf_float+0x23c>
 80096f6:	2301      	movs	r3, #1
 80096f8:	465a      	mov	r2, fp
 80096fa:	4631      	mov	r1, r6
 80096fc:	4628      	mov	r0, r5
 80096fe:	47b8      	blx	r7
 8009700:	3001      	adds	r0, #1
 8009702:	f43f aeae 	beq.w	8009462 <_printf_float+0xb6>
 8009706:	f108 0801 	add.w	r8, r8, #1
 800970a:	e7ec      	b.n	80096e6 <_printf_float+0x33a>
 800970c:	4642      	mov	r2, r8
 800970e:	4631      	mov	r1, r6
 8009710:	4628      	mov	r0, r5
 8009712:	47b8      	blx	r7
 8009714:	3001      	adds	r0, #1
 8009716:	d1c2      	bne.n	800969e <_printf_float+0x2f2>
 8009718:	e6a3      	b.n	8009462 <_printf_float+0xb6>
 800971a:	2301      	movs	r3, #1
 800971c:	4631      	mov	r1, r6
 800971e:	4628      	mov	r0, r5
 8009720:	9206      	str	r2, [sp, #24]
 8009722:	47b8      	blx	r7
 8009724:	3001      	adds	r0, #1
 8009726:	f43f ae9c 	beq.w	8009462 <_printf_float+0xb6>
 800972a:	9a06      	ldr	r2, [sp, #24]
 800972c:	f10b 0b01 	add.w	fp, fp, #1
 8009730:	e7bb      	b.n	80096aa <_printf_float+0x2fe>
 8009732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009736:	4631      	mov	r1, r6
 8009738:	4628      	mov	r0, r5
 800973a:	47b8      	blx	r7
 800973c:	3001      	adds	r0, #1
 800973e:	d1c0      	bne.n	80096c2 <_printf_float+0x316>
 8009740:	e68f      	b.n	8009462 <_printf_float+0xb6>
 8009742:	9a06      	ldr	r2, [sp, #24]
 8009744:	464b      	mov	r3, r9
 8009746:	4442      	add	r2, r8
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	d1c3      	bne.n	80096da <_printf_float+0x32e>
 8009752:	e686      	b.n	8009462 <_printf_float+0xb6>
 8009754:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009758:	f1ba 0f01 	cmp.w	sl, #1
 800975c:	dc01      	bgt.n	8009762 <_printf_float+0x3b6>
 800975e:	07db      	lsls	r3, r3, #31
 8009760:	d536      	bpl.n	80097d0 <_printf_float+0x424>
 8009762:	2301      	movs	r3, #1
 8009764:	4642      	mov	r2, r8
 8009766:	4631      	mov	r1, r6
 8009768:	4628      	mov	r0, r5
 800976a:	47b8      	blx	r7
 800976c:	3001      	adds	r0, #1
 800976e:	f43f ae78 	beq.w	8009462 <_printf_float+0xb6>
 8009772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009776:	4631      	mov	r1, r6
 8009778:	4628      	mov	r0, r5
 800977a:	47b8      	blx	r7
 800977c:	3001      	adds	r0, #1
 800977e:	f43f ae70 	beq.w	8009462 <_printf_float+0xb6>
 8009782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009786:	2200      	movs	r2, #0
 8009788:	2300      	movs	r3, #0
 800978a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800978e:	f7f7 f9a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009792:	b9c0      	cbnz	r0, 80097c6 <_printf_float+0x41a>
 8009794:	4653      	mov	r3, sl
 8009796:	f108 0201 	add.w	r2, r8, #1
 800979a:	4631      	mov	r1, r6
 800979c:	4628      	mov	r0, r5
 800979e:	47b8      	blx	r7
 80097a0:	3001      	adds	r0, #1
 80097a2:	d10c      	bne.n	80097be <_printf_float+0x412>
 80097a4:	e65d      	b.n	8009462 <_printf_float+0xb6>
 80097a6:	2301      	movs	r3, #1
 80097a8:	465a      	mov	r2, fp
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	f43f ae56 	beq.w	8009462 <_printf_float+0xb6>
 80097b6:	f108 0801 	add.w	r8, r8, #1
 80097ba:	45d0      	cmp	r8, sl
 80097bc:	dbf3      	blt.n	80097a6 <_printf_float+0x3fa>
 80097be:	464b      	mov	r3, r9
 80097c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80097c4:	e6df      	b.n	8009586 <_printf_float+0x1da>
 80097c6:	f04f 0800 	mov.w	r8, #0
 80097ca:	f104 0b1a 	add.w	fp, r4, #26
 80097ce:	e7f4      	b.n	80097ba <_printf_float+0x40e>
 80097d0:	2301      	movs	r3, #1
 80097d2:	4642      	mov	r2, r8
 80097d4:	e7e1      	b.n	800979a <_printf_float+0x3ee>
 80097d6:	2301      	movs	r3, #1
 80097d8:	464a      	mov	r2, r9
 80097da:	4631      	mov	r1, r6
 80097dc:	4628      	mov	r0, r5
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	f43f ae3e 	beq.w	8009462 <_printf_float+0xb6>
 80097e6:	f108 0801 	add.w	r8, r8, #1
 80097ea:	68e3      	ldr	r3, [r4, #12]
 80097ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80097ee:	1a5b      	subs	r3, r3, r1
 80097f0:	4543      	cmp	r3, r8
 80097f2:	dcf0      	bgt.n	80097d6 <_printf_float+0x42a>
 80097f4:	e6fc      	b.n	80095f0 <_printf_float+0x244>
 80097f6:	f04f 0800 	mov.w	r8, #0
 80097fa:	f104 0919 	add.w	r9, r4, #25
 80097fe:	e7f4      	b.n	80097ea <_printf_float+0x43e>

08009800 <_printf_common>:
 8009800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	4616      	mov	r6, r2
 8009806:	4698      	mov	r8, r3
 8009808:	688a      	ldr	r2, [r1, #8]
 800980a:	690b      	ldr	r3, [r1, #16]
 800980c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009810:	4293      	cmp	r3, r2
 8009812:	bfb8      	it	lt
 8009814:	4613      	movlt	r3, r2
 8009816:	6033      	str	r3, [r6, #0]
 8009818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800981c:	4607      	mov	r7, r0
 800981e:	460c      	mov	r4, r1
 8009820:	b10a      	cbz	r2, 8009826 <_printf_common+0x26>
 8009822:	3301      	adds	r3, #1
 8009824:	6033      	str	r3, [r6, #0]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	0699      	lsls	r1, r3, #26
 800982a:	bf42      	ittt	mi
 800982c:	6833      	ldrmi	r3, [r6, #0]
 800982e:	3302      	addmi	r3, #2
 8009830:	6033      	strmi	r3, [r6, #0]
 8009832:	6825      	ldr	r5, [r4, #0]
 8009834:	f015 0506 	ands.w	r5, r5, #6
 8009838:	d106      	bne.n	8009848 <_printf_common+0x48>
 800983a:	f104 0a19 	add.w	sl, r4, #25
 800983e:	68e3      	ldr	r3, [r4, #12]
 8009840:	6832      	ldr	r2, [r6, #0]
 8009842:	1a9b      	subs	r3, r3, r2
 8009844:	42ab      	cmp	r3, r5
 8009846:	dc26      	bgt.n	8009896 <_printf_common+0x96>
 8009848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800984c:	6822      	ldr	r2, [r4, #0]
 800984e:	3b00      	subs	r3, #0
 8009850:	bf18      	it	ne
 8009852:	2301      	movne	r3, #1
 8009854:	0692      	lsls	r2, r2, #26
 8009856:	d42b      	bmi.n	80098b0 <_printf_common+0xb0>
 8009858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800985c:	4641      	mov	r1, r8
 800985e:	4638      	mov	r0, r7
 8009860:	47c8      	blx	r9
 8009862:	3001      	adds	r0, #1
 8009864:	d01e      	beq.n	80098a4 <_printf_common+0xa4>
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	6922      	ldr	r2, [r4, #16]
 800986a:	f003 0306 	and.w	r3, r3, #6
 800986e:	2b04      	cmp	r3, #4
 8009870:	bf02      	ittt	eq
 8009872:	68e5      	ldreq	r5, [r4, #12]
 8009874:	6833      	ldreq	r3, [r6, #0]
 8009876:	1aed      	subeq	r5, r5, r3
 8009878:	68a3      	ldr	r3, [r4, #8]
 800987a:	bf0c      	ite	eq
 800987c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009880:	2500      	movne	r5, #0
 8009882:	4293      	cmp	r3, r2
 8009884:	bfc4      	itt	gt
 8009886:	1a9b      	subgt	r3, r3, r2
 8009888:	18ed      	addgt	r5, r5, r3
 800988a:	2600      	movs	r6, #0
 800988c:	341a      	adds	r4, #26
 800988e:	42b5      	cmp	r5, r6
 8009890:	d11a      	bne.n	80098c8 <_printf_common+0xc8>
 8009892:	2000      	movs	r0, #0
 8009894:	e008      	b.n	80098a8 <_printf_common+0xa8>
 8009896:	2301      	movs	r3, #1
 8009898:	4652      	mov	r2, sl
 800989a:	4641      	mov	r1, r8
 800989c:	4638      	mov	r0, r7
 800989e:	47c8      	blx	r9
 80098a0:	3001      	adds	r0, #1
 80098a2:	d103      	bne.n	80098ac <_printf_common+0xac>
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ac:	3501      	adds	r5, #1
 80098ae:	e7c6      	b.n	800983e <_printf_common+0x3e>
 80098b0:	18e1      	adds	r1, r4, r3
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	2030      	movs	r0, #48	@ 0x30
 80098b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80098ba:	4422      	add	r2, r4
 80098bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098c4:	3302      	adds	r3, #2
 80098c6:	e7c7      	b.n	8009858 <_printf_common+0x58>
 80098c8:	2301      	movs	r3, #1
 80098ca:	4622      	mov	r2, r4
 80098cc:	4641      	mov	r1, r8
 80098ce:	4638      	mov	r0, r7
 80098d0:	47c8      	blx	r9
 80098d2:	3001      	adds	r0, #1
 80098d4:	d0e6      	beq.n	80098a4 <_printf_common+0xa4>
 80098d6:	3601      	adds	r6, #1
 80098d8:	e7d9      	b.n	800988e <_printf_common+0x8e>
	...

080098dc <_printf_i>:
 80098dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098e0:	7e0f      	ldrb	r7, [r1, #24]
 80098e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098e4:	2f78      	cmp	r7, #120	@ 0x78
 80098e6:	4691      	mov	r9, r2
 80098e8:	4680      	mov	r8, r0
 80098ea:	460c      	mov	r4, r1
 80098ec:	469a      	mov	sl, r3
 80098ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098f2:	d807      	bhi.n	8009904 <_printf_i+0x28>
 80098f4:	2f62      	cmp	r7, #98	@ 0x62
 80098f6:	d80a      	bhi.n	800990e <_printf_i+0x32>
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	f000 80d1 	beq.w	8009aa0 <_printf_i+0x1c4>
 80098fe:	2f58      	cmp	r7, #88	@ 0x58
 8009900:	f000 80b8 	beq.w	8009a74 <_printf_i+0x198>
 8009904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800990c:	e03a      	b.n	8009984 <_printf_i+0xa8>
 800990e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009912:	2b15      	cmp	r3, #21
 8009914:	d8f6      	bhi.n	8009904 <_printf_i+0x28>
 8009916:	a101      	add	r1, pc, #4	@ (adr r1, 800991c <_printf_i+0x40>)
 8009918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800991c:	08009975 	.word	0x08009975
 8009920:	08009989 	.word	0x08009989
 8009924:	08009905 	.word	0x08009905
 8009928:	08009905 	.word	0x08009905
 800992c:	08009905 	.word	0x08009905
 8009930:	08009905 	.word	0x08009905
 8009934:	08009989 	.word	0x08009989
 8009938:	08009905 	.word	0x08009905
 800993c:	08009905 	.word	0x08009905
 8009940:	08009905 	.word	0x08009905
 8009944:	08009905 	.word	0x08009905
 8009948:	08009a87 	.word	0x08009a87
 800994c:	080099b3 	.word	0x080099b3
 8009950:	08009a41 	.word	0x08009a41
 8009954:	08009905 	.word	0x08009905
 8009958:	08009905 	.word	0x08009905
 800995c:	08009aa9 	.word	0x08009aa9
 8009960:	08009905 	.word	0x08009905
 8009964:	080099b3 	.word	0x080099b3
 8009968:	08009905 	.word	0x08009905
 800996c:	08009905 	.word	0x08009905
 8009970:	08009a49 	.word	0x08009a49
 8009974:	6833      	ldr	r3, [r6, #0]
 8009976:	1d1a      	adds	r2, r3, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6032      	str	r2, [r6, #0]
 800997c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009984:	2301      	movs	r3, #1
 8009986:	e09c      	b.n	8009ac2 <_printf_i+0x1e6>
 8009988:	6833      	ldr	r3, [r6, #0]
 800998a:	6820      	ldr	r0, [r4, #0]
 800998c:	1d19      	adds	r1, r3, #4
 800998e:	6031      	str	r1, [r6, #0]
 8009990:	0606      	lsls	r6, r0, #24
 8009992:	d501      	bpl.n	8009998 <_printf_i+0xbc>
 8009994:	681d      	ldr	r5, [r3, #0]
 8009996:	e003      	b.n	80099a0 <_printf_i+0xc4>
 8009998:	0645      	lsls	r5, r0, #25
 800999a:	d5fb      	bpl.n	8009994 <_printf_i+0xb8>
 800999c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099a0:	2d00      	cmp	r5, #0
 80099a2:	da03      	bge.n	80099ac <_printf_i+0xd0>
 80099a4:	232d      	movs	r3, #45	@ 0x2d
 80099a6:	426d      	negs	r5, r5
 80099a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099ac:	4858      	ldr	r0, [pc, #352]	@ (8009b10 <_printf_i+0x234>)
 80099ae:	230a      	movs	r3, #10
 80099b0:	e011      	b.n	80099d6 <_printf_i+0xfa>
 80099b2:	6821      	ldr	r1, [r4, #0]
 80099b4:	6833      	ldr	r3, [r6, #0]
 80099b6:	0608      	lsls	r0, r1, #24
 80099b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80099bc:	d402      	bmi.n	80099c4 <_printf_i+0xe8>
 80099be:	0649      	lsls	r1, r1, #25
 80099c0:	bf48      	it	mi
 80099c2:	b2ad      	uxthmi	r5, r5
 80099c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80099c6:	4852      	ldr	r0, [pc, #328]	@ (8009b10 <_printf_i+0x234>)
 80099c8:	6033      	str	r3, [r6, #0]
 80099ca:	bf14      	ite	ne
 80099cc:	230a      	movne	r3, #10
 80099ce:	2308      	moveq	r3, #8
 80099d0:	2100      	movs	r1, #0
 80099d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099d6:	6866      	ldr	r6, [r4, #4]
 80099d8:	60a6      	str	r6, [r4, #8]
 80099da:	2e00      	cmp	r6, #0
 80099dc:	db05      	blt.n	80099ea <_printf_i+0x10e>
 80099de:	6821      	ldr	r1, [r4, #0]
 80099e0:	432e      	orrs	r6, r5
 80099e2:	f021 0104 	bic.w	r1, r1, #4
 80099e6:	6021      	str	r1, [r4, #0]
 80099e8:	d04b      	beq.n	8009a82 <_printf_i+0x1a6>
 80099ea:	4616      	mov	r6, r2
 80099ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80099f0:	fb03 5711 	mls	r7, r3, r1, r5
 80099f4:	5dc7      	ldrb	r7, [r0, r7]
 80099f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099fa:	462f      	mov	r7, r5
 80099fc:	42bb      	cmp	r3, r7
 80099fe:	460d      	mov	r5, r1
 8009a00:	d9f4      	bls.n	80099ec <_printf_i+0x110>
 8009a02:	2b08      	cmp	r3, #8
 8009a04:	d10b      	bne.n	8009a1e <_printf_i+0x142>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	07df      	lsls	r7, r3, #31
 8009a0a:	d508      	bpl.n	8009a1e <_printf_i+0x142>
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	6861      	ldr	r1, [r4, #4]
 8009a10:	4299      	cmp	r1, r3
 8009a12:	bfde      	ittt	le
 8009a14:	2330      	movle	r3, #48	@ 0x30
 8009a16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a1e:	1b92      	subs	r2, r2, r6
 8009a20:	6122      	str	r2, [r4, #16]
 8009a22:	f8cd a000 	str.w	sl, [sp]
 8009a26:	464b      	mov	r3, r9
 8009a28:	aa03      	add	r2, sp, #12
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	f7ff fee7 	bl	8009800 <_printf_common>
 8009a32:	3001      	adds	r0, #1
 8009a34:	d14a      	bne.n	8009acc <_printf_i+0x1f0>
 8009a36:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3a:	b004      	add	sp, #16
 8009a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	f043 0320 	orr.w	r3, r3, #32
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	4832      	ldr	r0, [pc, #200]	@ (8009b14 <_printf_i+0x238>)
 8009a4a:	2778      	movs	r7, #120	@ 0x78
 8009a4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	6831      	ldr	r1, [r6, #0]
 8009a54:	061f      	lsls	r7, r3, #24
 8009a56:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a5a:	d402      	bmi.n	8009a62 <_printf_i+0x186>
 8009a5c:	065f      	lsls	r7, r3, #25
 8009a5e:	bf48      	it	mi
 8009a60:	b2ad      	uxthmi	r5, r5
 8009a62:	6031      	str	r1, [r6, #0]
 8009a64:	07d9      	lsls	r1, r3, #31
 8009a66:	bf44      	itt	mi
 8009a68:	f043 0320 	orrmi.w	r3, r3, #32
 8009a6c:	6023      	strmi	r3, [r4, #0]
 8009a6e:	b11d      	cbz	r5, 8009a78 <_printf_i+0x19c>
 8009a70:	2310      	movs	r3, #16
 8009a72:	e7ad      	b.n	80099d0 <_printf_i+0xf4>
 8009a74:	4826      	ldr	r0, [pc, #152]	@ (8009b10 <_printf_i+0x234>)
 8009a76:	e7e9      	b.n	8009a4c <_printf_i+0x170>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	f023 0320 	bic.w	r3, r3, #32
 8009a7e:	6023      	str	r3, [r4, #0]
 8009a80:	e7f6      	b.n	8009a70 <_printf_i+0x194>
 8009a82:	4616      	mov	r6, r2
 8009a84:	e7bd      	b.n	8009a02 <_printf_i+0x126>
 8009a86:	6833      	ldr	r3, [r6, #0]
 8009a88:	6825      	ldr	r5, [r4, #0]
 8009a8a:	6961      	ldr	r1, [r4, #20]
 8009a8c:	1d18      	adds	r0, r3, #4
 8009a8e:	6030      	str	r0, [r6, #0]
 8009a90:	062e      	lsls	r6, r5, #24
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	d501      	bpl.n	8009a9a <_printf_i+0x1be>
 8009a96:	6019      	str	r1, [r3, #0]
 8009a98:	e002      	b.n	8009aa0 <_printf_i+0x1c4>
 8009a9a:	0668      	lsls	r0, r5, #25
 8009a9c:	d5fb      	bpl.n	8009a96 <_printf_i+0x1ba>
 8009a9e:	8019      	strh	r1, [r3, #0]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	4616      	mov	r6, r2
 8009aa6:	e7bc      	b.n	8009a22 <_printf_i+0x146>
 8009aa8:	6833      	ldr	r3, [r6, #0]
 8009aaa:	1d1a      	adds	r2, r3, #4
 8009aac:	6032      	str	r2, [r6, #0]
 8009aae:	681e      	ldr	r6, [r3, #0]
 8009ab0:	6862      	ldr	r2, [r4, #4]
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7f6 fb93 	bl	80001e0 <memchr>
 8009aba:	b108      	cbz	r0, 8009ac0 <_printf_i+0x1e4>
 8009abc:	1b80      	subs	r0, r0, r6
 8009abe:	6060      	str	r0, [r4, #4]
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aca:	e7aa      	b.n	8009a22 <_printf_i+0x146>
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	4632      	mov	r2, r6
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	47d0      	blx	sl
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d0ad      	beq.n	8009a36 <_printf_i+0x15a>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	079b      	lsls	r3, r3, #30
 8009ade:	d413      	bmi.n	8009b08 <_printf_i+0x22c>
 8009ae0:	68e0      	ldr	r0, [r4, #12]
 8009ae2:	9b03      	ldr	r3, [sp, #12]
 8009ae4:	4298      	cmp	r0, r3
 8009ae6:	bfb8      	it	lt
 8009ae8:	4618      	movlt	r0, r3
 8009aea:	e7a6      	b.n	8009a3a <_printf_i+0x15e>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4632      	mov	r2, r6
 8009af0:	4649      	mov	r1, r9
 8009af2:	4640      	mov	r0, r8
 8009af4:	47d0      	blx	sl
 8009af6:	3001      	adds	r0, #1
 8009af8:	d09d      	beq.n	8009a36 <_printf_i+0x15a>
 8009afa:	3501      	adds	r5, #1
 8009afc:	68e3      	ldr	r3, [r4, #12]
 8009afe:	9903      	ldr	r1, [sp, #12]
 8009b00:	1a5b      	subs	r3, r3, r1
 8009b02:	42ab      	cmp	r3, r5
 8009b04:	dcf2      	bgt.n	8009aec <_printf_i+0x210>
 8009b06:	e7eb      	b.n	8009ae0 <_printf_i+0x204>
 8009b08:	2500      	movs	r5, #0
 8009b0a:	f104 0619 	add.w	r6, r4, #25
 8009b0e:	e7f5      	b.n	8009afc <_printf_i+0x220>
 8009b10:	0800c19f 	.word	0x0800c19f
 8009b14:	0800c1b0 	.word	0x0800c1b0

08009b18 <std>:
 8009b18:	2300      	movs	r3, #0
 8009b1a:	b510      	push	{r4, lr}
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b26:	6083      	str	r3, [r0, #8]
 8009b28:	8181      	strh	r1, [r0, #12]
 8009b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b2c:	81c2      	strh	r2, [r0, #14]
 8009b2e:	6183      	str	r3, [r0, #24]
 8009b30:	4619      	mov	r1, r3
 8009b32:	2208      	movs	r2, #8
 8009b34:	305c      	adds	r0, #92	@ 0x5c
 8009b36:	f000 f916 	bl	8009d66 <memset>
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b70 <std+0x58>)
 8009b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b74 <std+0x5c>)
 8009b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b42:	4b0d      	ldr	r3, [pc, #52]	@ (8009b78 <std+0x60>)
 8009b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b46:	4b0d      	ldr	r3, [pc, #52]	@ (8009b7c <std+0x64>)
 8009b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b80 <std+0x68>)
 8009b4c:	6224      	str	r4, [r4, #32]
 8009b4e:	429c      	cmp	r4, r3
 8009b50:	d006      	beq.n	8009b60 <std+0x48>
 8009b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b56:	4294      	cmp	r4, r2
 8009b58:	d002      	beq.n	8009b60 <std+0x48>
 8009b5a:	33d0      	adds	r3, #208	@ 0xd0
 8009b5c:	429c      	cmp	r4, r3
 8009b5e:	d105      	bne.n	8009b6c <std+0x54>
 8009b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b68:	f000 b98c 	b.w	8009e84 <__retarget_lock_init_recursive>
 8009b6c:	bd10      	pop	{r4, pc}
 8009b6e:	bf00      	nop
 8009b70:	08009ce1 	.word	0x08009ce1
 8009b74:	08009d03 	.word	0x08009d03
 8009b78:	08009d3b 	.word	0x08009d3b
 8009b7c:	08009d5f 	.word	0x08009d5f
 8009b80:	20000e14 	.word	0x20000e14

08009b84 <stdio_exit_handler>:
 8009b84:	4a02      	ldr	r2, [pc, #8]	@ (8009b90 <stdio_exit_handler+0xc>)
 8009b86:	4903      	ldr	r1, [pc, #12]	@ (8009b94 <stdio_exit_handler+0x10>)
 8009b88:	4803      	ldr	r0, [pc, #12]	@ (8009b98 <stdio_exit_handler+0x14>)
 8009b8a:	f000 b869 	b.w	8009c60 <_fwalk_sglue>
 8009b8e:	bf00      	nop
 8009b90:	20000104 	.word	0x20000104
 8009b94:	0800b7ed 	.word	0x0800b7ed
 8009b98:	20000114 	.word	0x20000114

08009b9c <cleanup_stdio>:
 8009b9c:	6841      	ldr	r1, [r0, #4]
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd0 <cleanup_stdio+0x34>)
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	b510      	push	{r4, lr}
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	d001      	beq.n	8009bac <cleanup_stdio+0x10>
 8009ba8:	f001 fe20 	bl	800b7ec <_fflush_r>
 8009bac:	68a1      	ldr	r1, [r4, #8]
 8009bae:	4b09      	ldr	r3, [pc, #36]	@ (8009bd4 <cleanup_stdio+0x38>)
 8009bb0:	4299      	cmp	r1, r3
 8009bb2:	d002      	beq.n	8009bba <cleanup_stdio+0x1e>
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f001 fe19 	bl	800b7ec <_fflush_r>
 8009bba:	68e1      	ldr	r1, [r4, #12]
 8009bbc:	4b06      	ldr	r3, [pc, #24]	@ (8009bd8 <cleanup_stdio+0x3c>)
 8009bbe:	4299      	cmp	r1, r3
 8009bc0:	d004      	beq.n	8009bcc <cleanup_stdio+0x30>
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc8:	f001 be10 	b.w	800b7ec <_fflush_r>
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	20000e14 	.word	0x20000e14
 8009bd4:	20000e7c 	.word	0x20000e7c
 8009bd8:	20000ee4 	.word	0x20000ee4

08009bdc <global_stdio_init.part.0>:
 8009bdc:	b510      	push	{r4, lr}
 8009bde:	4b0b      	ldr	r3, [pc, #44]	@ (8009c0c <global_stdio_init.part.0+0x30>)
 8009be0:	4c0b      	ldr	r4, [pc, #44]	@ (8009c10 <global_stdio_init.part.0+0x34>)
 8009be2:	4a0c      	ldr	r2, [pc, #48]	@ (8009c14 <global_stdio_init.part.0+0x38>)
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	4620      	mov	r0, r4
 8009be8:	2200      	movs	r2, #0
 8009bea:	2104      	movs	r1, #4
 8009bec:	f7ff ff94 	bl	8009b18 <std>
 8009bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	2109      	movs	r1, #9
 8009bf8:	f7ff ff8e 	bl	8009b18 <std>
 8009bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c00:	2202      	movs	r2, #2
 8009c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c06:	2112      	movs	r1, #18
 8009c08:	f7ff bf86 	b.w	8009b18 <std>
 8009c0c:	20000f4c 	.word	0x20000f4c
 8009c10:	20000e14 	.word	0x20000e14
 8009c14:	08009b85 	.word	0x08009b85

08009c18 <__sfp_lock_acquire>:
 8009c18:	4801      	ldr	r0, [pc, #4]	@ (8009c20 <__sfp_lock_acquire+0x8>)
 8009c1a:	f000 b934 	b.w	8009e86 <__retarget_lock_acquire_recursive>
 8009c1e:	bf00      	nop
 8009c20:	20000f55 	.word	0x20000f55

08009c24 <__sfp_lock_release>:
 8009c24:	4801      	ldr	r0, [pc, #4]	@ (8009c2c <__sfp_lock_release+0x8>)
 8009c26:	f000 b92f 	b.w	8009e88 <__retarget_lock_release_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	20000f55 	.word	0x20000f55

08009c30 <__sinit>:
 8009c30:	b510      	push	{r4, lr}
 8009c32:	4604      	mov	r4, r0
 8009c34:	f7ff fff0 	bl	8009c18 <__sfp_lock_acquire>
 8009c38:	6a23      	ldr	r3, [r4, #32]
 8009c3a:	b11b      	cbz	r3, 8009c44 <__sinit+0x14>
 8009c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c40:	f7ff bff0 	b.w	8009c24 <__sfp_lock_release>
 8009c44:	4b04      	ldr	r3, [pc, #16]	@ (8009c58 <__sinit+0x28>)
 8009c46:	6223      	str	r3, [r4, #32]
 8009c48:	4b04      	ldr	r3, [pc, #16]	@ (8009c5c <__sinit+0x2c>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1f5      	bne.n	8009c3c <__sinit+0xc>
 8009c50:	f7ff ffc4 	bl	8009bdc <global_stdio_init.part.0>
 8009c54:	e7f2      	b.n	8009c3c <__sinit+0xc>
 8009c56:	bf00      	nop
 8009c58:	08009b9d 	.word	0x08009b9d
 8009c5c:	20000f4c 	.word	0x20000f4c

08009c60 <_fwalk_sglue>:
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	4607      	mov	r7, r0
 8009c66:	4688      	mov	r8, r1
 8009c68:	4614      	mov	r4, r2
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c70:	f1b9 0901 	subs.w	r9, r9, #1
 8009c74:	d505      	bpl.n	8009c82 <_fwalk_sglue+0x22>
 8009c76:	6824      	ldr	r4, [r4, #0]
 8009c78:	2c00      	cmp	r4, #0
 8009c7a:	d1f7      	bne.n	8009c6c <_fwalk_sglue+0xc>
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d907      	bls.n	8009c98 <_fwalk_sglue+0x38>
 8009c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	d003      	beq.n	8009c98 <_fwalk_sglue+0x38>
 8009c90:	4629      	mov	r1, r5
 8009c92:	4638      	mov	r0, r7
 8009c94:	47c0      	blx	r8
 8009c96:	4306      	orrs	r6, r0
 8009c98:	3568      	adds	r5, #104	@ 0x68
 8009c9a:	e7e9      	b.n	8009c70 <_fwalk_sglue+0x10>

08009c9c <siprintf>:
 8009c9c:	b40e      	push	{r1, r2, r3}
 8009c9e:	b510      	push	{r4, lr}
 8009ca0:	b09d      	sub	sp, #116	@ 0x74
 8009ca2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009ca4:	9002      	str	r0, [sp, #8]
 8009ca6:	9006      	str	r0, [sp, #24]
 8009ca8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009cac:	480a      	ldr	r0, [pc, #40]	@ (8009cd8 <siprintf+0x3c>)
 8009cae:	9107      	str	r1, [sp, #28]
 8009cb0:	9104      	str	r1, [sp, #16]
 8009cb2:	490a      	ldr	r1, [pc, #40]	@ (8009cdc <siprintf+0x40>)
 8009cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb8:	9105      	str	r1, [sp, #20]
 8009cba:	2400      	movs	r4, #0
 8009cbc:	a902      	add	r1, sp, #8
 8009cbe:	6800      	ldr	r0, [r0, #0]
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009cc4:	f001 fc12 	bl	800b4ec <_svfiprintf_r>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	701c      	strb	r4, [r3, #0]
 8009ccc:	b01d      	add	sp, #116	@ 0x74
 8009cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd2:	b003      	add	sp, #12
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	20000110 	.word	0x20000110
 8009cdc:	ffff0208 	.word	0xffff0208

08009ce0 <__sread>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce8:	f000 f87e 	bl	8009de8 <_read_r>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	bfab      	itete	ge
 8009cf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8009cf4:	181b      	addge	r3, r3, r0
 8009cf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cfa:	bfac      	ite	ge
 8009cfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009cfe:	81a3      	strhlt	r3, [r4, #12]
 8009d00:	bd10      	pop	{r4, pc}

08009d02 <__swrite>:
 8009d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d06:	461f      	mov	r7, r3
 8009d08:	898b      	ldrh	r3, [r1, #12]
 8009d0a:	05db      	lsls	r3, r3, #23
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	4616      	mov	r6, r2
 8009d12:	d505      	bpl.n	8009d20 <__swrite+0x1e>
 8009d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d18:	2302      	movs	r3, #2
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f000 f852 	bl	8009dc4 <_lseek_r>
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d2a:	81a3      	strh	r3, [r4, #12]
 8009d2c:	4632      	mov	r2, r6
 8009d2e:	463b      	mov	r3, r7
 8009d30:	4628      	mov	r0, r5
 8009d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d36:	f000 b869 	b.w	8009e0c <_write_r>

08009d3a <__sseek>:
 8009d3a:	b510      	push	{r4, lr}
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d42:	f000 f83f 	bl	8009dc4 <_lseek_r>
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	bf15      	itete	ne
 8009d4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d56:	81a3      	strheq	r3, [r4, #12]
 8009d58:	bf18      	it	ne
 8009d5a:	81a3      	strhne	r3, [r4, #12]
 8009d5c:	bd10      	pop	{r4, pc}

08009d5e <__sclose>:
 8009d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d62:	f000 b81f 	b.w	8009da4 <_close_r>

08009d66 <memset>:
 8009d66:	4402      	add	r2, r0
 8009d68:	4603      	mov	r3, r0
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d100      	bne.n	8009d70 <memset+0xa>
 8009d6e:	4770      	bx	lr
 8009d70:	f803 1b01 	strb.w	r1, [r3], #1
 8009d74:	e7f9      	b.n	8009d6a <memset+0x4>

08009d76 <strncmp>:
 8009d76:	b510      	push	{r4, lr}
 8009d78:	b16a      	cbz	r2, 8009d96 <strncmp+0x20>
 8009d7a:	3901      	subs	r1, #1
 8009d7c:	1884      	adds	r4, r0, r2
 8009d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d82:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d103      	bne.n	8009d92 <strncmp+0x1c>
 8009d8a:	42a0      	cmp	r0, r4
 8009d8c:	d001      	beq.n	8009d92 <strncmp+0x1c>
 8009d8e:	2a00      	cmp	r2, #0
 8009d90:	d1f5      	bne.n	8009d7e <strncmp+0x8>
 8009d92:	1ad0      	subs	r0, r2, r3
 8009d94:	bd10      	pop	{r4, pc}
 8009d96:	4610      	mov	r0, r2
 8009d98:	e7fc      	b.n	8009d94 <strncmp+0x1e>
	...

08009d9c <_localeconv_r>:
 8009d9c:	4800      	ldr	r0, [pc, #0]	@ (8009da0 <_localeconv_r+0x4>)
 8009d9e:	4770      	bx	lr
 8009da0:	20000250 	.word	0x20000250

08009da4 <_close_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d06      	ldr	r5, [pc, #24]	@ (8009dc0 <_close_r+0x1c>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	602b      	str	r3, [r5, #0]
 8009db0:	f7f7 fdfa 	bl	80019a8 <_close>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_close_r+0x1a>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_close_r+0x1a>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	20000f50 	.word	0x20000f50

08009dc4 <_lseek_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4d07      	ldr	r5, [pc, #28]	@ (8009de4 <_lseek_r+0x20>)
 8009dc8:	4604      	mov	r4, r0
 8009dca:	4608      	mov	r0, r1
 8009dcc:	4611      	mov	r1, r2
 8009dce:	2200      	movs	r2, #0
 8009dd0:	602a      	str	r2, [r5, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f7f7 fe0f 	bl	80019f6 <_lseek>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d102      	bne.n	8009de2 <_lseek_r+0x1e>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	b103      	cbz	r3, 8009de2 <_lseek_r+0x1e>
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	20000f50 	.word	0x20000f50

08009de8 <_read_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d07      	ldr	r5, [pc, #28]	@ (8009e08 <_read_r+0x20>)
 8009dec:	4604      	mov	r4, r0
 8009dee:	4608      	mov	r0, r1
 8009df0:	4611      	mov	r1, r2
 8009df2:	2200      	movs	r2, #0
 8009df4:	602a      	str	r2, [r5, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f7f7 fd9d 	bl	8001936 <_read>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_read_r+0x1e>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_read_r+0x1e>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	20000f50 	.word	0x20000f50

08009e0c <_write_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d07      	ldr	r5, [pc, #28]	@ (8009e2c <_write_r+0x20>)
 8009e10:	4604      	mov	r4, r0
 8009e12:	4608      	mov	r0, r1
 8009e14:	4611      	mov	r1, r2
 8009e16:	2200      	movs	r2, #0
 8009e18:	602a      	str	r2, [r5, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f7f7 fda8 	bl	8001970 <_write>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	d102      	bne.n	8009e2a <_write_r+0x1e>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	b103      	cbz	r3, 8009e2a <_write_r+0x1e>
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	20000f50 	.word	0x20000f50

08009e30 <__errno>:
 8009e30:	4b01      	ldr	r3, [pc, #4]	@ (8009e38 <__errno+0x8>)
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	20000110 	.word	0x20000110

08009e3c <__libc_init_array>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8009e74 <__libc_init_array+0x38>)
 8009e40:	4c0d      	ldr	r4, [pc, #52]	@ (8009e78 <__libc_init_array+0x3c>)
 8009e42:	1b64      	subs	r4, r4, r5
 8009e44:	10a4      	asrs	r4, r4, #2
 8009e46:	2600      	movs	r6, #0
 8009e48:	42a6      	cmp	r6, r4
 8009e4a:	d109      	bne.n	8009e60 <__libc_init_array+0x24>
 8009e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8009e7c <__libc_init_array+0x40>)
 8009e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8009e80 <__libc_init_array+0x44>)
 8009e50:	f002 f86a 	bl	800bf28 <_init>
 8009e54:	1b64      	subs	r4, r4, r5
 8009e56:	10a4      	asrs	r4, r4, #2
 8009e58:	2600      	movs	r6, #0
 8009e5a:	42a6      	cmp	r6, r4
 8009e5c:	d105      	bne.n	8009e6a <__libc_init_array+0x2e>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e64:	4798      	blx	r3
 8009e66:	3601      	adds	r6, #1
 8009e68:	e7ee      	b.n	8009e48 <__libc_init_array+0xc>
 8009e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6e:	4798      	blx	r3
 8009e70:	3601      	adds	r6, #1
 8009e72:	e7f2      	b.n	8009e5a <__libc_init_array+0x1e>
 8009e74:	0800c408 	.word	0x0800c408
 8009e78:	0800c408 	.word	0x0800c408
 8009e7c:	0800c408 	.word	0x0800c408
 8009e80:	0800c40c 	.word	0x0800c40c

08009e84 <__retarget_lock_init_recursive>:
 8009e84:	4770      	bx	lr

08009e86 <__retarget_lock_acquire_recursive>:
 8009e86:	4770      	bx	lr

08009e88 <__retarget_lock_release_recursive>:
 8009e88:	4770      	bx	lr

08009e8a <quorem>:
 8009e8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8e:	6903      	ldr	r3, [r0, #16]
 8009e90:	690c      	ldr	r4, [r1, #16]
 8009e92:	42a3      	cmp	r3, r4
 8009e94:	4607      	mov	r7, r0
 8009e96:	db7e      	blt.n	8009f96 <quorem+0x10c>
 8009e98:	3c01      	subs	r4, #1
 8009e9a:	f101 0814 	add.w	r8, r1, #20
 8009e9e:	00a3      	lsls	r3, r4, #2
 8009ea0:	f100 0514 	add.w	r5, r0, #20
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ec0:	d32e      	bcc.n	8009f20 <quorem+0x96>
 8009ec2:	f04f 0a00 	mov.w	sl, #0
 8009ec6:	46c4      	mov	ip, r8
 8009ec8:	46ae      	mov	lr, r5
 8009eca:	46d3      	mov	fp, sl
 8009ecc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ed0:	b298      	uxth	r0, r3
 8009ed2:	fb06 a000 	mla	r0, r6, r0, sl
 8009ed6:	0c02      	lsrs	r2, r0, #16
 8009ed8:	0c1b      	lsrs	r3, r3, #16
 8009eda:	fb06 2303 	mla	r3, r6, r3, r2
 8009ede:	f8de 2000 	ldr.w	r2, [lr]
 8009ee2:	b280      	uxth	r0, r0
 8009ee4:	b292      	uxth	r2, r2
 8009ee6:	1a12      	subs	r2, r2, r0
 8009ee8:	445a      	add	r2, fp
 8009eea:	f8de 0000 	ldr.w	r0, [lr]
 8009eee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ef8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009efc:	b292      	uxth	r2, r2
 8009efe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f02:	45e1      	cmp	r9, ip
 8009f04:	f84e 2b04 	str.w	r2, [lr], #4
 8009f08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f0c:	d2de      	bcs.n	8009ecc <quorem+0x42>
 8009f0e:	9b00      	ldr	r3, [sp, #0]
 8009f10:	58eb      	ldr	r3, [r5, r3]
 8009f12:	b92b      	cbnz	r3, 8009f20 <quorem+0x96>
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	3b04      	subs	r3, #4
 8009f18:	429d      	cmp	r5, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	d32f      	bcc.n	8009f7e <quorem+0xf4>
 8009f1e:	613c      	str	r4, [r7, #16]
 8009f20:	4638      	mov	r0, r7
 8009f22:	f001 f97f 	bl	800b224 <__mcmp>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	db25      	blt.n	8009f76 <quorem+0xec>
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f32:	f8d1 c000 	ldr.w	ip, [r1]
 8009f36:	fa1f fe82 	uxth.w	lr, r2
 8009f3a:	fa1f f38c 	uxth.w	r3, ip
 8009f3e:	eba3 030e 	sub.w	r3, r3, lr
 8009f42:	4403      	add	r3, r0
 8009f44:	0c12      	lsrs	r2, r2, #16
 8009f46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f54:	45c1      	cmp	r9, r8
 8009f56:	f841 3b04 	str.w	r3, [r1], #4
 8009f5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f5e:	d2e6      	bcs.n	8009f2e <quorem+0xa4>
 8009f60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f68:	b922      	cbnz	r2, 8009f74 <quorem+0xea>
 8009f6a:	3b04      	subs	r3, #4
 8009f6c:	429d      	cmp	r5, r3
 8009f6e:	461a      	mov	r2, r3
 8009f70:	d30b      	bcc.n	8009f8a <quorem+0x100>
 8009f72:	613c      	str	r4, [r7, #16]
 8009f74:	3601      	adds	r6, #1
 8009f76:	4630      	mov	r0, r6
 8009f78:	b003      	add	sp, #12
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7e:	6812      	ldr	r2, [r2, #0]
 8009f80:	3b04      	subs	r3, #4
 8009f82:	2a00      	cmp	r2, #0
 8009f84:	d1cb      	bne.n	8009f1e <quorem+0x94>
 8009f86:	3c01      	subs	r4, #1
 8009f88:	e7c6      	b.n	8009f18 <quorem+0x8e>
 8009f8a:	6812      	ldr	r2, [r2, #0]
 8009f8c:	3b04      	subs	r3, #4
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	d1ef      	bne.n	8009f72 <quorem+0xe8>
 8009f92:	3c01      	subs	r4, #1
 8009f94:	e7ea      	b.n	8009f6c <quorem+0xe2>
 8009f96:	2000      	movs	r0, #0
 8009f98:	e7ee      	b.n	8009f78 <quorem+0xee>
 8009f9a:	0000      	movs	r0, r0
 8009f9c:	0000      	movs	r0, r0
	...

08009fa0 <_dtoa_r>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	69c7      	ldr	r7, [r0, #28]
 8009fa6:	b097      	sub	sp, #92	@ 0x5c
 8009fa8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009fac:	ec55 4b10 	vmov	r4, r5, d0
 8009fb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009fb2:	9107      	str	r1, [sp, #28]
 8009fb4:	4681      	mov	r9, r0
 8009fb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009fba:	b97f      	cbnz	r7, 8009fdc <_dtoa_r+0x3c>
 8009fbc:	2010      	movs	r0, #16
 8009fbe:	f000 fe09 	bl	800abd4 <malloc>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	f8c9 001c 	str.w	r0, [r9, #28]
 8009fc8:	b920      	cbnz	r0, 8009fd4 <_dtoa_r+0x34>
 8009fca:	4ba9      	ldr	r3, [pc, #676]	@ (800a270 <_dtoa_r+0x2d0>)
 8009fcc:	21ef      	movs	r1, #239	@ 0xef
 8009fce:	48a9      	ldr	r0, [pc, #676]	@ (800a274 <_dtoa_r+0x2d4>)
 8009fd0:	f001 fc6c 	bl	800b8ac <__assert_func>
 8009fd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009fd8:	6007      	str	r7, [r0, #0]
 8009fda:	60c7      	str	r7, [r0, #12]
 8009fdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009fe0:	6819      	ldr	r1, [r3, #0]
 8009fe2:	b159      	cbz	r1, 8009ffc <_dtoa_r+0x5c>
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	604a      	str	r2, [r1, #4]
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4093      	lsls	r3, r2
 8009fec:	608b      	str	r3, [r1, #8]
 8009fee:	4648      	mov	r0, r9
 8009ff0:	f000 fee6 	bl	800adc0 <_Bfree>
 8009ff4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	1e2b      	subs	r3, r5, #0
 8009ffe:	bfb9      	ittee	lt
 800a000:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a004:	9305      	strlt	r3, [sp, #20]
 800a006:	2300      	movge	r3, #0
 800a008:	6033      	strge	r3, [r6, #0]
 800a00a:	9f05      	ldr	r7, [sp, #20]
 800a00c:	4b9a      	ldr	r3, [pc, #616]	@ (800a278 <_dtoa_r+0x2d8>)
 800a00e:	bfbc      	itt	lt
 800a010:	2201      	movlt	r2, #1
 800a012:	6032      	strlt	r2, [r6, #0]
 800a014:	43bb      	bics	r3, r7
 800a016:	d112      	bne.n	800a03e <_dtoa_r+0x9e>
 800a018:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a01a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a024:	4323      	orrs	r3, r4
 800a026:	f000 855a 	beq.w	800aade <_dtoa_r+0xb3e>
 800a02a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a02c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a28c <_dtoa_r+0x2ec>
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 855c 	beq.w	800aaee <_dtoa_r+0xb4e>
 800a036:	f10a 0303 	add.w	r3, sl, #3
 800a03a:	f000 bd56 	b.w	800aaea <_dtoa_r+0xb4a>
 800a03e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a042:	2200      	movs	r2, #0
 800a044:	ec51 0b17 	vmov	r0, r1, d7
 800a048:	2300      	movs	r3, #0
 800a04a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a04e:	f7f6 fd43 	bl	8000ad8 <__aeabi_dcmpeq>
 800a052:	4680      	mov	r8, r0
 800a054:	b158      	cbz	r0, 800a06e <_dtoa_r+0xce>
 800a056:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a058:	2301      	movs	r3, #1
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a05e:	b113      	cbz	r3, 800a066 <_dtoa_r+0xc6>
 800a060:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a062:	4b86      	ldr	r3, [pc, #536]	@ (800a27c <_dtoa_r+0x2dc>)
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a290 <_dtoa_r+0x2f0>
 800a06a:	f000 bd40 	b.w	800aaee <_dtoa_r+0xb4e>
 800a06e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a072:	aa14      	add	r2, sp, #80	@ 0x50
 800a074:	a915      	add	r1, sp, #84	@ 0x54
 800a076:	4648      	mov	r0, r9
 800a078:	f001 f984 	bl	800b384 <__d2b>
 800a07c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a080:	9002      	str	r0, [sp, #8]
 800a082:	2e00      	cmp	r6, #0
 800a084:	d078      	beq.n	800a178 <_dtoa_r+0x1d8>
 800a086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a088:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a090:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a094:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a098:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a09c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	4b76      	ldr	r3, [pc, #472]	@ (800a280 <_dtoa_r+0x2e0>)
 800a0a6:	f7f6 f8f7 	bl	8000298 <__aeabi_dsub>
 800a0aa:	a36b      	add	r3, pc, #428	@ (adr r3, 800a258 <_dtoa_r+0x2b8>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 faaa 	bl	8000608 <__aeabi_dmul>
 800a0b4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a260 <_dtoa_r+0x2c0>)
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f7f6 f8ef 	bl	800029c <__adddf3>
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	f7f6 fa36 	bl	8000534 <__aeabi_i2d>
 800a0c8:	a367      	add	r3, pc, #412	@ (adr r3, 800a268 <_dtoa_r+0x2c8>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 fa9b 	bl	8000608 <__aeabi_dmul>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 f8df 	bl	800029c <__adddf3>
 800a0de:	4604      	mov	r4, r0
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	f7f6 fd41 	bl	8000b68 <__aeabi_d2iz>
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7f6 fcfc 	bl	8000aec <__aeabi_dcmplt>
 800a0f4:	b140      	cbz	r0, 800a108 <_dtoa_r+0x168>
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f7f6 fa1c 	bl	8000534 <__aeabi_i2d>
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	462b      	mov	r3, r5
 800a100:	f7f6 fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 800a104:	b900      	cbnz	r0, 800a108 <_dtoa_r+0x168>
 800a106:	3f01      	subs	r7, #1
 800a108:	2f16      	cmp	r7, #22
 800a10a:	d852      	bhi.n	800a1b2 <_dtoa_r+0x212>
 800a10c:	4b5d      	ldr	r3, [pc, #372]	@ (800a284 <_dtoa_r+0x2e4>)
 800a10e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a11a:	f7f6 fce7 	bl	8000aec <__aeabi_dcmplt>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d049      	beq.n	800a1b6 <_dtoa_r+0x216>
 800a122:	3f01      	subs	r7, #1
 800a124:	2300      	movs	r3, #0
 800a126:	9310      	str	r3, [sp, #64]	@ 0x40
 800a128:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a12a:	1b9b      	subs	r3, r3, r6
 800a12c:	1e5a      	subs	r2, r3, #1
 800a12e:	bf45      	ittet	mi
 800a130:	f1c3 0301 	rsbmi	r3, r3, #1
 800a134:	9300      	strmi	r3, [sp, #0]
 800a136:	2300      	movpl	r3, #0
 800a138:	2300      	movmi	r3, #0
 800a13a:	9206      	str	r2, [sp, #24]
 800a13c:	bf54      	ite	pl
 800a13e:	9300      	strpl	r3, [sp, #0]
 800a140:	9306      	strmi	r3, [sp, #24]
 800a142:	2f00      	cmp	r7, #0
 800a144:	db39      	blt.n	800a1ba <_dtoa_r+0x21a>
 800a146:	9b06      	ldr	r3, [sp, #24]
 800a148:	970d      	str	r7, [sp, #52]	@ 0x34
 800a14a:	443b      	add	r3, r7
 800a14c:	9306      	str	r3, [sp, #24]
 800a14e:	2300      	movs	r3, #0
 800a150:	9308      	str	r3, [sp, #32]
 800a152:	9b07      	ldr	r3, [sp, #28]
 800a154:	2b09      	cmp	r3, #9
 800a156:	d863      	bhi.n	800a220 <_dtoa_r+0x280>
 800a158:	2b05      	cmp	r3, #5
 800a15a:	bfc4      	itt	gt
 800a15c:	3b04      	subgt	r3, #4
 800a15e:	9307      	strgt	r3, [sp, #28]
 800a160:	9b07      	ldr	r3, [sp, #28]
 800a162:	f1a3 0302 	sub.w	r3, r3, #2
 800a166:	bfcc      	ite	gt
 800a168:	2400      	movgt	r4, #0
 800a16a:	2401      	movle	r4, #1
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d863      	bhi.n	800a238 <_dtoa_r+0x298>
 800a170:	e8df f003 	tbb	[pc, r3]
 800a174:	2b375452 	.word	0x2b375452
 800a178:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a17c:	441e      	add	r6, r3
 800a17e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a182:	2b20      	cmp	r3, #32
 800a184:	bfc1      	itttt	gt
 800a186:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a18a:	409f      	lslgt	r7, r3
 800a18c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a190:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a194:	bfd6      	itet	le
 800a196:	f1c3 0320 	rsble	r3, r3, #32
 800a19a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a19e:	fa04 f003 	lslle.w	r0, r4, r3
 800a1a2:	f7f6 f9b7 	bl	8000514 <__aeabi_ui2d>
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a1ac:	3e01      	subs	r6, #1
 800a1ae:	9212      	str	r2, [sp, #72]	@ 0x48
 800a1b0:	e776      	b.n	800a0a0 <_dtoa_r+0x100>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e7b7      	b.n	800a126 <_dtoa_r+0x186>
 800a1b6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a1b8:	e7b6      	b.n	800a128 <_dtoa_r+0x188>
 800a1ba:	9b00      	ldr	r3, [sp, #0]
 800a1bc:	1bdb      	subs	r3, r3, r7
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	427b      	negs	r3, r7
 800a1c2:	9308      	str	r3, [sp, #32]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a1c8:	e7c3      	b.n	800a152 <_dtoa_r+0x1b2>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1d0:	eb07 0b03 	add.w	fp, r7, r3
 800a1d4:	f10b 0301 	add.w	r3, fp, #1
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	9303      	str	r3, [sp, #12]
 800a1dc:	bfb8      	it	lt
 800a1de:	2301      	movlt	r3, #1
 800a1e0:	e006      	b.n	800a1f0 <_dtoa_r+0x250>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dd28      	ble.n	800a23e <_dtoa_r+0x29e>
 800a1ec:	469b      	mov	fp, r3
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	2204      	movs	r2, #4
 800a1f8:	f102 0514 	add.w	r5, r2, #20
 800a1fc:	429d      	cmp	r5, r3
 800a1fe:	d926      	bls.n	800a24e <_dtoa_r+0x2ae>
 800a200:	6041      	str	r1, [r0, #4]
 800a202:	4648      	mov	r0, r9
 800a204:	f000 fd9c 	bl	800ad40 <_Balloc>
 800a208:	4682      	mov	sl, r0
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d142      	bne.n	800a294 <_dtoa_r+0x2f4>
 800a20e:	4b1e      	ldr	r3, [pc, #120]	@ (800a288 <_dtoa_r+0x2e8>)
 800a210:	4602      	mov	r2, r0
 800a212:	f240 11af 	movw	r1, #431	@ 0x1af
 800a216:	e6da      	b.n	8009fce <_dtoa_r+0x2e>
 800a218:	2300      	movs	r3, #0
 800a21a:	e7e3      	b.n	800a1e4 <_dtoa_r+0x244>
 800a21c:	2300      	movs	r3, #0
 800a21e:	e7d5      	b.n	800a1cc <_dtoa_r+0x22c>
 800a220:	2401      	movs	r4, #1
 800a222:	2300      	movs	r3, #0
 800a224:	9307      	str	r3, [sp, #28]
 800a226:	9409      	str	r4, [sp, #36]	@ 0x24
 800a228:	f04f 3bff 	mov.w	fp, #4294967295
 800a22c:	2200      	movs	r2, #0
 800a22e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a232:	2312      	movs	r3, #18
 800a234:	920c      	str	r2, [sp, #48]	@ 0x30
 800a236:	e7db      	b.n	800a1f0 <_dtoa_r+0x250>
 800a238:	2301      	movs	r3, #1
 800a23a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23c:	e7f4      	b.n	800a228 <_dtoa_r+0x288>
 800a23e:	f04f 0b01 	mov.w	fp, #1
 800a242:	f8cd b00c 	str.w	fp, [sp, #12]
 800a246:	465b      	mov	r3, fp
 800a248:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a24c:	e7d0      	b.n	800a1f0 <_dtoa_r+0x250>
 800a24e:	3101      	adds	r1, #1
 800a250:	0052      	lsls	r2, r2, #1
 800a252:	e7d1      	b.n	800a1f8 <_dtoa_r+0x258>
 800a254:	f3af 8000 	nop.w
 800a258:	636f4361 	.word	0x636f4361
 800a25c:	3fd287a7 	.word	0x3fd287a7
 800a260:	8b60c8b3 	.word	0x8b60c8b3
 800a264:	3fc68a28 	.word	0x3fc68a28
 800a268:	509f79fb 	.word	0x509f79fb
 800a26c:	3fd34413 	.word	0x3fd34413
 800a270:	0800c1ce 	.word	0x0800c1ce
 800a274:	0800c1e5 	.word	0x0800c1e5
 800a278:	7ff00000 	.word	0x7ff00000
 800a27c:	0800c19e 	.word	0x0800c19e
 800a280:	3ff80000 	.word	0x3ff80000
 800a284:	0800c338 	.word	0x0800c338
 800a288:	0800c23d 	.word	0x0800c23d
 800a28c:	0800c1ca 	.word	0x0800c1ca
 800a290:	0800c19d 	.word	0x0800c19d
 800a294:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a298:	6018      	str	r0, [r3, #0]
 800a29a:	9b03      	ldr	r3, [sp, #12]
 800a29c:	2b0e      	cmp	r3, #14
 800a29e:	f200 80a1 	bhi.w	800a3e4 <_dtoa_r+0x444>
 800a2a2:	2c00      	cmp	r4, #0
 800a2a4:	f000 809e 	beq.w	800a3e4 <_dtoa_r+0x444>
 800a2a8:	2f00      	cmp	r7, #0
 800a2aa:	dd33      	ble.n	800a314 <_dtoa_r+0x374>
 800a2ac:	4b9c      	ldr	r3, [pc, #624]	@ (800a520 <_dtoa_r+0x580>)
 800a2ae:	f007 020f 	and.w	r2, r7, #15
 800a2b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2b6:	ed93 7b00 	vldr	d7, [r3]
 800a2ba:	05f8      	lsls	r0, r7, #23
 800a2bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a2c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a2c4:	d516      	bpl.n	800a2f4 <_dtoa_r+0x354>
 800a2c6:	4b97      	ldr	r3, [pc, #604]	@ (800a524 <_dtoa_r+0x584>)
 800a2c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a2cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2d0:	f7f6 fac4 	bl	800085c <__aeabi_ddiv>
 800a2d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2d8:	f004 040f 	and.w	r4, r4, #15
 800a2dc:	2603      	movs	r6, #3
 800a2de:	4d91      	ldr	r5, [pc, #580]	@ (800a524 <_dtoa_r+0x584>)
 800a2e0:	b954      	cbnz	r4, 800a2f8 <_dtoa_r+0x358>
 800a2e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2ea:	f7f6 fab7 	bl	800085c <__aeabi_ddiv>
 800a2ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2f2:	e028      	b.n	800a346 <_dtoa_r+0x3a6>
 800a2f4:	2602      	movs	r6, #2
 800a2f6:	e7f2      	b.n	800a2de <_dtoa_r+0x33e>
 800a2f8:	07e1      	lsls	r1, r4, #31
 800a2fa:	d508      	bpl.n	800a30e <_dtoa_r+0x36e>
 800a2fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a300:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a304:	f7f6 f980 	bl	8000608 <__aeabi_dmul>
 800a308:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a30c:	3601      	adds	r6, #1
 800a30e:	1064      	asrs	r4, r4, #1
 800a310:	3508      	adds	r5, #8
 800a312:	e7e5      	b.n	800a2e0 <_dtoa_r+0x340>
 800a314:	f000 80af 	beq.w	800a476 <_dtoa_r+0x4d6>
 800a318:	427c      	negs	r4, r7
 800a31a:	4b81      	ldr	r3, [pc, #516]	@ (800a520 <_dtoa_r+0x580>)
 800a31c:	4d81      	ldr	r5, [pc, #516]	@ (800a524 <_dtoa_r+0x584>)
 800a31e:	f004 020f 	and.w	r2, r4, #15
 800a322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a32e:	f7f6 f96b 	bl	8000608 <__aeabi_dmul>
 800a332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a336:	1124      	asrs	r4, r4, #4
 800a338:	2300      	movs	r3, #0
 800a33a:	2602      	movs	r6, #2
 800a33c:	2c00      	cmp	r4, #0
 800a33e:	f040 808f 	bne.w	800a460 <_dtoa_r+0x4c0>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1d3      	bne.n	800a2ee <_dtoa_r+0x34e>
 800a346:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a348:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8094 	beq.w	800a47a <_dtoa_r+0x4da>
 800a352:	4b75      	ldr	r3, [pc, #468]	@ (800a528 <_dtoa_r+0x588>)
 800a354:	2200      	movs	r2, #0
 800a356:	4620      	mov	r0, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	f7f6 fbc7 	bl	8000aec <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	f000 808b 	beq.w	800a47a <_dtoa_r+0x4da>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 8087 	beq.w	800a47a <_dtoa_r+0x4da>
 800a36c:	f1bb 0f00 	cmp.w	fp, #0
 800a370:	dd34      	ble.n	800a3dc <_dtoa_r+0x43c>
 800a372:	4620      	mov	r0, r4
 800a374:	4b6d      	ldr	r3, [pc, #436]	@ (800a52c <_dtoa_r+0x58c>)
 800a376:	2200      	movs	r2, #0
 800a378:	4629      	mov	r1, r5
 800a37a:	f7f6 f945 	bl	8000608 <__aeabi_dmul>
 800a37e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a382:	f107 38ff 	add.w	r8, r7, #4294967295
 800a386:	3601      	adds	r6, #1
 800a388:	465c      	mov	r4, fp
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7f6 f8d2 	bl	8000534 <__aeabi_i2d>
 800a390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a394:	f7f6 f938 	bl	8000608 <__aeabi_dmul>
 800a398:	4b65      	ldr	r3, [pc, #404]	@ (800a530 <_dtoa_r+0x590>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	f7f5 ff7e 	bl	800029c <__adddf3>
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a3a6:	2c00      	cmp	r4, #0
 800a3a8:	d16a      	bne.n	800a480 <_dtoa_r+0x4e0>
 800a3aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ae:	4b61      	ldr	r3, [pc, #388]	@ (800a534 <_dtoa_r+0x594>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f7f5 ff71 	bl	8000298 <__aeabi_dsub>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3be:	462a      	mov	r2, r5
 800a3c0:	4633      	mov	r3, r6
 800a3c2:	f7f6 fbb1 	bl	8000b28 <__aeabi_dcmpgt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	f040 8298 	bne.w	800a8fc <_dtoa_r+0x95c>
 800a3cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3d0:	462a      	mov	r2, r5
 800a3d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a3d6:	f7f6 fb89 	bl	8000aec <__aeabi_dcmplt>
 800a3da:	bb38      	cbnz	r0, 800a42c <_dtoa_r+0x48c>
 800a3dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a3e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f2c0 8157 	blt.w	800a69a <_dtoa_r+0x6fa>
 800a3ec:	2f0e      	cmp	r7, #14
 800a3ee:	f300 8154 	bgt.w	800a69a <_dtoa_r+0x6fa>
 800a3f2:	4b4b      	ldr	r3, [pc, #300]	@ (800a520 <_dtoa_r+0x580>)
 800a3f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3f8:	ed93 7b00 	vldr	d7, [r3]
 800a3fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	ed8d 7b00 	vstr	d7, [sp]
 800a404:	f280 80e5 	bge.w	800a5d2 <_dtoa_r+0x632>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f300 80e1 	bgt.w	800a5d2 <_dtoa_r+0x632>
 800a410:	d10c      	bne.n	800a42c <_dtoa_r+0x48c>
 800a412:	4b48      	ldr	r3, [pc, #288]	@ (800a534 <_dtoa_r+0x594>)
 800a414:	2200      	movs	r2, #0
 800a416:	ec51 0b17 	vmov	r0, r1, d7
 800a41a:	f7f6 f8f5 	bl	8000608 <__aeabi_dmul>
 800a41e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a422:	f7f6 fb77 	bl	8000b14 <__aeabi_dcmpge>
 800a426:	2800      	cmp	r0, #0
 800a428:	f000 8266 	beq.w	800a8f8 <_dtoa_r+0x958>
 800a42c:	2400      	movs	r4, #0
 800a42e:	4625      	mov	r5, r4
 800a430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a432:	4656      	mov	r6, sl
 800a434:	ea6f 0803 	mvn.w	r8, r3
 800a438:	2700      	movs	r7, #0
 800a43a:	4621      	mov	r1, r4
 800a43c:	4648      	mov	r0, r9
 800a43e:	f000 fcbf 	bl	800adc0 <_Bfree>
 800a442:	2d00      	cmp	r5, #0
 800a444:	f000 80bd 	beq.w	800a5c2 <_dtoa_r+0x622>
 800a448:	b12f      	cbz	r7, 800a456 <_dtoa_r+0x4b6>
 800a44a:	42af      	cmp	r7, r5
 800a44c:	d003      	beq.n	800a456 <_dtoa_r+0x4b6>
 800a44e:	4639      	mov	r1, r7
 800a450:	4648      	mov	r0, r9
 800a452:	f000 fcb5 	bl	800adc0 <_Bfree>
 800a456:	4629      	mov	r1, r5
 800a458:	4648      	mov	r0, r9
 800a45a:	f000 fcb1 	bl	800adc0 <_Bfree>
 800a45e:	e0b0      	b.n	800a5c2 <_dtoa_r+0x622>
 800a460:	07e2      	lsls	r2, r4, #31
 800a462:	d505      	bpl.n	800a470 <_dtoa_r+0x4d0>
 800a464:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a468:	f7f6 f8ce 	bl	8000608 <__aeabi_dmul>
 800a46c:	3601      	adds	r6, #1
 800a46e:	2301      	movs	r3, #1
 800a470:	1064      	asrs	r4, r4, #1
 800a472:	3508      	adds	r5, #8
 800a474:	e762      	b.n	800a33c <_dtoa_r+0x39c>
 800a476:	2602      	movs	r6, #2
 800a478:	e765      	b.n	800a346 <_dtoa_r+0x3a6>
 800a47a:	9c03      	ldr	r4, [sp, #12]
 800a47c:	46b8      	mov	r8, r7
 800a47e:	e784      	b.n	800a38a <_dtoa_r+0x3ea>
 800a480:	4b27      	ldr	r3, [pc, #156]	@ (800a520 <_dtoa_r+0x580>)
 800a482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a484:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a48c:	4454      	add	r4, sl
 800a48e:	2900      	cmp	r1, #0
 800a490:	d054      	beq.n	800a53c <_dtoa_r+0x59c>
 800a492:	4929      	ldr	r1, [pc, #164]	@ (800a538 <_dtoa_r+0x598>)
 800a494:	2000      	movs	r0, #0
 800a496:	f7f6 f9e1 	bl	800085c <__aeabi_ddiv>
 800a49a:	4633      	mov	r3, r6
 800a49c:	462a      	mov	r2, r5
 800a49e:	f7f5 fefb 	bl	8000298 <__aeabi_dsub>
 800a4a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a4a6:	4656      	mov	r6, sl
 800a4a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ac:	f7f6 fb5c 	bl	8000b68 <__aeabi_d2iz>
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	f7f6 f83f 	bl	8000534 <__aeabi_i2d>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4be:	f7f5 feeb 	bl	8000298 <__aeabi_dsub>
 800a4c2:	3530      	adds	r5, #48	@ 0x30
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4cc:	f806 5b01 	strb.w	r5, [r6], #1
 800a4d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4d4:	f7f6 fb0a 	bl	8000aec <__aeabi_dcmplt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d172      	bne.n	800a5c2 <_dtoa_r+0x622>
 800a4dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e0:	4911      	ldr	r1, [pc, #68]	@ (800a528 <_dtoa_r+0x588>)
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	f7f5 fed8 	bl	8000298 <__aeabi_dsub>
 800a4e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4ec:	f7f6 fafe 	bl	8000aec <__aeabi_dcmplt>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	f040 80b4 	bne.w	800a65e <_dtoa_r+0x6be>
 800a4f6:	42a6      	cmp	r6, r4
 800a4f8:	f43f af70 	beq.w	800a3dc <_dtoa_r+0x43c>
 800a4fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a500:	4b0a      	ldr	r3, [pc, #40]	@ (800a52c <_dtoa_r+0x58c>)
 800a502:	2200      	movs	r2, #0
 800a504:	f7f6 f880 	bl	8000608 <__aeabi_dmul>
 800a508:	4b08      	ldr	r3, [pc, #32]	@ (800a52c <_dtoa_r+0x58c>)
 800a50a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a50e:	2200      	movs	r2, #0
 800a510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a514:	f7f6 f878 	bl	8000608 <__aeabi_dmul>
 800a518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a51c:	e7c4      	b.n	800a4a8 <_dtoa_r+0x508>
 800a51e:	bf00      	nop
 800a520:	0800c338 	.word	0x0800c338
 800a524:	0800c310 	.word	0x0800c310
 800a528:	3ff00000 	.word	0x3ff00000
 800a52c:	40240000 	.word	0x40240000
 800a530:	401c0000 	.word	0x401c0000
 800a534:	40140000 	.word	0x40140000
 800a538:	3fe00000 	.word	0x3fe00000
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	f7f6 f862 	bl	8000608 <__aeabi_dmul>
 800a544:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a548:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a54a:	4656      	mov	r6, sl
 800a54c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a550:	f7f6 fb0a 	bl	8000b68 <__aeabi_d2iz>
 800a554:	4605      	mov	r5, r0
 800a556:	f7f5 ffed 	bl	8000534 <__aeabi_i2d>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a562:	f7f5 fe99 	bl	8000298 <__aeabi_dsub>
 800a566:	3530      	adds	r5, #48	@ 0x30
 800a568:	f806 5b01 	strb.w	r5, [r6], #1
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	42a6      	cmp	r6, r4
 800a572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a576:	f04f 0200 	mov.w	r2, #0
 800a57a:	d124      	bne.n	800a5c6 <_dtoa_r+0x626>
 800a57c:	4baf      	ldr	r3, [pc, #700]	@ (800a83c <_dtoa_r+0x89c>)
 800a57e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a582:	f7f5 fe8b 	bl	800029c <__adddf3>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a58e:	f7f6 facb 	bl	8000b28 <__aeabi_dcmpgt>
 800a592:	2800      	cmp	r0, #0
 800a594:	d163      	bne.n	800a65e <_dtoa_r+0x6be>
 800a596:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a59a:	49a8      	ldr	r1, [pc, #672]	@ (800a83c <_dtoa_r+0x89c>)
 800a59c:	2000      	movs	r0, #0
 800a59e:	f7f5 fe7b 	bl	8000298 <__aeabi_dsub>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5aa:	f7f6 fa9f 	bl	8000aec <__aeabi_dcmplt>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f43f af14 	beq.w	800a3dc <_dtoa_r+0x43c>
 800a5b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a5b6:	1e73      	subs	r3, r6, #1
 800a5b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5be:	2b30      	cmp	r3, #48	@ 0x30
 800a5c0:	d0f8      	beq.n	800a5b4 <_dtoa_r+0x614>
 800a5c2:	4647      	mov	r7, r8
 800a5c4:	e03b      	b.n	800a63e <_dtoa_r+0x69e>
 800a5c6:	4b9e      	ldr	r3, [pc, #632]	@ (800a840 <_dtoa_r+0x8a0>)
 800a5c8:	f7f6 f81e 	bl	8000608 <__aeabi_dmul>
 800a5cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5d0:	e7bc      	b.n	800a54c <_dtoa_r+0x5ac>
 800a5d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a5d6:	4656      	mov	r6, sl
 800a5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5dc:	4620      	mov	r0, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f7f6 f93c 	bl	800085c <__aeabi_ddiv>
 800a5e4:	f7f6 fac0 	bl	8000b68 <__aeabi_d2iz>
 800a5e8:	4680      	mov	r8, r0
 800a5ea:	f7f5 ffa3 	bl	8000534 <__aeabi_i2d>
 800a5ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5f2:	f7f6 f809 	bl	8000608 <__aeabi_dmul>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a602:	f7f5 fe49 	bl	8000298 <__aeabi_dsub>
 800a606:	f806 4b01 	strb.w	r4, [r6], #1
 800a60a:	9d03      	ldr	r5, [sp, #12]
 800a60c:	eba6 040a 	sub.w	r4, r6, sl
 800a610:	42a5      	cmp	r5, r4
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	d133      	bne.n	800a680 <_dtoa_r+0x6e0>
 800a618:	f7f5 fe40 	bl	800029c <__adddf3>
 800a61c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a620:	4604      	mov	r4, r0
 800a622:	460d      	mov	r5, r1
 800a624:	f7f6 fa80 	bl	8000b28 <__aeabi_dcmpgt>
 800a628:	b9c0      	cbnz	r0, 800a65c <_dtoa_r+0x6bc>
 800a62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f6 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 800a636:	b110      	cbz	r0, 800a63e <_dtoa_r+0x69e>
 800a638:	f018 0f01 	tst.w	r8, #1
 800a63c:	d10e      	bne.n	800a65c <_dtoa_r+0x6bc>
 800a63e:	9902      	ldr	r1, [sp, #8]
 800a640:	4648      	mov	r0, r9
 800a642:	f000 fbbd 	bl	800adc0 <_Bfree>
 800a646:	2300      	movs	r3, #0
 800a648:	7033      	strb	r3, [r6, #0]
 800a64a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a64c:	3701      	adds	r7, #1
 800a64e:	601f      	str	r7, [r3, #0]
 800a650:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 824b 	beq.w	800aaee <_dtoa_r+0xb4e>
 800a658:	601e      	str	r6, [r3, #0]
 800a65a:	e248      	b.n	800aaee <_dtoa_r+0xb4e>
 800a65c:	46b8      	mov	r8, r7
 800a65e:	4633      	mov	r3, r6
 800a660:	461e      	mov	r6, r3
 800a662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a666:	2a39      	cmp	r2, #57	@ 0x39
 800a668:	d106      	bne.n	800a678 <_dtoa_r+0x6d8>
 800a66a:	459a      	cmp	sl, r3
 800a66c:	d1f8      	bne.n	800a660 <_dtoa_r+0x6c0>
 800a66e:	2230      	movs	r2, #48	@ 0x30
 800a670:	f108 0801 	add.w	r8, r8, #1
 800a674:	f88a 2000 	strb.w	r2, [sl]
 800a678:	781a      	ldrb	r2, [r3, #0]
 800a67a:	3201      	adds	r2, #1
 800a67c:	701a      	strb	r2, [r3, #0]
 800a67e:	e7a0      	b.n	800a5c2 <_dtoa_r+0x622>
 800a680:	4b6f      	ldr	r3, [pc, #444]	@ (800a840 <_dtoa_r+0x8a0>)
 800a682:	2200      	movs	r2, #0
 800a684:	f7f5 ffc0 	bl	8000608 <__aeabi_dmul>
 800a688:	2200      	movs	r2, #0
 800a68a:	2300      	movs	r3, #0
 800a68c:	4604      	mov	r4, r0
 800a68e:	460d      	mov	r5, r1
 800a690:	f7f6 fa22 	bl	8000ad8 <__aeabi_dcmpeq>
 800a694:	2800      	cmp	r0, #0
 800a696:	d09f      	beq.n	800a5d8 <_dtoa_r+0x638>
 800a698:	e7d1      	b.n	800a63e <_dtoa_r+0x69e>
 800a69a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	f000 80ea 	beq.w	800a876 <_dtoa_r+0x8d6>
 800a6a2:	9a07      	ldr	r2, [sp, #28]
 800a6a4:	2a01      	cmp	r2, #1
 800a6a6:	f300 80cd 	bgt.w	800a844 <_dtoa_r+0x8a4>
 800a6aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	f000 80c1 	beq.w	800a834 <_dtoa_r+0x894>
 800a6b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a6b6:	9c08      	ldr	r4, [sp, #32]
 800a6b8:	9e00      	ldr	r6, [sp, #0]
 800a6ba:	9a00      	ldr	r2, [sp, #0]
 800a6bc:	441a      	add	r2, r3
 800a6be:	9200      	str	r2, [sp, #0]
 800a6c0:	9a06      	ldr	r2, [sp, #24]
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	441a      	add	r2, r3
 800a6c6:	4648      	mov	r0, r9
 800a6c8:	9206      	str	r2, [sp, #24]
 800a6ca:	f000 fc2d 	bl	800af28 <__i2b>
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	b166      	cbz	r6, 800a6ec <_dtoa_r+0x74c>
 800a6d2:	9b06      	ldr	r3, [sp, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd09      	ble.n	800a6ec <_dtoa_r+0x74c>
 800a6d8:	42b3      	cmp	r3, r6
 800a6da:	9a00      	ldr	r2, [sp, #0]
 800a6dc:	bfa8      	it	ge
 800a6de:	4633      	movge	r3, r6
 800a6e0:	1ad2      	subs	r2, r2, r3
 800a6e2:	9200      	str	r2, [sp, #0]
 800a6e4:	9a06      	ldr	r2, [sp, #24]
 800a6e6:	1af6      	subs	r6, r6, r3
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	9306      	str	r3, [sp, #24]
 800a6ec:	9b08      	ldr	r3, [sp, #32]
 800a6ee:	b30b      	cbz	r3, 800a734 <_dtoa_r+0x794>
 800a6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 80c6 	beq.w	800a884 <_dtoa_r+0x8e4>
 800a6f8:	2c00      	cmp	r4, #0
 800a6fa:	f000 80c0 	beq.w	800a87e <_dtoa_r+0x8de>
 800a6fe:	4629      	mov	r1, r5
 800a700:	4622      	mov	r2, r4
 800a702:	4648      	mov	r0, r9
 800a704:	f000 fcc8 	bl	800b098 <__pow5mult>
 800a708:	9a02      	ldr	r2, [sp, #8]
 800a70a:	4601      	mov	r1, r0
 800a70c:	4605      	mov	r5, r0
 800a70e:	4648      	mov	r0, r9
 800a710:	f000 fc20 	bl	800af54 <__multiply>
 800a714:	9902      	ldr	r1, [sp, #8]
 800a716:	4680      	mov	r8, r0
 800a718:	4648      	mov	r0, r9
 800a71a:	f000 fb51 	bl	800adc0 <_Bfree>
 800a71e:	9b08      	ldr	r3, [sp, #32]
 800a720:	1b1b      	subs	r3, r3, r4
 800a722:	9308      	str	r3, [sp, #32]
 800a724:	f000 80b1 	beq.w	800a88a <_dtoa_r+0x8ea>
 800a728:	9a08      	ldr	r2, [sp, #32]
 800a72a:	4641      	mov	r1, r8
 800a72c:	4648      	mov	r0, r9
 800a72e:	f000 fcb3 	bl	800b098 <__pow5mult>
 800a732:	9002      	str	r0, [sp, #8]
 800a734:	2101      	movs	r1, #1
 800a736:	4648      	mov	r0, r9
 800a738:	f000 fbf6 	bl	800af28 <__i2b>
 800a73c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a73e:	4604      	mov	r4, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 81d8 	beq.w	800aaf6 <_dtoa_r+0xb56>
 800a746:	461a      	mov	r2, r3
 800a748:	4601      	mov	r1, r0
 800a74a:	4648      	mov	r0, r9
 800a74c:	f000 fca4 	bl	800b098 <__pow5mult>
 800a750:	9b07      	ldr	r3, [sp, #28]
 800a752:	2b01      	cmp	r3, #1
 800a754:	4604      	mov	r4, r0
 800a756:	f300 809f 	bgt.w	800a898 <_dtoa_r+0x8f8>
 800a75a:	9b04      	ldr	r3, [sp, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f040 8097 	bne.w	800a890 <_dtoa_r+0x8f0>
 800a762:	9b05      	ldr	r3, [sp, #20]
 800a764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f040 8093 	bne.w	800a894 <_dtoa_r+0x8f4>
 800a76e:	9b05      	ldr	r3, [sp, #20]
 800a770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a774:	0d1b      	lsrs	r3, r3, #20
 800a776:	051b      	lsls	r3, r3, #20
 800a778:	b133      	cbz	r3, 800a788 <_dtoa_r+0x7e8>
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	3301      	adds	r3, #1
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	9b06      	ldr	r3, [sp, #24]
 800a782:	3301      	adds	r3, #1
 800a784:	9306      	str	r3, [sp, #24]
 800a786:	2301      	movs	r3, #1
 800a788:	9308      	str	r3, [sp, #32]
 800a78a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 81b8 	beq.w	800ab02 <_dtoa_r+0xb62>
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a798:	6918      	ldr	r0, [r3, #16]
 800a79a:	f000 fb79 	bl	800ae90 <__hi0bits>
 800a79e:	f1c0 0020 	rsb	r0, r0, #32
 800a7a2:	9b06      	ldr	r3, [sp, #24]
 800a7a4:	4418      	add	r0, r3
 800a7a6:	f010 001f 	ands.w	r0, r0, #31
 800a7aa:	f000 8082 	beq.w	800a8b2 <_dtoa_r+0x912>
 800a7ae:	f1c0 0320 	rsb	r3, r0, #32
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	dd73      	ble.n	800a89e <_dtoa_r+0x8fe>
 800a7b6:	9b00      	ldr	r3, [sp, #0]
 800a7b8:	f1c0 001c 	rsb	r0, r0, #28
 800a7bc:	4403      	add	r3, r0
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	9b06      	ldr	r3, [sp, #24]
 800a7c2:	4403      	add	r3, r0
 800a7c4:	4406      	add	r6, r0
 800a7c6:	9306      	str	r3, [sp, #24]
 800a7c8:	9b00      	ldr	r3, [sp, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dd05      	ble.n	800a7da <_dtoa_r+0x83a>
 800a7ce:	9902      	ldr	r1, [sp, #8]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4648      	mov	r0, r9
 800a7d4:	f000 fcba 	bl	800b14c <__lshift>
 800a7d8:	9002      	str	r0, [sp, #8]
 800a7da:	9b06      	ldr	r3, [sp, #24]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dd05      	ble.n	800a7ec <_dtoa_r+0x84c>
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	f000 fcb1 	bl	800b14c <__lshift>
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d061      	beq.n	800a8b6 <_dtoa_r+0x916>
 800a7f2:	9802      	ldr	r0, [sp, #8]
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	f000 fd15 	bl	800b224 <__mcmp>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	da5b      	bge.n	800a8b6 <_dtoa_r+0x916>
 800a7fe:	2300      	movs	r3, #0
 800a800:	9902      	ldr	r1, [sp, #8]
 800a802:	220a      	movs	r2, #10
 800a804:	4648      	mov	r0, r9
 800a806:	f000 fafd 	bl	800ae04 <__multadd>
 800a80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a80c:	9002      	str	r0, [sp, #8]
 800a80e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 8177 	beq.w	800ab06 <_dtoa_r+0xb66>
 800a818:	4629      	mov	r1, r5
 800a81a:	2300      	movs	r3, #0
 800a81c:	220a      	movs	r2, #10
 800a81e:	4648      	mov	r0, r9
 800a820:	f000 faf0 	bl	800ae04 <__multadd>
 800a824:	f1bb 0f00 	cmp.w	fp, #0
 800a828:	4605      	mov	r5, r0
 800a82a:	dc6f      	bgt.n	800a90c <_dtoa_r+0x96c>
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	dc49      	bgt.n	800a8c6 <_dtoa_r+0x926>
 800a832:	e06b      	b.n	800a90c <_dtoa_r+0x96c>
 800a834:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a836:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a83a:	e73c      	b.n	800a6b6 <_dtoa_r+0x716>
 800a83c:	3fe00000 	.word	0x3fe00000
 800a840:	40240000 	.word	0x40240000
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	1e5c      	subs	r4, r3, #1
 800a848:	9b08      	ldr	r3, [sp, #32]
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	db09      	blt.n	800a862 <_dtoa_r+0x8c2>
 800a84e:	1b1c      	subs	r4, r3, r4
 800a850:	9b03      	ldr	r3, [sp, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	f6bf af30 	bge.w	800a6b8 <_dtoa_r+0x718>
 800a858:	9b00      	ldr	r3, [sp, #0]
 800a85a:	9a03      	ldr	r2, [sp, #12]
 800a85c:	1a9e      	subs	r6, r3, r2
 800a85e:	2300      	movs	r3, #0
 800a860:	e72b      	b.n	800a6ba <_dtoa_r+0x71a>
 800a862:	9b08      	ldr	r3, [sp, #32]
 800a864:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a866:	9408      	str	r4, [sp, #32]
 800a868:	1ae3      	subs	r3, r4, r3
 800a86a:	441a      	add	r2, r3
 800a86c:	9e00      	ldr	r6, [sp, #0]
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	920d      	str	r2, [sp, #52]	@ 0x34
 800a872:	2400      	movs	r4, #0
 800a874:	e721      	b.n	800a6ba <_dtoa_r+0x71a>
 800a876:	9c08      	ldr	r4, [sp, #32]
 800a878:	9e00      	ldr	r6, [sp, #0]
 800a87a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a87c:	e728      	b.n	800a6d0 <_dtoa_r+0x730>
 800a87e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a882:	e751      	b.n	800a728 <_dtoa_r+0x788>
 800a884:	9a08      	ldr	r2, [sp, #32]
 800a886:	9902      	ldr	r1, [sp, #8]
 800a888:	e750      	b.n	800a72c <_dtoa_r+0x78c>
 800a88a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a88e:	e751      	b.n	800a734 <_dtoa_r+0x794>
 800a890:	2300      	movs	r3, #0
 800a892:	e779      	b.n	800a788 <_dtoa_r+0x7e8>
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	e777      	b.n	800a788 <_dtoa_r+0x7e8>
 800a898:	2300      	movs	r3, #0
 800a89a:	9308      	str	r3, [sp, #32]
 800a89c:	e779      	b.n	800a792 <_dtoa_r+0x7f2>
 800a89e:	d093      	beq.n	800a7c8 <_dtoa_r+0x828>
 800a8a0:	9a00      	ldr	r2, [sp, #0]
 800a8a2:	331c      	adds	r3, #28
 800a8a4:	441a      	add	r2, r3
 800a8a6:	9200      	str	r2, [sp, #0]
 800a8a8:	9a06      	ldr	r2, [sp, #24]
 800a8aa:	441a      	add	r2, r3
 800a8ac:	441e      	add	r6, r3
 800a8ae:	9206      	str	r2, [sp, #24]
 800a8b0:	e78a      	b.n	800a7c8 <_dtoa_r+0x828>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	e7f4      	b.n	800a8a0 <_dtoa_r+0x900>
 800a8b6:	9b03      	ldr	r3, [sp, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	46b8      	mov	r8, r7
 800a8bc:	dc20      	bgt.n	800a900 <_dtoa_r+0x960>
 800a8be:	469b      	mov	fp, r3
 800a8c0:	9b07      	ldr	r3, [sp, #28]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	dd1e      	ble.n	800a904 <_dtoa_r+0x964>
 800a8c6:	f1bb 0f00 	cmp.w	fp, #0
 800a8ca:	f47f adb1 	bne.w	800a430 <_dtoa_r+0x490>
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	465b      	mov	r3, fp
 800a8d2:	2205      	movs	r2, #5
 800a8d4:	4648      	mov	r0, r9
 800a8d6:	f000 fa95 	bl	800ae04 <__multadd>
 800a8da:	4601      	mov	r1, r0
 800a8dc:	4604      	mov	r4, r0
 800a8de:	9802      	ldr	r0, [sp, #8]
 800a8e0:	f000 fca0 	bl	800b224 <__mcmp>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	f77f ada3 	ble.w	800a430 <_dtoa_r+0x490>
 800a8ea:	4656      	mov	r6, sl
 800a8ec:	2331      	movs	r3, #49	@ 0x31
 800a8ee:	f806 3b01 	strb.w	r3, [r6], #1
 800a8f2:	f108 0801 	add.w	r8, r8, #1
 800a8f6:	e59f      	b.n	800a438 <_dtoa_r+0x498>
 800a8f8:	9c03      	ldr	r4, [sp, #12]
 800a8fa:	46b8      	mov	r8, r7
 800a8fc:	4625      	mov	r5, r4
 800a8fe:	e7f4      	b.n	800a8ea <_dtoa_r+0x94a>
 800a900:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a906:	2b00      	cmp	r3, #0
 800a908:	f000 8101 	beq.w	800ab0e <_dtoa_r+0xb6e>
 800a90c:	2e00      	cmp	r6, #0
 800a90e:	dd05      	ble.n	800a91c <_dtoa_r+0x97c>
 800a910:	4629      	mov	r1, r5
 800a912:	4632      	mov	r2, r6
 800a914:	4648      	mov	r0, r9
 800a916:	f000 fc19 	bl	800b14c <__lshift>
 800a91a:	4605      	mov	r5, r0
 800a91c:	9b08      	ldr	r3, [sp, #32]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d05c      	beq.n	800a9dc <_dtoa_r+0xa3c>
 800a922:	6869      	ldr	r1, [r5, #4]
 800a924:	4648      	mov	r0, r9
 800a926:	f000 fa0b 	bl	800ad40 <_Balloc>
 800a92a:	4606      	mov	r6, r0
 800a92c:	b928      	cbnz	r0, 800a93a <_dtoa_r+0x99a>
 800a92e:	4b82      	ldr	r3, [pc, #520]	@ (800ab38 <_dtoa_r+0xb98>)
 800a930:	4602      	mov	r2, r0
 800a932:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a936:	f7ff bb4a 	b.w	8009fce <_dtoa_r+0x2e>
 800a93a:	692a      	ldr	r2, [r5, #16]
 800a93c:	3202      	adds	r2, #2
 800a93e:	0092      	lsls	r2, r2, #2
 800a940:	f105 010c 	add.w	r1, r5, #12
 800a944:	300c      	adds	r0, #12
 800a946:	f000 ffa3 	bl	800b890 <memcpy>
 800a94a:	2201      	movs	r2, #1
 800a94c:	4631      	mov	r1, r6
 800a94e:	4648      	mov	r0, r9
 800a950:	f000 fbfc 	bl	800b14c <__lshift>
 800a954:	f10a 0301 	add.w	r3, sl, #1
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	eb0a 030b 	add.w	r3, sl, fp
 800a95e:	9308      	str	r3, [sp, #32]
 800a960:	9b04      	ldr	r3, [sp, #16]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	462f      	mov	r7, r5
 800a968:	9306      	str	r3, [sp, #24]
 800a96a:	4605      	mov	r5, r0
 800a96c:	9b00      	ldr	r3, [sp, #0]
 800a96e:	9802      	ldr	r0, [sp, #8]
 800a970:	4621      	mov	r1, r4
 800a972:	f103 3bff 	add.w	fp, r3, #4294967295
 800a976:	f7ff fa88 	bl	8009e8a <quorem>
 800a97a:	4603      	mov	r3, r0
 800a97c:	3330      	adds	r3, #48	@ 0x30
 800a97e:	9003      	str	r0, [sp, #12]
 800a980:	4639      	mov	r1, r7
 800a982:	9802      	ldr	r0, [sp, #8]
 800a984:	9309      	str	r3, [sp, #36]	@ 0x24
 800a986:	f000 fc4d 	bl	800b224 <__mcmp>
 800a98a:	462a      	mov	r2, r5
 800a98c:	9004      	str	r0, [sp, #16]
 800a98e:	4621      	mov	r1, r4
 800a990:	4648      	mov	r0, r9
 800a992:	f000 fc63 	bl	800b25c <__mdiff>
 800a996:	68c2      	ldr	r2, [r0, #12]
 800a998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99a:	4606      	mov	r6, r0
 800a99c:	bb02      	cbnz	r2, 800a9e0 <_dtoa_r+0xa40>
 800a99e:	4601      	mov	r1, r0
 800a9a0:	9802      	ldr	r0, [sp, #8]
 800a9a2:	f000 fc3f 	bl	800b224 <__mcmp>
 800a9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4648      	mov	r0, r9
 800a9ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9b2:	f000 fa05 	bl	800adc0 <_Bfree>
 800a9b6:	9b07      	ldr	r3, [sp, #28]
 800a9b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9ba:	9e00      	ldr	r6, [sp, #0]
 800a9bc:	ea42 0103 	orr.w	r1, r2, r3
 800a9c0:	9b06      	ldr	r3, [sp, #24]
 800a9c2:	4319      	orrs	r1, r3
 800a9c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c6:	d10d      	bne.n	800a9e4 <_dtoa_r+0xa44>
 800a9c8:	2b39      	cmp	r3, #57	@ 0x39
 800a9ca:	d027      	beq.n	800aa1c <_dtoa_r+0xa7c>
 800a9cc:	9a04      	ldr	r2, [sp, #16]
 800a9ce:	2a00      	cmp	r2, #0
 800a9d0:	dd01      	ble.n	800a9d6 <_dtoa_r+0xa36>
 800a9d2:	9b03      	ldr	r3, [sp, #12]
 800a9d4:	3331      	adds	r3, #49	@ 0x31
 800a9d6:	f88b 3000 	strb.w	r3, [fp]
 800a9da:	e52e      	b.n	800a43a <_dtoa_r+0x49a>
 800a9dc:	4628      	mov	r0, r5
 800a9de:	e7b9      	b.n	800a954 <_dtoa_r+0x9b4>
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	e7e2      	b.n	800a9aa <_dtoa_r+0xa0a>
 800a9e4:	9904      	ldr	r1, [sp, #16]
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	db04      	blt.n	800a9f4 <_dtoa_r+0xa54>
 800a9ea:	9807      	ldr	r0, [sp, #28]
 800a9ec:	4301      	orrs	r1, r0
 800a9ee:	9806      	ldr	r0, [sp, #24]
 800a9f0:	4301      	orrs	r1, r0
 800a9f2:	d120      	bne.n	800aa36 <_dtoa_r+0xa96>
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	ddee      	ble.n	800a9d6 <_dtoa_r+0xa36>
 800a9f8:	9902      	ldr	r1, [sp, #8]
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	4648      	mov	r0, r9
 800aa00:	f000 fba4 	bl	800b14c <__lshift>
 800aa04:	4621      	mov	r1, r4
 800aa06:	9002      	str	r0, [sp, #8]
 800aa08:	f000 fc0c 	bl	800b224 <__mcmp>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	9b00      	ldr	r3, [sp, #0]
 800aa10:	dc02      	bgt.n	800aa18 <_dtoa_r+0xa78>
 800aa12:	d1e0      	bne.n	800a9d6 <_dtoa_r+0xa36>
 800aa14:	07da      	lsls	r2, r3, #31
 800aa16:	d5de      	bpl.n	800a9d6 <_dtoa_r+0xa36>
 800aa18:	2b39      	cmp	r3, #57	@ 0x39
 800aa1a:	d1da      	bne.n	800a9d2 <_dtoa_r+0xa32>
 800aa1c:	2339      	movs	r3, #57	@ 0x39
 800aa1e:	f88b 3000 	strb.w	r3, [fp]
 800aa22:	4633      	mov	r3, r6
 800aa24:	461e      	mov	r6, r3
 800aa26:	3b01      	subs	r3, #1
 800aa28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa2c:	2a39      	cmp	r2, #57	@ 0x39
 800aa2e:	d04e      	beq.n	800aace <_dtoa_r+0xb2e>
 800aa30:	3201      	adds	r2, #1
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	e501      	b.n	800a43a <_dtoa_r+0x49a>
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	dd03      	ble.n	800aa42 <_dtoa_r+0xaa2>
 800aa3a:	2b39      	cmp	r3, #57	@ 0x39
 800aa3c:	d0ee      	beq.n	800aa1c <_dtoa_r+0xa7c>
 800aa3e:	3301      	adds	r3, #1
 800aa40:	e7c9      	b.n	800a9d6 <_dtoa_r+0xa36>
 800aa42:	9a00      	ldr	r2, [sp, #0]
 800aa44:	9908      	ldr	r1, [sp, #32]
 800aa46:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa4a:	428a      	cmp	r2, r1
 800aa4c:	d028      	beq.n	800aaa0 <_dtoa_r+0xb00>
 800aa4e:	9902      	ldr	r1, [sp, #8]
 800aa50:	2300      	movs	r3, #0
 800aa52:	220a      	movs	r2, #10
 800aa54:	4648      	mov	r0, r9
 800aa56:	f000 f9d5 	bl	800ae04 <__multadd>
 800aa5a:	42af      	cmp	r7, r5
 800aa5c:	9002      	str	r0, [sp, #8]
 800aa5e:	f04f 0300 	mov.w	r3, #0
 800aa62:	f04f 020a 	mov.w	r2, #10
 800aa66:	4639      	mov	r1, r7
 800aa68:	4648      	mov	r0, r9
 800aa6a:	d107      	bne.n	800aa7c <_dtoa_r+0xadc>
 800aa6c:	f000 f9ca 	bl	800ae04 <__multadd>
 800aa70:	4607      	mov	r7, r0
 800aa72:	4605      	mov	r5, r0
 800aa74:	9b00      	ldr	r3, [sp, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	e777      	b.n	800a96c <_dtoa_r+0x9cc>
 800aa7c:	f000 f9c2 	bl	800ae04 <__multadd>
 800aa80:	4629      	mov	r1, r5
 800aa82:	4607      	mov	r7, r0
 800aa84:	2300      	movs	r3, #0
 800aa86:	220a      	movs	r2, #10
 800aa88:	4648      	mov	r0, r9
 800aa8a:	f000 f9bb 	bl	800ae04 <__multadd>
 800aa8e:	4605      	mov	r5, r0
 800aa90:	e7f0      	b.n	800aa74 <_dtoa_r+0xad4>
 800aa92:	f1bb 0f00 	cmp.w	fp, #0
 800aa96:	bfcc      	ite	gt
 800aa98:	465e      	movgt	r6, fp
 800aa9a:	2601      	movle	r6, #1
 800aa9c:	4456      	add	r6, sl
 800aa9e:	2700      	movs	r7, #0
 800aaa0:	9902      	ldr	r1, [sp, #8]
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	4648      	mov	r0, r9
 800aaa8:	f000 fb50 	bl	800b14c <__lshift>
 800aaac:	4621      	mov	r1, r4
 800aaae:	9002      	str	r0, [sp, #8]
 800aab0:	f000 fbb8 	bl	800b224 <__mcmp>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	dcb4      	bgt.n	800aa22 <_dtoa_r+0xa82>
 800aab8:	d102      	bne.n	800aac0 <_dtoa_r+0xb20>
 800aaba:	9b00      	ldr	r3, [sp, #0]
 800aabc:	07db      	lsls	r3, r3, #31
 800aabe:	d4b0      	bmi.n	800aa22 <_dtoa_r+0xa82>
 800aac0:	4633      	mov	r3, r6
 800aac2:	461e      	mov	r6, r3
 800aac4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aac8:	2a30      	cmp	r2, #48	@ 0x30
 800aaca:	d0fa      	beq.n	800aac2 <_dtoa_r+0xb22>
 800aacc:	e4b5      	b.n	800a43a <_dtoa_r+0x49a>
 800aace:	459a      	cmp	sl, r3
 800aad0:	d1a8      	bne.n	800aa24 <_dtoa_r+0xa84>
 800aad2:	2331      	movs	r3, #49	@ 0x31
 800aad4:	f108 0801 	add.w	r8, r8, #1
 800aad8:	f88a 3000 	strb.w	r3, [sl]
 800aadc:	e4ad      	b.n	800a43a <_dtoa_r+0x49a>
 800aade:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aae0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ab3c <_dtoa_r+0xb9c>
 800aae4:	b11b      	cbz	r3, 800aaee <_dtoa_r+0xb4e>
 800aae6:	f10a 0308 	add.w	r3, sl, #8
 800aaea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	4650      	mov	r0, sl
 800aaf0:	b017      	add	sp, #92	@ 0x5c
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	f77f ae2e 	ble.w	800a75a <_dtoa_r+0x7ba>
 800aafe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	2001      	movs	r0, #1
 800ab04:	e64d      	b.n	800a7a2 <_dtoa_r+0x802>
 800ab06:	f1bb 0f00 	cmp.w	fp, #0
 800ab0a:	f77f aed9 	ble.w	800a8c0 <_dtoa_r+0x920>
 800ab0e:	4656      	mov	r6, sl
 800ab10:	9802      	ldr	r0, [sp, #8]
 800ab12:	4621      	mov	r1, r4
 800ab14:	f7ff f9b9 	bl	8009e8a <quorem>
 800ab18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ab1c:	f806 3b01 	strb.w	r3, [r6], #1
 800ab20:	eba6 020a 	sub.w	r2, r6, sl
 800ab24:	4593      	cmp	fp, r2
 800ab26:	ddb4      	ble.n	800aa92 <_dtoa_r+0xaf2>
 800ab28:	9902      	ldr	r1, [sp, #8]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	220a      	movs	r2, #10
 800ab2e:	4648      	mov	r0, r9
 800ab30:	f000 f968 	bl	800ae04 <__multadd>
 800ab34:	9002      	str	r0, [sp, #8]
 800ab36:	e7eb      	b.n	800ab10 <_dtoa_r+0xb70>
 800ab38:	0800c23d 	.word	0x0800c23d
 800ab3c:	0800c1c1 	.word	0x0800c1c1

0800ab40 <_free_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4605      	mov	r5, r0
 800ab44:	2900      	cmp	r1, #0
 800ab46:	d041      	beq.n	800abcc <_free_r+0x8c>
 800ab48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab4c:	1f0c      	subs	r4, r1, #4
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	bfb8      	it	lt
 800ab52:	18e4      	addlt	r4, r4, r3
 800ab54:	f000 f8e8 	bl	800ad28 <__malloc_lock>
 800ab58:	4a1d      	ldr	r2, [pc, #116]	@ (800abd0 <_free_r+0x90>)
 800ab5a:	6813      	ldr	r3, [r2, #0]
 800ab5c:	b933      	cbnz	r3, 800ab6c <_free_r+0x2c>
 800ab5e:	6063      	str	r3, [r4, #4]
 800ab60:	6014      	str	r4, [r2, #0]
 800ab62:	4628      	mov	r0, r5
 800ab64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab68:	f000 b8e4 	b.w	800ad34 <__malloc_unlock>
 800ab6c:	42a3      	cmp	r3, r4
 800ab6e:	d908      	bls.n	800ab82 <_free_r+0x42>
 800ab70:	6820      	ldr	r0, [r4, #0]
 800ab72:	1821      	adds	r1, r4, r0
 800ab74:	428b      	cmp	r3, r1
 800ab76:	bf01      	itttt	eq
 800ab78:	6819      	ldreq	r1, [r3, #0]
 800ab7a:	685b      	ldreq	r3, [r3, #4]
 800ab7c:	1809      	addeq	r1, r1, r0
 800ab7e:	6021      	streq	r1, [r4, #0]
 800ab80:	e7ed      	b.n	800ab5e <_free_r+0x1e>
 800ab82:	461a      	mov	r2, r3
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	b10b      	cbz	r3, 800ab8c <_free_r+0x4c>
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	d9fa      	bls.n	800ab82 <_free_r+0x42>
 800ab8c:	6811      	ldr	r1, [r2, #0]
 800ab8e:	1850      	adds	r0, r2, r1
 800ab90:	42a0      	cmp	r0, r4
 800ab92:	d10b      	bne.n	800abac <_free_r+0x6c>
 800ab94:	6820      	ldr	r0, [r4, #0]
 800ab96:	4401      	add	r1, r0
 800ab98:	1850      	adds	r0, r2, r1
 800ab9a:	4283      	cmp	r3, r0
 800ab9c:	6011      	str	r1, [r2, #0]
 800ab9e:	d1e0      	bne.n	800ab62 <_free_r+0x22>
 800aba0:	6818      	ldr	r0, [r3, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	6053      	str	r3, [r2, #4]
 800aba6:	4408      	add	r0, r1
 800aba8:	6010      	str	r0, [r2, #0]
 800abaa:	e7da      	b.n	800ab62 <_free_r+0x22>
 800abac:	d902      	bls.n	800abb4 <_free_r+0x74>
 800abae:	230c      	movs	r3, #12
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	e7d6      	b.n	800ab62 <_free_r+0x22>
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	1821      	adds	r1, r4, r0
 800abb8:	428b      	cmp	r3, r1
 800abba:	bf04      	itt	eq
 800abbc:	6819      	ldreq	r1, [r3, #0]
 800abbe:	685b      	ldreq	r3, [r3, #4]
 800abc0:	6063      	str	r3, [r4, #4]
 800abc2:	bf04      	itt	eq
 800abc4:	1809      	addeq	r1, r1, r0
 800abc6:	6021      	streq	r1, [r4, #0]
 800abc8:	6054      	str	r4, [r2, #4]
 800abca:	e7ca      	b.n	800ab62 <_free_r+0x22>
 800abcc:	bd38      	pop	{r3, r4, r5, pc}
 800abce:	bf00      	nop
 800abd0:	20000f5c 	.word	0x20000f5c

0800abd4 <malloc>:
 800abd4:	4b02      	ldr	r3, [pc, #8]	@ (800abe0 <malloc+0xc>)
 800abd6:	4601      	mov	r1, r0
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	f000 b825 	b.w	800ac28 <_malloc_r>
 800abde:	bf00      	nop
 800abe0:	20000110 	.word	0x20000110

0800abe4 <sbrk_aligned>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	4e0f      	ldr	r6, [pc, #60]	@ (800ac24 <sbrk_aligned+0x40>)
 800abe8:	460c      	mov	r4, r1
 800abea:	6831      	ldr	r1, [r6, #0]
 800abec:	4605      	mov	r5, r0
 800abee:	b911      	cbnz	r1, 800abf6 <sbrk_aligned+0x12>
 800abf0:	f000 fe3e 	bl	800b870 <_sbrk_r>
 800abf4:	6030      	str	r0, [r6, #0]
 800abf6:	4621      	mov	r1, r4
 800abf8:	4628      	mov	r0, r5
 800abfa:	f000 fe39 	bl	800b870 <_sbrk_r>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	d103      	bne.n	800ac0a <sbrk_aligned+0x26>
 800ac02:	f04f 34ff 	mov.w	r4, #4294967295
 800ac06:	4620      	mov	r0, r4
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
 800ac0a:	1cc4      	adds	r4, r0, #3
 800ac0c:	f024 0403 	bic.w	r4, r4, #3
 800ac10:	42a0      	cmp	r0, r4
 800ac12:	d0f8      	beq.n	800ac06 <sbrk_aligned+0x22>
 800ac14:	1a21      	subs	r1, r4, r0
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 fe2a 	bl	800b870 <_sbrk_r>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d1f2      	bne.n	800ac06 <sbrk_aligned+0x22>
 800ac20:	e7ef      	b.n	800ac02 <sbrk_aligned+0x1e>
 800ac22:	bf00      	nop
 800ac24:	20000f58 	.word	0x20000f58

0800ac28 <_malloc_r>:
 800ac28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac2c:	1ccd      	adds	r5, r1, #3
 800ac2e:	f025 0503 	bic.w	r5, r5, #3
 800ac32:	3508      	adds	r5, #8
 800ac34:	2d0c      	cmp	r5, #12
 800ac36:	bf38      	it	cc
 800ac38:	250c      	movcc	r5, #12
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	db01      	blt.n	800ac44 <_malloc_r+0x1c>
 800ac40:	42a9      	cmp	r1, r5
 800ac42:	d904      	bls.n	800ac4e <_malloc_r+0x26>
 800ac44:	230c      	movs	r3, #12
 800ac46:	6033      	str	r3, [r6, #0]
 800ac48:	2000      	movs	r0, #0
 800ac4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad24 <_malloc_r+0xfc>
 800ac52:	f000 f869 	bl	800ad28 <__malloc_lock>
 800ac56:	f8d8 3000 	ldr.w	r3, [r8]
 800ac5a:	461c      	mov	r4, r3
 800ac5c:	bb44      	cbnz	r4, 800acb0 <_malloc_r+0x88>
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4630      	mov	r0, r6
 800ac62:	f7ff ffbf 	bl	800abe4 <sbrk_aligned>
 800ac66:	1c43      	adds	r3, r0, #1
 800ac68:	4604      	mov	r4, r0
 800ac6a:	d158      	bne.n	800ad1e <_malloc_r+0xf6>
 800ac6c:	f8d8 4000 	ldr.w	r4, [r8]
 800ac70:	4627      	mov	r7, r4
 800ac72:	2f00      	cmp	r7, #0
 800ac74:	d143      	bne.n	800acfe <_malloc_r+0xd6>
 800ac76:	2c00      	cmp	r4, #0
 800ac78:	d04b      	beq.n	800ad12 <_malloc_r+0xea>
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	4630      	mov	r0, r6
 800ac80:	eb04 0903 	add.w	r9, r4, r3
 800ac84:	f000 fdf4 	bl	800b870 <_sbrk_r>
 800ac88:	4581      	cmp	r9, r0
 800ac8a:	d142      	bne.n	800ad12 <_malloc_r+0xea>
 800ac8c:	6821      	ldr	r1, [r4, #0]
 800ac8e:	1a6d      	subs	r5, r5, r1
 800ac90:	4629      	mov	r1, r5
 800ac92:	4630      	mov	r0, r6
 800ac94:	f7ff ffa6 	bl	800abe4 <sbrk_aligned>
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d03a      	beq.n	800ad12 <_malloc_r+0xea>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	442b      	add	r3, r5
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	f8d8 3000 	ldr.w	r3, [r8]
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	bb62      	cbnz	r2, 800ad04 <_malloc_r+0xdc>
 800acaa:	f8c8 7000 	str.w	r7, [r8]
 800acae:	e00f      	b.n	800acd0 <_malloc_r+0xa8>
 800acb0:	6822      	ldr	r2, [r4, #0]
 800acb2:	1b52      	subs	r2, r2, r5
 800acb4:	d420      	bmi.n	800acf8 <_malloc_r+0xd0>
 800acb6:	2a0b      	cmp	r2, #11
 800acb8:	d917      	bls.n	800acea <_malloc_r+0xc2>
 800acba:	1961      	adds	r1, r4, r5
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	6025      	str	r5, [r4, #0]
 800acc0:	bf18      	it	ne
 800acc2:	6059      	strne	r1, [r3, #4]
 800acc4:	6863      	ldr	r3, [r4, #4]
 800acc6:	bf08      	it	eq
 800acc8:	f8c8 1000 	streq.w	r1, [r8]
 800accc:	5162      	str	r2, [r4, r5]
 800acce:	604b      	str	r3, [r1, #4]
 800acd0:	4630      	mov	r0, r6
 800acd2:	f000 f82f 	bl	800ad34 <__malloc_unlock>
 800acd6:	f104 000b 	add.w	r0, r4, #11
 800acda:	1d23      	adds	r3, r4, #4
 800acdc:	f020 0007 	bic.w	r0, r0, #7
 800ace0:	1ac2      	subs	r2, r0, r3
 800ace2:	bf1c      	itt	ne
 800ace4:	1a1b      	subne	r3, r3, r0
 800ace6:	50a3      	strne	r3, [r4, r2]
 800ace8:	e7af      	b.n	800ac4a <_malloc_r+0x22>
 800acea:	6862      	ldr	r2, [r4, #4]
 800acec:	42a3      	cmp	r3, r4
 800acee:	bf0c      	ite	eq
 800acf0:	f8c8 2000 	streq.w	r2, [r8]
 800acf4:	605a      	strne	r2, [r3, #4]
 800acf6:	e7eb      	b.n	800acd0 <_malloc_r+0xa8>
 800acf8:	4623      	mov	r3, r4
 800acfa:	6864      	ldr	r4, [r4, #4]
 800acfc:	e7ae      	b.n	800ac5c <_malloc_r+0x34>
 800acfe:	463c      	mov	r4, r7
 800ad00:	687f      	ldr	r7, [r7, #4]
 800ad02:	e7b6      	b.n	800ac72 <_malloc_r+0x4a>
 800ad04:	461a      	mov	r2, r3
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	42a3      	cmp	r3, r4
 800ad0a:	d1fb      	bne.n	800ad04 <_malloc_r+0xdc>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6053      	str	r3, [r2, #4]
 800ad10:	e7de      	b.n	800acd0 <_malloc_r+0xa8>
 800ad12:	230c      	movs	r3, #12
 800ad14:	6033      	str	r3, [r6, #0]
 800ad16:	4630      	mov	r0, r6
 800ad18:	f000 f80c 	bl	800ad34 <__malloc_unlock>
 800ad1c:	e794      	b.n	800ac48 <_malloc_r+0x20>
 800ad1e:	6005      	str	r5, [r0, #0]
 800ad20:	e7d6      	b.n	800acd0 <_malloc_r+0xa8>
 800ad22:	bf00      	nop
 800ad24:	20000f5c 	.word	0x20000f5c

0800ad28 <__malloc_lock>:
 800ad28:	4801      	ldr	r0, [pc, #4]	@ (800ad30 <__malloc_lock+0x8>)
 800ad2a:	f7ff b8ac 	b.w	8009e86 <__retarget_lock_acquire_recursive>
 800ad2e:	bf00      	nop
 800ad30:	20000f54 	.word	0x20000f54

0800ad34 <__malloc_unlock>:
 800ad34:	4801      	ldr	r0, [pc, #4]	@ (800ad3c <__malloc_unlock+0x8>)
 800ad36:	f7ff b8a7 	b.w	8009e88 <__retarget_lock_release_recursive>
 800ad3a:	bf00      	nop
 800ad3c:	20000f54 	.word	0x20000f54

0800ad40 <_Balloc>:
 800ad40:	b570      	push	{r4, r5, r6, lr}
 800ad42:	69c6      	ldr	r6, [r0, #28]
 800ad44:	4604      	mov	r4, r0
 800ad46:	460d      	mov	r5, r1
 800ad48:	b976      	cbnz	r6, 800ad68 <_Balloc+0x28>
 800ad4a:	2010      	movs	r0, #16
 800ad4c:	f7ff ff42 	bl	800abd4 <malloc>
 800ad50:	4602      	mov	r2, r0
 800ad52:	61e0      	str	r0, [r4, #28]
 800ad54:	b920      	cbnz	r0, 800ad60 <_Balloc+0x20>
 800ad56:	4b18      	ldr	r3, [pc, #96]	@ (800adb8 <_Balloc+0x78>)
 800ad58:	4818      	ldr	r0, [pc, #96]	@ (800adbc <_Balloc+0x7c>)
 800ad5a:	216b      	movs	r1, #107	@ 0x6b
 800ad5c:	f000 fda6 	bl	800b8ac <__assert_func>
 800ad60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad64:	6006      	str	r6, [r0, #0]
 800ad66:	60c6      	str	r6, [r0, #12]
 800ad68:	69e6      	ldr	r6, [r4, #28]
 800ad6a:	68f3      	ldr	r3, [r6, #12]
 800ad6c:	b183      	cbz	r3, 800ad90 <_Balloc+0x50>
 800ad6e:	69e3      	ldr	r3, [r4, #28]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad76:	b9b8      	cbnz	r0, 800ada8 <_Balloc+0x68>
 800ad78:	2101      	movs	r1, #1
 800ad7a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad7e:	1d72      	adds	r2, r6, #5
 800ad80:	0092      	lsls	r2, r2, #2
 800ad82:	4620      	mov	r0, r4
 800ad84:	f000 fdb0 	bl	800b8e8 <_calloc_r>
 800ad88:	b160      	cbz	r0, 800ada4 <_Balloc+0x64>
 800ad8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad8e:	e00e      	b.n	800adae <_Balloc+0x6e>
 800ad90:	2221      	movs	r2, #33	@ 0x21
 800ad92:	2104      	movs	r1, #4
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fda7 	bl	800b8e8 <_calloc_r>
 800ad9a:	69e3      	ldr	r3, [r4, #28]
 800ad9c:	60f0      	str	r0, [r6, #12]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1e4      	bne.n	800ad6e <_Balloc+0x2e>
 800ada4:	2000      	movs	r0, #0
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
 800ada8:	6802      	ldr	r2, [r0, #0]
 800adaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adae:	2300      	movs	r3, #0
 800adb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adb4:	e7f7      	b.n	800ada6 <_Balloc+0x66>
 800adb6:	bf00      	nop
 800adb8:	0800c1ce 	.word	0x0800c1ce
 800adbc:	0800c24e 	.word	0x0800c24e

0800adc0 <_Bfree>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	69c6      	ldr	r6, [r0, #28]
 800adc4:	4605      	mov	r5, r0
 800adc6:	460c      	mov	r4, r1
 800adc8:	b976      	cbnz	r6, 800ade8 <_Bfree+0x28>
 800adca:	2010      	movs	r0, #16
 800adcc:	f7ff ff02 	bl	800abd4 <malloc>
 800add0:	4602      	mov	r2, r0
 800add2:	61e8      	str	r0, [r5, #28]
 800add4:	b920      	cbnz	r0, 800ade0 <_Bfree+0x20>
 800add6:	4b09      	ldr	r3, [pc, #36]	@ (800adfc <_Bfree+0x3c>)
 800add8:	4809      	ldr	r0, [pc, #36]	@ (800ae00 <_Bfree+0x40>)
 800adda:	218f      	movs	r1, #143	@ 0x8f
 800addc:	f000 fd66 	bl	800b8ac <__assert_func>
 800ade0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ade4:	6006      	str	r6, [r0, #0]
 800ade6:	60c6      	str	r6, [r0, #12]
 800ade8:	b13c      	cbz	r4, 800adfa <_Bfree+0x3a>
 800adea:	69eb      	ldr	r3, [r5, #28]
 800adec:	6862      	ldr	r2, [r4, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800adf4:	6021      	str	r1, [r4, #0]
 800adf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	0800c1ce 	.word	0x0800c1ce
 800ae00:	0800c24e 	.word	0x0800c24e

0800ae04 <__multadd>:
 800ae04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae08:	690d      	ldr	r5, [r1, #16]
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	460c      	mov	r4, r1
 800ae0e:	461e      	mov	r6, r3
 800ae10:	f101 0c14 	add.w	ip, r1, #20
 800ae14:	2000      	movs	r0, #0
 800ae16:	f8dc 3000 	ldr.w	r3, [ip]
 800ae1a:	b299      	uxth	r1, r3
 800ae1c:	fb02 6101 	mla	r1, r2, r1, r6
 800ae20:	0c1e      	lsrs	r6, r3, #16
 800ae22:	0c0b      	lsrs	r3, r1, #16
 800ae24:	fb02 3306 	mla	r3, r2, r6, r3
 800ae28:	b289      	uxth	r1, r1
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae30:	4285      	cmp	r5, r0
 800ae32:	f84c 1b04 	str.w	r1, [ip], #4
 800ae36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae3a:	dcec      	bgt.n	800ae16 <__multadd+0x12>
 800ae3c:	b30e      	cbz	r6, 800ae82 <__multadd+0x7e>
 800ae3e:	68a3      	ldr	r3, [r4, #8]
 800ae40:	42ab      	cmp	r3, r5
 800ae42:	dc19      	bgt.n	800ae78 <__multadd+0x74>
 800ae44:	6861      	ldr	r1, [r4, #4]
 800ae46:	4638      	mov	r0, r7
 800ae48:	3101      	adds	r1, #1
 800ae4a:	f7ff ff79 	bl	800ad40 <_Balloc>
 800ae4e:	4680      	mov	r8, r0
 800ae50:	b928      	cbnz	r0, 800ae5e <__multadd+0x5a>
 800ae52:	4602      	mov	r2, r0
 800ae54:	4b0c      	ldr	r3, [pc, #48]	@ (800ae88 <__multadd+0x84>)
 800ae56:	480d      	ldr	r0, [pc, #52]	@ (800ae8c <__multadd+0x88>)
 800ae58:	21ba      	movs	r1, #186	@ 0xba
 800ae5a:	f000 fd27 	bl	800b8ac <__assert_func>
 800ae5e:	6922      	ldr	r2, [r4, #16]
 800ae60:	3202      	adds	r2, #2
 800ae62:	f104 010c 	add.w	r1, r4, #12
 800ae66:	0092      	lsls	r2, r2, #2
 800ae68:	300c      	adds	r0, #12
 800ae6a:	f000 fd11 	bl	800b890 <memcpy>
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4638      	mov	r0, r7
 800ae72:	f7ff ffa5 	bl	800adc0 <_Bfree>
 800ae76:	4644      	mov	r4, r8
 800ae78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae7c:	3501      	adds	r5, #1
 800ae7e:	615e      	str	r6, [r3, #20]
 800ae80:	6125      	str	r5, [r4, #16]
 800ae82:	4620      	mov	r0, r4
 800ae84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae88:	0800c23d 	.word	0x0800c23d
 800ae8c:	0800c24e 	.word	0x0800c24e

0800ae90 <__hi0bits>:
 800ae90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae94:	4603      	mov	r3, r0
 800ae96:	bf36      	itet	cc
 800ae98:	0403      	lslcc	r3, r0, #16
 800ae9a:	2000      	movcs	r0, #0
 800ae9c:	2010      	movcc	r0, #16
 800ae9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aea2:	bf3c      	itt	cc
 800aea4:	021b      	lslcc	r3, r3, #8
 800aea6:	3008      	addcc	r0, #8
 800aea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeac:	bf3c      	itt	cc
 800aeae:	011b      	lslcc	r3, r3, #4
 800aeb0:	3004      	addcc	r0, #4
 800aeb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeb6:	bf3c      	itt	cc
 800aeb8:	009b      	lslcc	r3, r3, #2
 800aeba:	3002      	addcc	r0, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	db05      	blt.n	800aecc <__hi0bits+0x3c>
 800aec0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aec4:	f100 0001 	add.w	r0, r0, #1
 800aec8:	bf08      	it	eq
 800aeca:	2020      	moveq	r0, #32
 800aecc:	4770      	bx	lr

0800aece <__lo0bits>:
 800aece:	6803      	ldr	r3, [r0, #0]
 800aed0:	4602      	mov	r2, r0
 800aed2:	f013 0007 	ands.w	r0, r3, #7
 800aed6:	d00b      	beq.n	800aef0 <__lo0bits+0x22>
 800aed8:	07d9      	lsls	r1, r3, #31
 800aeda:	d421      	bmi.n	800af20 <__lo0bits+0x52>
 800aedc:	0798      	lsls	r0, r3, #30
 800aede:	bf49      	itett	mi
 800aee0:	085b      	lsrmi	r3, r3, #1
 800aee2:	089b      	lsrpl	r3, r3, #2
 800aee4:	2001      	movmi	r0, #1
 800aee6:	6013      	strmi	r3, [r2, #0]
 800aee8:	bf5c      	itt	pl
 800aeea:	6013      	strpl	r3, [r2, #0]
 800aeec:	2002      	movpl	r0, #2
 800aeee:	4770      	bx	lr
 800aef0:	b299      	uxth	r1, r3
 800aef2:	b909      	cbnz	r1, 800aef8 <__lo0bits+0x2a>
 800aef4:	0c1b      	lsrs	r3, r3, #16
 800aef6:	2010      	movs	r0, #16
 800aef8:	b2d9      	uxtb	r1, r3
 800aefa:	b909      	cbnz	r1, 800af00 <__lo0bits+0x32>
 800aefc:	3008      	adds	r0, #8
 800aefe:	0a1b      	lsrs	r3, r3, #8
 800af00:	0719      	lsls	r1, r3, #28
 800af02:	bf04      	itt	eq
 800af04:	091b      	lsreq	r3, r3, #4
 800af06:	3004      	addeq	r0, #4
 800af08:	0799      	lsls	r1, r3, #30
 800af0a:	bf04      	itt	eq
 800af0c:	089b      	lsreq	r3, r3, #2
 800af0e:	3002      	addeq	r0, #2
 800af10:	07d9      	lsls	r1, r3, #31
 800af12:	d403      	bmi.n	800af1c <__lo0bits+0x4e>
 800af14:	085b      	lsrs	r3, r3, #1
 800af16:	f100 0001 	add.w	r0, r0, #1
 800af1a:	d003      	beq.n	800af24 <__lo0bits+0x56>
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	4770      	bx	lr
 800af20:	2000      	movs	r0, #0
 800af22:	4770      	bx	lr
 800af24:	2020      	movs	r0, #32
 800af26:	4770      	bx	lr

0800af28 <__i2b>:
 800af28:	b510      	push	{r4, lr}
 800af2a:	460c      	mov	r4, r1
 800af2c:	2101      	movs	r1, #1
 800af2e:	f7ff ff07 	bl	800ad40 <_Balloc>
 800af32:	4602      	mov	r2, r0
 800af34:	b928      	cbnz	r0, 800af42 <__i2b+0x1a>
 800af36:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <__i2b+0x24>)
 800af38:	4805      	ldr	r0, [pc, #20]	@ (800af50 <__i2b+0x28>)
 800af3a:	f240 1145 	movw	r1, #325	@ 0x145
 800af3e:	f000 fcb5 	bl	800b8ac <__assert_func>
 800af42:	2301      	movs	r3, #1
 800af44:	6144      	str	r4, [r0, #20]
 800af46:	6103      	str	r3, [r0, #16]
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	bf00      	nop
 800af4c:	0800c23d 	.word	0x0800c23d
 800af50:	0800c24e 	.word	0x0800c24e

0800af54 <__multiply>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	4617      	mov	r7, r2
 800af5a:	690a      	ldr	r2, [r1, #16]
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	429a      	cmp	r2, r3
 800af60:	bfa8      	it	ge
 800af62:	463b      	movge	r3, r7
 800af64:	4689      	mov	r9, r1
 800af66:	bfa4      	itt	ge
 800af68:	460f      	movge	r7, r1
 800af6a:	4699      	movge	r9, r3
 800af6c:	693d      	ldr	r5, [r7, #16]
 800af6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	eb05 060a 	add.w	r6, r5, sl
 800af7a:	42b3      	cmp	r3, r6
 800af7c:	b085      	sub	sp, #20
 800af7e:	bfb8      	it	lt
 800af80:	3101      	addlt	r1, #1
 800af82:	f7ff fedd 	bl	800ad40 <_Balloc>
 800af86:	b930      	cbnz	r0, 800af96 <__multiply+0x42>
 800af88:	4602      	mov	r2, r0
 800af8a:	4b41      	ldr	r3, [pc, #260]	@ (800b090 <__multiply+0x13c>)
 800af8c:	4841      	ldr	r0, [pc, #260]	@ (800b094 <__multiply+0x140>)
 800af8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af92:	f000 fc8b 	bl	800b8ac <__assert_func>
 800af96:	f100 0414 	add.w	r4, r0, #20
 800af9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800af9e:	4623      	mov	r3, r4
 800afa0:	2200      	movs	r2, #0
 800afa2:	4573      	cmp	r3, lr
 800afa4:	d320      	bcc.n	800afe8 <__multiply+0x94>
 800afa6:	f107 0814 	add.w	r8, r7, #20
 800afaa:	f109 0114 	add.w	r1, r9, #20
 800afae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800afb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800afb6:	9302      	str	r3, [sp, #8]
 800afb8:	1beb      	subs	r3, r5, r7
 800afba:	3b15      	subs	r3, #21
 800afbc:	f023 0303 	bic.w	r3, r3, #3
 800afc0:	3304      	adds	r3, #4
 800afc2:	3715      	adds	r7, #21
 800afc4:	42bd      	cmp	r5, r7
 800afc6:	bf38      	it	cc
 800afc8:	2304      	movcc	r3, #4
 800afca:	9301      	str	r3, [sp, #4]
 800afcc:	9b02      	ldr	r3, [sp, #8]
 800afce:	9103      	str	r1, [sp, #12]
 800afd0:	428b      	cmp	r3, r1
 800afd2:	d80c      	bhi.n	800afee <__multiply+0x9a>
 800afd4:	2e00      	cmp	r6, #0
 800afd6:	dd03      	ble.n	800afe0 <__multiply+0x8c>
 800afd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d055      	beq.n	800b08c <__multiply+0x138>
 800afe0:	6106      	str	r6, [r0, #16]
 800afe2:	b005      	add	sp, #20
 800afe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe8:	f843 2b04 	str.w	r2, [r3], #4
 800afec:	e7d9      	b.n	800afa2 <__multiply+0x4e>
 800afee:	f8b1 a000 	ldrh.w	sl, [r1]
 800aff2:	f1ba 0f00 	cmp.w	sl, #0
 800aff6:	d01f      	beq.n	800b038 <__multiply+0xe4>
 800aff8:	46c4      	mov	ip, r8
 800affa:	46a1      	mov	r9, r4
 800affc:	2700      	movs	r7, #0
 800affe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b002:	f8d9 3000 	ldr.w	r3, [r9]
 800b006:	fa1f fb82 	uxth.w	fp, r2
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b010:	443b      	add	r3, r7
 800b012:	f8d9 7000 	ldr.w	r7, [r9]
 800b016:	0c12      	lsrs	r2, r2, #16
 800b018:	0c3f      	lsrs	r7, r7, #16
 800b01a:	fb0a 7202 	mla	r2, sl, r2, r7
 800b01e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b022:	b29b      	uxth	r3, r3
 800b024:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b028:	4565      	cmp	r5, ip
 800b02a:	f849 3b04 	str.w	r3, [r9], #4
 800b02e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b032:	d8e4      	bhi.n	800affe <__multiply+0xaa>
 800b034:	9b01      	ldr	r3, [sp, #4]
 800b036:	50e7      	str	r7, [r4, r3]
 800b038:	9b03      	ldr	r3, [sp, #12]
 800b03a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b03e:	3104      	adds	r1, #4
 800b040:	f1b9 0f00 	cmp.w	r9, #0
 800b044:	d020      	beq.n	800b088 <__multiply+0x134>
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	4647      	mov	r7, r8
 800b04a:	46a4      	mov	ip, r4
 800b04c:	f04f 0a00 	mov.w	sl, #0
 800b050:	f8b7 b000 	ldrh.w	fp, [r7]
 800b054:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b058:	fb09 220b 	mla	r2, r9, fp, r2
 800b05c:	4452      	add	r2, sl
 800b05e:	b29b      	uxth	r3, r3
 800b060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b064:	f84c 3b04 	str.w	r3, [ip], #4
 800b068:	f857 3b04 	ldr.w	r3, [r7], #4
 800b06c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b070:	f8bc 3000 	ldrh.w	r3, [ip]
 800b074:	fb09 330a 	mla	r3, r9, sl, r3
 800b078:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b07c:	42bd      	cmp	r5, r7
 800b07e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b082:	d8e5      	bhi.n	800b050 <__multiply+0xfc>
 800b084:	9a01      	ldr	r2, [sp, #4]
 800b086:	50a3      	str	r3, [r4, r2]
 800b088:	3404      	adds	r4, #4
 800b08a:	e79f      	b.n	800afcc <__multiply+0x78>
 800b08c:	3e01      	subs	r6, #1
 800b08e:	e7a1      	b.n	800afd4 <__multiply+0x80>
 800b090:	0800c23d 	.word	0x0800c23d
 800b094:	0800c24e 	.word	0x0800c24e

0800b098 <__pow5mult>:
 800b098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b09c:	4615      	mov	r5, r2
 800b09e:	f012 0203 	ands.w	r2, r2, #3
 800b0a2:	4607      	mov	r7, r0
 800b0a4:	460e      	mov	r6, r1
 800b0a6:	d007      	beq.n	800b0b8 <__pow5mult+0x20>
 800b0a8:	4c25      	ldr	r4, [pc, #148]	@ (800b140 <__pow5mult+0xa8>)
 800b0aa:	3a01      	subs	r2, #1
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0b2:	f7ff fea7 	bl	800ae04 <__multadd>
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	10ad      	asrs	r5, r5, #2
 800b0ba:	d03d      	beq.n	800b138 <__pow5mult+0xa0>
 800b0bc:	69fc      	ldr	r4, [r7, #28]
 800b0be:	b97c      	cbnz	r4, 800b0e0 <__pow5mult+0x48>
 800b0c0:	2010      	movs	r0, #16
 800b0c2:	f7ff fd87 	bl	800abd4 <malloc>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	61f8      	str	r0, [r7, #28]
 800b0ca:	b928      	cbnz	r0, 800b0d8 <__pow5mult+0x40>
 800b0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b144 <__pow5mult+0xac>)
 800b0ce:	481e      	ldr	r0, [pc, #120]	@ (800b148 <__pow5mult+0xb0>)
 800b0d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b0d4:	f000 fbea 	bl	800b8ac <__assert_func>
 800b0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0dc:	6004      	str	r4, [r0, #0]
 800b0de:	60c4      	str	r4, [r0, #12]
 800b0e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0e8:	b94c      	cbnz	r4, 800b0fe <__pow5mult+0x66>
 800b0ea:	f240 2171 	movw	r1, #625	@ 0x271
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	f7ff ff1a 	bl	800af28 <__i2b>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	6003      	str	r3, [r0, #0]
 800b0fe:	f04f 0900 	mov.w	r9, #0
 800b102:	07eb      	lsls	r3, r5, #31
 800b104:	d50a      	bpl.n	800b11c <__pow5mult+0x84>
 800b106:	4631      	mov	r1, r6
 800b108:	4622      	mov	r2, r4
 800b10a:	4638      	mov	r0, r7
 800b10c:	f7ff ff22 	bl	800af54 <__multiply>
 800b110:	4631      	mov	r1, r6
 800b112:	4680      	mov	r8, r0
 800b114:	4638      	mov	r0, r7
 800b116:	f7ff fe53 	bl	800adc0 <_Bfree>
 800b11a:	4646      	mov	r6, r8
 800b11c:	106d      	asrs	r5, r5, #1
 800b11e:	d00b      	beq.n	800b138 <__pow5mult+0xa0>
 800b120:	6820      	ldr	r0, [r4, #0]
 800b122:	b938      	cbnz	r0, 800b134 <__pow5mult+0x9c>
 800b124:	4622      	mov	r2, r4
 800b126:	4621      	mov	r1, r4
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ff13 	bl	800af54 <__multiply>
 800b12e:	6020      	str	r0, [r4, #0]
 800b130:	f8c0 9000 	str.w	r9, [r0]
 800b134:	4604      	mov	r4, r0
 800b136:	e7e4      	b.n	800b102 <__pow5mult+0x6a>
 800b138:	4630      	mov	r0, r6
 800b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13e:	bf00      	nop
 800b140:	0800c300 	.word	0x0800c300
 800b144:	0800c1ce 	.word	0x0800c1ce
 800b148:	0800c24e 	.word	0x0800c24e

0800b14c <__lshift>:
 800b14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	460c      	mov	r4, r1
 800b152:	6849      	ldr	r1, [r1, #4]
 800b154:	6923      	ldr	r3, [r4, #16]
 800b156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	4607      	mov	r7, r0
 800b15e:	4691      	mov	r9, r2
 800b160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b164:	f108 0601 	add.w	r6, r8, #1
 800b168:	42b3      	cmp	r3, r6
 800b16a:	db0b      	blt.n	800b184 <__lshift+0x38>
 800b16c:	4638      	mov	r0, r7
 800b16e:	f7ff fde7 	bl	800ad40 <_Balloc>
 800b172:	4605      	mov	r5, r0
 800b174:	b948      	cbnz	r0, 800b18a <__lshift+0x3e>
 800b176:	4602      	mov	r2, r0
 800b178:	4b28      	ldr	r3, [pc, #160]	@ (800b21c <__lshift+0xd0>)
 800b17a:	4829      	ldr	r0, [pc, #164]	@ (800b220 <__lshift+0xd4>)
 800b17c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b180:	f000 fb94 	bl	800b8ac <__assert_func>
 800b184:	3101      	adds	r1, #1
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	e7ee      	b.n	800b168 <__lshift+0x1c>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f100 0114 	add.w	r1, r0, #20
 800b190:	f100 0210 	add.w	r2, r0, #16
 800b194:	4618      	mov	r0, r3
 800b196:	4553      	cmp	r3, sl
 800b198:	db33      	blt.n	800b202 <__lshift+0xb6>
 800b19a:	6920      	ldr	r0, [r4, #16]
 800b19c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1a0:	f104 0314 	add.w	r3, r4, #20
 800b1a4:	f019 091f 	ands.w	r9, r9, #31
 800b1a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1b0:	d02b      	beq.n	800b20a <__lshift+0xbe>
 800b1b2:	f1c9 0e20 	rsb	lr, r9, #32
 800b1b6:	468a      	mov	sl, r1
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	6818      	ldr	r0, [r3, #0]
 800b1bc:	fa00 f009 	lsl.w	r0, r0, r9
 800b1c0:	4310      	orrs	r0, r2
 800b1c2:	f84a 0b04 	str.w	r0, [sl], #4
 800b1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ca:	459c      	cmp	ip, r3
 800b1cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1d0:	d8f3      	bhi.n	800b1ba <__lshift+0x6e>
 800b1d2:	ebac 0304 	sub.w	r3, ip, r4
 800b1d6:	3b15      	subs	r3, #21
 800b1d8:	f023 0303 	bic.w	r3, r3, #3
 800b1dc:	3304      	adds	r3, #4
 800b1de:	f104 0015 	add.w	r0, r4, #21
 800b1e2:	4560      	cmp	r0, ip
 800b1e4:	bf88      	it	hi
 800b1e6:	2304      	movhi	r3, #4
 800b1e8:	50ca      	str	r2, [r1, r3]
 800b1ea:	b10a      	cbz	r2, 800b1f0 <__lshift+0xa4>
 800b1ec:	f108 0602 	add.w	r6, r8, #2
 800b1f0:	3e01      	subs	r6, #1
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	612e      	str	r6, [r5, #16]
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	f7ff fde2 	bl	800adc0 <_Bfree>
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b202:	f842 0f04 	str.w	r0, [r2, #4]!
 800b206:	3301      	adds	r3, #1
 800b208:	e7c5      	b.n	800b196 <__lshift+0x4a>
 800b20a:	3904      	subs	r1, #4
 800b20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b210:	f841 2f04 	str.w	r2, [r1, #4]!
 800b214:	459c      	cmp	ip, r3
 800b216:	d8f9      	bhi.n	800b20c <__lshift+0xc0>
 800b218:	e7ea      	b.n	800b1f0 <__lshift+0xa4>
 800b21a:	bf00      	nop
 800b21c:	0800c23d 	.word	0x0800c23d
 800b220:	0800c24e 	.word	0x0800c24e

0800b224 <__mcmp>:
 800b224:	690a      	ldr	r2, [r1, #16]
 800b226:	4603      	mov	r3, r0
 800b228:	6900      	ldr	r0, [r0, #16]
 800b22a:	1a80      	subs	r0, r0, r2
 800b22c:	b530      	push	{r4, r5, lr}
 800b22e:	d10e      	bne.n	800b24e <__mcmp+0x2a>
 800b230:	3314      	adds	r3, #20
 800b232:	3114      	adds	r1, #20
 800b234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b23c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b244:	4295      	cmp	r5, r2
 800b246:	d003      	beq.n	800b250 <__mcmp+0x2c>
 800b248:	d205      	bcs.n	800b256 <__mcmp+0x32>
 800b24a:	f04f 30ff 	mov.w	r0, #4294967295
 800b24e:	bd30      	pop	{r4, r5, pc}
 800b250:	42a3      	cmp	r3, r4
 800b252:	d3f3      	bcc.n	800b23c <__mcmp+0x18>
 800b254:	e7fb      	b.n	800b24e <__mcmp+0x2a>
 800b256:	2001      	movs	r0, #1
 800b258:	e7f9      	b.n	800b24e <__mcmp+0x2a>
	...

0800b25c <__mdiff>:
 800b25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	4689      	mov	r9, r1
 800b262:	4606      	mov	r6, r0
 800b264:	4611      	mov	r1, r2
 800b266:	4648      	mov	r0, r9
 800b268:	4614      	mov	r4, r2
 800b26a:	f7ff ffdb 	bl	800b224 <__mcmp>
 800b26e:	1e05      	subs	r5, r0, #0
 800b270:	d112      	bne.n	800b298 <__mdiff+0x3c>
 800b272:	4629      	mov	r1, r5
 800b274:	4630      	mov	r0, r6
 800b276:	f7ff fd63 	bl	800ad40 <_Balloc>
 800b27a:	4602      	mov	r2, r0
 800b27c:	b928      	cbnz	r0, 800b28a <__mdiff+0x2e>
 800b27e:	4b3f      	ldr	r3, [pc, #252]	@ (800b37c <__mdiff+0x120>)
 800b280:	f240 2137 	movw	r1, #567	@ 0x237
 800b284:	483e      	ldr	r0, [pc, #248]	@ (800b380 <__mdiff+0x124>)
 800b286:	f000 fb11 	bl	800b8ac <__assert_func>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b290:	4610      	mov	r0, r2
 800b292:	b003      	add	sp, #12
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	bfbc      	itt	lt
 800b29a:	464b      	movlt	r3, r9
 800b29c:	46a1      	movlt	r9, r4
 800b29e:	4630      	mov	r0, r6
 800b2a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b2a4:	bfba      	itte	lt
 800b2a6:	461c      	movlt	r4, r3
 800b2a8:	2501      	movlt	r5, #1
 800b2aa:	2500      	movge	r5, #0
 800b2ac:	f7ff fd48 	bl	800ad40 <_Balloc>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	b918      	cbnz	r0, 800b2bc <__mdiff+0x60>
 800b2b4:	4b31      	ldr	r3, [pc, #196]	@ (800b37c <__mdiff+0x120>)
 800b2b6:	f240 2145 	movw	r1, #581	@ 0x245
 800b2ba:	e7e3      	b.n	800b284 <__mdiff+0x28>
 800b2bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b2c0:	6926      	ldr	r6, [r4, #16]
 800b2c2:	60c5      	str	r5, [r0, #12]
 800b2c4:	f109 0310 	add.w	r3, r9, #16
 800b2c8:	f109 0514 	add.w	r5, r9, #20
 800b2cc:	f104 0e14 	add.w	lr, r4, #20
 800b2d0:	f100 0b14 	add.w	fp, r0, #20
 800b2d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b2d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	46d9      	mov	r9, fp
 800b2e0:	f04f 0c00 	mov.w	ip, #0
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	fa1f f38a 	uxth.w	r3, sl
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	b283      	uxth	r3, r0
 800b2f8:	1acb      	subs	r3, r1, r3
 800b2fa:	0c00      	lsrs	r0, r0, #16
 800b2fc:	4463      	add	r3, ip
 800b2fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b302:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b306:	b29b      	uxth	r3, r3
 800b308:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b30c:	4576      	cmp	r6, lr
 800b30e:	f849 3b04 	str.w	r3, [r9], #4
 800b312:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b316:	d8e5      	bhi.n	800b2e4 <__mdiff+0x88>
 800b318:	1b33      	subs	r3, r6, r4
 800b31a:	3b15      	subs	r3, #21
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	3415      	adds	r4, #21
 800b322:	3304      	adds	r3, #4
 800b324:	42a6      	cmp	r6, r4
 800b326:	bf38      	it	cc
 800b328:	2304      	movcc	r3, #4
 800b32a:	441d      	add	r5, r3
 800b32c:	445b      	add	r3, fp
 800b32e:	461e      	mov	r6, r3
 800b330:	462c      	mov	r4, r5
 800b332:	4544      	cmp	r4, r8
 800b334:	d30e      	bcc.n	800b354 <__mdiff+0xf8>
 800b336:	f108 0103 	add.w	r1, r8, #3
 800b33a:	1b49      	subs	r1, r1, r5
 800b33c:	f021 0103 	bic.w	r1, r1, #3
 800b340:	3d03      	subs	r5, #3
 800b342:	45a8      	cmp	r8, r5
 800b344:	bf38      	it	cc
 800b346:	2100      	movcc	r1, #0
 800b348:	440b      	add	r3, r1
 800b34a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b34e:	b191      	cbz	r1, 800b376 <__mdiff+0x11a>
 800b350:	6117      	str	r7, [r2, #16]
 800b352:	e79d      	b.n	800b290 <__mdiff+0x34>
 800b354:	f854 1b04 	ldr.w	r1, [r4], #4
 800b358:	46e6      	mov	lr, ip
 800b35a:	0c08      	lsrs	r0, r1, #16
 800b35c:	fa1c fc81 	uxtah	ip, ip, r1
 800b360:	4471      	add	r1, lr
 800b362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b366:	b289      	uxth	r1, r1
 800b368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b36c:	f846 1b04 	str.w	r1, [r6], #4
 800b370:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b374:	e7dd      	b.n	800b332 <__mdiff+0xd6>
 800b376:	3f01      	subs	r7, #1
 800b378:	e7e7      	b.n	800b34a <__mdiff+0xee>
 800b37a:	bf00      	nop
 800b37c:	0800c23d 	.word	0x0800c23d
 800b380:	0800c24e 	.word	0x0800c24e

0800b384 <__d2b>:
 800b384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b388:	460f      	mov	r7, r1
 800b38a:	2101      	movs	r1, #1
 800b38c:	ec59 8b10 	vmov	r8, r9, d0
 800b390:	4616      	mov	r6, r2
 800b392:	f7ff fcd5 	bl	800ad40 <_Balloc>
 800b396:	4604      	mov	r4, r0
 800b398:	b930      	cbnz	r0, 800b3a8 <__d2b+0x24>
 800b39a:	4602      	mov	r2, r0
 800b39c:	4b23      	ldr	r3, [pc, #140]	@ (800b42c <__d2b+0xa8>)
 800b39e:	4824      	ldr	r0, [pc, #144]	@ (800b430 <__d2b+0xac>)
 800b3a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3a4:	f000 fa82 	bl	800b8ac <__assert_func>
 800b3a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3b0:	b10d      	cbz	r5, 800b3b6 <__d2b+0x32>
 800b3b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	f1b8 0300 	subs.w	r3, r8, #0
 800b3bc:	d023      	beq.n	800b406 <__d2b+0x82>
 800b3be:	4668      	mov	r0, sp
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	f7ff fd84 	bl	800aece <__lo0bits>
 800b3c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3ca:	b1d0      	cbz	r0, 800b402 <__d2b+0x7e>
 800b3cc:	f1c0 0320 	rsb	r3, r0, #32
 800b3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	40c2      	lsrs	r2, r0
 800b3d8:	6163      	str	r3, [r4, #20]
 800b3da:	9201      	str	r2, [sp, #4]
 800b3dc:	9b01      	ldr	r3, [sp, #4]
 800b3de:	61a3      	str	r3, [r4, #24]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	bf0c      	ite	eq
 800b3e4:	2201      	moveq	r2, #1
 800b3e6:	2202      	movne	r2, #2
 800b3e8:	6122      	str	r2, [r4, #16]
 800b3ea:	b1a5      	cbz	r5, 800b416 <__d2b+0x92>
 800b3ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b3f0:	4405      	add	r5, r0
 800b3f2:	603d      	str	r5, [r7, #0]
 800b3f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b3f8:	6030      	str	r0, [r6, #0]
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	b003      	add	sp, #12
 800b3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b402:	6161      	str	r1, [r4, #20]
 800b404:	e7ea      	b.n	800b3dc <__d2b+0x58>
 800b406:	a801      	add	r0, sp, #4
 800b408:	f7ff fd61 	bl	800aece <__lo0bits>
 800b40c:	9b01      	ldr	r3, [sp, #4]
 800b40e:	6163      	str	r3, [r4, #20]
 800b410:	3020      	adds	r0, #32
 800b412:	2201      	movs	r2, #1
 800b414:	e7e8      	b.n	800b3e8 <__d2b+0x64>
 800b416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b41a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b41e:	6038      	str	r0, [r7, #0]
 800b420:	6918      	ldr	r0, [r3, #16]
 800b422:	f7ff fd35 	bl	800ae90 <__hi0bits>
 800b426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b42a:	e7e5      	b.n	800b3f8 <__d2b+0x74>
 800b42c:	0800c23d 	.word	0x0800c23d
 800b430:	0800c24e 	.word	0x0800c24e

0800b434 <__ssputs_r>:
 800b434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b438:	688e      	ldr	r6, [r1, #8]
 800b43a:	461f      	mov	r7, r3
 800b43c:	42be      	cmp	r6, r7
 800b43e:	680b      	ldr	r3, [r1, #0]
 800b440:	4682      	mov	sl, r0
 800b442:	460c      	mov	r4, r1
 800b444:	4690      	mov	r8, r2
 800b446:	d82d      	bhi.n	800b4a4 <__ssputs_r+0x70>
 800b448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b44c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b450:	d026      	beq.n	800b4a0 <__ssputs_r+0x6c>
 800b452:	6965      	ldr	r5, [r4, #20]
 800b454:	6909      	ldr	r1, [r1, #16]
 800b456:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b45a:	eba3 0901 	sub.w	r9, r3, r1
 800b45e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b462:	1c7b      	adds	r3, r7, #1
 800b464:	444b      	add	r3, r9
 800b466:	106d      	asrs	r5, r5, #1
 800b468:	429d      	cmp	r5, r3
 800b46a:	bf38      	it	cc
 800b46c:	461d      	movcc	r5, r3
 800b46e:	0553      	lsls	r3, r2, #21
 800b470:	d527      	bpl.n	800b4c2 <__ssputs_r+0x8e>
 800b472:	4629      	mov	r1, r5
 800b474:	f7ff fbd8 	bl	800ac28 <_malloc_r>
 800b478:	4606      	mov	r6, r0
 800b47a:	b360      	cbz	r0, 800b4d6 <__ssputs_r+0xa2>
 800b47c:	6921      	ldr	r1, [r4, #16]
 800b47e:	464a      	mov	r2, r9
 800b480:	f000 fa06 	bl	800b890 <memcpy>
 800b484:	89a3      	ldrh	r3, [r4, #12]
 800b486:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b48a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b48e:	81a3      	strh	r3, [r4, #12]
 800b490:	6126      	str	r6, [r4, #16]
 800b492:	6165      	str	r5, [r4, #20]
 800b494:	444e      	add	r6, r9
 800b496:	eba5 0509 	sub.w	r5, r5, r9
 800b49a:	6026      	str	r6, [r4, #0]
 800b49c:	60a5      	str	r5, [r4, #8]
 800b49e:	463e      	mov	r6, r7
 800b4a0:	42be      	cmp	r6, r7
 800b4a2:	d900      	bls.n	800b4a6 <__ssputs_r+0x72>
 800b4a4:	463e      	mov	r6, r7
 800b4a6:	6820      	ldr	r0, [r4, #0]
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	4641      	mov	r1, r8
 800b4ac:	f000 f9c6 	bl	800b83c <memmove>
 800b4b0:	68a3      	ldr	r3, [r4, #8]
 800b4b2:	1b9b      	subs	r3, r3, r6
 800b4b4:	60a3      	str	r3, [r4, #8]
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	4433      	add	r3, r6
 800b4ba:	6023      	str	r3, [r4, #0]
 800b4bc:	2000      	movs	r0, #0
 800b4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	f000 fa36 	bl	800b934 <_realloc_r>
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d1e0      	bne.n	800b490 <__ssputs_r+0x5c>
 800b4ce:	6921      	ldr	r1, [r4, #16]
 800b4d0:	4650      	mov	r0, sl
 800b4d2:	f7ff fb35 	bl	800ab40 <_free_r>
 800b4d6:	230c      	movs	r3, #12
 800b4d8:	f8ca 3000 	str.w	r3, [sl]
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4e2:	81a3      	strh	r3, [r4, #12]
 800b4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e8:	e7e9      	b.n	800b4be <__ssputs_r+0x8a>
	...

0800b4ec <_svfiprintf_r>:
 800b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f0:	4698      	mov	r8, r3
 800b4f2:	898b      	ldrh	r3, [r1, #12]
 800b4f4:	061b      	lsls	r3, r3, #24
 800b4f6:	b09d      	sub	sp, #116	@ 0x74
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	d510      	bpl.n	800b522 <_svfiprintf_r+0x36>
 800b500:	690b      	ldr	r3, [r1, #16]
 800b502:	b973      	cbnz	r3, 800b522 <_svfiprintf_r+0x36>
 800b504:	2140      	movs	r1, #64	@ 0x40
 800b506:	f7ff fb8f 	bl	800ac28 <_malloc_r>
 800b50a:	6028      	str	r0, [r5, #0]
 800b50c:	6128      	str	r0, [r5, #16]
 800b50e:	b930      	cbnz	r0, 800b51e <_svfiprintf_r+0x32>
 800b510:	230c      	movs	r3, #12
 800b512:	603b      	str	r3, [r7, #0]
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	b01d      	add	sp, #116	@ 0x74
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	2340      	movs	r3, #64	@ 0x40
 800b520:	616b      	str	r3, [r5, #20]
 800b522:	2300      	movs	r3, #0
 800b524:	9309      	str	r3, [sp, #36]	@ 0x24
 800b526:	2320      	movs	r3, #32
 800b528:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b52c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b530:	2330      	movs	r3, #48	@ 0x30
 800b532:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6d0 <_svfiprintf_r+0x1e4>
 800b536:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b53a:	f04f 0901 	mov.w	r9, #1
 800b53e:	4623      	mov	r3, r4
 800b540:	469a      	mov	sl, r3
 800b542:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b546:	b10a      	cbz	r2, 800b54c <_svfiprintf_r+0x60>
 800b548:	2a25      	cmp	r2, #37	@ 0x25
 800b54a:	d1f9      	bne.n	800b540 <_svfiprintf_r+0x54>
 800b54c:	ebba 0b04 	subs.w	fp, sl, r4
 800b550:	d00b      	beq.n	800b56a <_svfiprintf_r+0x7e>
 800b552:	465b      	mov	r3, fp
 800b554:	4622      	mov	r2, r4
 800b556:	4629      	mov	r1, r5
 800b558:	4638      	mov	r0, r7
 800b55a:	f7ff ff6b 	bl	800b434 <__ssputs_r>
 800b55e:	3001      	adds	r0, #1
 800b560:	f000 80a7 	beq.w	800b6b2 <_svfiprintf_r+0x1c6>
 800b564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b566:	445a      	add	r2, fp
 800b568:	9209      	str	r2, [sp, #36]	@ 0x24
 800b56a:	f89a 3000 	ldrb.w	r3, [sl]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 809f 	beq.w	800b6b2 <_svfiprintf_r+0x1c6>
 800b574:	2300      	movs	r3, #0
 800b576:	f04f 32ff 	mov.w	r2, #4294967295
 800b57a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b57e:	f10a 0a01 	add.w	sl, sl, #1
 800b582:	9304      	str	r3, [sp, #16]
 800b584:	9307      	str	r3, [sp, #28]
 800b586:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b58a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b58c:	4654      	mov	r4, sl
 800b58e:	2205      	movs	r2, #5
 800b590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b594:	484e      	ldr	r0, [pc, #312]	@ (800b6d0 <_svfiprintf_r+0x1e4>)
 800b596:	f7f4 fe23 	bl	80001e0 <memchr>
 800b59a:	9a04      	ldr	r2, [sp, #16]
 800b59c:	b9d8      	cbnz	r0, 800b5d6 <_svfiprintf_r+0xea>
 800b59e:	06d0      	lsls	r0, r2, #27
 800b5a0:	bf44      	itt	mi
 800b5a2:	2320      	movmi	r3, #32
 800b5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5a8:	0711      	lsls	r1, r2, #28
 800b5aa:	bf44      	itt	mi
 800b5ac:	232b      	movmi	r3, #43	@ 0x2b
 800b5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5b8:	d015      	beq.n	800b5e6 <_svfiprintf_r+0xfa>
 800b5ba:	9a07      	ldr	r2, [sp, #28]
 800b5bc:	4654      	mov	r4, sl
 800b5be:	2000      	movs	r0, #0
 800b5c0:	f04f 0c0a 	mov.w	ip, #10
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ca:	3b30      	subs	r3, #48	@ 0x30
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	d94b      	bls.n	800b668 <_svfiprintf_r+0x17c>
 800b5d0:	b1b0      	cbz	r0, 800b600 <_svfiprintf_r+0x114>
 800b5d2:	9207      	str	r2, [sp, #28]
 800b5d4:	e014      	b.n	800b600 <_svfiprintf_r+0x114>
 800b5d6:	eba0 0308 	sub.w	r3, r0, r8
 800b5da:	fa09 f303 	lsl.w	r3, r9, r3
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	9304      	str	r3, [sp, #16]
 800b5e2:	46a2      	mov	sl, r4
 800b5e4:	e7d2      	b.n	800b58c <_svfiprintf_r+0xa0>
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	1d19      	adds	r1, r3, #4
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	9103      	str	r1, [sp, #12]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	bfbb      	ittet	lt
 800b5f2:	425b      	neglt	r3, r3
 800b5f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b5f8:	9307      	strge	r3, [sp, #28]
 800b5fa:	9307      	strlt	r3, [sp, #28]
 800b5fc:	bfb8      	it	lt
 800b5fe:	9204      	strlt	r2, [sp, #16]
 800b600:	7823      	ldrb	r3, [r4, #0]
 800b602:	2b2e      	cmp	r3, #46	@ 0x2e
 800b604:	d10a      	bne.n	800b61c <_svfiprintf_r+0x130>
 800b606:	7863      	ldrb	r3, [r4, #1]
 800b608:	2b2a      	cmp	r3, #42	@ 0x2a
 800b60a:	d132      	bne.n	800b672 <_svfiprintf_r+0x186>
 800b60c:	9b03      	ldr	r3, [sp, #12]
 800b60e:	1d1a      	adds	r2, r3, #4
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	9203      	str	r2, [sp, #12]
 800b614:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b618:	3402      	adds	r4, #2
 800b61a:	9305      	str	r3, [sp, #20]
 800b61c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6e0 <_svfiprintf_r+0x1f4>
 800b620:	7821      	ldrb	r1, [r4, #0]
 800b622:	2203      	movs	r2, #3
 800b624:	4650      	mov	r0, sl
 800b626:	f7f4 fddb 	bl	80001e0 <memchr>
 800b62a:	b138      	cbz	r0, 800b63c <_svfiprintf_r+0x150>
 800b62c:	9b04      	ldr	r3, [sp, #16]
 800b62e:	eba0 000a 	sub.w	r0, r0, sl
 800b632:	2240      	movs	r2, #64	@ 0x40
 800b634:	4082      	lsls	r2, r0
 800b636:	4313      	orrs	r3, r2
 800b638:	3401      	adds	r4, #1
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b640:	4824      	ldr	r0, [pc, #144]	@ (800b6d4 <_svfiprintf_r+0x1e8>)
 800b642:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b646:	2206      	movs	r2, #6
 800b648:	f7f4 fdca 	bl	80001e0 <memchr>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d036      	beq.n	800b6be <_svfiprintf_r+0x1d2>
 800b650:	4b21      	ldr	r3, [pc, #132]	@ (800b6d8 <_svfiprintf_r+0x1ec>)
 800b652:	bb1b      	cbnz	r3, 800b69c <_svfiprintf_r+0x1b0>
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	3307      	adds	r3, #7
 800b658:	f023 0307 	bic.w	r3, r3, #7
 800b65c:	3308      	adds	r3, #8
 800b65e:	9303      	str	r3, [sp, #12]
 800b660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b662:	4433      	add	r3, r6
 800b664:	9309      	str	r3, [sp, #36]	@ 0x24
 800b666:	e76a      	b.n	800b53e <_svfiprintf_r+0x52>
 800b668:	fb0c 3202 	mla	r2, ip, r2, r3
 800b66c:	460c      	mov	r4, r1
 800b66e:	2001      	movs	r0, #1
 800b670:	e7a8      	b.n	800b5c4 <_svfiprintf_r+0xd8>
 800b672:	2300      	movs	r3, #0
 800b674:	3401      	adds	r4, #1
 800b676:	9305      	str	r3, [sp, #20]
 800b678:	4619      	mov	r1, r3
 800b67a:	f04f 0c0a 	mov.w	ip, #10
 800b67e:	4620      	mov	r0, r4
 800b680:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b684:	3a30      	subs	r2, #48	@ 0x30
 800b686:	2a09      	cmp	r2, #9
 800b688:	d903      	bls.n	800b692 <_svfiprintf_r+0x1a6>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d0c6      	beq.n	800b61c <_svfiprintf_r+0x130>
 800b68e:	9105      	str	r1, [sp, #20]
 800b690:	e7c4      	b.n	800b61c <_svfiprintf_r+0x130>
 800b692:	fb0c 2101 	mla	r1, ip, r1, r2
 800b696:	4604      	mov	r4, r0
 800b698:	2301      	movs	r3, #1
 800b69a:	e7f0      	b.n	800b67e <_svfiprintf_r+0x192>
 800b69c:	ab03      	add	r3, sp, #12
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	462a      	mov	r2, r5
 800b6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b6dc <_svfiprintf_r+0x1f0>)
 800b6a4:	a904      	add	r1, sp, #16
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	f7fd fe80 	bl	80093ac <_printf_float>
 800b6ac:	1c42      	adds	r2, r0, #1
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	d1d6      	bne.n	800b660 <_svfiprintf_r+0x174>
 800b6b2:	89ab      	ldrh	r3, [r5, #12]
 800b6b4:	065b      	lsls	r3, r3, #25
 800b6b6:	f53f af2d 	bmi.w	800b514 <_svfiprintf_r+0x28>
 800b6ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6bc:	e72c      	b.n	800b518 <_svfiprintf_r+0x2c>
 800b6be:	ab03      	add	r3, sp, #12
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	462a      	mov	r2, r5
 800b6c4:	4b05      	ldr	r3, [pc, #20]	@ (800b6dc <_svfiprintf_r+0x1f0>)
 800b6c6:	a904      	add	r1, sp, #16
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f7fe f907 	bl	80098dc <_printf_i>
 800b6ce:	e7ed      	b.n	800b6ac <_svfiprintf_r+0x1c0>
 800b6d0:	0800c2a7 	.word	0x0800c2a7
 800b6d4:	0800c2b1 	.word	0x0800c2b1
 800b6d8:	080093ad 	.word	0x080093ad
 800b6dc:	0800b435 	.word	0x0800b435
 800b6e0:	0800c2ad 	.word	0x0800c2ad

0800b6e4 <__sflush_r>:
 800b6e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ec:	0716      	lsls	r6, r2, #28
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	d454      	bmi.n	800b79e <__sflush_r+0xba>
 800b6f4:	684b      	ldr	r3, [r1, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dc02      	bgt.n	800b700 <__sflush_r+0x1c>
 800b6fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd48      	ble.n	800b792 <__sflush_r+0xae>
 800b700:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b702:	2e00      	cmp	r6, #0
 800b704:	d045      	beq.n	800b792 <__sflush_r+0xae>
 800b706:	2300      	movs	r3, #0
 800b708:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b70c:	682f      	ldr	r7, [r5, #0]
 800b70e:	6a21      	ldr	r1, [r4, #32]
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	d030      	beq.n	800b776 <__sflush_r+0x92>
 800b714:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	0759      	lsls	r1, r3, #29
 800b71a:	d505      	bpl.n	800b728 <__sflush_r+0x44>
 800b71c:	6863      	ldr	r3, [r4, #4]
 800b71e:	1ad2      	subs	r2, r2, r3
 800b720:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b722:	b10b      	cbz	r3, 800b728 <__sflush_r+0x44>
 800b724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	2300      	movs	r3, #0
 800b72a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b72c:	6a21      	ldr	r1, [r4, #32]
 800b72e:	4628      	mov	r0, r5
 800b730:	47b0      	blx	r6
 800b732:	1c43      	adds	r3, r0, #1
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	d106      	bne.n	800b746 <__sflush_r+0x62>
 800b738:	6829      	ldr	r1, [r5, #0]
 800b73a:	291d      	cmp	r1, #29
 800b73c:	d82b      	bhi.n	800b796 <__sflush_r+0xb2>
 800b73e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7e8 <__sflush_r+0x104>)
 800b740:	40ca      	lsrs	r2, r1
 800b742:	07d6      	lsls	r6, r2, #31
 800b744:	d527      	bpl.n	800b796 <__sflush_r+0xb2>
 800b746:	2200      	movs	r2, #0
 800b748:	6062      	str	r2, [r4, #4]
 800b74a:	04d9      	lsls	r1, r3, #19
 800b74c:	6922      	ldr	r2, [r4, #16]
 800b74e:	6022      	str	r2, [r4, #0]
 800b750:	d504      	bpl.n	800b75c <__sflush_r+0x78>
 800b752:	1c42      	adds	r2, r0, #1
 800b754:	d101      	bne.n	800b75a <__sflush_r+0x76>
 800b756:	682b      	ldr	r3, [r5, #0]
 800b758:	b903      	cbnz	r3, 800b75c <__sflush_r+0x78>
 800b75a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b75c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b75e:	602f      	str	r7, [r5, #0]
 800b760:	b1b9      	cbz	r1, 800b792 <__sflush_r+0xae>
 800b762:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b766:	4299      	cmp	r1, r3
 800b768:	d002      	beq.n	800b770 <__sflush_r+0x8c>
 800b76a:	4628      	mov	r0, r5
 800b76c:	f7ff f9e8 	bl	800ab40 <_free_r>
 800b770:	2300      	movs	r3, #0
 800b772:	6363      	str	r3, [r4, #52]	@ 0x34
 800b774:	e00d      	b.n	800b792 <__sflush_r+0xae>
 800b776:	2301      	movs	r3, #1
 800b778:	4628      	mov	r0, r5
 800b77a:	47b0      	blx	r6
 800b77c:	4602      	mov	r2, r0
 800b77e:	1c50      	adds	r0, r2, #1
 800b780:	d1c9      	bne.n	800b716 <__sflush_r+0x32>
 800b782:	682b      	ldr	r3, [r5, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0c6      	beq.n	800b716 <__sflush_r+0x32>
 800b788:	2b1d      	cmp	r3, #29
 800b78a:	d001      	beq.n	800b790 <__sflush_r+0xac>
 800b78c:	2b16      	cmp	r3, #22
 800b78e:	d11e      	bne.n	800b7ce <__sflush_r+0xea>
 800b790:	602f      	str	r7, [r5, #0]
 800b792:	2000      	movs	r0, #0
 800b794:	e022      	b.n	800b7dc <__sflush_r+0xf8>
 800b796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b79a:	b21b      	sxth	r3, r3
 800b79c:	e01b      	b.n	800b7d6 <__sflush_r+0xf2>
 800b79e:	690f      	ldr	r7, [r1, #16]
 800b7a0:	2f00      	cmp	r7, #0
 800b7a2:	d0f6      	beq.n	800b792 <__sflush_r+0xae>
 800b7a4:	0793      	lsls	r3, r2, #30
 800b7a6:	680e      	ldr	r6, [r1, #0]
 800b7a8:	bf08      	it	eq
 800b7aa:	694b      	ldreq	r3, [r1, #20]
 800b7ac:	600f      	str	r7, [r1, #0]
 800b7ae:	bf18      	it	ne
 800b7b0:	2300      	movne	r3, #0
 800b7b2:	eba6 0807 	sub.w	r8, r6, r7
 800b7b6:	608b      	str	r3, [r1, #8]
 800b7b8:	f1b8 0f00 	cmp.w	r8, #0
 800b7bc:	dde9      	ble.n	800b792 <__sflush_r+0xae>
 800b7be:	6a21      	ldr	r1, [r4, #32]
 800b7c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7c2:	4643      	mov	r3, r8
 800b7c4:	463a      	mov	r2, r7
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	47b0      	blx	r6
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	dc08      	bgt.n	800b7e0 <__sflush_r+0xfc>
 800b7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d6:	81a3      	strh	r3, [r4, #12]
 800b7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e0:	4407      	add	r7, r0
 800b7e2:	eba8 0800 	sub.w	r8, r8, r0
 800b7e6:	e7e7      	b.n	800b7b8 <__sflush_r+0xd4>
 800b7e8:	20400001 	.word	0x20400001

0800b7ec <_fflush_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	690b      	ldr	r3, [r1, #16]
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	b913      	cbnz	r3, 800b7fc <_fflush_r+0x10>
 800b7f6:	2500      	movs	r5, #0
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	b118      	cbz	r0, 800b806 <_fflush_r+0x1a>
 800b7fe:	6a03      	ldr	r3, [r0, #32]
 800b800:	b90b      	cbnz	r3, 800b806 <_fflush_r+0x1a>
 800b802:	f7fe fa15 	bl	8009c30 <__sinit>
 800b806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d0f3      	beq.n	800b7f6 <_fflush_r+0xa>
 800b80e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b810:	07d0      	lsls	r0, r2, #31
 800b812:	d404      	bmi.n	800b81e <_fflush_r+0x32>
 800b814:	0599      	lsls	r1, r3, #22
 800b816:	d402      	bmi.n	800b81e <_fflush_r+0x32>
 800b818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b81a:	f7fe fb34 	bl	8009e86 <__retarget_lock_acquire_recursive>
 800b81e:	4628      	mov	r0, r5
 800b820:	4621      	mov	r1, r4
 800b822:	f7ff ff5f 	bl	800b6e4 <__sflush_r>
 800b826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b828:	07da      	lsls	r2, r3, #31
 800b82a:	4605      	mov	r5, r0
 800b82c:	d4e4      	bmi.n	800b7f8 <_fflush_r+0xc>
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	059b      	lsls	r3, r3, #22
 800b832:	d4e1      	bmi.n	800b7f8 <_fflush_r+0xc>
 800b834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b836:	f7fe fb27 	bl	8009e88 <__retarget_lock_release_recursive>
 800b83a:	e7dd      	b.n	800b7f8 <_fflush_r+0xc>

0800b83c <memmove>:
 800b83c:	4288      	cmp	r0, r1
 800b83e:	b510      	push	{r4, lr}
 800b840:	eb01 0402 	add.w	r4, r1, r2
 800b844:	d902      	bls.n	800b84c <memmove+0x10>
 800b846:	4284      	cmp	r4, r0
 800b848:	4623      	mov	r3, r4
 800b84a:	d807      	bhi.n	800b85c <memmove+0x20>
 800b84c:	1e43      	subs	r3, r0, #1
 800b84e:	42a1      	cmp	r1, r4
 800b850:	d008      	beq.n	800b864 <memmove+0x28>
 800b852:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b85a:	e7f8      	b.n	800b84e <memmove+0x12>
 800b85c:	4402      	add	r2, r0
 800b85e:	4601      	mov	r1, r0
 800b860:	428a      	cmp	r2, r1
 800b862:	d100      	bne.n	800b866 <memmove+0x2a>
 800b864:	bd10      	pop	{r4, pc}
 800b866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b86a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b86e:	e7f7      	b.n	800b860 <memmove+0x24>

0800b870 <_sbrk_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4d06      	ldr	r5, [pc, #24]	@ (800b88c <_sbrk_r+0x1c>)
 800b874:	2300      	movs	r3, #0
 800b876:	4604      	mov	r4, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	602b      	str	r3, [r5, #0]
 800b87c:	f7f6 f8c8 	bl	8001a10 <_sbrk>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_sbrk_r+0x1a>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_sbrk_r+0x1a>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	20000f50 	.word	0x20000f50

0800b890 <memcpy>:
 800b890:	440a      	add	r2, r1
 800b892:	4291      	cmp	r1, r2
 800b894:	f100 33ff 	add.w	r3, r0, #4294967295
 800b898:	d100      	bne.n	800b89c <memcpy+0xc>
 800b89a:	4770      	bx	lr
 800b89c:	b510      	push	{r4, lr}
 800b89e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8a6:	4291      	cmp	r1, r2
 800b8a8:	d1f9      	bne.n	800b89e <memcpy+0xe>
 800b8aa:	bd10      	pop	{r4, pc}

0800b8ac <__assert_func>:
 800b8ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ae:	4614      	mov	r4, r2
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4b09      	ldr	r3, [pc, #36]	@ (800b8d8 <__assert_func+0x2c>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	68d8      	ldr	r0, [r3, #12]
 800b8ba:	b14c      	cbz	r4, 800b8d0 <__assert_func+0x24>
 800b8bc:	4b07      	ldr	r3, [pc, #28]	@ (800b8dc <__assert_func+0x30>)
 800b8be:	9100      	str	r1, [sp, #0]
 800b8c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8c4:	4906      	ldr	r1, [pc, #24]	@ (800b8e0 <__assert_func+0x34>)
 800b8c6:	462b      	mov	r3, r5
 800b8c8:	f000 f870 	bl	800b9ac <fiprintf>
 800b8cc:	f000 f880 	bl	800b9d0 <abort>
 800b8d0:	4b04      	ldr	r3, [pc, #16]	@ (800b8e4 <__assert_func+0x38>)
 800b8d2:	461c      	mov	r4, r3
 800b8d4:	e7f3      	b.n	800b8be <__assert_func+0x12>
 800b8d6:	bf00      	nop
 800b8d8:	20000110 	.word	0x20000110
 800b8dc:	0800c2c2 	.word	0x0800c2c2
 800b8e0:	0800c2cf 	.word	0x0800c2cf
 800b8e4:	0800c2fd 	.word	0x0800c2fd

0800b8e8 <_calloc_r>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	fba1 5402 	umull	r5, r4, r1, r2
 800b8ee:	b934      	cbnz	r4, 800b8fe <_calloc_r+0x16>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	f7ff f999 	bl	800ac28 <_malloc_r>
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	b928      	cbnz	r0, 800b906 <_calloc_r+0x1e>
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	bd70      	pop	{r4, r5, r6, pc}
 800b8fe:	220c      	movs	r2, #12
 800b900:	6002      	str	r2, [r0, #0]
 800b902:	2600      	movs	r6, #0
 800b904:	e7f9      	b.n	800b8fa <_calloc_r+0x12>
 800b906:	462a      	mov	r2, r5
 800b908:	4621      	mov	r1, r4
 800b90a:	f7fe fa2c 	bl	8009d66 <memset>
 800b90e:	e7f4      	b.n	800b8fa <_calloc_r+0x12>

0800b910 <__ascii_mbtowc>:
 800b910:	b082      	sub	sp, #8
 800b912:	b901      	cbnz	r1, 800b916 <__ascii_mbtowc+0x6>
 800b914:	a901      	add	r1, sp, #4
 800b916:	b142      	cbz	r2, 800b92a <__ascii_mbtowc+0x1a>
 800b918:	b14b      	cbz	r3, 800b92e <__ascii_mbtowc+0x1e>
 800b91a:	7813      	ldrb	r3, [r2, #0]
 800b91c:	600b      	str	r3, [r1, #0]
 800b91e:	7812      	ldrb	r2, [r2, #0]
 800b920:	1e10      	subs	r0, r2, #0
 800b922:	bf18      	it	ne
 800b924:	2001      	movne	r0, #1
 800b926:	b002      	add	sp, #8
 800b928:	4770      	bx	lr
 800b92a:	4610      	mov	r0, r2
 800b92c:	e7fb      	b.n	800b926 <__ascii_mbtowc+0x16>
 800b92e:	f06f 0001 	mvn.w	r0, #1
 800b932:	e7f8      	b.n	800b926 <__ascii_mbtowc+0x16>

0800b934 <_realloc_r>:
 800b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	4607      	mov	r7, r0
 800b93a:	4614      	mov	r4, r2
 800b93c:	460d      	mov	r5, r1
 800b93e:	b921      	cbnz	r1, 800b94a <_realloc_r+0x16>
 800b940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b944:	4611      	mov	r1, r2
 800b946:	f7ff b96f 	b.w	800ac28 <_malloc_r>
 800b94a:	b92a      	cbnz	r2, 800b958 <_realloc_r+0x24>
 800b94c:	f7ff f8f8 	bl	800ab40 <_free_r>
 800b950:	4625      	mov	r5, r4
 800b952:	4628      	mov	r0, r5
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	f000 f841 	bl	800b9de <_malloc_usable_size_r>
 800b95c:	4284      	cmp	r4, r0
 800b95e:	4606      	mov	r6, r0
 800b960:	d802      	bhi.n	800b968 <_realloc_r+0x34>
 800b962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b966:	d8f4      	bhi.n	800b952 <_realloc_r+0x1e>
 800b968:	4621      	mov	r1, r4
 800b96a:	4638      	mov	r0, r7
 800b96c:	f7ff f95c 	bl	800ac28 <_malloc_r>
 800b970:	4680      	mov	r8, r0
 800b972:	b908      	cbnz	r0, 800b978 <_realloc_r+0x44>
 800b974:	4645      	mov	r5, r8
 800b976:	e7ec      	b.n	800b952 <_realloc_r+0x1e>
 800b978:	42b4      	cmp	r4, r6
 800b97a:	4622      	mov	r2, r4
 800b97c:	4629      	mov	r1, r5
 800b97e:	bf28      	it	cs
 800b980:	4632      	movcs	r2, r6
 800b982:	f7ff ff85 	bl	800b890 <memcpy>
 800b986:	4629      	mov	r1, r5
 800b988:	4638      	mov	r0, r7
 800b98a:	f7ff f8d9 	bl	800ab40 <_free_r>
 800b98e:	e7f1      	b.n	800b974 <_realloc_r+0x40>

0800b990 <__ascii_wctomb>:
 800b990:	4603      	mov	r3, r0
 800b992:	4608      	mov	r0, r1
 800b994:	b141      	cbz	r1, 800b9a8 <__ascii_wctomb+0x18>
 800b996:	2aff      	cmp	r2, #255	@ 0xff
 800b998:	d904      	bls.n	800b9a4 <__ascii_wctomb+0x14>
 800b99a:	228a      	movs	r2, #138	@ 0x8a
 800b99c:	601a      	str	r2, [r3, #0]
 800b99e:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a2:	4770      	bx	lr
 800b9a4:	700a      	strb	r2, [r1, #0]
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	4770      	bx	lr
	...

0800b9ac <fiprintf>:
 800b9ac:	b40e      	push	{r1, r2, r3}
 800b9ae:	b503      	push	{r0, r1, lr}
 800b9b0:	4601      	mov	r1, r0
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	4805      	ldr	r0, [pc, #20]	@ (800b9cc <fiprintf+0x20>)
 800b9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ba:	6800      	ldr	r0, [r0, #0]
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	f000 f83f 	bl	800ba40 <_vfiprintf_r>
 800b9c2:	b002      	add	sp, #8
 800b9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9c8:	b003      	add	sp, #12
 800b9ca:	4770      	bx	lr
 800b9cc:	20000110 	.word	0x20000110

0800b9d0 <abort>:
 800b9d0:	b508      	push	{r3, lr}
 800b9d2:	2006      	movs	r0, #6
 800b9d4:	f000 fa08 	bl	800bde8 <raise>
 800b9d8:	2001      	movs	r0, #1
 800b9da:	f7f5 ffa1 	bl	8001920 <_exit>

0800b9de <_malloc_usable_size_r>:
 800b9de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e2:	1f18      	subs	r0, r3, #4
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bfbc      	itt	lt
 800b9e8:	580b      	ldrlt	r3, [r1, r0]
 800b9ea:	18c0      	addlt	r0, r0, r3
 800b9ec:	4770      	bx	lr

0800b9ee <__sfputc_r>:
 800b9ee:	6893      	ldr	r3, [r2, #8]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	b410      	push	{r4}
 800b9f6:	6093      	str	r3, [r2, #8]
 800b9f8:	da08      	bge.n	800ba0c <__sfputc_r+0x1e>
 800b9fa:	6994      	ldr	r4, [r2, #24]
 800b9fc:	42a3      	cmp	r3, r4
 800b9fe:	db01      	blt.n	800ba04 <__sfputc_r+0x16>
 800ba00:	290a      	cmp	r1, #10
 800ba02:	d103      	bne.n	800ba0c <__sfputc_r+0x1e>
 800ba04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba08:	f000 b932 	b.w	800bc70 <__swbuf_r>
 800ba0c:	6813      	ldr	r3, [r2, #0]
 800ba0e:	1c58      	adds	r0, r3, #1
 800ba10:	6010      	str	r0, [r2, #0]
 800ba12:	7019      	strb	r1, [r3, #0]
 800ba14:	4608      	mov	r0, r1
 800ba16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <__sfputs_r>:
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1e:	4606      	mov	r6, r0
 800ba20:	460f      	mov	r7, r1
 800ba22:	4614      	mov	r4, r2
 800ba24:	18d5      	adds	r5, r2, r3
 800ba26:	42ac      	cmp	r4, r5
 800ba28:	d101      	bne.n	800ba2e <__sfputs_r+0x12>
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	e007      	b.n	800ba3e <__sfputs_r+0x22>
 800ba2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba32:	463a      	mov	r2, r7
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff ffda 	bl	800b9ee <__sfputc_r>
 800ba3a:	1c43      	adds	r3, r0, #1
 800ba3c:	d1f3      	bne.n	800ba26 <__sfputs_r+0xa>
 800ba3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba40 <_vfiprintf_r>:
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	460d      	mov	r5, r1
 800ba46:	b09d      	sub	sp, #116	@ 0x74
 800ba48:	4614      	mov	r4, r2
 800ba4a:	4698      	mov	r8, r3
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	b118      	cbz	r0, 800ba58 <_vfiprintf_r+0x18>
 800ba50:	6a03      	ldr	r3, [r0, #32]
 800ba52:	b90b      	cbnz	r3, 800ba58 <_vfiprintf_r+0x18>
 800ba54:	f7fe f8ec 	bl	8009c30 <__sinit>
 800ba58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba5a:	07d9      	lsls	r1, r3, #31
 800ba5c:	d405      	bmi.n	800ba6a <_vfiprintf_r+0x2a>
 800ba5e:	89ab      	ldrh	r3, [r5, #12]
 800ba60:	059a      	lsls	r2, r3, #22
 800ba62:	d402      	bmi.n	800ba6a <_vfiprintf_r+0x2a>
 800ba64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba66:	f7fe fa0e 	bl	8009e86 <__retarget_lock_acquire_recursive>
 800ba6a:	89ab      	ldrh	r3, [r5, #12]
 800ba6c:	071b      	lsls	r3, r3, #28
 800ba6e:	d501      	bpl.n	800ba74 <_vfiprintf_r+0x34>
 800ba70:	692b      	ldr	r3, [r5, #16]
 800ba72:	b99b      	cbnz	r3, 800ba9c <_vfiprintf_r+0x5c>
 800ba74:	4629      	mov	r1, r5
 800ba76:	4630      	mov	r0, r6
 800ba78:	f000 f938 	bl	800bcec <__swsetup_r>
 800ba7c:	b170      	cbz	r0, 800ba9c <_vfiprintf_r+0x5c>
 800ba7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba80:	07dc      	lsls	r4, r3, #31
 800ba82:	d504      	bpl.n	800ba8e <_vfiprintf_r+0x4e>
 800ba84:	f04f 30ff 	mov.w	r0, #4294967295
 800ba88:	b01d      	add	sp, #116	@ 0x74
 800ba8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8e:	89ab      	ldrh	r3, [r5, #12]
 800ba90:	0598      	lsls	r0, r3, #22
 800ba92:	d4f7      	bmi.n	800ba84 <_vfiprintf_r+0x44>
 800ba94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba96:	f7fe f9f7 	bl	8009e88 <__retarget_lock_release_recursive>
 800ba9a:	e7f3      	b.n	800ba84 <_vfiprintf_r+0x44>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800baa0:	2320      	movs	r3, #32
 800baa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800baa6:	f8cd 800c 	str.w	r8, [sp, #12]
 800baaa:	2330      	movs	r3, #48	@ 0x30
 800baac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc5c <_vfiprintf_r+0x21c>
 800bab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bab4:	f04f 0901 	mov.w	r9, #1
 800bab8:	4623      	mov	r3, r4
 800baba:	469a      	mov	sl, r3
 800babc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bac0:	b10a      	cbz	r2, 800bac6 <_vfiprintf_r+0x86>
 800bac2:	2a25      	cmp	r2, #37	@ 0x25
 800bac4:	d1f9      	bne.n	800baba <_vfiprintf_r+0x7a>
 800bac6:	ebba 0b04 	subs.w	fp, sl, r4
 800baca:	d00b      	beq.n	800bae4 <_vfiprintf_r+0xa4>
 800bacc:	465b      	mov	r3, fp
 800bace:	4622      	mov	r2, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	4630      	mov	r0, r6
 800bad4:	f7ff ffa2 	bl	800ba1c <__sfputs_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	f000 80a7 	beq.w	800bc2c <_vfiprintf_r+0x1ec>
 800bade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bae0:	445a      	add	r2, fp
 800bae2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bae4:	f89a 3000 	ldrb.w	r3, [sl]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 809f 	beq.w	800bc2c <_vfiprintf_r+0x1ec>
 800baee:	2300      	movs	r3, #0
 800baf0:	f04f 32ff 	mov.w	r2, #4294967295
 800baf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baf8:	f10a 0a01 	add.w	sl, sl, #1
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	9307      	str	r3, [sp, #28]
 800bb00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb04:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb06:	4654      	mov	r4, sl
 800bb08:	2205      	movs	r2, #5
 800bb0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb0e:	4853      	ldr	r0, [pc, #332]	@ (800bc5c <_vfiprintf_r+0x21c>)
 800bb10:	f7f4 fb66 	bl	80001e0 <memchr>
 800bb14:	9a04      	ldr	r2, [sp, #16]
 800bb16:	b9d8      	cbnz	r0, 800bb50 <_vfiprintf_r+0x110>
 800bb18:	06d1      	lsls	r1, r2, #27
 800bb1a:	bf44      	itt	mi
 800bb1c:	2320      	movmi	r3, #32
 800bb1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb22:	0713      	lsls	r3, r2, #28
 800bb24:	bf44      	itt	mi
 800bb26:	232b      	movmi	r3, #43	@ 0x2b
 800bb28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb2c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb30:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb32:	d015      	beq.n	800bb60 <_vfiprintf_r+0x120>
 800bb34:	9a07      	ldr	r2, [sp, #28]
 800bb36:	4654      	mov	r4, sl
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f04f 0c0a 	mov.w	ip, #10
 800bb3e:	4621      	mov	r1, r4
 800bb40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb44:	3b30      	subs	r3, #48	@ 0x30
 800bb46:	2b09      	cmp	r3, #9
 800bb48:	d94b      	bls.n	800bbe2 <_vfiprintf_r+0x1a2>
 800bb4a:	b1b0      	cbz	r0, 800bb7a <_vfiprintf_r+0x13a>
 800bb4c:	9207      	str	r2, [sp, #28]
 800bb4e:	e014      	b.n	800bb7a <_vfiprintf_r+0x13a>
 800bb50:	eba0 0308 	sub.w	r3, r0, r8
 800bb54:	fa09 f303 	lsl.w	r3, r9, r3
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	9304      	str	r3, [sp, #16]
 800bb5c:	46a2      	mov	sl, r4
 800bb5e:	e7d2      	b.n	800bb06 <_vfiprintf_r+0xc6>
 800bb60:	9b03      	ldr	r3, [sp, #12]
 800bb62:	1d19      	adds	r1, r3, #4
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	9103      	str	r1, [sp, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bfbb      	ittet	lt
 800bb6c:	425b      	neglt	r3, r3
 800bb6e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb72:	9307      	strge	r3, [sp, #28]
 800bb74:	9307      	strlt	r3, [sp, #28]
 800bb76:	bfb8      	it	lt
 800bb78:	9204      	strlt	r2, [sp, #16]
 800bb7a:	7823      	ldrb	r3, [r4, #0]
 800bb7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb7e:	d10a      	bne.n	800bb96 <_vfiprintf_r+0x156>
 800bb80:	7863      	ldrb	r3, [r4, #1]
 800bb82:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb84:	d132      	bne.n	800bbec <_vfiprintf_r+0x1ac>
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	1d1a      	adds	r2, r3, #4
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	9203      	str	r2, [sp, #12]
 800bb8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb92:	3402      	adds	r4, #2
 800bb94:	9305      	str	r3, [sp, #20]
 800bb96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc6c <_vfiprintf_r+0x22c>
 800bb9a:	7821      	ldrb	r1, [r4, #0]
 800bb9c:	2203      	movs	r2, #3
 800bb9e:	4650      	mov	r0, sl
 800bba0:	f7f4 fb1e 	bl	80001e0 <memchr>
 800bba4:	b138      	cbz	r0, 800bbb6 <_vfiprintf_r+0x176>
 800bba6:	9b04      	ldr	r3, [sp, #16]
 800bba8:	eba0 000a 	sub.w	r0, r0, sl
 800bbac:	2240      	movs	r2, #64	@ 0x40
 800bbae:	4082      	lsls	r2, r0
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	3401      	adds	r4, #1
 800bbb4:	9304      	str	r3, [sp, #16]
 800bbb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbba:	4829      	ldr	r0, [pc, #164]	@ (800bc60 <_vfiprintf_r+0x220>)
 800bbbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbc0:	2206      	movs	r2, #6
 800bbc2:	f7f4 fb0d 	bl	80001e0 <memchr>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d03f      	beq.n	800bc4a <_vfiprintf_r+0x20a>
 800bbca:	4b26      	ldr	r3, [pc, #152]	@ (800bc64 <_vfiprintf_r+0x224>)
 800bbcc:	bb1b      	cbnz	r3, 800bc16 <_vfiprintf_r+0x1d6>
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	3307      	adds	r3, #7
 800bbd2:	f023 0307 	bic.w	r3, r3, #7
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	9303      	str	r3, [sp, #12]
 800bbda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbdc:	443b      	add	r3, r7
 800bbde:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbe0:	e76a      	b.n	800bab8 <_vfiprintf_r+0x78>
 800bbe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	2001      	movs	r0, #1
 800bbea:	e7a8      	b.n	800bb3e <_vfiprintf_r+0xfe>
 800bbec:	2300      	movs	r3, #0
 800bbee:	3401      	adds	r4, #1
 800bbf0:	9305      	str	r3, [sp, #20]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	f04f 0c0a 	mov.w	ip, #10
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbfe:	3a30      	subs	r2, #48	@ 0x30
 800bc00:	2a09      	cmp	r2, #9
 800bc02:	d903      	bls.n	800bc0c <_vfiprintf_r+0x1cc>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0c6      	beq.n	800bb96 <_vfiprintf_r+0x156>
 800bc08:	9105      	str	r1, [sp, #20]
 800bc0a:	e7c4      	b.n	800bb96 <_vfiprintf_r+0x156>
 800bc0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc10:	4604      	mov	r4, r0
 800bc12:	2301      	movs	r3, #1
 800bc14:	e7f0      	b.n	800bbf8 <_vfiprintf_r+0x1b8>
 800bc16:	ab03      	add	r3, sp, #12
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	462a      	mov	r2, r5
 800bc1c:	4b12      	ldr	r3, [pc, #72]	@ (800bc68 <_vfiprintf_r+0x228>)
 800bc1e:	a904      	add	r1, sp, #16
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7fd fbc3 	bl	80093ac <_printf_float>
 800bc26:	4607      	mov	r7, r0
 800bc28:	1c78      	adds	r0, r7, #1
 800bc2a:	d1d6      	bne.n	800bbda <_vfiprintf_r+0x19a>
 800bc2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc2e:	07d9      	lsls	r1, r3, #31
 800bc30:	d405      	bmi.n	800bc3e <_vfiprintf_r+0x1fe>
 800bc32:	89ab      	ldrh	r3, [r5, #12]
 800bc34:	059a      	lsls	r2, r3, #22
 800bc36:	d402      	bmi.n	800bc3e <_vfiprintf_r+0x1fe>
 800bc38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc3a:	f7fe f925 	bl	8009e88 <__retarget_lock_release_recursive>
 800bc3e:	89ab      	ldrh	r3, [r5, #12]
 800bc40:	065b      	lsls	r3, r3, #25
 800bc42:	f53f af1f 	bmi.w	800ba84 <_vfiprintf_r+0x44>
 800bc46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc48:	e71e      	b.n	800ba88 <_vfiprintf_r+0x48>
 800bc4a:	ab03      	add	r3, sp, #12
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	462a      	mov	r2, r5
 800bc50:	4b05      	ldr	r3, [pc, #20]	@ (800bc68 <_vfiprintf_r+0x228>)
 800bc52:	a904      	add	r1, sp, #16
 800bc54:	4630      	mov	r0, r6
 800bc56:	f7fd fe41 	bl	80098dc <_printf_i>
 800bc5a:	e7e4      	b.n	800bc26 <_vfiprintf_r+0x1e6>
 800bc5c:	0800c2a7 	.word	0x0800c2a7
 800bc60:	0800c2b1 	.word	0x0800c2b1
 800bc64:	080093ad 	.word	0x080093ad
 800bc68:	0800ba1d 	.word	0x0800ba1d
 800bc6c:	0800c2ad 	.word	0x0800c2ad

0800bc70 <__swbuf_r>:
 800bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc72:	460e      	mov	r6, r1
 800bc74:	4614      	mov	r4, r2
 800bc76:	4605      	mov	r5, r0
 800bc78:	b118      	cbz	r0, 800bc82 <__swbuf_r+0x12>
 800bc7a:	6a03      	ldr	r3, [r0, #32]
 800bc7c:	b90b      	cbnz	r3, 800bc82 <__swbuf_r+0x12>
 800bc7e:	f7fd ffd7 	bl	8009c30 <__sinit>
 800bc82:	69a3      	ldr	r3, [r4, #24]
 800bc84:	60a3      	str	r3, [r4, #8]
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	071a      	lsls	r2, r3, #28
 800bc8a:	d501      	bpl.n	800bc90 <__swbuf_r+0x20>
 800bc8c:	6923      	ldr	r3, [r4, #16]
 800bc8e:	b943      	cbnz	r3, 800bca2 <__swbuf_r+0x32>
 800bc90:	4621      	mov	r1, r4
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 f82a 	bl	800bcec <__swsetup_r>
 800bc98:	b118      	cbz	r0, 800bca2 <__swbuf_r+0x32>
 800bc9a:	f04f 37ff 	mov.w	r7, #4294967295
 800bc9e:	4638      	mov	r0, r7
 800bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	6922      	ldr	r2, [r4, #16]
 800bca6:	1a98      	subs	r0, r3, r2
 800bca8:	6963      	ldr	r3, [r4, #20]
 800bcaa:	b2f6      	uxtb	r6, r6
 800bcac:	4283      	cmp	r3, r0
 800bcae:	4637      	mov	r7, r6
 800bcb0:	dc05      	bgt.n	800bcbe <__swbuf_r+0x4e>
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7ff fd99 	bl	800b7ec <_fflush_r>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d1ed      	bne.n	800bc9a <__swbuf_r+0x2a>
 800bcbe:	68a3      	ldr	r3, [r4, #8]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	60a3      	str	r3, [r4, #8]
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	6022      	str	r2, [r4, #0]
 800bcca:	701e      	strb	r6, [r3, #0]
 800bccc:	6962      	ldr	r2, [r4, #20]
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d004      	beq.n	800bcde <__swbuf_r+0x6e>
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	07db      	lsls	r3, r3, #31
 800bcd8:	d5e1      	bpl.n	800bc9e <__swbuf_r+0x2e>
 800bcda:	2e0a      	cmp	r6, #10
 800bcdc:	d1df      	bne.n	800bc9e <__swbuf_r+0x2e>
 800bcde:	4621      	mov	r1, r4
 800bce0:	4628      	mov	r0, r5
 800bce2:	f7ff fd83 	bl	800b7ec <_fflush_r>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d0d9      	beq.n	800bc9e <__swbuf_r+0x2e>
 800bcea:	e7d6      	b.n	800bc9a <__swbuf_r+0x2a>

0800bcec <__swsetup_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4b29      	ldr	r3, [pc, #164]	@ (800bd94 <__swsetup_r+0xa8>)
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	6818      	ldr	r0, [r3, #0]
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	b118      	cbz	r0, 800bd00 <__swsetup_r+0x14>
 800bcf8:	6a03      	ldr	r3, [r0, #32]
 800bcfa:	b90b      	cbnz	r3, 800bd00 <__swsetup_r+0x14>
 800bcfc:	f7fd ff98 	bl	8009c30 <__sinit>
 800bd00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd04:	0719      	lsls	r1, r3, #28
 800bd06:	d422      	bmi.n	800bd4e <__swsetup_r+0x62>
 800bd08:	06da      	lsls	r2, r3, #27
 800bd0a:	d407      	bmi.n	800bd1c <__swsetup_r+0x30>
 800bd0c:	2209      	movs	r2, #9
 800bd0e:	602a      	str	r2, [r5, #0]
 800bd10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1a:	e033      	b.n	800bd84 <__swsetup_r+0x98>
 800bd1c:	0758      	lsls	r0, r3, #29
 800bd1e:	d512      	bpl.n	800bd46 <__swsetup_r+0x5a>
 800bd20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd22:	b141      	cbz	r1, 800bd36 <__swsetup_r+0x4a>
 800bd24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd28:	4299      	cmp	r1, r3
 800bd2a:	d002      	beq.n	800bd32 <__swsetup_r+0x46>
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f7fe ff07 	bl	800ab40 <_free_r>
 800bd32:	2300      	movs	r3, #0
 800bd34:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd3c:	81a3      	strh	r3, [r4, #12]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6063      	str	r3, [r4, #4]
 800bd42:	6923      	ldr	r3, [r4, #16]
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	f043 0308 	orr.w	r3, r3, #8
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	b94b      	cbnz	r3, 800bd66 <__swsetup_r+0x7a>
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd5c:	d003      	beq.n	800bd66 <__swsetup_r+0x7a>
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4628      	mov	r0, r5
 800bd62:	f000 f883 	bl	800be6c <__smakebuf_r>
 800bd66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd6a:	f013 0201 	ands.w	r2, r3, #1
 800bd6e:	d00a      	beq.n	800bd86 <__swsetup_r+0x9a>
 800bd70:	2200      	movs	r2, #0
 800bd72:	60a2      	str	r2, [r4, #8]
 800bd74:	6962      	ldr	r2, [r4, #20]
 800bd76:	4252      	negs	r2, r2
 800bd78:	61a2      	str	r2, [r4, #24]
 800bd7a:	6922      	ldr	r2, [r4, #16]
 800bd7c:	b942      	cbnz	r2, 800bd90 <__swsetup_r+0xa4>
 800bd7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd82:	d1c5      	bne.n	800bd10 <__swsetup_r+0x24>
 800bd84:	bd38      	pop	{r3, r4, r5, pc}
 800bd86:	0799      	lsls	r1, r3, #30
 800bd88:	bf58      	it	pl
 800bd8a:	6962      	ldrpl	r2, [r4, #20]
 800bd8c:	60a2      	str	r2, [r4, #8]
 800bd8e:	e7f4      	b.n	800bd7a <__swsetup_r+0x8e>
 800bd90:	2000      	movs	r0, #0
 800bd92:	e7f7      	b.n	800bd84 <__swsetup_r+0x98>
 800bd94:	20000110 	.word	0x20000110

0800bd98 <_raise_r>:
 800bd98:	291f      	cmp	r1, #31
 800bd9a:	b538      	push	{r3, r4, r5, lr}
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	d904      	bls.n	800bdac <_raise_r+0x14>
 800bda2:	2316      	movs	r3, #22
 800bda4:	6003      	str	r3, [r0, #0]
 800bda6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bdae:	b112      	cbz	r2, 800bdb6 <_raise_r+0x1e>
 800bdb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdb4:	b94b      	cbnz	r3, 800bdca <_raise_r+0x32>
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f000 f830 	bl	800be1c <_getpid_r>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc6:	f000 b817 	b.w	800bdf8 <_kill_r>
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d00a      	beq.n	800bde4 <_raise_r+0x4c>
 800bdce:	1c59      	adds	r1, r3, #1
 800bdd0:	d103      	bne.n	800bdda <_raise_r+0x42>
 800bdd2:	2316      	movs	r3, #22
 800bdd4:	6003      	str	r3, [r0, #0]
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e7e7      	b.n	800bdaa <_raise_r+0x12>
 800bdda:	2100      	movs	r1, #0
 800bddc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bde0:	4620      	mov	r0, r4
 800bde2:	4798      	blx	r3
 800bde4:	2000      	movs	r0, #0
 800bde6:	e7e0      	b.n	800bdaa <_raise_r+0x12>

0800bde8 <raise>:
 800bde8:	4b02      	ldr	r3, [pc, #8]	@ (800bdf4 <raise+0xc>)
 800bdea:	4601      	mov	r1, r0
 800bdec:	6818      	ldr	r0, [r3, #0]
 800bdee:	f7ff bfd3 	b.w	800bd98 <_raise_r>
 800bdf2:	bf00      	nop
 800bdf4:	20000110 	.word	0x20000110

0800bdf8 <_kill_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4d07      	ldr	r5, [pc, #28]	@ (800be18 <_kill_r+0x20>)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4604      	mov	r4, r0
 800be00:	4608      	mov	r0, r1
 800be02:	4611      	mov	r1, r2
 800be04:	602b      	str	r3, [r5, #0]
 800be06:	f7f5 fd7b 	bl	8001900 <_kill>
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	d102      	bne.n	800be14 <_kill_r+0x1c>
 800be0e:	682b      	ldr	r3, [r5, #0]
 800be10:	b103      	cbz	r3, 800be14 <_kill_r+0x1c>
 800be12:	6023      	str	r3, [r4, #0]
 800be14:	bd38      	pop	{r3, r4, r5, pc}
 800be16:	bf00      	nop
 800be18:	20000f50 	.word	0x20000f50

0800be1c <_getpid_r>:
 800be1c:	f7f5 bd68 	b.w	80018f0 <_getpid>

0800be20 <__swhatbuf_r>:
 800be20:	b570      	push	{r4, r5, r6, lr}
 800be22:	460c      	mov	r4, r1
 800be24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be28:	2900      	cmp	r1, #0
 800be2a:	b096      	sub	sp, #88	@ 0x58
 800be2c:	4615      	mov	r5, r2
 800be2e:	461e      	mov	r6, r3
 800be30:	da0d      	bge.n	800be4e <__swhatbuf_r+0x2e>
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be38:	f04f 0100 	mov.w	r1, #0
 800be3c:	bf14      	ite	ne
 800be3e:	2340      	movne	r3, #64	@ 0x40
 800be40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be44:	2000      	movs	r0, #0
 800be46:	6031      	str	r1, [r6, #0]
 800be48:	602b      	str	r3, [r5, #0]
 800be4a:	b016      	add	sp, #88	@ 0x58
 800be4c:	bd70      	pop	{r4, r5, r6, pc}
 800be4e:	466a      	mov	r2, sp
 800be50:	f000 f848 	bl	800bee4 <_fstat_r>
 800be54:	2800      	cmp	r0, #0
 800be56:	dbec      	blt.n	800be32 <__swhatbuf_r+0x12>
 800be58:	9901      	ldr	r1, [sp, #4]
 800be5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be62:	4259      	negs	r1, r3
 800be64:	4159      	adcs	r1, r3
 800be66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be6a:	e7eb      	b.n	800be44 <__swhatbuf_r+0x24>

0800be6c <__smakebuf_r>:
 800be6c:	898b      	ldrh	r3, [r1, #12]
 800be6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be70:	079d      	lsls	r5, r3, #30
 800be72:	4606      	mov	r6, r0
 800be74:	460c      	mov	r4, r1
 800be76:	d507      	bpl.n	800be88 <__smakebuf_r+0x1c>
 800be78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	6123      	str	r3, [r4, #16]
 800be80:	2301      	movs	r3, #1
 800be82:	6163      	str	r3, [r4, #20]
 800be84:	b003      	add	sp, #12
 800be86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be88:	ab01      	add	r3, sp, #4
 800be8a:	466a      	mov	r2, sp
 800be8c:	f7ff ffc8 	bl	800be20 <__swhatbuf_r>
 800be90:	9f00      	ldr	r7, [sp, #0]
 800be92:	4605      	mov	r5, r0
 800be94:	4639      	mov	r1, r7
 800be96:	4630      	mov	r0, r6
 800be98:	f7fe fec6 	bl	800ac28 <_malloc_r>
 800be9c:	b948      	cbnz	r0, 800beb2 <__smakebuf_r+0x46>
 800be9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bea2:	059a      	lsls	r2, r3, #22
 800bea4:	d4ee      	bmi.n	800be84 <__smakebuf_r+0x18>
 800bea6:	f023 0303 	bic.w	r3, r3, #3
 800beaa:	f043 0302 	orr.w	r3, r3, #2
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	e7e2      	b.n	800be78 <__smakebuf_r+0xc>
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	6020      	str	r0, [r4, #0]
 800beb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beba:	81a3      	strh	r3, [r4, #12]
 800bebc:	9b01      	ldr	r3, [sp, #4]
 800bebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bec2:	b15b      	cbz	r3, 800bedc <__smakebuf_r+0x70>
 800bec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bec8:	4630      	mov	r0, r6
 800beca:	f000 f81d 	bl	800bf08 <_isatty_r>
 800bece:	b128      	cbz	r0, 800bedc <__smakebuf_r+0x70>
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	f023 0303 	bic.w	r3, r3, #3
 800bed6:	f043 0301 	orr.w	r3, r3, #1
 800beda:	81a3      	strh	r3, [r4, #12]
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	431d      	orrs	r5, r3
 800bee0:	81a5      	strh	r5, [r4, #12]
 800bee2:	e7cf      	b.n	800be84 <__smakebuf_r+0x18>

0800bee4 <_fstat_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d07      	ldr	r5, [pc, #28]	@ (800bf04 <_fstat_r+0x20>)
 800bee8:	2300      	movs	r3, #0
 800beea:	4604      	mov	r4, r0
 800beec:	4608      	mov	r0, r1
 800beee:	4611      	mov	r1, r2
 800bef0:	602b      	str	r3, [r5, #0]
 800bef2:	f7f5 fd65 	bl	80019c0 <_fstat>
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	d102      	bne.n	800bf00 <_fstat_r+0x1c>
 800befa:	682b      	ldr	r3, [r5, #0]
 800befc:	b103      	cbz	r3, 800bf00 <_fstat_r+0x1c>
 800befe:	6023      	str	r3, [r4, #0]
 800bf00:	bd38      	pop	{r3, r4, r5, pc}
 800bf02:	bf00      	nop
 800bf04:	20000f50 	.word	0x20000f50

0800bf08 <_isatty_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d06      	ldr	r5, [pc, #24]	@ (800bf24 <_isatty_r+0x1c>)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	f7f5 fd64 	bl	80019e0 <_isatty>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_isatty_r+0x1a>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_isatty_r+0x1a>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20000f50 	.word	0x20000f50

0800bf28 <_init>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	bf00      	nop
 800bf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2e:	bc08      	pop	{r3}
 800bf30:	469e      	mov	lr, r3
 800bf32:	4770      	bx	lr

0800bf34 <_fini>:
 800bf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf36:	bf00      	nop
 800bf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf3a:	bc08      	pop	{r3}
 800bf3c:	469e      	mov	lr, r3
 800bf3e:	4770      	bx	lr
