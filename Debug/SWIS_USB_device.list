
SWIS_USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800d990  0800d990  0000e990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df38  0800df38  0000f2cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df38  0800df38  0000ef38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df40  0800df40  0000f2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df40  0800df40  0000ef40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df44  0800df44  0000ef44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800df48  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d1c  200002cc  0800e214  0000f2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe8  0800e214  0000ffe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001522c  00000000  00000000  0000f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c0f  00000000  00000000  00024528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00028138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc7  00000000  00000000  00029380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a99d  00000000  00000000  0002a147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195c0  00000000  00000000  00044ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb26  00000000  00000000  0005e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecbca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb0  00000000  00000000  000ecc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000f28c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d974 	.word	0x0800d974

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800d974 	.word	0x0800d974

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9d3 	b.w	8000f80 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <bme280_init>:

#define BME280_I2C_ADDRESS_0  0x76
#define BME280_I2C_ADDRESS_1  0x77

void bme280_init(bme280_t *me, I2C_HandleTypeDef *i2c_handle)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	me->i2c_dev.handle = i2c_handle;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	605a      	str	r2, [r3, #4]
	me->mode = BME280_MODE_NORMAL;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	729a      	strb	r2, [r3, #10]
	me->i2c_dev.addr = BME280_I2C_ADDRESS_0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2276      	movs	r2, #118	@ 0x76
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <bme280_check_id>:

HAL_StatusTypeDef bme280_check_id(bme280_t *me)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
   return bme280_raw_read(me, BME280_REG_ID, &me->id, 1);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f103 0208 	add.w	r2, r3, #8
 8000fba:	2301      	movs	r3, #1
 8000fbc:	21d0      	movs	r1, #208	@ 0xd0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fd78 	bl	8001ab4 <bme280_raw_read>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <bme280_reset>:

HAL_StatusTypeDef bme280_reset(bme280_t *me)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	uint8_t val = BME280_RESET_VALUE;
 8000fd6:	23b6      	movs	r3, #182	@ 0xb6
 8000fd8:	73fb      	strb	r3, [r7, #15]
    return bme280_raw_write(me, BME280_REG_RESET, &val, 1);
 8000fda:	f107 020f 	add.w	r2, r7, #15
 8000fde:	2301      	movs	r3, #1
 8000fe0:	21e0      	movs	r1, #224	@ 0xe0
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fd87 	bl	8001af6 <bme280_raw_write>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <bme280_configure>:

HAL_StatusTypeDef bme280_configure(bme280_t *me)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Set oversampling x1 for humidity
    uint8_t osrs_h = BME280_STANDARD;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	73bb      	strb	r3, [r7, #14]
    status = bme280_raw_write(me, BME280_REG_CTRL_HUM, &osrs_h, 1);
 8000ffe:	f107 020e 	add.w	r2, r7, #14
 8001002:	2301      	movs	r3, #1
 8001004:	21f2      	movs	r1, #242	@ 0xf2
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fd75 	bl	8001af6 <bme280_raw_write>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <bme280_configure+0x28>
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	e019      	b.n	800104e <bme280_configure+0x5c>

    // Set oversampling x1 for temp and pressure, forced mode
    uint8_t osrs_t_p_mode = (BME280_STANDARD << 5) | (BME280_STANDARD << 2) | 0x01;
 800101a:	236d      	movs	r3, #109	@ 0x6d
 800101c:	737b      	strb	r3, [r7, #13]
    status = bme280_raw_write(me, BME280_REG_CTRL_MEAS, &osrs_t_p_mode, 1);
 800101e:	f107 020d 	add.w	r2, r7, #13
 8001022:	2301      	movs	r3, #1
 8001024:	21f4      	movs	r1, #244	@ 0xf4
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fd65 	bl	8001af6 <bme280_raw_write>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <bme280_configure+0x48>
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	e009      	b.n	800104e <bme280_configure+0x5c>

    // Set IIR filter off, standby 0.5ms
    uint8_t config = (0x00 << 5) | (0x00 << 2);
 800103a:	2300      	movs	r3, #0
 800103c:	733b      	strb	r3, [r7, #12]
    return bme280_raw_write(me, BME280_REG_CONFIG, &config, 1);
 800103e:	f107 020c 	add.w	r2, r7, #12
 8001042:	2301      	movs	r3, #1
 8001044:	21f5      	movs	r1, #245	@ 0xf5
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fd55 	bl	8001af6 <bme280_raw_write>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <bme280_force_measurement>:
	}
	return false;
}

bool bme280_force_measurement(bme280_t *me)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	uint8_t ctrl;
	if (bme280_raw_read(me, BME280_REG_CTRL, &ctrl, 1) != HAL_OK)
 800105e:	f107 020f 	add.w	r2, r7, #15
 8001062:	2301      	movs	r3, #1
 8001064:	21f4      	movs	r1, #244	@ 0xf4
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fd24 	bl	8001ab4 <bme280_raw_read>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <bme280_force_measurement+0x20>
	{
		return false;
 8001072:	2300      	movs	r3, #0
 8001074:	e016      	b.n	80010a4 <bme280_force_measurement+0x4e>
	}
	ctrl &= ~0b11;  // clear two lower bits
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f023 0303 	bic.w	r3, r3, #3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
	ctrl |= BME280_MODE_FORCED;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	73fb      	strb	r3, [r7, #15]
	if (bme280_raw_write(me, BME280_REG_CTRL, &ctrl, 1)) {
 800108a:	f107 020f 	add.w	r2, r7, #15
 800108e:	2301      	movs	r3, #1
 8001090:	21f4      	movs	r1, #244	@ 0xf4
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fd2f 	bl	8001af6 <bme280_raw_write>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <bme280_force_measurement+0x4c>
		return false;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <bme280_force_measurement+0x4e>
	}
	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <bme280_sleep>:

bool bme280_sleep(bme280_t *me)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	uint8_t ctrl;
	if (bme280_raw_read(me, BME280_REG_CTRL, &ctrl, 1) != HAL_OK)
 80010b4:	f107 020f 	add.w	r2, r7, #15
 80010b8:	2301      	movs	r3, #1
 80010ba:	21f4      	movs	r1, #244	@ 0xf4
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 fcf9 	bl	8001ab4 <bme280_raw_read>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <bme280_sleep+0x20>
	{
		return false;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e013      	b.n	80010f4 <bme280_sleep+0x48>
	}
	ctrl &= ~0b11;  // clear two lower bits
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73fb      	strb	r3, [r7, #15]
	ctrl |= BME280_MODE_SLEEP;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	73fb      	strb	r3, [r7, #15]
	if (bme280_raw_write(me, BME280_REG_CTRL, &ctrl, 1)) {
 80010da:	f107 020f 	add.w	r2, r7, #15
 80010de:	2301      	movs	r3, #1
 80010e0:	21f4      	movs	r1, #244	@ 0xf4
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fd07 	bl	8001af6 <bme280_raw_write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <bme280_sleep+0x46>
		return false;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <bme280_sleep+0x48>
	}
	return true;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <bme280_read_calibration_data>:

    return HAL_OK;
}

bool bme280_read_calibration_data(bme280_t *dev)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	if ((bme280_raw_read(dev, 0x88,  (uint8_t *)&dev->dig_T1, 2) == HAL_OK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 0220 	add.w	r2, r3, #32
 800110a:	2302      	movs	r3, #2
 800110c:	2188      	movs	r1, #136	@ 0x88
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fcd0 	bl	8001ab4 <bme280_raw_read>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 80e4 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x8a, (uint8_t *) &dev->dig_T2, 2) == HAL_OK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001122:	2302      	movs	r3, #2
 8001124:	218a      	movs	r1, #138	@ 0x8a
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fcc4 	bl	8001ab4 <bme280_raw_read>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 80d8 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x8c, (uint8_t *) &dev->dig_T3, 2) == HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800113a:	2302      	movs	r3, #2
 800113c:	218c      	movs	r1, #140	@ 0x8c
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fcb8 	bl	8001ab4 <bme280_raw_read>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 80cc 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x8e,  (uint8_t *)&dev->dig_P1, 2) == HAL_OK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8001152:	2302      	movs	r3, #2
 8001154:	218e      	movs	r1, #142	@ 0x8e
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fcac 	bl	8001ab4 <bme280_raw_read>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 80c0 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x90, (uint8_t *) &dev->dig_P2, 2) == HAL_OK)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800116a:	2302      	movs	r3, #2
 800116c:	2190      	movs	r1, #144	@ 0x90
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fca0 	bl	8001ab4 <bme280_raw_read>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 80b4 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x92, (uint8_t *) &dev->dig_P3, 2) == HAL_OK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8001182:	2302      	movs	r3, #2
 8001184:	2192      	movs	r1, #146	@ 0x92
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fc94 	bl	8001ab4 <bme280_raw_read>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 80a8 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x94, (uint8_t *) &dev->dig_P4, 2) == HAL_OK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800119a:	2302      	movs	r3, #2
 800119c:	2194      	movs	r1, #148	@ 0x94
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 fc88 	bl	8001ab4 <bme280_raw_read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 809c 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x96, (uint8_t *) &dev->dig_P5, 2) == HAL_OK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 80011b2:	2302      	movs	r3, #2
 80011b4:	2196      	movs	r1, #150	@ 0x96
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fc7c 	bl	8001ab4 <bme280_raw_read>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8090 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x98, (uint8_t *) &dev->dig_P6, 2) == HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80011ca:	2302      	movs	r3, #2
 80011cc:	2198      	movs	r1, #152	@ 0x98
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fc70 	bl	8001ab4 <bme280_raw_read>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 8084 	bne.w	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x9a, (uint8_t *) &dev->dig_P7, 2) == HAL_OK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80011e2:	2302      	movs	r3, #2
 80011e4:	219a      	movs	r1, #154	@ 0x9a
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fc64 	bl	8001ab4 <bme280_raw_read>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d178      	bne.n	80012e4 <bme280_read_calibration_data+0x1e8>
			&&( bme280_raw_read(dev, 0x9c, (uint8_t *) &dev->dig_P8, 2) == HAL_OK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80011f8:	2302      	movs	r3, #2
 80011fa:	219c      	movs	r1, #156	@ 0x9c
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fc59 	bl	8001ab4 <bme280_raw_read>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d16d      	bne.n	80012e4 <bme280_read_calibration_data+0x1e8>
			&& (bme280_raw_read(dev, 0x9e, (uint8_t *) &dev->dig_P9,2)) == HAL_OK) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800120e:	2302      	movs	r3, #2
 8001210:	219e      	movs	r1, #158	@ 0x9e
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fc4e 	bl	8001ab4 <bme280_raw_read>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d162      	bne.n	80012e4 <bme280_read_calibration_data+0x1e8>

		if ((bme280_raw_read(dev, 0xa1, &dev->dig_H1, 1) == HAL_OK)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8001224:	2301      	movs	r3, #1
 8001226:	21a1      	movs	r1, #161	@ 0xa1
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fc43 	bl	8001ab4 <bme280_raw_read>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d155      	bne.n	80012e0 <bme280_read_calibration_data+0x1e4>
					&& (bme280_raw_read(dev, 0xe1, (uint8_t *) &dev->dig_H2, 2)== HAL_OK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 800123a:	2302      	movs	r3, #2
 800123c:	21e1      	movs	r1, #225	@ 0xe1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fc38 	bl	8001ab4 <bme280_raw_read>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d14a      	bne.n	80012e0 <bme280_read_calibration_data+0x1e4>
					&& (bme280_raw_read(dev, 0xe3, (uint8_t *)&dev->dig_H3, 1)== HAL_OK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8001250:	2301      	movs	r3, #1
 8001252:	21e3      	movs	r1, #227	@ 0xe3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fc2d 	bl	8001ab4 <bme280_raw_read>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d13f      	bne.n	80012e0 <bme280_read_calibration_data+0x1e4>
					&& (bme280_raw_read(dev, 0xe4, (uint8_t *)&dev->dig_H4, 2)== HAL_OK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 8001266:	2302      	movs	r3, #2
 8001268:	21e4      	movs	r1, #228	@ 0xe4
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fc22 	bl	8001ab4 <bme280_raw_read>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d134      	bne.n	80012e0 <bme280_read_calibration_data+0x1e4>
					&& (bme280_raw_read(dev, 0xe5, (uint8_t *)&dev->dig_H5, 2)== HAL_OK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800127c:	2302      	movs	r3, #2
 800127e:	21e5      	movs	r1, #229	@ 0xe5
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fc17 	bl	8001ab4 <bme280_raw_read>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d129      	bne.n	80012e0 <bme280_read_calibration_data+0x1e4>
					&& (bme280_raw_read(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)== HAL_OK))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 8001292:	2301      	movs	r3, #1
 8001294:	21e7      	movs	r1, #231	@ 0xe7
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 fc0c 	bl	8001ab4 <bme280_raw_read>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11e      	bne.n	80012e0 <bme280_read_calibration_data+0x1e4>
		{
			dev->dig_H4 = (dev->dig_H4 & 0x00ff) << 4 | (dev->dig_H4 & 0x0f00) >> 8;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	121b      	asrs	r3, r3, #8
 80012bc:	b21b      	sxth	r3, r3
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
			dev->dig_H5 = dev->dig_H5 >> 4;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80012d2:	111b      	asrs	r3, r3, #4
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		else
		{
			return false;
		}

		return true;
 80012dc:	2301      	movs	r3, #1
 80012de:	e002      	b.n	80012e6 <bme280_read_calibration_data+0x1ea>
			return false;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e000      	b.n	80012e6 <bme280_read_calibration_data+0x1ea>
	}

	return false;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <compensate_temperature>:

static inline int32_t compensate_temperature(bme280_t *dev, int32_t adc_temp, int32_t *fine_temp)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b087      	sub	sp, #28
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	10da      	asrs	r2, r3, #3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8c1b      	ldrh	r3, [r3, #32]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	@ 0x22
 800130c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001310:	12db      	asrs	r3, r3, #11
 8001312:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	111b      	asrs	r3, r3, #4
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	8c12      	ldrh	r2, [r2, #32]
 800131c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	1112      	asrs	r2, r2, #4
 8001322:	68f9      	ldr	r1, [r7, #12]
 8001324:	8c09      	ldrh	r1, [r1, #32]
 8001326:	1a52      	subs	r2, r2, r1
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	@ 0x24
 8001334:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001338:	139b      	asrs	r3, r3, #14
 800133a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	441a      	add	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	3380      	adds	r3, #128	@ 0x80
 8001352:	121b      	asrs	r3, r3, #8
}
 8001354:	4618      	mov	r0, r3
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(bme280_t *dev, int32_t adc_press, int32_t fine_temp)
{
 8001360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001364:	b0cc      	sub	sp, #304	@ 0x130
 8001366:	af00      	add	r7, sp, #0
 8001368:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800136c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001370:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001378:	17da      	asrs	r2, r3, #31
 800137a:	461c      	mov	r4, r3
 800137c:	4615      	mov	r5, r2
 800137e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001382:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001386:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800138a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800138e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001392:	fb03 f102 	mul.w	r1, r3, r2
 8001396:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800139a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	18ca      	adds	r2, r1, r3
 80013a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013a8:	fba3 8903 	umull	r8, r9, r3, r3
 80013ac:	eb02 0309 	add.w	r3, r2, r9
 80013b0:	4699      	mov	r9, r3
 80013b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	17da      	asrs	r2, r3, #31
 80013be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80013c2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80013c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80013ca:	4603      	mov	r3, r0
 80013cc:	fb03 f209 	mul.w	r2, r3, r9
 80013d0:	460b      	mov	r3, r1
 80013d2:	fb08 f303 	mul.w	r3, r8, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	4602      	mov	r2, r0
 80013da:	fba8 1202 	umull	r1, r2, r8, r2
 80013de:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80013e2:	460a      	mov	r2, r1
 80013e4:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80013e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80013ec:	4413      	add	r3, r2
 80013ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80013f2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80013f6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80013fa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80013fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001402:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001406:	b21b      	sxth	r3, r3
 8001408:	17da      	asrs	r2, r3, #31
 800140a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800140e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001412:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001416:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800141a:	462a      	mov	r2, r5
 800141c:	fb02 f203 	mul.w	r2, r2, r3
 8001420:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001424:	4621      	mov	r1, r4
 8001426:	fb01 f303 	mul.w	r3, r1, r3
 800142a:	441a      	add	r2, r3
 800142c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001430:	4621      	mov	r1, r4
 8001432:	fba3 1301 	umull	r1, r3, r3, r1
 8001436:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800143a:	460b      	mov	r3, r1
 800143c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001444:	18d3      	adds	r3, r2, r3
 8001446:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800144a:	f04f 0000 	mov.w	r0, #0
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001456:	462b      	mov	r3, r5
 8001458:	0459      	lsls	r1, r3, #17
 800145a:	4623      	mov	r3, r4
 800145c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001460:	4623      	mov	r3, r4
 8001462:	0458      	lsls	r0, r3, #17
 8001464:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001468:	1814      	adds	r4, r2, r0
 800146a:	643c      	str	r4, [r7, #64]	@ 0x40
 800146c:	414b      	adcs	r3, r1
 800146e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001470:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001474:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800147c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001480:	b21b      	sxth	r3, r3
 8001482:	17da      	asrs	r2, r3, #31
 8001484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001488:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800148c:	f04f 0000 	mov.w	r0, #0
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001498:	00d9      	lsls	r1, r3, #3
 800149a:	2000      	movs	r0, #0
 800149c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014a0:	1814      	adds	r4, r2, r0
 80014a2:	63bc      	str	r4, [r7, #56]	@ 0x38
 80014a4:	414b      	adcs	r3, r1
 80014a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014a8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80014ac:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80014b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80014b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014b8:	fb03 f102 	mul.w	r1, r3, r2
 80014bc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80014c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	18ca      	adds	r2, r1, r3
 80014ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ce:	fba3 1303 	umull	r1, r3, r3, r3
 80014d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014d6:	460b      	mov	r3, r1
 80014d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80014dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014ea:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	17da      	asrs	r2, r3, #31
 80014f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80014f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80014fa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80014fe:	462b      	mov	r3, r5
 8001500:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001504:	4642      	mov	r2, r8
 8001506:	fb02 f203 	mul.w	r2, r2, r3
 800150a:	464b      	mov	r3, r9
 800150c:	4621      	mov	r1, r4
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	4622      	mov	r2, r4
 8001516:	4641      	mov	r1, r8
 8001518:	fba2 1201 	umull	r1, r2, r2, r1
 800151c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001520:	460a      	mov	r2, r1
 8001522:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001526:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800152a:	4413      	add	r3, r2
 800152c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001530:	f04f 0000 	mov.w	r0, #0
 8001534:	f04f 0100 	mov.w	r1, #0
 8001538:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800153c:	4623      	mov	r3, r4
 800153e:	0a18      	lsrs	r0, r3, #8
 8001540:	462b      	mov	r3, r5
 8001542:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001546:	462b      	mov	r3, r5
 8001548:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800154a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800154e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001552:	b21b      	sxth	r3, r3
 8001554:	17da      	asrs	r2, r3, #31
 8001556:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800155a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800155e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001562:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001566:	464a      	mov	r2, r9
 8001568:	fb02 f203 	mul.w	r2, r2, r3
 800156c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001570:	4644      	mov	r4, r8
 8001572:	fb04 f303 	mul.w	r3, r4, r3
 8001576:	441a      	add	r2, r3
 8001578:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800157c:	4644      	mov	r4, r8
 800157e:	fba3 4304 	umull	r4, r3, r3, r4
 8001582:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001586:	4623      	mov	r3, r4
 8001588:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800158c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80015a2:	464c      	mov	r4, r9
 80015a4:	0323      	lsls	r3, r4, #12
 80015a6:	4644      	mov	r4, r8
 80015a8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015ac:	4644      	mov	r4, r8
 80015ae:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80015b0:	1884      	adds	r4, r0, r2
 80015b2:	633c      	str	r4, [r7, #48]	@ 0x30
 80015b4:	eb41 0303 	adc.w	r3, r1, r3
 80015b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80015ba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80015be:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80015c2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80015c6:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80015ca:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80015ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80015d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015d8:	b29b      	uxth	r3, r3
 80015da:	2200      	movs	r2, #0
 80015dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015e8:	462b      	mov	r3, r5
 80015ea:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80015ee:	4642      	mov	r2, r8
 80015f0:	fb02 f203 	mul.w	r2, r2, r3
 80015f4:	464b      	mov	r3, r9
 80015f6:	4621      	mov	r1, r4
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	4622      	mov	r2, r4
 8001600:	4641      	mov	r1, r8
 8001602:	fba2 1201 	umull	r1, r2, r2, r1
 8001606:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800160a:	460a      	mov	r2, r1
 800160c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001610:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001614:	4413      	add	r3, r2
 8001616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001626:	4629      	mov	r1, r5
 8001628:	104a      	asrs	r2, r1, #1
 800162a:	4629      	mov	r1, r5
 800162c:	17cb      	asrs	r3, r1, #31
 800162e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001632:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001636:	4313      	orrs	r3, r2
 8001638:	d101      	bne.n	800163e <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800163a:	2300      	movs	r3, #0
 800163c:	e148      	b.n	80018d0 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800163e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001642:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001646:	17da      	asrs	r2, r3, #31
 8001648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800164a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800164c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001650:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001654:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001658:	105b      	asrs	r3, r3, #1
 800165a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800165e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001662:	07db      	lsls	r3, r3, #31
 8001664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001668:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800166c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001670:	4621      	mov	r1, r4
 8001672:	1a89      	subs	r1, r1, r2
 8001674:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001676:	4629      	mov	r1, r5
 8001678:	eb61 0303 	sbc.w	r3, r1, r3
 800167c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800167e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001682:	4622      	mov	r2, r4
 8001684:	462b      	mov	r3, r5
 8001686:	1891      	adds	r1, r2, r2
 8001688:	6239      	str	r1, [r7, #32]
 800168a:	415b      	adcs	r3, r3
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
 800168e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001692:	4621      	mov	r1, r4
 8001694:	1851      	adds	r1, r2, r1
 8001696:	61b9      	str	r1, [r7, #24]
 8001698:	4629      	mov	r1, r5
 800169a:	414b      	adcs	r3, r1
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016aa:	4649      	mov	r1, r9
 80016ac:	018b      	lsls	r3, r1, #6
 80016ae:	4641      	mov	r1, r8
 80016b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b4:	4641      	mov	r1, r8
 80016b6:	018a      	lsls	r2, r1, #6
 80016b8:	4641      	mov	r1, r8
 80016ba:	1889      	adds	r1, r1, r2
 80016bc:	6139      	str	r1, [r7, #16]
 80016be:	4649      	mov	r1, r9
 80016c0:	eb43 0101 	adc.w	r1, r3, r1
 80016c4:	6179      	str	r1, [r7, #20]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80016d2:	4649      	mov	r1, r9
 80016d4:	008b      	lsls	r3, r1, #2
 80016d6:	4641      	mov	r1, r8
 80016d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016dc:	4641      	mov	r1, r8
 80016de:	008a      	lsls	r2, r1, #2
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	4603      	mov	r3, r0
 80016e6:	4622      	mov	r2, r4
 80016e8:	189b      	adds	r3, r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	460b      	mov	r3, r1
 80016ee:	462a      	mov	r2, r5
 80016f0:	eb42 0303 	adc.w	r3, r2, r3
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001702:	4649      	mov	r1, r9
 8001704:	008b      	lsls	r3, r1, #2
 8001706:	4641      	mov	r1, r8
 8001708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800170c:	4641      	mov	r1, r8
 800170e:	008a      	lsls	r2, r1, #2
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	4603      	mov	r3, r0
 8001716:	4622      	mov	r2, r4
 8001718:	189b      	adds	r3, r3, r2
 800171a:	673b      	str	r3, [r7, #112]	@ 0x70
 800171c:	462b      	mov	r3, r5
 800171e:	460a      	mov	r2, r1
 8001720:	eb42 0303 	adc.w	r3, r2, r3
 8001724:	677b      	str	r3, [r7, #116]	@ 0x74
 8001726:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800172a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800172e:	f7ff fa43 	bl	8000bb8 <__aeabi_ldivmod>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800173a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800173e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8001742:	b21b      	sxth	r3, r3
 8001744:	17da      	asrs	r2, r3, #31
 8001746:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001748:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800174a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	0b50      	lsrs	r0, r2, #13
 8001758:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800175c:	1359      	asrs	r1, r3, #13
 800175e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001762:	462b      	mov	r3, r5
 8001764:	fb00 f203 	mul.w	r2, r0, r3
 8001768:	4623      	mov	r3, r4
 800176a:	fb03 f301 	mul.w	r3, r3, r1
 800176e:	4413      	add	r3, r2
 8001770:	4622      	mov	r2, r4
 8001772:	fba2 1200 	umull	r1, r2, r2, r0
 8001776:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800177a:	460a      	mov	r2, r1
 800177c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001780:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001784:	4413      	add	r3, r2
 8001786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800178a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800178e:	f04f 0000 	mov.w	r0, #0
 8001792:	f04f 0100 	mov.w	r1, #0
 8001796:	0b50      	lsrs	r0, r2, #13
 8001798:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800179c:	1359      	asrs	r1, r3, #13
 800179e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80017a2:	462b      	mov	r3, r5
 80017a4:	fb00 f203 	mul.w	r2, r0, r3
 80017a8:	4623      	mov	r3, r4
 80017aa:	fb03 f301 	mul.w	r3, r3, r1
 80017ae:	4413      	add	r3, r2
 80017b0:	4622      	mov	r2, r4
 80017b2:	fba2 1200 	umull	r1, r2, r2, r0
 80017b6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80017ba:	460a      	mov	r2, r1
 80017bc:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80017c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80017c4:	4413      	add	r3, r2
 80017c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80017d6:	4621      	mov	r1, r4
 80017d8:	0e4a      	lsrs	r2, r1, #25
 80017da:	4629      	mov	r1, r5
 80017dc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80017e0:	4629      	mov	r1, r5
 80017e2:	164b      	asrs	r3, r1, #25
 80017e4:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80017e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017ec:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	17da      	asrs	r2, r3, #31
 80017f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80017f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80017f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001800:	462a      	mov	r2, r5
 8001802:	fb02 f203 	mul.w	r2, r2, r3
 8001806:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800180a:	4621      	mov	r1, r4
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001816:	4621      	mov	r1, r4
 8001818:	fba2 1201 	umull	r1, r2, r2, r1
 800181c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001820:	460a      	mov	r2, r1
 8001822:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001826:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800182a:	4413      	add	r3, r2
 800182c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800183c:	4621      	mov	r1, r4
 800183e:	0cca      	lsrs	r2, r1, #19
 8001840:	4629      	mov	r1, r5
 8001842:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001846:	4629      	mov	r1, r5
 8001848:	14cb      	asrs	r3, r1, #19
 800184a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800184e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001852:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001856:	1884      	adds	r4, r0, r2
 8001858:	65bc      	str	r4, [r7, #88]	@ 0x58
 800185a:	eb41 0303 	adc.w	r3, r1, r3
 800185e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001860:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001864:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001868:	4621      	mov	r1, r4
 800186a:	1889      	adds	r1, r1, r2
 800186c:	6539      	str	r1, [r7, #80]	@ 0x50
 800186e:	4629      	mov	r1, r5
 8001870:	eb43 0101 	adc.w	r1, r3, r1
 8001874:	6579      	str	r1, [r7, #84]	@ 0x54
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001882:	4623      	mov	r3, r4
 8001884:	0a18      	lsrs	r0, r3, #8
 8001886:	462b      	mov	r3, r5
 8001888:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800188c:	462b      	mov	r3, r5
 800188e:	1219      	asrs	r1, r3, #8
 8001890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001894:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001898:	b21b      	sxth	r3, r3
 800189a:	17da      	asrs	r2, r3, #31
 800189c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800189e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80018ac:	464c      	mov	r4, r9
 80018ae:	0123      	lsls	r3, r4, #4
 80018b0:	4644      	mov	r4, r8
 80018b2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018b6:	4644      	mov	r4, r8
 80018b8:	0122      	lsls	r2, r4, #4
 80018ba:	1884      	adds	r4, r0, r2
 80018bc:	603c      	str	r4, [r7, #0]
 80018be:	eb41 0303 	adc.w	r3, r1, r3
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80018cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80018d6:	46bd      	mov	sp, r7
 80018d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080018dc <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(bme280_t *dev, int32_t adc_hum, int32_t fine_temp)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80018ee:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	039a      	lsls	r2, r3, #14
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80018fa:	051b      	lsls	r3, r3, #20
 80018fc:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8001904:	4619      	mov	r1, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001912:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	f992 2042 	ldrsb.w	r2, [r2, #66]	@ 0x42
 800191a:	4611      	mov	r1, r2
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	fb01 f202 	mul.w	r2, r1, r2
 8001922:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 800192a:	4608      	mov	r0, r1
 800192c:	6979      	ldr	r1, [r7, #20]
 800192e:	fb00 f101 	mul.w	r1, r0, r1
 8001932:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001934:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001938:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800193c:	1292      	asrs	r2, r2, #10
 800193e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001942:	68f9      	ldr	r1, [r7, #12]
 8001944:	f9b1 103a 	ldrsh.w	r1, [r1, #58]	@ 0x3a
 8001948:	fb01 f202 	mul.w	r2, r1, r2
 800194c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001950:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	13db      	asrs	r3, r3, #15
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	13d2      	asrs	r2, r2, #15
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800197e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001986:	bfa8      	it	ge
 8001988:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800198c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	131b      	asrs	r3, r3, #12
}
 8001992:	4618      	mov	r0, r3
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <bme280_read_fixed>:

bool bme280_read_fixed(bme280_t *me, int32_t *temperature, uint32_t *pressure, uint32_t *humidity)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b08a      	sub	sp, #40	@ 0x28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Need to read in one sequence to ensure they match.
	bme280_raw_read(me, 0xf7, data, 8);
 80019ac:	f107 0214 	add.w	r2, r7, #20
 80019b0:	2308      	movs	r3, #8
 80019b2:	21f7      	movs	r1, #247	@ 0xf7
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f87d 	bl	8001ab4 <bme280_raw_read>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80019ba:	7d3b      	ldrb	r3, [r7, #20]
 80019bc:	031a      	lsls	r2, r3, #12
 80019be:	7d7b      	ldrb	r3, [r7, #21]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4313      	orrs	r3, r2
 80019c4:	7dba      	ldrb	r2, [r7, #22]
 80019c6:	0912      	lsrs	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	4313      	orrs	r3, r2
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	031a      	lsls	r2, r3, #12
 80019d2:	7e3b      	ldrb	r3, [r7, #24]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4313      	orrs	r3, r2
 80019d8:	7e7a      	ldrb	r2, [r7, #25]
 80019da:	0912      	lsrs	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	4313      	orrs	r3, r2
 80019e0:	623b      	str	r3, [r7, #32]

	int32_t fine_temp;
	*temperature = compensate_temperature(me, adc_temp, &fine_temp);
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	461a      	mov	r2, r3
 80019e8:	6a39      	ldr	r1, [r7, #32]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fc7f 	bl	80012ee <compensate_temperature>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(me, adc_pressure, fine_temp);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	461a      	mov	r2, r3
 80019fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff fcaf 	bl	8001360 <compensate_pressure>
 8001a02:	4602      	mov	r2, r0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	601a      	str	r2, [r3, #0]

	int32_t adc_humidity = data[6] << 8 | data[7];
 8001a08:	7ebb      	ldrb	r3, [r7, #26]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	7efa      	ldrb	r2, [r7, #27]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61fb      	str	r3, [r7, #28]
	*humidity = compensate_humidity(me, adc_humidity, fine_temp);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	461a      	mov	r2, r3
 8001a16:	69f9      	ldr	r1, [r7, #28]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ff5f 	bl	80018dc <compensate_humidity>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	601a      	str	r2, [r3, #0]

	return true;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <bme280_read_float>:

bool bme280_read_float(bme280_t *me)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bme280_read_fixed(me, &fixed_temperature, &fixed_pressure, &fixed_humidity))
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	f107 0210 	add.w	r2, r7, #16
 8001a40:	f107 0114 	add.w	r1, r7, #20
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffaa 	bl	800199e <bme280_read_fixed>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d025      	beq.n	8001a9c <bme280_read_float+0x6c>
	{
		me->raw_temp = (float) fixed_temperature / 100;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001aa8 <bme280_read_float+0x78>
 8001a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edc3 7a06 	vstr	s15, [r3, #24]
		me->raw_press = (float) fixed_pressure / 256;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a72:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001aac <bme280_read_float+0x7c>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edc3 7a05 	vstr	s15, [r3, #20]
		me->raw_hum = (float) fixed_humidity / 1024;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a8a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001ab0 <bme280_read_float+0x80>
 8001a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	edc3 7a07 	vstr	s15, [r3, #28]
		return true;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <bme280_read_float+0x6e>
	}

	return false;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	42c80000 	.word	0x42c80000
 8001aac:	43800000 	.word	0x43800000
 8001ab0:	44800000 	.word	0x44800000

08001ab4 <bme280_raw_read>:
{
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, state);
}

HAL_StatusTypeDef bme280_raw_read(bme280_t *me, uint8_t reg_addr, uint8_t *reg_data, uint8_t len)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	72fb      	strb	r3, [r7, #11]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(me->i2c_dev.handle, me->i2c_dev.addr << 1, reg_addr, 1, reg_data, len, 100);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6858      	ldr	r0, [r3, #4]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	7abb      	ldrb	r3, [r7, #10]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2464      	movs	r4, #100	@ 0x64
 8001ade:	9402      	str	r4, [sp, #8]
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f002 f946 	bl	8003d78 <HAL_I2C_Mem_Read>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd90      	pop	{r4, r7, pc}

08001af6 <bme280_raw_write>:

HAL_StatusTypeDef bme280_raw_write(bme280_t *me, uint8_t reg_addr, uint8_t *reg_data, uint8_t len)
{
 8001af6:	b590      	push	{r4, r7, lr}
 8001af8:	b089      	sub	sp, #36	@ 0x24
 8001afa:	af04      	add	r7, sp, #16
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	461a      	mov	r2, r3
 8001b02:	460b      	mov	r3, r1
 8001b04:	72fb      	strb	r3, [r7, #11]
 8001b06:	4613      	mov	r3, r2
 8001b08:	72bb      	strb	r3, [r7, #10]
	 return HAL_I2C_Mem_Write(me->i2c_dev.handle, me->i2c_dev.addr << 1, reg_addr, 1, reg_data, len, 100);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6858      	ldr	r0, [r3, #4]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b299      	uxth	r1, r3
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	7abb      	ldrb	r3, [r7, #10]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2464      	movs	r4, #100	@ 0x64
 8001b20:	9402      	str	r4, [sp, #8]
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f002 f82b 	bl	8003b84 <HAL_I2C_Mem_Write>
 8001b2e:	4603      	mov	r3, r0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	@ 0x30
 8001b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	4b82      	ldr	r3, [pc, #520]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a81      	ldr	r2, [pc, #516]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a7a      	ldr	r2, [pc, #488]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b78      	ldr	r3, [pc, #480]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b74      	ldr	r3, [pc, #464]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a73      	ldr	r2, [pc, #460]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b71      	ldr	r3, [pc, #452]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a6c      	ldr	r2, [pc, #432]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b66      	ldr	r3, [pc, #408]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a65      	ldr	r2, [pc, #404]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b63      	ldr	r3, [pc, #396]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b5f      	ldr	r3, [pc, #380]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a5e      	ldr	r2, [pc, #376]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b5c      	ldr	r3, [pc, #368]	@ (8001d5c <MX_GPIO_Init+0x224>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2108      	movs	r1, #8
 8001bfa:	4859      	ldr	r0, [pc, #356]	@ (8001d60 <MX_GPIO_Init+0x228>)
 8001bfc:	f001 fb1a 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	2101      	movs	r1, #1
 8001c04:	4857      	ldr	r0, [pc, #348]	@ (8001d64 <MX_GPIO_Init+0x22c>)
 8001c06:	f001 fb15 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001c10:	4855      	ldr	r0, [pc, #340]	@ (8001d68 <MX_GPIO_Init+0x230>)
 8001c12:	f001 fb0f 	bl	8003234 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001c16:	2304      	movs	r3, #4
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	484d      	ldr	r0, [pc, #308]	@ (8001d60 <MX_GPIO_Init+0x228>)
 8001c2a:	f001 f97f 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001c2e:	2308      	movs	r3, #8
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	4846      	ldr	r0, [pc, #280]	@ (8001d60 <MX_GPIO_Init+0x228>)
 8001c46:	f001 f971 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001c4a:	2332      	movs	r3, #50	@ 0x32
 8001c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c4e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4840      	ldr	r0, [pc, #256]	@ (8001d60 <MX_GPIO_Init+0x228>)
 8001c60:	f001 f964 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	483a      	ldr	r0, [pc, #232]	@ (8001d64 <MX_GPIO_Init+0x22c>)
 8001c7c:	f001 f956 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001c80:	2308      	movs	r3, #8
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c90:	2305      	movs	r3, #5
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4832      	ldr	r0, [pc, #200]	@ (8001d64 <MX_GPIO_Init+0x22c>)
 8001c9c:	f001 f946 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ca4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	482d      	ldr	r0, [pc, #180]	@ (8001d6c <MX_GPIO_Init+0x234>)
 8001cb6:	f001 f939 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001cba:	2310      	movs	r3, #16
 8001cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cca:	2306      	movs	r3, #6
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4825      	ldr	r0, [pc, #148]	@ (8001d6c <MX_GPIO_Init+0x234>)
 8001cd6:	f001 f929 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001cda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cec:	2305      	movs	r3, #5
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	481e      	ldr	r0, [pc, #120]	@ (8001d70 <MX_GPIO_Init+0x238>)
 8001cf8:	f001 f918 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cfc:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001d00:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4814      	ldr	r0, [pc, #80]	@ (8001d68 <MX_GPIO_Init+0x230>)
 8001d16:	f001 f909 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d1a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d2c:	2306      	movs	r3, #6
 8001d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	480b      	ldr	r0, [pc, #44]	@ (8001d64 <MX_GPIO_Init+0x22c>)
 8001d38:	f001 f8f8 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <MX_GPIO_Init+0x230>)
 8001d50:	f001 f8ec 	bl	8002f2c <HAL_GPIO_Init>

}
 8001d54:	bf00      	nop
 8001d56:	3730      	adds	r7, #48	@ 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400

08001d74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001d7a:	4a13      	ldr	r2, [pc, #76]	@ (8001dc8 <MX_I2C1_Init+0x54>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001d80:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <MX_I2C1_Init+0x58>)
 8001d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001d92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da4:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <MX_I2C1_Init+0x50>)
 8001db2:	f001 fa73 	bl	800329c <HAL_I2C_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dbc:	f000 fd26 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200002e8 	.word	0x200002e8
 8001dc8:	40005400 	.word	0x40005400
 8001dcc:	000186a0 	.word	0x000186a0

08001dd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	@ (8001e54 <HAL_I2C_MspInit+0x84>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d12c      	bne.n	8001e4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHTC3_SDA_Pin|SHTC3_SCL_Pin;
 8001e0e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e14:	2312      	movs	r3, #18
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e20:	2304      	movs	r3, #4
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <HAL_I2C_MspInit+0x8c>)
 8001e2c:	f001 f87e 	bl	8002f2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	4a07      	ldr	r2, [pc, #28]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_I2C_MspInit+0x88>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	@ 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40005400 	.word	0x40005400
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e66:	f000 feb9 	bl	8002bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6a:	f000 fc63 	bl	8002734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6e:	f7ff fe63 	bl	8001b38 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001e72:	f008 fa1f 	bl	800a2b4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001e76:	f7ff ff7d 	bl	8001d74 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e7a:	f000 fccd 	bl	8002818 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  if(0 == SIMULATE)
  {
	  shtc3_init(&shtc3_sensor, &hi2c1, SHTC3_I2C_ADDR);
 8001e7e:	2270      	movs	r2, #112	@ 0x70
 8001e80:	49b4      	ldr	r1, [pc, #720]	@ (8002154 <main+0x2f4>)
 8001e82:	48b5      	ldr	r0, [pc, #724]	@ (8002158 <main+0x2f8>)
 8001e84:	f008 f839 	bl	8009efa <shtc3_init>
	  shtc3_wakeup(&shtc3_sensor);
 8001e88:	48b3      	ldr	r0, [pc, #716]	@ (8002158 <main+0x2f8>)
 8001e8a:	f008 f917 	bl	800a0bc <shtc3_wakeup>
	  shtc3_get_id(&shtc3_sensor);
 8001e8e:	48b2      	ldr	r0, [pc, #712]	@ (8002158 <main+0x2f8>)
 8001e90:	f008 f84f 	bl	8009f32 <shtc3_get_id>
	  shtc3_sleep(&shtc3_sensor);
 8001e94:	48b0      	ldr	r0, [pc, #704]	@ (8002158 <main+0x2f8>)
 8001e96:	f008 f900 	bl	800a09a <shtc3_sleep>

	  bme280_init(&bme280_sensor, &hi2c1);
 8001e9a:	49ae      	ldr	r1, [pc, #696]	@ (8002154 <main+0x2f4>)
 8001e9c:	48af      	ldr	r0, [pc, #700]	@ (800215c <main+0x2fc>)
 8001e9e:	f7ff f871 	bl	8000f84 <bme280_init>
	  bme280_reset(&bme280_sensor);
 8001ea2:	48ae      	ldr	r0, [pc, #696]	@ (800215c <main+0x2fc>)
 8001ea4:	f7ff f893 	bl	8000fce <bme280_reset>
	  HAL_Delay(100);
 8001ea8:	2064      	movs	r0, #100	@ 0x64
 8001eaa:	f000 ff09 	bl	8002cc0 <HAL_Delay>
	  bme280_check_id(&bme280_sensor);
 8001eae:	48ab      	ldr	r0, [pc, #684]	@ (800215c <main+0x2fc>)
 8001eb0:	f7ff f87c 	bl	8000fac <bme280_check_id>
	  bme280_configure(&bme280_sensor);
 8001eb4:	48a9      	ldr	r0, [pc, #676]	@ (800215c <main+0x2fc>)
 8001eb6:	f7ff f89c 	bl	8000ff2 <bme280_configure>
	  bme280_read_calibration_data(&bme280_sensor);
 8001eba:	48a8      	ldr	r0, [pc, #672]	@ (800215c <main+0x2fc>)
 8001ebc:	f7ff f91e 	bl	80010fc <bme280_read_calibration_data>
	  bme280_force_measurement(&bme280_sensor);
 8001ec0:	48a6      	ldr	r0, [pc, #664]	@ (800215c <main+0x2fc>)
 8001ec2:	f7ff f8c8 	bl	8001056 <bme280_force_measurement>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	usb_parser();
 8001ec6:	f000 f9f1 	bl	80022ac <usb_parser>
	if(0 == SIMULATE)
	{
		uint8_t ret	= 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71fb      	strb	r3, [r7, #7]
		switch(shtc3_sensor.state)
 8001ece:	4ba2      	ldr	r3, [pc, #648]	@ (8002158 <main+0x2f8>)
 8001ed0:	7a9b      	ldrb	r3, [r3, #10]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	f200 8094 	bhi.w	8002004 <main+0x1a4>
 8001edc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee4 <main+0x84>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001f0f 	.word	0x08001f0f
 8001ee8:	08001f8d 	.word	0x08001f8d
 8001eec:	08001ef9 	.word	0x08001ef9
 8001ef0:	08001f6b 	.word	0x08001f6b
 8001ef4:	08001fe9 	.word	0x08001fe9
		{
			case SHTC3_SINGLE_MEASURE_START:
				 ret = shtc3_raw_write_temp_and_hum(&shtc3_sensor);
 8001ef8:	4897      	ldr	r0, [pc, #604]	@ (8002158 <main+0x2f8>)
 8001efa:	f008 f857 	bl	8009fac <shtc3_raw_write_temp_and_hum>
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
				if(0 == ret) {shtc3_sensor.state = SHTC3_SINGLE_MEASURE;}
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <main+0xae>
 8001f08:	4b93      	ldr	r3, [pc, #588]	@ (8002158 <main+0x2f8>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	729a      	strb	r2, [r3, #10]
			case SHTC3_SINGLE_MEASURE:
				ret = shtc3_raw_read_temp_and_hum(&shtc3_sensor);
 8001f0e:	4892      	ldr	r0, [pc, #584]	@ (8002158 <main+0x2f8>)
 8001f10:	f008 f862 	bl	8009fd8 <shtc3_raw_read_temp_and_hum>
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
				if(0 == ret)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d174      	bne.n	8002008 <main+0x1a8>
				{
					shtc3_sleep(&shtc3_sensor);
 8001f1e:	488e      	ldr	r0, [pc, #568]	@ (8002158 <main+0x2f8>)
 8001f20:	f008 f8bb 	bl	800a09a <shtc3_sleep>
					sprintf((char *)report, "SHTC3 DATA: %.3f %.3f", shtc3_sensor.temp, shtc3_sensor.hum);
 8001f24:	4b8c      	ldr	r3, [pc, #560]	@ (8002158 <main+0x2f8>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb15 	bl	8000558 <__aeabi_f2d>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	460d      	mov	r5, r1
 8001f32:	4b89      	ldr	r3, [pc, #548]	@ (8002158 <main+0x2f8>)
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb0e 	bl	8000558 <__aeabi_f2d>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	e9cd 2300 	strd	r2, r3, [sp]
 8001f44:	4622      	mov	r2, r4
 8001f46:	462b      	mov	r3, r5
 8001f48:	4985      	ldr	r1, [pc, #532]	@ (8002160 <main+0x300>)
 8001f4a:	4886      	ldr	r0, [pc, #536]	@ (8002164 <main+0x304>)
 8001f4c:	f009 fbcc 	bl	800b6e8 <siprintf>
					usbSend(report, strlen((char *)report));
 8001f50:	4884      	ldr	r0, [pc, #528]	@ (8002164 <main+0x304>)
 8001f52:	f7fe f995 	bl	8000280 <strlen>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4881      	ldr	r0, [pc, #516]	@ (8002164 <main+0x304>)
 8001f5e:	f000 f92f 	bl	80021c0 <usbSend>
					shtc3_sensor.state = SHTC3_IDLE;
 8001f62:	4b7d      	ldr	r3, [pc, #500]	@ (8002158 <main+0x2f8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	729a      	strb	r2, [r3, #10]
				}
				break;
 8001f68:	e04e      	b.n	8002008 <main+0x1a8>
			case SHTC3_CYCLIC_MEASURE_START:
				ret = shtc3_raw_write_temp_and_hum(&shtc3_sensor);
 8001f6a:	487b      	ldr	r0, [pc, #492]	@ (8002158 <main+0x2f8>)
 8001f6c:	f008 f81e 	bl	8009fac <shtc3_raw_write_temp_and_hum>
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
				if(0 == ret)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d148      	bne.n	800200c <main+0x1ac>
				{
					shtc3_sensor.state = SHTC3_CYCLIC_MEASURE;
 8001f7a:	4b77      	ldr	r3, [pc, #476]	@ (8002158 <main+0x2f8>)
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	729a      	strb	r2, [r3, #10]
					shtc3_sensor.cyclic_timestamp = HAL_GetTick();
 8001f80:	f000 fe92 	bl	8002ca8 <HAL_GetTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4a74      	ldr	r2, [pc, #464]	@ (8002158 <main+0x2f8>)
 8001f88:	6193      	str	r3, [r2, #24]
				}
				break;
 8001f8a:	e03f      	b.n	800200c <main+0x1ac>
			case SHTC3_CYCLIC_MEASURE:
				ret = shtc3_raw_read_temp_and_hum(&shtc3_sensor);
 8001f8c:	4872      	ldr	r0, [pc, #456]	@ (8002158 <main+0x2f8>)
 8001f8e:	f008 f823 	bl	8009fd8 <shtc3_raw_read_temp_and_hum>
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
				if(0 == ret)
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d139      	bne.n	8002010 <main+0x1b0>
				{
					shtc3_sleep(&shtc3_sensor);
 8001f9c:	486e      	ldr	r0, [pc, #440]	@ (8002158 <main+0x2f8>)
 8001f9e:	f008 f87c 	bl	800a09a <shtc3_sleep>
					sprintf((char *)report, "SHTC3 DATA: %.3f %.3f", shtc3_sensor.temp, shtc3_sensor.hum);
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8002158 <main+0x2f8>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fad6 	bl	8000558 <__aeabi_f2d>
 8001fac:	4604      	mov	r4, r0
 8001fae:	460d      	mov	r5, r1
 8001fb0:	4b69      	ldr	r3, [pc, #420]	@ (8002158 <main+0x2f8>)
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe facf 	bl	8000558 <__aeabi_f2d>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9cd 2300 	strd	r2, r3, [sp]
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	462b      	mov	r3, r5
 8001fc6:	4966      	ldr	r1, [pc, #408]	@ (8002160 <main+0x300>)
 8001fc8:	4866      	ldr	r0, [pc, #408]	@ (8002164 <main+0x304>)
 8001fca:	f009 fb8d 	bl	800b6e8 <siprintf>
					usbSend(report, strlen((char *)report));
 8001fce:	4865      	ldr	r0, [pc, #404]	@ (8002164 <main+0x304>)
 8001fd0:	f7fe f956 	bl	8000280 <strlen>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4862      	ldr	r0, [pc, #392]	@ (8002164 <main+0x304>)
 8001fdc:	f000 f8f0 	bl	80021c0 <usbSend>
					shtc3_sensor.state = SHTC3_CYCLIC_MEASURE_WAIT;
 8001fe0:	4b5d      	ldr	r3, [pc, #372]	@ (8002158 <main+0x2f8>)
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	729a      	strb	r2, [r3, #10]
				}
				break;
 8001fe6:	e013      	b.n	8002010 <main+0x1b0>
			case SHTC3_CYCLIC_MEASURE_WAIT:
				if(HAL_GetTick() - shtc3_sensor.cyclic_timestamp >= shtc3_sensor.period_ms)
 8001fe8:	f000 fe5e 	bl	8002ca8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b5a      	ldr	r3, [pc, #360]	@ (8002158 <main+0x2f8>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	1ad2      	subs	r2, r2, r3
 8001ff4:	4b58      	ldr	r3, [pc, #352]	@ (8002158 <main+0x2f8>)
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d30b      	bcc.n	8002014 <main+0x1b4>
				{
					shtc3_sensor.state = SHTC3_CYCLIC_MEASURE_START;
 8001ffc:	4b56      	ldr	r3, [pc, #344]	@ (8002158 <main+0x2f8>)
 8001ffe:	2204      	movs	r2, #4
 8002000:	729a      	strb	r2, [r3, #10]
				}
				break;
 8002002:	e007      	b.n	8002014 <main+0x1b4>
			case SHTC3_IDLE:
			default:
	//			shtc3_get_temp_and_hum(&shtc3_sensor);
				break;
 8002004:	bf00      	nop
 8002006:	e006      	b.n	8002016 <main+0x1b6>
				break;
 8002008:	bf00      	nop
 800200a:	e004      	b.n	8002016 <main+0x1b6>
				break;
 800200c:	bf00      	nop
 800200e:	e002      	b.n	8002016 <main+0x1b6>
				break;
 8002010:	bf00      	nop
 8002012:	e000      	b.n	8002016 <main+0x1b6>
				break;
 8002014:	bf00      	nop
		}

		ret	= 0;
 8002016:	2300      	movs	r3, #0
 8002018:	71fb      	strb	r3, [r7, #7]
		switch(bme280_sensor.state)
 800201a:	4b50      	ldr	r3, [pc, #320]	@ (800215c <main+0x2fc>)
 800201c:	7a5b      	ldrb	r3, [r3, #9]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	2b04      	cmp	r3, #4
 8002024:	f200 8091 	bhi.w	800214a <main+0x2ea>
 8002028:	a201      	add	r2, pc, #4	@ (adr r2, 8002030 <main+0x1d0>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	0800205b 	.word	0x0800205b
 8002034:	080020d9 	.word	0x080020d9
 8002038:	08002045 	.word	0x08002045
 800203c:	080020b7 	.word	0x080020b7
 8002040:	0800212f 	.word	0x0800212f
		{
			case BME280_SINGLE_MEASURE_START:
				ret = bme280_force_measurement(&bme280_sensor);
 8002044:	4845      	ldr	r0, [pc, #276]	@ (800215c <main+0x2fc>)
 8002046:	f7ff f806 	bl	8001056 <bme280_force_measurement>
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
				if(1 == ret) {bme280_sensor.state = BME280_SINGLE_MEASURE;}
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d102      	bne.n	800205a <main+0x1fa>
 8002054:	4b41      	ldr	r3, [pc, #260]	@ (800215c <main+0x2fc>)
 8002056:	2201      	movs	r2, #1
 8002058:	725a      	strb	r2, [r3, #9]
			case BME280_SINGLE_MEASURE:
				ret = bme280_read_float(&bme280_sensor);
 800205a:	4840      	ldr	r0, [pc, #256]	@ (800215c <main+0x2fc>)
 800205c:	f7ff fce8 	bl	8001a30 <bme280_read_float>
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
				if(1 == ret)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d171      	bne.n	800214e <main+0x2ee>
				{
					sprintf((char *)report, "BME280 DATA: %.3f %.3f", bme280_sensor.raw_temp, bme280_sensor.raw_hum);
 800206a:	4b3c      	ldr	r3, [pc, #240]	@ (800215c <main+0x2fc>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa72 	bl	8000558 <__aeabi_f2d>
 8002074:	4604      	mov	r4, r0
 8002076:	460d      	mov	r5, r1
 8002078:	4b38      	ldr	r3, [pc, #224]	@ (800215c <main+0x2fc>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa6b 	bl	8000558 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	e9cd 2300 	strd	r2, r3, [sp]
 800208a:	4622      	mov	r2, r4
 800208c:	462b      	mov	r3, r5
 800208e:	4936      	ldr	r1, [pc, #216]	@ (8002168 <main+0x308>)
 8002090:	4834      	ldr	r0, [pc, #208]	@ (8002164 <main+0x304>)
 8002092:	f009 fb29 	bl	800b6e8 <siprintf>
					usbSend(report, strlen((char *)report));
 8002096:	4833      	ldr	r0, [pc, #204]	@ (8002164 <main+0x304>)
 8002098:	f7fe f8f2 	bl	8000280 <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	4619      	mov	r1, r3
 80020a2:	4830      	ldr	r0, [pc, #192]	@ (8002164 <main+0x304>)
 80020a4:	f000 f88c 	bl	80021c0 <usbSend>
					bme280_sensor.state = BME280_IDLE;
 80020a8:	4b2c      	ldr	r3, [pc, #176]	@ (800215c <main+0x2fc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	725a      	strb	r2, [r3, #9]
					bme280_sleep(&bme280_sensor);
 80020ae:	482b      	ldr	r0, [pc, #172]	@ (800215c <main+0x2fc>)
 80020b0:	f7fe fffc 	bl	80010ac <bme280_sleep>
				}
				break;
 80020b4:	e04b      	b.n	800214e <main+0x2ee>
			case SHTC3_CYCLIC_MEASURE_START:
				ret = bme280_force_measurement(&bme280_sensor);
 80020b6:	4829      	ldr	r0, [pc, #164]	@ (800215c <main+0x2fc>)
 80020b8:	f7fe ffcd 	bl	8001056 <bme280_force_measurement>
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
				if(1 == ret)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d152      	bne.n	800216c <main+0x30c>
				{
					bme280_sensor.state = BME280_CYCLIC_MEASURE;
 80020c6:	4b25      	ldr	r3, [pc, #148]	@ (800215c <main+0x2fc>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	725a      	strb	r2, [r3, #9]
					bme280_sensor.cyclic_timestamp = HAL_GetTick();
 80020cc:	f000 fdec 	bl	8002ca8 <HAL_GetTick>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a22      	ldr	r2, [pc, #136]	@ (800215c <main+0x2fc>)
 80020d4:	6113      	str	r3, [r2, #16]
				}
				break;
 80020d6:	e049      	b.n	800216c <main+0x30c>
			case BME280_CYCLIC_MEASURE:
				ret = bme280_read_float(&bme280_sensor);
 80020d8:	4820      	ldr	r0, [pc, #128]	@ (800215c <main+0x2fc>)
 80020da:	f7ff fca9 	bl	8001a30 <bme280_read_float>
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
				if(1 == ret)
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d143      	bne.n	8002170 <main+0x310>
				{
					sprintf((char *)report, "BME280 DATA: %.3f %.3f", bme280_sensor.raw_temp, bme280_sensor.raw_hum);
 80020e8:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <main+0x2fc>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa33 	bl	8000558 <__aeabi_f2d>
 80020f2:	4604      	mov	r4, r0
 80020f4:	460d      	mov	r5, r1
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <main+0x2fc>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa2c 	bl	8000558 <__aeabi_f2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9cd 2300 	strd	r2, r3, [sp]
 8002108:	4622      	mov	r2, r4
 800210a:	462b      	mov	r3, r5
 800210c:	4916      	ldr	r1, [pc, #88]	@ (8002168 <main+0x308>)
 800210e:	4815      	ldr	r0, [pc, #84]	@ (8002164 <main+0x304>)
 8002110:	f009 faea 	bl	800b6e8 <siprintf>
					usbSend(report, strlen((char *)report));
 8002114:	4813      	ldr	r0, [pc, #76]	@ (8002164 <main+0x304>)
 8002116:	f7fe f8b3 	bl	8000280 <strlen>
 800211a:	4603      	mov	r3, r0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4619      	mov	r1, r3
 8002120:	4810      	ldr	r0, [pc, #64]	@ (8002164 <main+0x304>)
 8002122:	f000 f84d 	bl	80021c0 <usbSend>
					bme280_sensor.state = BME280_CYCLIC_MEASURE_WAIT;
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <main+0x2fc>)
 8002128:	2205      	movs	r2, #5
 800212a:	725a      	strb	r2, [r3, #9]
				}
				break;
 800212c:	e020      	b.n	8002170 <main+0x310>
			case BME280_CYCLIC_MEASURE_WAIT:
				if(HAL_GetTick() - bme280_sensor.cyclic_timestamp >= bme280_sensor.period_ms)
 800212e:	f000 fdbb 	bl	8002ca8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	4b09      	ldr	r3, [pc, #36]	@ (800215c <main+0x2fc>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	4b08      	ldr	r3, [pc, #32]	@ (800215c <main+0x2fc>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	429a      	cmp	r2, r3
 8002140:	d318      	bcc.n	8002174 <main+0x314>
				{
					bme280_sensor.state = BME280_CYCLIC_MEASURE_START;
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <main+0x2fc>)
 8002144:	2204      	movs	r2, #4
 8002146:	725a      	strb	r2, [r3, #9]
				}
				break;
 8002148:	e014      	b.n	8002174 <main+0x314>
			case BME280_IDLE:
			default:
	//			shtc3_get_temp_and_hum(&shtc3_sensor);
				break;
 800214a:	bf00      	nop
 800214c:	e6bb      	b.n	8001ec6 <main+0x66>
				break;
 800214e:	bf00      	nop
 8002150:	e6b9      	b.n	8001ec6 <main+0x66>
 8002152:	bf00      	nop
 8002154:	200002e8 	.word	0x200002e8
 8002158:	2000033c 	.word	0x2000033c
 800215c:	20000358 	.word	0x20000358
 8002160:	0800d990 	.word	0x0800d990
 8002164:	2000039c 	.word	0x2000039c
 8002168:	0800d9a8 	.word	0x0800d9a8
				break;
 800216c:	bf00      	nop
 800216e:	e6aa      	b.n	8001ec6 <main+0x66>
				break;
 8002170:	bf00      	nop
 8002172:	e6a8      	b.n	8001ec6 <main+0x66>
				break;
 8002174:	bf00      	nop
	usb_parser();
 8002176:	e6a6      	b.n	8001ec6 <main+0x66>

08002178 <compareStrings>:
  }
  /* USER CODE END 3 */
}

static bool compareStrings(uint8_t *buffer, char *str, uint16_t max_len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
	return (0 == strncmp((char *)buffer, str, (strlen(str) > max_len ? max_len : strlen(str))));
 8002186:	68b8      	ldr	r0, [r7, #8]
 8002188:	f7fe f87a 	bl	8000280 <strlen>
 800218c:	4602      	mov	r2, r0
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	429a      	cmp	r2, r3
 8002192:	d901      	bls.n	8002198 <compareStrings+0x20>
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	e003      	b.n	80021a0 <compareStrings+0x28>
 8002198:	68b8      	ldr	r0, [r7, #8]
 800219a:	f7fe f871 	bl	8000280 <strlen>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f009 fb0c 	bl	800b7c2 <strncmp>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <usbSend>:

static void usbSend(uint8_t *report, uint8_t len)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <usbSend+0x40>)
 80021ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d10e      	bne.n	80021f6 <usbSend+0x36>
	{
		while (((USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData)->state != CUSTOM_HID_IDLE);
 80021d8:	bf00      	nop
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <usbSend+0x40>)
 80021dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80021e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f8      	bne.n	80021da <usbSend+0x1a>
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4803      	ldr	r0, [pc, #12]	@ (8002200 <usbSend+0x40>)
 80021f2:	f006 f9dd 	bl	80085b0 <USBD_CUSTOM_HID_SendReport>
	}
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000484 	.word	0x20000484

08002204 <parsePeriod>:

static bool parsePeriod(const uint8_t *buffer, uint32_t *period_out, char* str)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
    if (!buffer || !period_out)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <parsePeriod+0x18>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <parsePeriod+0x1c>
        return false;
 800221c:	2300      	movs	r3, #0
 800221e:	e023      	b.n	8002268 <parsePeriod+0x64>

    uint32_t prefix_len = strlen(str);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7fe f82d 	bl	8000280 <strlen>
 8002226:	61f8      	str	r0, [r7, #28]

    // Sprawdzenie prefiksu
    if (strncmp((const char *)buffer, str, prefix_len) != 0)
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f009 fac8 	bl	800b7c2 <strncmp>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <parsePeriod+0x38>
        return false;
 8002238:	2300      	movs	r3, #0
 800223a:	e015      	b.n	8002268 <parsePeriod+0x64>

    // Wskaźnik do miejsca po "SHTC3 PERIOD:"
    const char *number_str = (const char *)(buffer + prefix_len);
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]

    // Parsowanie liczby
    char *endptr;
    unsigned long val = strtoul(number_str, &endptr, 10);
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	220a      	movs	r2, #10
 800224a:	4619      	mov	r1, r3
 800224c:	69b8      	ldr	r0, [r7, #24]
 800224e:	f008 fd29 	bl	800aca4 <strtoul>
 8002252:	6178      	str	r0, [r7, #20]

    // Sprawdzenie, czy udało się sparsować oraz czy nie przekroczono uint32_t
    if (number_str == endptr || val > UINT32_MAX || val < 0)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	429a      	cmp	r2, r3
 800225a:	d101      	bne.n	8002260 <parsePeriod+0x5c>
        return false;
 800225c:	2300      	movs	r3, #0
 800225e:	e003      	b.n	8002268 <parsePeriod+0x64>

    *period_out = (uint32_t)val;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	601a      	str	r2, [r3, #0]
    return true;
 8002266:	2301      	movs	r3, #1
}
 8002268:	4618      	mov	r0, r3
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <usb_copy_buffer>:
void usb_copy_buffer(uint8_t *buffer, uint16_t max_len)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
	memset(local_buffer, 0, sizeof(local_buffer));
 800227c:	2240      	movs	r2, #64	@ 0x40
 800227e:	2100      	movs	r1, #0
 8002280:	4808      	ldr	r0, [pc, #32]	@ (80022a4 <usb_copy_buffer+0x34>)
 8002282:	f009 fa96 	bl	800b7b2 <memset>
	memcpy(local_buffer, buffer, max_len);
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	461a      	mov	r2, r3
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <usb_copy_buffer+0x34>)
 800228e:	f009 fb22 	bl	800b8d6 <memcpy>
	local_len = max_len;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <usb_copy_buffer+0x38>)
 8002298:	701a      	strb	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200003dc 	.word	0x200003dc
 80022a8:	2000041c 	.word	0x2000041c

080022ac <usb_parser>:

void usb_parser()
{
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b096      	sub	sp, #88	@ 0x58
 80022b0:	af02      	add	r7, sp, #8
	uint8_t buffer[64] = {0};
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f009 fa79 	bl	800b7b2 <memset>
	uint16_t max_len = local_len;
 80022c0:	4bb4      	ldr	r3, [pc, #720]	@ (8002594 <usb_parser+0x2e8>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	if(local_len != 0)
 80022ca:	4bb2      	ldr	r3, [pc, #712]	@ (8002594 <usb_parser+0x2e8>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8218 	beq.w	8002706 <usb_parser+0x45a>
	{
		memcpy(buffer, local_buffer, local_len);
 80022d6:	4baf      	ldr	r3, [pc, #700]	@ (8002594 <usb_parser+0x2e8>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	49ad      	ldr	r1, [pc, #692]	@ (8002598 <usb_parser+0x2ec>)
 80022e4:	4618      	mov	r0, r3
 80022e6:	f009 faf6 	bl	800b8d6 <memcpy>
		memset(local_buffer, 0, sizeof(local_buffer));
 80022ea:	2240      	movs	r2, #64	@ 0x40
 80022ec:	2100      	movs	r1, #0
 80022ee:	48aa      	ldr	r0, [pc, #680]	@ (8002598 <usb_parser+0x2ec>)
 80022f0:	f009 fa5f 	bl	800b7b2 <memset>
		local_len = 0;
 80022f4:	4ba7      	ldr	r3, [pc, #668]	@ (8002594 <usb_parser+0x2e8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		return;
	}
	memset(report, 0,sizeof(report));
 80022fa:	2240      	movs	r2, #64	@ 0x40
 80022fc:	2100      	movs	r1, #0
 80022fe:	48a7      	ldr	r0, [pc, #668]	@ (800259c <usb_parser+0x2f0>)
 8002300:	f009 fa57 	bl	800b7b2 <memset>
	if(compareStrings(buffer, SHTC3_CMD_READ_DATA, max_len))
 8002304:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	49a4      	ldr	r1, [pc, #656]	@ (80025a0 <usb_parser+0x2f4>)
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff32 	bl	8002178 <compareStrings>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01e      	beq.n	8002358 <usb_parser+0xac>
	{
		sprintf((char *)report, "SHTC3 DATA: %.3f %.3f", shtc3_sensor.temp, shtc3_sensor.hum);
 800231a:	4ba2      	ldr	r3, [pc, #648]	@ (80025a4 <usb_parser+0x2f8>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f91a 	bl	8000558 <__aeabi_f2d>
 8002324:	4604      	mov	r4, r0
 8002326:	460d      	mov	r5, r1
 8002328:	4b9e      	ldr	r3, [pc, #632]	@ (80025a4 <usb_parser+0x2f8>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f913 	bl	8000558 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	e9cd 2300 	strd	r2, r3, [sp]
 800233a:	4622      	mov	r2, r4
 800233c:	462b      	mov	r3, r5
 800233e:	499a      	ldr	r1, [pc, #616]	@ (80025a8 <usb_parser+0x2fc>)
 8002340:	4896      	ldr	r0, [pc, #600]	@ (800259c <usb_parser+0x2f0>)
 8002342:	f009 f9d1 	bl	800b6e8 <siprintf>
		usbSend(report, strlen((char *)report));
 8002346:	4895      	ldr	r0, [pc, #596]	@ (800259c <usb_parser+0x2f0>)
 8002348:	f7fd ff9a 	bl	8000280 <strlen>
 800234c:	4603      	mov	r3, r0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4619      	mov	r1, r3
 8002352:	4892      	ldr	r0, [pc, #584]	@ (800259c <usb_parser+0x2f0>)
 8002354:	f7ff ff34 	bl	80021c0 <usbSend>
	}
	if(compareStrings(buffer, BME280_CMD_READ_DATA, max_len))
 8002358:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	4992      	ldr	r1, [pc, #584]	@ (80025ac <usb_parser+0x300>)
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff08 	bl	8002178 <compareStrings>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01f      	beq.n	80023ae <usb_parser+0x102>
	{
		sprintf((char *)report, "BME280 DATA: %.3f %.3f", bme280_sensor.raw_temp, bme280_sensor.raw_hum);
 800236e:	4b90      	ldr	r3, [pc, #576]	@ (80025b0 <usb_parser+0x304>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8f0 	bl	8000558 <__aeabi_f2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	4b8c      	ldr	r3, [pc, #560]	@ (80025b0 <usb_parser+0x304>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e9 	bl	8000558 <__aeabi_f2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	e9cd 2300 	strd	r2, r3, [sp]
 800238e:	4622      	mov	r2, r4
 8002390:	462b      	mov	r3, r5
 8002392:	4988      	ldr	r1, [pc, #544]	@ (80025b4 <usb_parser+0x308>)
 8002394:	4881      	ldr	r0, [pc, #516]	@ (800259c <usb_parser+0x2f0>)
 8002396:	f009 f9a7 	bl	800b6e8 <siprintf>
		usbSend(report, strlen((char *)report));
 800239a:	4880      	ldr	r0, [pc, #512]	@ (800259c <usb_parser+0x2f0>)
 800239c:	f7fd ff70 	bl	8000280 <strlen>
 80023a0:	4603      	mov	r3, r0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4619      	mov	r1, r3
 80023a6:	487d      	ldr	r0, [pc, #500]	@ (800259c <usb_parser+0x2f0>)
 80023a8:	f7ff ff0a 	bl	80021c0 <usbSend>
 80023ac:	e1ac      	b.n	8002708 <usb_parser+0x45c>
	}
	else if(compareStrings(buffer, SHTC3_CMD_READ_STATE, max_len))
 80023ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4980      	ldr	r1, [pc, #512]	@ (80025b8 <usb_parser+0x30c>)
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fedd 	bl	8002178 <compareStrings>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d02d      	beq.n	8002420 <usb_parser+0x174>
	{
		switch (shtc3_sensor.state)
 80023c4:	4b77      	ldr	r3, [pc, #476]	@ (80025a4 <usb_parser+0x2f8>)
 80023c6:	7a9b      	ldrb	r3, [r3, #10]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d819      	bhi.n	8002402 <usb_parser+0x156>
 80023ce:	a201      	add	r2, pc, #4	@ (adr r2, 80023d4 <usb_parser+0x128>)
 80023d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d4:	080023e5 	.word	0x080023e5
 80023d8:	080023ef 	.word	0x080023ef
 80023dc:	080023f9 	.word	0x080023f9
 80023e0:	080023ef 	.word	0x080023ef
		{
			case SHTC3_IDLE:
				sprintf((char *)report, "SHTC3 IDLE");
 80023e4:	4975      	ldr	r1, [pc, #468]	@ (80025bc <usb_parser+0x310>)
 80023e6:	486d      	ldr	r0, [pc, #436]	@ (800259c <usb_parser+0x2f0>)
 80023e8:	f009 f97e 	bl	800b6e8 <siprintf>
				break;
 80023ec:	e00e      	b.n	800240c <usb_parser+0x160>
			case SHTC3_SINGLE_MEASURE_START:
			case SHTC3_SINGLE_MEASURE:
				sprintf((char *)report, "SHTC3 SINGLE MEASURE");
 80023ee:	4974      	ldr	r1, [pc, #464]	@ (80025c0 <usb_parser+0x314>)
 80023f0:	486a      	ldr	r0, [pc, #424]	@ (800259c <usb_parser+0x2f0>)
 80023f2:	f009 f979 	bl	800b6e8 <siprintf>
				break;
 80023f6:	e009      	b.n	800240c <usb_parser+0x160>
			case SHTC3_CYCLIC_MEASURE:
				sprintf((char *)report, "SHTC3 CYCLIC MEASURE");
 80023f8:	4972      	ldr	r1, [pc, #456]	@ (80025c4 <usb_parser+0x318>)
 80023fa:	4868      	ldr	r0, [pc, #416]	@ (800259c <usb_parser+0x2f0>)
 80023fc:	f009 f974 	bl	800b6e8 <siprintf>
				break;
 8002400:	e004      	b.n	800240c <usb_parser+0x160>
			default:
				sprintf((char *)report, "SHTC3 UNKNOW");
 8002402:	4971      	ldr	r1, [pc, #452]	@ (80025c8 <usb_parser+0x31c>)
 8002404:	4865      	ldr	r0, [pc, #404]	@ (800259c <usb_parser+0x2f0>)
 8002406:	f009 f96f 	bl	800b6e8 <siprintf>
				break;
 800240a:	bf00      	nop
		}
		usbSend(report, strlen((char *)report));
 800240c:	4863      	ldr	r0, [pc, #396]	@ (800259c <usb_parser+0x2f0>)
 800240e:	f7fd ff37 	bl	8000280 <strlen>
 8002412:	4603      	mov	r3, r0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4619      	mov	r1, r3
 8002418:	4860      	ldr	r0, [pc, #384]	@ (800259c <usb_parser+0x2f0>)
 800241a:	f7ff fed1 	bl	80021c0 <usbSend>
 800241e:	e173      	b.n	8002708 <usb_parser+0x45c>
	}
	else if(compareStrings(buffer, BME280_CMD_READ_STATE, max_len))
 8002420:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4968      	ldr	r1, [pc, #416]	@ (80025cc <usb_parser+0x320>)
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fea4 	bl	8002178 <compareStrings>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d02e      	beq.n	8002494 <usb_parser+0x1e8>
	{
		switch (bme280_sensor.state)
 8002436:	4b5e      	ldr	r3, [pc, #376]	@ (80025b0 <usb_parser+0x304>)
 8002438:	7a5b      	ldrb	r3, [r3, #9]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b03      	cmp	r3, #3
 800243e:	d81a      	bhi.n	8002476 <usb_parser+0x1ca>
 8002440:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <usb_parser+0x19c>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	08002459 	.word	0x08002459
 800244c:	08002463 	.word	0x08002463
 8002450:	0800246d 	.word	0x0800246d
 8002454:	08002463 	.word	0x08002463
		{
			case BME280_IDLE:
				sprintf((char *)report, "BME280 IDLE");
 8002458:	495d      	ldr	r1, [pc, #372]	@ (80025d0 <usb_parser+0x324>)
 800245a:	4850      	ldr	r0, [pc, #320]	@ (800259c <usb_parser+0x2f0>)
 800245c:	f009 f944 	bl	800b6e8 <siprintf>
				break;
 8002460:	e00e      	b.n	8002480 <usb_parser+0x1d4>
			case BME280_SINGLE_MEASURE_START:
			case BME280_SINGLE_MEASURE:
				sprintf((char *)report, "BME280 SINGLE MEASURE");
 8002462:	495c      	ldr	r1, [pc, #368]	@ (80025d4 <usb_parser+0x328>)
 8002464:	484d      	ldr	r0, [pc, #308]	@ (800259c <usb_parser+0x2f0>)
 8002466:	f009 f93f 	bl	800b6e8 <siprintf>
				break;
 800246a:	e009      	b.n	8002480 <usb_parser+0x1d4>
			case BME280_CYCLIC_MEASURE:
				sprintf((char *)report, "BME280 CYCLIC MEASURE");
 800246c:	495a      	ldr	r1, [pc, #360]	@ (80025d8 <usb_parser+0x32c>)
 800246e:	484b      	ldr	r0, [pc, #300]	@ (800259c <usb_parser+0x2f0>)
 8002470:	f009 f93a 	bl	800b6e8 <siprintf>
				break;
 8002474:	e004      	b.n	8002480 <usb_parser+0x1d4>
			default:
				sprintf((char *)report, "BME280 UNKNOW");
 8002476:	4959      	ldr	r1, [pc, #356]	@ (80025dc <usb_parser+0x330>)
 8002478:	4848      	ldr	r0, [pc, #288]	@ (800259c <usb_parser+0x2f0>)
 800247a:	f009 f935 	bl	800b6e8 <siprintf>
				break;
 800247e:	bf00      	nop
		}
		usbSend(report, strlen((char *)report));
 8002480:	4846      	ldr	r0, [pc, #280]	@ (800259c <usb_parser+0x2f0>)
 8002482:	f7fd fefd 	bl	8000280 <strlen>
 8002486:	4603      	mov	r3, r0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4619      	mov	r1, r3
 800248c:	4843      	ldr	r0, [pc, #268]	@ (800259c <usb_parser+0x2f0>)
 800248e:	f7ff fe97 	bl	80021c0 <usbSend>
 8002492:	e139      	b.n	8002708 <usb_parser+0x45c>
	}
	else if(compareStrings(buffer, SHTC3_CMD_SET_SINGLE, max_len))
 8002494:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	4950      	ldr	r1, [pc, #320]	@ (80025e0 <usb_parser+0x334>)
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fe6a 	bl	8002178 <compareStrings>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <usb_parser+0x21a>
	{
		switch (shtc3_sensor.state)
 80024aa:	4b3e      	ldr	r3, [pc, #248]	@ (80025a4 <usb_parser+0x2f8>)
 80024ac:	7a9b      	ldrb	r3, [r3, #10]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d103      	bne.n	80024bc <usb_parser+0x210>
		{
			case SHTC3_IDLE:
				shtc3_sensor.state = SHTC3_SINGLE_MEASURE_START;
 80024b4:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <usb_parser+0x2f8>)
 80024b6:	2203      	movs	r2, #3
 80024b8:	729a      	strb	r2, [r3, #10]
				break;
 80024ba:	e125      	b.n	8002708 <usb_parser+0x45c>
			default:
				sprintf((char *)report, "SHTC3 BUSY");
 80024bc:	4949      	ldr	r1, [pc, #292]	@ (80025e4 <usb_parser+0x338>)
 80024be:	4837      	ldr	r0, [pc, #220]	@ (800259c <usb_parser+0x2f0>)
 80024c0:	f009 f912 	bl	800b6e8 <siprintf>
				break;
 80024c4:	e120      	b.n	8002708 <usb_parser+0x45c>
		}
	}
	else if(compareStrings(buffer, BME280_CMD_SET_SINGLE, max_len))
 80024c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4946      	ldr	r1, [pc, #280]	@ (80025e8 <usb_parser+0x33c>)
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe51 	bl	8002178 <compareStrings>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <usb_parser+0x24c>
	{
		switch (bme280_sensor.state)
 80024dc:	4b34      	ldr	r3, [pc, #208]	@ (80025b0 <usb_parser+0x304>)
 80024de:	7a5b      	ldrb	r3, [r3, #9]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <usb_parser+0x242>
		{
			case BME280_IDLE:
				bme280_sensor.state = BME280_SINGLE_MEASURE_START;
 80024e6:	4b32      	ldr	r3, [pc, #200]	@ (80025b0 <usb_parser+0x304>)
 80024e8:	2203      	movs	r2, #3
 80024ea:	725a      	strb	r2, [r3, #9]
				break;
 80024ec:	e10c      	b.n	8002708 <usb_parser+0x45c>
			default:
				sprintf((char *)report, "BME280 BUSY");
 80024ee:	493f      	ldr	r1, [pc, #252]	@ (80025ec <usb_parser+0x340>)
 80024f0:	482a      	ldr	r0, [pc, #168]	@ (800259c <usb_parser+0x2f0>)
 80024f2:	f009 f8f9 	bl	800b6e8 <siprintf>
				break;
 80024f6:	e107      	b.n	8002708 <usb_parser+0x45c>
		}
	}
	else if(compareStrings(buffer, SHTC3_CMD_SET_PERIOD, max_len))
 80024f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	493b      	ldr	r1, [pc, #236]	@ (80025f0 <usb_parser+0x344>)
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fe38 	bl	8002178 <compareStrings>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d074      	beq.n	80025f8 <usb_parser+0x34c>
	{
		if(strlen((char *)buffer) < strlen(SHTC3_CMD_SET_PERIOD))
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4618      	mov	r0, r3
 8002514:	f7fd feb4 	bl	8000280 <strlen>
 8002518:	4603      	mov	r3, r0
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d80c      	bhi.n	8002538 <usb_parser+0x28c>
		{
			sprintf((char *)report, "SHTC3 PERIOD INCORRECT");
 800251e:	4935      	ldr	r1, [pc, #212]	@ (80025f4 <usb_parser+0x348>)
 8002520:	481e      	ldr	r0, [pc, #120]	@ (800259c <usb_parser+0x2f0>)
 8002522:	f009 f8e1 	bl	800b6e8 <siprintf>
			usbSend(report, strlen((char *)report));
 8002526:	481d      	ldr	r0, [pc, #116]	@ (800259c <usb_parser+0x2f0>)
 8002528:	f7fd feaa 	bl	8000280 <strlen>
 800252c:	4603      	mov	r3, r0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	481a      	ldr	r0, [pc, #104]	@ (800259c <usb_parser+0x2f0>)
 8002534:	f7ff fe44 	bl	80021c0 <usbSend>
		}
		uint32_t periodTmp = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
		bool ret = parsePeriod(buffer, &periodTmp, SHTC3_CMD_SET_PERIOD);
 800253c:	f107 0108 	add.w	r1, r7, #8
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	4a2a      	ldr	r2, [pc, #168]	@ (80025f0 <usb_parser+0x344>)
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fe5c 	bl	8002204 <parsePeriod>
 800254c:	4603      	mov	r3, r0
 800254e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		if(ret)
 8002552:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <usb_parser+0x2ca>
		{
			shtc3_sensor.period_ms = periodTmp;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <usb_parser+0x2f8>)
 800255e:	6153      	str	r3, [r2, #20]
			if(periodTmp != 0) { shtc3_sensor.state = SHTC3_CYCLIC_MEASURE_START;}
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <usb_parser+0x2c2>
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <usb_parser+0x2f8>)
 8002568:	2204      	movs	r2, #4
 800256a:	729a      	strb	r2, [r3, #10]
 800256c:	e0cc      	b.n	8002708 <usb_parser+0x45c>
			else {shtc3_sensor.state = SHTC3_IDLE;}
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <usb_parser+0x2f8>)
 8002570:	2200      	movs	r2, #0
 8002572:	729a      	strb	r2, [r3, #10]
 8002574:	e0c8      	b.n	8002708 <usb_parser+0x45c>
		}
		else
		{
			sprintf((char *)report, "SHTC3 PERIOD INCORRECT");
 8002576:	491f      	ldr	r1, [pc, #124]	@ (80025f4 <usb_parser+0x348>)
 8002578:	4808      	ldr	r0, [pc, #32]	@ (800259c <usb_parser+0x2f0>)
 800257a:	f009 f8b5 	bl	800b6e8 <siprintf>
			usbSend(report, strlen((char *)report));
 800257e:	4807      	ldr	r0, [pc, #28]	@ (800259c <usb_parser+0x2f0>)
 8002580:	f7fd fe7e 	bl	8000280 <strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	4804      	ldr	r0, [pc, #16]	@ (800259c <usb_parser+0x2f0>)
 800258c:	f7ff fe18 	bl	80021c0 <usbSend>
 8002590:	e0ba      	b.n	8002708 <usb_parser+0x45c>
 8002592:	bf00      	nop
 8002594:	2000041c 	.word	0x2000041c
 8002598:	200003dc 	.word	0x200003dc
 800259c:	2000039c 	.word	0x2000039c
 80025a0:	0800d9c0 	.word	0x0800d9c0
 80025a4:	2000033c 	.word	0x2000033c
 80025a8:	0800d990 	.word	0x0800d990
 80025ac:	0800d9cc 	.word	0x0800d9cc
 80025b0:	20000358 	.word	0x20000358
 80025b4:	0800d9a8 	.word	0x0800d9a8
 80025b8:	0800d9d8 	.word	0x0800d9d8
 80025bc:	0800d9e4 	.word	0x0800d9e4
 80025c0:	0800d9f0 	.word	0x0800d9f0
 80025c4:	0800da08 	.word	0x0800da08
 80025c8:	0800da20 	.word	0x0800da20
 80025cc:	0800da30 	.word	0x0800da30
 80025d0:	0800da40 	.word	0x0800da40
 80025d4:	0800da4c 	.word	0x0800da4c
 80025d8:	0800da64 	.word	0x0800da64
 80025dc:	0800da7c 	.word	0x0800da7c
 80025e0:	0800da8c 	.word	0x0800da8c
 80025e4:	0800da9c 	.word	0x0800da9c
 80025e8:	0800daa8 	.word	0x0800daa8
 80025ec:	0800dab8 	.word	0x0800dab8
 80025f0:	0800dac4 	.word	0x0800dac4
 80025f4:	0800dad4 	.word	0x0800dad4
		}
	}
	else if(compareStrings(buffer, BME280_CMD_SET_PERIOD, max_len))
 80025f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	4943      	ldr	r1, [pc, #268]	@ (8002710 <usb_parser+0x464>)
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fdb8 	bl	8002178 <compareStrings>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d043      	beq.n	8002696 <usb_parser+0x3ea>
	{
		if(strlen((char *)buffer) < strlen(BME280_CMD_SET_PERIOD))
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd fe34 	bl	8000280 <strlen>
 8002618:	4603      	mov	r3, r0
 800261a:	2b0d      	cmp	r3, #13
 800261c:	d80c      	bhi.n	8002638 <usb_parser+0x38c>
		{
			sprintf((char *)report, "BME280 PERIOD INCORRECT");
 800261e:	493d      	ldr	r1, [pc, #244]	@ (8002714 <usb_parser+0x468>)
 8002620:	483d      	ldr	r0, [pc, #244]	@ (8002718 <usb_parser+0x46c>)
 8002622:	f009 f861 	bl	800b6e8 <siprintf>
			usbSend(report, strlen((char *)report));
 8002626:	483c      	ldr	r0, [pc, #240]	@ (8002718 <usb_parser+0x46c>)
 8002628:	f7fd fe2a 	bl	8000280 <strlen>
 800262c:	4603      	mov	r3, r0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	4839      	ldr	r0, [pc, #228]	@ (8002718 <usb_parser+0x46c>)
 8002634:	f7ff fdc4 	bl	80021c0 <usbSend>
		}
		uint32_t periodTmp = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	607b      	str	r3, [r7, #4]
		bool ret = parsePeriod(buffer, &periodTmp, BME280_CMD_SET_PERIOD);
 800263c:	1d39      	adds	r1, r7, #4
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	4a33      	ldr	r2, [pc, #204]	@ (8002710 <usb_parser+0x464>)
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fddd 	bl	8002204 <parsePeriod>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		if(ret)
 8002650:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002654:	2b00      	cmp	r3, #0
 8002656:	d010      	beq.n	800267a <usb_parser+0x3ce>
		{
			bme280_sensor.period_ms = periodTmp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a30      	ldr	r2, [pc, #192]	@ (800271c <usb_parser+0x470>)
 800265c:	60d3      	str	r3, [r2, #12]
			if(periodTmp != 0) { bme280_sensor.state = BME280_CYCLIC_MEASURE_START;}
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <usb_parser+0x3c0>
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <usb_parser+0x470>)
 8002666:	2204      	movs	r2, #4
 8002668:	725a      	strb	r2, [r3, #9]
 800266a:	e04d      	b.n	8002708 <usb_parser+0x45c>
			else {bme280_sensor.state = BME280_IDLE;bme280_sleep(&bme280_sensor);}
 800266c:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <usb_parser+0x470>)
 800266e:	2200      	movs	r2, #0
 8002670:	725a      	strb	r2, [r3, #9]
 8002672:	482a      	ldr	r0, [pc, #168]	@ (800271c <usb_parser+0x470>)
 8002674:	f7fe fd1a 	bl	80010ac <bme280_sleep>
 8002678:	e046      	b.n	8002708 <usb_parser+0x45c>
		}
		else
		{
			sprintf((char *)report, "BME280 PERIOD INCORRECT");
 800267a:	4926      	ldr	r1, [pc, #152]	@ (8002714 <usb_parser+0x468>)
 800267c:	4826      	ldr	r0, [pc, #152]	@ (8002718 <usb_parser+0x46c>)
 800267e:	f009 f833 	bl	800b6e8 <siprintf>
			usbSend(report, strlen((char *)report));
 8002682:	4825      	ldr	r0, [pc, #148]	@ (8002718 <usb_parser+0x46c>)
 8002684:	f7fd fdfc 	bl	8000280 <strlen>
 8002688:	4603      	mov	r3, r0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	4619      	mov	r1, r3
 800268e:	4822      	ldr	r0, [pc, #136]	@ (8002718 <usb_parser+0x46c>)
 8002690:	f7ff fd96 	bl	80021c0 <usbSend>
 8002694:	e038      	b.n	8002708 <usb_parser+0x45c>
		}
	}
	else if(compareStrings(buffer, SHTC3_CMD_GET_PERIOD, max_len))
 8002696:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	4920      	ldr	r1, [pc, #128]	@ (8002720 <usb_parser+0x474>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fd69 	bl	8002178 <compareStrings>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <usb_parser+0x422>
	{
		sprintf((char *)report, "SHTC3 PERIOD: %ld", shtc3_sensor.period_ms);
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <usb_parser+0x478>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	461a      	mov	r2, r3
 80026b2:	491d      	ldr	r1, [pc, #116]	@ (8002728 <usb_parser+0x47c>)
 80026b4:	4818      	ldr	r0, [pc, #96]	@ (8002718 <usb_parser+0x46c>)
 80026b6:	f009 f817 	bl	800b6e8 <siprintf>
		usbSend(report, strlen((char *)report));
 80026ba:	4817      	ldr	r0, [pc, #92]	@ (8002718 <usb_parser+0x46c>)
 80026bc:	f7fd fde0 	bl	8000280 <strlen>
 80026c0:	4603      	mov	r3, r0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	4814      	ldr	r0, [pc, #80]	@ (8002718 <usb_parser+0x46c>)
 80026c8:	f7ff fd7a 	bl	80021c0 <usbSend>
 80026cc:	e01c      	b.n	8002708 <usb_parser+0x45c>
	}
	else if(compareStrings(buffer, BME280_CMD_GET_PERIOD, max_len))
 80026ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	4915      	ldr	r1, [pc, #84]	@ (800272c <usb_parser+0x480>)
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fd4d 	bl	8002178 <compareStrings>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d011      	beq.n	8002708 <usb_parser+0x45c>
	{
		sprintf((char *)report, "BME280 PERIOD: %ld", bme280_sensor.period_ms);
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <usb_parser+0x470>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4911      	ldr	r1, [pc, #68]	@ (8002730 <usb_parser+0x484>)
 80026ec:	480a      	ldr	r0, [pc, #40]	@ (8002718 <usb_parser+0x46c>)
 80026ee:	f008 fffb 	bl	800b6e8 <siprintf>
		usbSend(report, strlen((char *)report));
 80026f2:	4809      	ldr	r0, [pc, #36]	@ (8002718 <usb_parser+0x46c>)
 80026f4:	f7fd fdc4 	bl	8000280 <strlen>
 80026f8:	4603      	mov	r3, r0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	4806      	ldr	r0, [pc, #24]	@ (8002718 <usb_parser+0x46c>)
 8002700:	f7ff fd5e 	bl	80021c0 <usbSend>
 8002704:	e000      	b.n	8002708 <usb_parser+0x45c>
		return;
 8002706:	bf00      	nop
	}
}
 8002708:	3750      	adds	r7, #80	@ 0x50
 800270a:	46bd      	mov	sp, r7
 800270c:	bdb0      	pop	{r4, r5, r7, pc}
 800270e:	bf00      	nop
 8002710:	0800daec 	.word	0x0800daec
 8002714:	0800dafc 	.word	0x0800dafc
 8002718:	2000039c 	.word	0x2000039c
 800271c:	20000358 	.word	0x20000358
 8002720:	0800db14 	.word	0x0800db14
 8002724:	2000033c 	.word	0x2000033c
 8002728:	0800db24 	.word	0x0800db24
 800272c:	0800db38 	.word	0x0800db38
 8002730:	0800db48 	.word	0x0800db48

08002734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b094      	sub	sp, #80	@ 0x50
 8002738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	2230      	movs	r2, #48	@ 0x30
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f009 f835 	bl	800b7b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <SystemClock_Config+0xd0>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	4a28      	ldr	r2, [pc, #160]	@ (8002804 <SystemClock_Config+0xd0>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002766:	6413      	str	r3, [r2, #64]	@ 0x40
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <SystemClock_Config+0xd0>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <SystemClock_Config+0xd4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <SystemClock_Config+0xd4>)
 800277e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <SystemClock_Config+0xd4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002790:	2303      	movs	r3, #3
 8002792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800279a:	2301      	movs	r3, #1
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800279e:	2310      	movs	r3, #16
 80027a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a2:	2302      	movs	r3, #2
 80027a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027ac:	2304      	movs	r3, #4
 80027ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80027b0:	2348      	movs	r3, #72	@ 0x48
 80027b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80027b4:	2306      	movs	r3, #6
 80027b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80027b8:	2303      	movs	r3, #3
 80027ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027bc:	f107 0320 	add.w	r3, r7, #32
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 fc49 	bl	8006058 <HAL_RCC_OscConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80027cc:	f000 f81e 	bl	800280c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d0:	230f      	movs	r3, #15
 80027d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 feab 	bl	8006548 <HAL_RCC_ClockConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80027f8:	f000 f808 	bl	800280c <Error_Handler>
  }
}
 80027fc:	bf00      	nop
 80027fe:	3750      	adds	r7, #80	@ 0x50
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000

0800280c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <Error_Handler+0x8>

08002818 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800281c:	4b17      	ldr	r3, [pc, #92]	@ (800287c <MX_SPI1_Init+0x64>)
 800281e:	4a18      	ldr	r2, [pc, #96]	@ (8002880 <MX_SPI1_Init+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <MX_SPI1_Init+0x64>)
 8002824:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800282a:	4b14      	ldr	r3, [pc, #80]	@ (800287c <MX_SPI1_Init+0x64>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <MX_SPI1_Init+0x64>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002836:	4b11      	ldr	r3, [pc, #68]	@ (800287c <MX_SPI1_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800283c:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <MX_SPI1_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002842:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <MX_SPI1_Init+0x64>)
 8002844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800284a:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <MX_SPI1_Init+0x64>)
 800284c:	2230      	movs	r2, #48	@ 0x30
 800284e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002850:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <MX_SPI1_Init+0x64>)
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <MX_SPI1_Init+0x64>)
 8002858:	2200      	movs	r2, #0
 800285a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <MX_SPI1_Init+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <MX_SPI1_Init+0x64>)
 8002864:	220a      	movs	r2, #10
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002868:	4804      	ldr	r0, [pc, #16]	@ (800287c <MX_SPI1_Init+0x64>)
 800286a:	f004 f879 	bl	8006960 <HAL_SPI_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002874:	f7ff ffca 	bl	800280c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000420 	.word	0x20000420
 8002880:	40013000 	.word	0x40013000

08002884 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	@ 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a19      	ldr	r2, [pc, #100]	@ (8002908 <HAL_SPI_MspInit+0x84>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d12b      	bne.n	80028fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <HAL_SPI_MspInit+0x88>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4a17      	ldr	r2, [pc, #92]	@ (800290c <HAL_SPI_MspInit+0x88>)
 80028b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <HAL_SPI_MspInit+0x88>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_SPI_MspInit+0x88>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	4a10      	ldr	r2, [pc, #64]	@ (800290c <HAL_SPI_MspInit+0x88>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d2:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <HAL_SPI_MspInit+0x88>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BME280_SCK_Pin|BME280_MISO_Pin|BME280_MOSI_Pin;
 80028de:	23e0      	movs	r3, #224	@ 0xe0
 80028e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ee:	2305      	movs	r3, #5
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	@ (8002910 <HAL_SPI_MspInit+0x8c>)
 80028fa:	f000 fb17 	bl	8002f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	@ 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40013000 	.word	0x40013000
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <HAL_MspInit+0x4c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	4a0f      	ldr	r2, [pc, #60]	@ (8002960 <HAL_MspInit+0x4c>)
 8002924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002928:	6453      	str	r3, [r2, #68]	@ 0x44
 800292a:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <HAL_MspInit+0x4c>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <HAL_MspInit+0x4c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	4a08      	ldr	r2, [pc, #32]	@ (8002960 <HAL_MspInit+0x4c>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	@ 0x40
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_MspInit+0x4c>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002952:	2007      	movs	r0, #7
 8002954:	f000 faa8 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <NMI_Handler+0x4>

0800296c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <MemManage_Handler+0x4>

0800297c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <BusFault_Handler+0x4>

08002984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <UsageFault_Handler+0x4>

0800298c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ba:	f000 f961 	bl	8002c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <OTG_FS_IRQHandler+0x10>)
 80029ca:	f002 fa4f 	bl	8004e6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000960 	.word	0x20000960

080029d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return 1;
 80029dc:	2301      	movs	r3, #1
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_kill>:

int _kill(int pid, int sig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029f2:	f008 ff43 	bl	800b87c <__errno>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2216      	movs	r2, #22
 80029fa:	601a      	str	r2, [r3, #0]
  return -1;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_exit>:

void _exit (int status)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ffe7 	bl	80029e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a1a:	bf00      	nop
 8002a1c:	e7fd      	b.n	8002a1a <_exit+0x12>

08002a1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e00a      	b.n	8002a46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a30:	f3af 8000 	nop.w
 8002a34:	4601      	mov	r1, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	60ba      	str	r2, [r7, #8]
 8002a3c:	b2ca      	uxtb	r2, r1
 8002a3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	dbf0      	blt.n	8002a30 <_read+0x12>
  }

  return len;
 8002a4e:	687b      	ldr	r3, [r7, #4]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e009      	b.n	8002a7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	60ba      	str	r2, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	dbf1      	blt.n	8002a6a <_write+0x12>
  }
  return len;
 8002a86:	687b      	ldr	r3, [r7, #4]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_close>:

int _close(int file)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ab8:	605a      	str	r2, [r3, #4]
  return 0;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <_isatty>:

int _isatty(int file)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ad0:	2301      	movs	r3, #1
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b00:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <_sbrk+0x5c>)
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <_sbrk+0x60>)
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <_sbrk+0x64>)
 8002b16:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <_sbrk+0x68>)
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1a:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d207      	bcs.n	8002b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b28:	f008 fea8 	bl	800b87c <__errno>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	220c      	movs	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e009      	b.n	8002b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <_sbrk+0x64>)
 8002b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20020000 	.word	0x20020000
 8002b58:	00000400 	.word	0x00000400
 8002b5c:	20000478 	.word	0x20000478
 8002b60:	20000fe8 	.word	0x20000fe8

08002b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <SystemInit+0x20>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	4a05      	ldr	r2, [pc, #20]	@ (8002b84 <SystemInit+0x20>)
 8002b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b8c:	f7ff ffea 	bl	8002b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b90:	480c      	ldr	r0, [pc, #48]	@ (8002bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b92:	490d      	ldr	r1, [pc, #52]	@ (8002bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b94:	4a0d      	ldr	r2, [pc, #52]	@ (8002bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b98:	e002      	b.n	8002ba0 <LoopCopyDataInit>

08002b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9e:	3304      	adds	r3, #4

08002ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba4:	d3f9      	bcc.n	8002b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8002bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bac:	e001      	b.n	8002bb2 <LoopFillZerobss>

08002bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb0:	3204      	adds	r2, #4

08002bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb4:	d3fb      	bcc.n	8002bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f008 fe67 	bl	800b888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bba:	f7ff f951 	bl	8001e60 <main>
  bx  lr    
 8002bbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc8:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002bcc:	0800df48 	.word	0x0800df48
  ldr r2, =_sbss
 8002bd0:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002bd4:	20000fe8 	.word	0x20000fe8

08002bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <ADC_IRQHandler>
	...

08002bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c1c <HAL_Init+0x40>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <HAL_Init+0x40>)
 8002bf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf8:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	@ (8002c1c <HAL_Init+0x40>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c04:	2003      	movs	r0, #3
 8002c06:	f000 f94f 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f000 f808 	bl	8002c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c10:	f7ff fe80 	bl	8002914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00

08002c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_InitTick+0x54>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_InitTick+0x58>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f967 	bl	8002f12 <HAL_SYSTICK_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00e      	b.n	8002c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0f      	cmp	r3, #15
 8002c52:	d80a      	bhi.n	8002c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c54:	2200      	movs	r2, #0
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f000 f92f 	bl	8002ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c60:	4a06      	ldr	r2, [pc, #24]	@ (8002c7c <HAL_InitTick+0x5c>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000000 	.word	0x20000000
 8002c78:	20000008 	.word	0x20000008
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_IncTick+0x20>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_IncTick+0x24>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_IncTick+0x24>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000008 	.word	0x20000008
 8002ca4:	2000047c 	.word	0x2000047c

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_GetTick+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	2000047c 	.word	0x2000047c

08002cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff ffee 	bl	8002ca8 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d005      	beq.n	8002ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cda:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <HAL_Delay+0x44>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ce6:	bf00      	nop
 8002ce8:	f7ff ffde 	bl	8002ca8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d8f7      	bhi.n	8002ce8 <HAL_Delay+0x28>
  {
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000008 	.word	0x20000008

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4907      	ldr	r1, [pc, #28]	@ (8002da4 <__NVIC_EnableIRQ+0x38>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	@ (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	@ (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	@ 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	@ 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e74:	d301      	bcc.n	8002e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00f      	b.n	8002e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <SysTick_Config+0x40>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e82:	210f      	movs	r1, #15
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f7ff ff8e 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <SysTick_Config+0x40>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <SysTick_Config+0x40>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff29 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff3e 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff8e 	bl	8002dfc <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff31 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffa2 	bl	8002e64 <SysTick_Config>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e159      	b.n	80031fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 8148 	bne.w	80031f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0201 	and.w	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d017      	beq.n	800301c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d123      	bne.n	8003070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	08da      	lsrs	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3208      	adds	r2, #8
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80a2 	beq.w	80031f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b57      	ldr	r3, [pc, #348]	@ (8003214 <HAL_GPIO_Init+0x2e8>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	4a56      	ldr	r2, [pc, #344]	@ (8003214 <HAL_GPIO_Init+0x2e8>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c2:	4b54      	ldr	r3, [pc, #336]	@ (8003214 <HAL_GPIO_Init+0x2e8>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ce:	4a52      	ldr	r2, [pc, #328]	@ (8003218 <HAL_GPIO_Init+0x2ec>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a49      	ldr	r2, [pc, #292]	@ (800321c <HAL_GPIO_Init+0x2f0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x202>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a48      	ldr	r2, [pc, #288]	@ (8003220 <HAL_GPIO_Init+0x2f4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x1fe>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a47      	ldr	r2, [pc, #284]	@ (8003224 <HAL_GPIO_Init+0x2f8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x1fa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a46      	ldr	r2, [pc, #280]	@ (8003228 <HAL_GPIO_Init+0x2fc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x1f6>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a45      	ldr	r2, [pc, #276]	@ (800322c <HAL_GPIO_Init+0x300>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x1f2>
 800311a:	2304      	movs	r3, #4
 800311c:	e008      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800311e:	2307      	movs	r3, #7
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x204>
 8003122:	2303      	movs	r3, #3
 8003124:	e004      	b.n	8003130 <HAL_GPIO_Init+0x204>
 8003126:	2302      	movs	r3, #2
 8003128:	e002      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800312e:	2300      	movs	r3, #0
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f002 0203 	and.w	r2, r2, #3
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	4093      	lsls	r3, r2
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003140:	4935      	ldr	r1, [pc, #212]	@ (8003218 <HAL_GPIO_Init+0x2ec>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800314e:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <HAL_GPIO_Init+0x304>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003172:	4a2f      	ldr	r2, [pc, #188]	@ (8003230 <HAL_GPIO_Init+0x304>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003178:	4b2d      	ldr	r3, [pc, #180]	@ (8003230 <HAL_GPIO_Init+0x304>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800319c:	4a24      	ldr	r2, [pc, #144]	@ (8003230 <HAL_GPIO_Init+0x304>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031a2:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <HAL_GPIO_Init+0x304>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_GPIO_Init+0x304>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031cc:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <HAL_GPIO_Init+0x304>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003230 <HAL_GPIO_Init+0x304>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	f67f aea2 	bls.w	8002f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40013800 	.word	0x40013800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400
 8003224:	40020800 	.word	0x40020800
 8003228:	40020c00 	.word	0x40020c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40013c00 	.word	0x40013c00

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003278:	887a      	ldrh	r2, [r7, #2]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	041a      	lsls	r2, r3, #16
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43d9      	mvns	r1, r3
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	400b      	ands	r3, r1
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e12b      	b.n	8003506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe fd84 	bl	8001dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	@ 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003300:	f003 fb1a 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a81      	ldr	r2, [pc, #516]	@ (8003510 <HAL_I2C_Init+0x274>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d807      	bhi.n	8003320 <HAL_I2C_Init+0x84>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a80      	ldr	r2, [pc, #512]	@ (8003514 <HAL_I2C_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e006      	b.n	800332e <HAL_I2C_Init+0x92>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a7d      	ldr	r2, [pc, #500]	@ (8003518 <HAL_I2C_Init+0x27c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0e7      	b.n	8003506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a78      	ldr	r2, [pc, #480]	@ (800351c <HAL_I2C_Init+0x280>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a6a      	ldr	r2, [pc, #424]	@ (8003510 <HAL_I2C_Init+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d802      	bhi.n	8003370 <HAL_I2C_Init+0xd4>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3301      	adds	r3, #1
 800336e:	e009      	b.n	8003384 <HAL_I2C_Init+0xe8>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a69      	ldr	r2, [pc, #420]	@ (8003520 <HAL_I2C_Init+0x284>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	430b      	orrs	r3, r1
 800338a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003396:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	495c      	ldr	r1, [pc, #368]	@ (8003510 <HAL_I2C_Init+0x274>)
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d819      	bhi.n	80033d8 <HAL_I2C_Init+0x13c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e59      	subs	r1, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033b8:	400b      	ands	r3, r1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_I2C_Init+0x138>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e59      	subs	r1, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	e051      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e04f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_I2C_Init+0x168>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_I2C_Init+0x18e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x196>
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_I2C_Init+0x1bc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e58      	subs	r0, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	fbb0 f3f3 	udiv	r3, r0, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6809      	ldr	r1, [r1, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6911      	ldr	r1, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	000186a0 	.word	0x000186a0
 8003514:	001e847f 	.word	0x001e847f
 8003518:	003d08ff 	.word	0x003d08ff
 800351c:	431bde83 	.word	0x431bde83
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	461a      	mov	r2, r3
 8003530:	460b      	mov	r3, r1
 8003532:	817b      	strh	r3, [r7, #10]
 8003534:	4613      	mov	r3, r2
 8003536:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff fbb6 	bl	8002ca8 <HAL_GetTick>
 800353c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	f040 80e0 	bne.w	800370c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	4970      	ldr	r1, [pc, #448]	@ (8003718 <HAL_I2C_Master_Transmit+0x1f4>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f001 f90e 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	e0d3      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_I2C_Master_Transmit+0x50>
 8003570:	2302      	movs	r3, #2
 8003572:	e0cc      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d007      	beq.n	800359a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2221      	movs	r2, #33	@ 0x21
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2210      	movs	r2, #16
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	893a      	ldrh	r2, [r7, #8]
 80035ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a50      	ldr	r2, [pc, #320]	@ (800371c <HAL_I2C_Master_Transmit+0x1f8>)
 80035da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035dc:	8979      	ldrh	r1, [r7, #10]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fdfa 	bl	80041dc <I2C_MasterRequestWrite>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e08d      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003608:	e066      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f001 f9cc 	bl	80049ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06b      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d11b      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x188>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6a39      	ldr	r1, [r7, #32]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f001 f9c3 	bl	8004a3c <I2C_WaitOnBTFFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e01a      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d194      	bne.n	800360a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	00100002 	.word	0x00100002
 800371c:	ffff0000 	.word	0xffff0000

08003720 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	@ 0x30
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	460b      	mov	r3, r1
 800372e:	817b      	strh	r3, [r7, #10]
 8003730:	4613      	mov	r3, r2
 8003732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003734:	f7ff fab8 	bl	8002ca8 <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	f040 8217 	bne.w	8003b76 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2319      	movs	r3, #25
 800374e:	2201      	movs	r2, #1
 8003750:	497c      	ldr	r1, [pc, #496]	@ (8003944 <HAL_I2C_Master_Receive+0x224>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f001 f810 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
 8003760:	e20a      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_I2C_Master_Receive+0x50>
 800376c:	2302      	movs	r3, #2
 800376e:	e203      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d007      	beq.n	8003796 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2222      	movs	r2, #34	@ 0x22
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2210      	movs	r2, #16
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	893a      	ldrh	r2, [r7, #8]
 80037c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003948 <HAL_I2C_Master_Receive+0x228>)
 80037d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037d8:	8979      	ldrh	r1, [r7, #10]
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fd7e 	bl	80042e0 <I2C_MasterRequestRead>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e1c4      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d113      	bne.n	800381e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	623b      	str	r3, [r7, #32]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	623b      	str	r3, [r7, #32]
 800380a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e198      	b.n	8003b50 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	2b01      	cmp	r3, #1
 8003824:	d11b      	bne.n	800385e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e178      	b.n	8003b50 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	2b02      	cmp	r3, #2
 8003864:	d11b      	bne.n	800389e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003874:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003884:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	e158      	b.n	8003b50 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038c4:	e144      	b.n	8003b50 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	f200 80f1 	bhi.w	8003ab2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d123      	bne.n	8003920 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f001 f8f5 	bl	8004acc <I2C_WaitOnRXNEFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e145      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800391e:	e117      	b.n	8003b50 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	2b02      	cmp	r3, #2
 8003926:	d14e      	bne.n	80039c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	2200      	movs	r2, #0
 8003930:	4906      	ldr	r1, [pc, #24]	@ (800394c <HAL_I2C_Master_Receive+0x22c>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 ff20 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e11a      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
 8003942:	bf00      	nop
 8003944:	00100002 	.word	0x00100002
 8003948:	ffff0000 	.word	0xffff0000
 800394c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039c4:	e0c4      	b.n	8003b50 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	2200      	movs	r2, #0
 80039ce:	496c      	ldr	r1, [pc, #432]	@ (8003b80 <HAL_I2C_Master_Receive+0x460>)
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fed1 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0cb      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	2200      	movs	r2, #0
 8003a2a:	4955      	ldr	r1, [pc, #340]	@ (8003b80 <HAL_I2C_Master_Receive+0x460>)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fea3 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e09d      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ab0:	e04e      	b.n	8003b50 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f001 f808 	bl	8004acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e058      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d124      	bne.n	8003b50 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d107      	bne.n	8003b1e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f47f aeb6 	bne.w	80038c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3728      	adds	r7, #40	@ 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	00010004 	.word	0x00010004

08003b84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	817b      	strh	r3, [r7, #10]
 8003b96:	460b      	mov	r3, r1
 8003b98:	813b      	strh	r3, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b9e:	f7ff f883 	bl	8002ca8 <HAL_GetTick>
 8003ba2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	f040 80d9 	bne.w	8003d64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2319      	movs	r3, #25
 8003bb8:	2201      	movs	r2, #1
 8003bba:	496d      	ldr	r1, [pc, #436]	@ (8003d70 <HAL_I2C_Mem_Write+0x1ec>)
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fddb 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e0cc      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_I2C_Mem_Write+0x56>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e0c5      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d007      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2221      	movs	r2, #33	@ 0x21
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2240      	movs	r2, #64	@ 0x40
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003d74 <HAL_I2C_Mem_Write+0x1f0>)
 8003c40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c42:	88f8      	ldrh	r0, [r7, #6]
 8003c44:	893a      	ldrh	r2, [r7, #8]
 8003c46:	8979      	ldrh	r1, [r7, #10]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4603      	mov	r3, r0
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fc12 	bl	800447c <I2C_RequestMemoryWrite>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d052      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e081      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fea0 	bl	80049ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d107      	bne.n	8003c8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e06b      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d11b      	bne.n	8003d04 <HAL_I2C_Mem_Write+0x180>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d017      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1aa      	bne.n	8003c62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fe93 	bl	8004a3c <I2C_WaitOnBTFFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d107      	bne.n	8003d34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e016      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	00100002 	.word	0x00100002
 8003d74:	ffff0000 	.word	0xffff0000

08003d78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	@ 0x30
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	817b      	strh	r3, [r7, #10]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	813b      	strh	r3, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d92:	f7fe ff89 	bl	8002ca8 <HAL_GetTick>
 8003d96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	f040 8214 	bne.w	80041ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2319      	movs	r3, #25
 8003dac:	2201      	movs	r2, #1
 8003dae:	497b      	ldr	r1, [pc, #492]	@ (8003f9c <HAL_I2C_Mem_Read+0x224>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fce1 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e207      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_Mem_Read+0x56>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e200      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d007      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2222      	movs	r2, #34	@ 0x22
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2240      	movs	r2, #64	@ 0x40
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa0 <HAL_I2C_Mem_Read+0x228>)
 8003e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e36:	88f8      	ldrh	r0, [r7, #6]
 8003e38:	893a      	ldrh	r2, [r7, #8]
 8003e3a:	8979      	ldrh	r1, [r7, #10]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	4603      	mov	r3, r0
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fbae 	bl	80045a8 <I2C_RequestMemoryRead>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1bc      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d113      	bne.n	8003e86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e190      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d11b      	bne.n	8003ec6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e170      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d11b      	bne.n	8003f06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003edc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	e150      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f1c:	e144      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	f200 80f1 	bhi.w	800410a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d123      	bne.n	8003f78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fdc9 	bl	8004acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e145      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f76:	e117      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d14e      	bne.n	800401e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f86:	2200      	movs	r2, #0
 8003f88:	4906      	ldr	r1, [pc, #24]	@ (8003fa4 <HAL_I2C_Mem_Read+0x22c>)
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fbf4 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e11a      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000
 8003fa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800401c:	e0c4      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	2200      	movs	r2, #0
 8004026:	496c      	ldr	r1, [pc, #432]	@ (80041d8 <HAL_I2C_Mem_Read+0x460>)
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fba5 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0cb      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	2200      	movs	r2, #0
 8004082:	4955      	ldr	r1, [pc, #340]	@ (80041d8 <HAL_I2C_Mem_Read+0x460>)
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fb77 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e09d      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004108:	e04e      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fcdc 	bl	8004acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e058      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d124      	bne.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	2b03      	cmp	r3, #3
 8004164:	d107      	bne.n	8004176 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004174:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f47f aeb6 	bne.w	8003f1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	@ 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	00010004 	.word	0x00010004

080041dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d006      	beq.n	8004206 <I2C_MasterRequestWrite+0x2a>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d003      	beq.n	8004206 <I2C_MasterRequestWrite+0x2a>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004204:	d108      	bne.n	8004218 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e00b      	b.n	8004230 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	2b12      	cmp	r3, #18
 800421e:	d107      	bne.n	8004230 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800422e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fa9b 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004256:	d103      	bne.n	8004260 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e035      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800426c:	d108      	bne.n	8004280 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	e01b      	b.n	80042b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004280:	897b      	ldrh	r3, [r7, #10]
 8004282:	11db      	asrs	r3, r3, #7
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f063 030f 	orn	r3, r3, #15
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	490e      	ldr	r1, [pc, #56]	@ (80042d8 <I2C_MasterRequestWrite+0xfc>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fae4 	bl	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e010      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4907      	ldr	r1, [pc, #28]	@ (80042dc <I2C_MasterRequestWrite+0x100>)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fad4 	bl	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	00010008 	.word	0x00010008
 80042dc:	00010002 	.word	0x00010002

080042e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	460b      	mov	r3, r1
 80042ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004304:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d006      	beq.n	800431a <I2C_MasterRequestRead+0x3a>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d003      	beq.n	800431a <I2C_MasterRequestRead+0x3a>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004318:	d108      	bne.n	800432c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e00b      	b.n	8004344 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004330:	2b11      	cmp	r3, #17
 8004332:	d107      	bne.n	8004344 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fa11 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436a:	d103      	bne.n	8004374 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e079      	b.n	800446c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004380:	d108      	bne.n	8004394 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004382:	897b      	ldrh	r3, [r7, #10]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	611a      	str	r2, [r3, #16]
 8004392:	e05f      	b.n	8004454 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	11db      	asrs	r3, r3, #7
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f003 0306 	and.w	r3, r3, #6
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f063 030f 	orn	r3, r3, #15
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4930      	ldr	r1, [pc, #192]	@ (8004474 <I2C_MasterRequestRead+0x194>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fa5a 	bl	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e054      	b.n	800446c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4929      	ldr	r1, [pc, #164]	@ (8004478 <I2C_MasterRequestRead+0x198>)
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fa4a 	bl	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e044      	b.n	800446c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004406:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f9af 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442e:	d103      	bne.n	8004438 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e017      	b.n	800446c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800443c:	897b      	ldrh	r3, [r7, #10]
 800443e:	11db      	asrs	r3, r3, #7
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0306 	and.w	r3, r3, #6
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f063 030e 	orn	r3, r3, #14
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4907      	ldr	r1, [pc, #28]	@ (8004478 <I2C_MasterRequestRead+0x198>)
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fa06 	bl	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	00010008 	.word	0x00010008
 8004478:	00010002 	.word	0x00010002

0800447c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	460b      	mov	r3, r1
 8004490:	813b      	strh	r3, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f960 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044cc:	d103      	bne.n	80044d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e05f      	b.n	800459a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044da:	897b      	ldrh	r3, [r7, #10]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	492d      	ldr	r1, [pc, #180]	@ (80045a4 <I2C_RequestMemoryWrite+0x128>)
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f9bb 	bl	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e04c      	b.n	800459a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004518:	6a39      	ldr	r1, [r7, #32]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fa46 	bl	80049ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	2b04      	cmp	r3, #4
 800452c:	d107      	bne.n	800453e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e02b      	b.n	800459a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	611a      	str	r2, [r3, #16]
 8004552:	e021      	b.n	8004598 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004554:	893b      	ldrh	r3, [r7, #8]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b29b      	uxth	r3, r3
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fa20 	bl	80049ac <I2C_WaitOnTXEFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	2b04      	cmp	r3, #4
 8004578:	d107      	bne.n	800458a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004588:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e005      	b.n	800459a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800458e:	893b      	ldrh	r3, [r7, #8]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	00010002 	.word	0x00010002

080045a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	4608      	mov	r0, r1
 80045b2:	4611      	mov	r1, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	817b      	strh	r3, [r7, #10]
 80045ba:	460b      	mov	r3, r1
 80045bc:	813b      	strh	r3, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f8c2 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004608:	d103      	bne.n	8004612 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004610:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e0aa      	b.n	800476c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004624:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	4952      	ldr	r1, [pc, #328]	@ (8004774 <I2C_RequestMemoryRead+0x1cc>)
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f91d 	bl	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e097      	b.n	800476c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004654:	6a39      	ldr	r1, [r7, #32]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f9a8 	bl	80049ac <I2C_WaitOnTXEFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2b04      	cmp	r3, #4
 8004668:	d107      	bne.n	800467a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004678:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e076      	b.n	800476c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d105      	bne.n	8004690 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004684:	893b      	ldrh	r3, [r7, #8]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	611a      	str	r2, [r3, #16]
 800468e:	e021      	b.n	80046d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004690:	893b      	ldrh	r3, [r7, #8]
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	b29b      	uxth	r3, r3
 8004696:	b2da      	uxtb	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a0:	6a39      	ldr	r1, [r7, #32]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f982 	bl	80049ac <I2C_WaitOnTXEFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d107      	bne.n	80046c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e050      	b.n	800476c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ca:	893b      	ldrh	r3, [r7, #8]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d6:	6a39      	ldr	r1, [r7, #32]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f967 	bl	80049ac <I2C_WaitOnTXEFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d107      	bne.n	80046fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e035      	b.n	800476c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800470e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	2200      	movs	r2, #0
 8004718:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f82b 	bl	8004778 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00d      	beq.n	8004744 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004736:	d103      	bne.n	8004740 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800473e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e013      	b.n	800476c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004744:	897b      	ldrh	r3, [r7, #10]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	b2da      	uxtb	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	6a3a      	ldr	r2, [r7, #32]
 8004758:	4906      	ldr	r1, [pc, #24]	@ (8004774 <I2C_RequestMemoryRead+0x1cc>)
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f886 	bl	800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	00010002 	.word	0x00010002

08004778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004788:	e048      	b.n	800481c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d044      	beq.n	800481c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fe fa89 	bl	8002ca8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d139      	bne.n	800481c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10d      	bne.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	43da      	mvns	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4013      	ands	r3, r2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	e00c      	b.n	80047e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	43da      	mvns	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d116      	bne.n	800481c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e023      	b.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d10d      	bne.n	8004842 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	43da      	mvns	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	e00c      	b.n	800485c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	43da      	mvns	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	429a      	cmp	r2, r3
 8004860:	d093      	beq.n	800478a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800487a:	e071      	b.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800488a:	d123      	bne.n	80048d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	f043 0204 	orr.w	r2, r3, #4
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e067      	b.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d041      	beq.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048dc:	f7fe f9e4 	bl	8002ca8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d302      	bcc.n	80048f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d136      	bne.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d10c      	bne.n	8004916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	43da      	mvns	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	bf14      	ite	ne
 800490e:	2301      	movne	r3, #1
 8004910:	2300      	moveq	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	e00b      	b.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	43da      	mvns	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4013      	ands	r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e021      	b.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	0c1b      	lsrs	r3, r3, #16
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10c      	bne.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	43da      	mvns	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e00b      	b.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	43da      	mvns	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	f47f af6d 	bne.w	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b8:	e034      	b.n	8004a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f8e3 	bl	8004b86 <I2C_IsAcknowledgeFailed>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e034      	b.n	8004a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d028      	beq.n	8004a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d2:	f7fe f969 	bl	8002ca8 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d302      	bcc.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d11d      	bne.n	8004a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b80      	cmp	r3, #128	@ 0x80
 80049f4:	d016      	beq.n	8004a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e007      	b.n	8004a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2e:	2b80      	cmp	r3, #128	@ 0x80
 8004a30:	d1c3      	bne.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a48:	e034      	b.n	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f89b 	bl	8004b86 <I2C_IsAcknowledgeFailed>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e034      	b.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d028      	beq.n	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fe f921 	bl	8002ca8 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d11d      	bne.n	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d016      	beq.n	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e007      	b.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d1c3      	bne.n	8004a4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ad8:	e049      	b.n	8004b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d119      	bne.n	8004b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0210 	mvn.w	r2, #16
 8004af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e030      	b.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1c:	f7fe f8c4 	bl	8002ca8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d302      	bcc.n	8004b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11d      	bne.n	8004b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d016      	beq.n	8004b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	f043 0220 	orr.w	r2, r3, #32
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e007      	b.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b78:	2b40      	cmp	r3, #64	@ 0x40
 8004b7a:	d1ae      	bne.n	8004ada <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9c:	d11b      	bne.n	8004bd6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ba6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	f043 0204 	orr.w	r2, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e101      	b.n	8004dfa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f005 fcd3 	bl	800a5bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c24:	d102      	bne.n	8004c2c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f002 f836 	bl	8006ca2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	7c1a      	ldrb	r2, [r3, #16]
 8004c3e:	f88d 2000 	strb.w	r2, [sp]
 8004c42:	3304      	adds	r3, #4
 8004c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c46:	f001 ff14 	bl	8006a72 <USB_CoreInit>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0ce      	b.n	8004dfa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f002 f82e 	bl	8006cc4 <USB_SetCurrentMode>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e0bf      	b.n	8004dfa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	e04a      	b.n	8004d16 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3315      	adds	r3, #21
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	7bfa      	ldrb	r2, [r7, #15]
 8004ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	b298      	uxth	r0, r3
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	332e      	adds	r3, #46	@ 0x2e
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	3318      	adds	r3, #24
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	331c      	adds	r3, #28
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ce8:	7bfa      	ldrb	r2, [r7, #15]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3320      	adds	r3, #32
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3324      	adds	r3, #36	@ 0x24
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	3301      	adds	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	791b      	ldrb	r3, [r3, #4]
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d3af      	bcc.n	8004c80 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	73fb      	strb	r3, [r7, #15]
 8004d24:	e044      	b.n	8004db0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d26:	7bfa      	ldrb	r2, [r7, #15]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d3c:	7bfa      	ldrb	r2, [r7, #15]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004d4e:	7bfa      	ldrb	r2, [r7, #15]
 8004d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d52:	7bfa      	ldrb	r2, [r7, #15]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d7e:	7bfa      	ldrb	r2, [r7, #15]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	3301      	adds	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	791b      	ldrb	r3, [r3, #4]
 8004db4:	7bfa      	ldrb	r2, [r7, #15]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d3b5      	bcc.n	8004d26 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	7c1a      	ldrb	r2, [r3, #16]
 8004dc2:	f88d 2000 	strb.w	r2, [sp]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dca:	f001 ffc7 	bl	8006d5c <USB_DevInit>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e00c      	b.n	8004dfa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f003 f811 	bl	8007e1a <USB_DevDisconnect>

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_PCD_Start+0x1c>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e022      	b.n	8004e64 <HAL_PCD_Start+0x62>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d105      	bne.n	8004e46 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f001 ff18 	bl	8006c80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f002 ffbf 	bl	8007dd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b08d      	sub	sp, #52	@ 0x34
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f003 f87d 	bl	8007f82 <USB_GetMode>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f040 848c 	bne.w	80057a8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f002 ffe1 	bl	8007e5c <USB_ReadInterrupts>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8482 	beq.w	80057a6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f002 ffce 	bl	8007e5c <USB_ReadInterrupts>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d107      	bne.n	8004eda <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f002 0202 	and.w	r2, r2, #2
 8004ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f002 ffbc 	bl	8007e5c <USB_ReadInterrupts>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d161      	bne.n	8004fb2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0210 	bic.w	r2, r2, #16
 8004efc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f003 020f 	and.w	r2, r3, #15
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f28:	d124      	bne.n	8004f74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d035      	beq.n	8004fa2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	6a38      	ldr	r0, [r7, #32]
 8004f4a:	f002 fdf3 	bl	8007b34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f5a:	441a      	add	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f6c:	441a      	add	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	615a      	str	r2, [r3, #20]
 8004f72:	e016      	b.n	8004fa2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004f7a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f7e:	d110      	bne.n	8004fa2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f86:	2208      	movs	r2, #8
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6a38      	ldr	r0, [r7, #32]
 8004f8c:	f002 fdd2 	bl	8007b34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f9c:	441a      	add	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0210 	orr.w	r2, r2, #16
 8004fb0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f002 ff50 	bl	8007e5c <USB_ReadInterrupts>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fc2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fc6:	f040 80a7 	bne.w	8005118 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f002 ff55 	bl	8007e82 <USB_ReadDevAllOutEpInterrupt>
 8004fd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004fda:	e099      	b.n	8005110 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 808e 	beq.w	8005104 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f002 ff79 	bl	8007eea <USB_ReadDevOutEPInterrupt>
 8004ff8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00c      	beq.n	800501e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005010:	461a      	mov	r2, r3
 8005012:	2301      	movs	r3, #1
 8005014:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005016:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fe8b 	bl	8005d34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00c      	beq.n	8005042 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005034:	461a      	mov	r2, r3
 8005036:	2308      	movs	r3, #8
 8005038:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800503a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 ff61 	bl	8005f04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005058:	461a      	mov	r2, r3
 800505a:	2310      	movs	r3, #16
 800505c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d030      	beq.n	80050ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005070:	2b80      	cmp	r3, #128	@ 0x80
 8005072:	d109      	bne.n	8005088 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005086:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508a:	4613      	mov	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	3304      	adds	r3, #4
 800509c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	78db      	ldrb	r3, [r3, #3]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d108      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f005 fb8c 	bl	800a7d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c4:	461a      	mov	r2, r3
 80050c6:	2302      	movs	r3, #2
 80050c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e0:	461a      	mov	r2, r3
 80050e2:	2320      	movs	r3, #32
 80050e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d009      	beq.n	8005104 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005102:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	3301      	adds	r3, #1
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	f47f af62 	bne.w	8004fdc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f002 fe9d 	bl	8007e5c <USB_ReadInterrupts>
 8005122:	4603      	mov	r3, r0
 8005124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005128:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800512c:	f040 80db 	bne.w	80052e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f002 febe 	bl	8007eb6 <USB_ReadDevAllInEpInterrupt>
 800513a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005140:	e0cd      	b.n	80052de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80c2 	beq.w	80052d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	4611      	mov	r1, r2
 8005158:	4618      	mov	r0, r3
 800515a:	f002 fee4 	bl	8007f26 <USB_ReadDevInEPInterrupt>
 800515e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d057      	beq.n	800521a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	2201      	movs	r2, #1
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	43db      	mvns	r3, r3
 8005184:	69f9      	ldr	r1, [r7, #28]
 8005186:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800518a:	4013      	ands	r3, r2
 800518c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519a:	461a      	mov	r2, r3
 800519c:	2301      	movs	r3, #1
 800519e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	799b      	ldrb	r3, [r3, #6]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d132      	bne.n	800520e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3320      	adds	r3, #32
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051be:	4613      	mov	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4403      	add	r3, r0
 80051c8:	331c      	adds	r3, #28
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4419      	add	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4403      	add	r3, r0
 80051dc:	3320      	adds	r3, #32
 80051de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d113      	bne.n	800520e <HAL_PCD_IRQHandler+0x3a2>
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3324      	adds	r3, #36	@ 0x24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d108      	bne.n	800520e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005206:	461a      	mov	r2, r3
 8005208:	2101      	movs	r1, #1
 800520a:	f002 feeb 	bl	8007fe4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	b2db      	uxtb	r3, r3
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f005 fa60 	bl	800a6da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005230:	461a      	mov	r2, r3
 8005232:	2308      	movs	r3, #8
 8005234:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524c:	461a      	mov	r2, r3
 800524e:	2310      	movs	r3, #16
 8005250:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005268:	461a      	mov	r2, r3
 800526a:	2340      	movs	r3, #64	@ 0x40
 800526c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d023      	beq.n	80052c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800527a:	6a38      	ldr	r0, [r7, #32]
 800527c:	f001 fed2 	bl	8007024 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005282:	4613      	mov	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	3310      	adds	r3, #16
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4413      	add	r3, r2
 8005290:	3304      	adds	r3, #4
 8005292:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	78db      	ldrb	r3, [r3, #3]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d108      	bne.n	80052ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f005 faa3 	bl	800a7f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ba:	461a      	mov	r2, r3
 80052bc:	2302      	movs	r3, #2
 80052be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fca5 	bl	8005c1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	3301      	adds	r3, #1
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f47f af2e 	bne.w	8005142 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f002 fdb6 	bl	8007e5c <USB_ReadInterrupts>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052fa:	d122      	bne.n	8005342 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005316:	2b01      	cmp	r3, #1
 8005318:	d108      	bne.n	800532c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fe8b 	bl	8006040 <HAL_PCDEx_LPM_Callback>
 800532a:	e002      	b.n	8005332 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f005 fa41 	bl	800a7b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f002 fd88 	bl	8007e5c <USB_ReadInterrupts>
 800534c:	4603      	mov	r3, r0
 800534e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005356:	d112      	bne.n	800537e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d102      	bne.n	800536e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f005 f9fd 	bl	800a768 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800537c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f002 fd6a 	bl	8007e5c <USB_ReadInterrupts>
 8005388:	4603      	mov	r3, r0
 800538a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005392:	f040 80b7 	bne.w	8005504 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2110      	movs	r1, #16
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 fe37 	bl	8007024 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ba:	e046      	b.n	800544a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c8:	461a      	mov	r2, r3
 80053ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fc:	461a      	mov	r2, r3
 80053fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005402:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800541e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005422:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800543e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005442:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005446:	3301      	adds	r3, #1
 8005448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	791b      	ldrb	r3, [r3, #4]
 800544e:	461a      	mov	r2, r3
 8005450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005452:	4293      	cmp	r3, r2
 8005454:	d3b2      	bcc.n	80053bc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005464:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005468:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7bdb      	ldrb	r3, [r3, #15]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005482:	f043 030b 	orr.w	r3, r3, #11
 8005486:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005498:	f043 030b 	orr.w	r3, r3, #11
 800549c:	6453      	str	r3, [r2, #68]	@ 0x44
 800549e:	e015      	b.n	80054cc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80054b2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80054b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054c6:	f043 030b 	orr.w	r3, r3, #11
 80054ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80054de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054ee:	461a      	mov	r2, r3
 80054f0:	f002 fd78 	bl	8007fe4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f002 fca7 	bl	8007e5c <USB_ReadInterrupts>
 800550e:	4603      	mov	r3, r0
 8005510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005518:	d123      	bne.n	8005562 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f002 fd3d 	bl	8007f9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f001 fdf4 	bl	8007116 <USB_GetDevSpeed>
 800552e:	4603      	mov	r3, r0
 8005530:	461a      	mov	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681c      	ldr	r4, [r3, #0]
 800553a:	f001 f9f1 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 800553e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005544:	461a      	mov	r2, r3
 8005546:	4620      	mov	r0, r4
 8005548:	f001 faf8 	bl	8006b3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f005 f8ec 	bl	800a72a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005560:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f002 fc78 	bl	8007e5c <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b08      	cmp	r3, #8
 8005574:	d10a      	bne.n	800558c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f005 f8c9 	bl	800a70e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f002 0208 	and.w	r2, r2, #8
 800558a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f002 fc63 	bl	8007e5c <USB_ReadInterrupts>
 8005596:	4603      	mov	r3, r0
 8005598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559c:	2b80      	cmp	r3, #128	@ 0x80
 800559e:	d123      	bne.n	80055e8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055ac:	2301      	movs	r3, #1
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b0:	e014      	b.n	80055dc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b6:	4613      	mov	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d105      	bne.n	80055d6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 faf2 	bl	8005bba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	3301      	adds	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	791b      	ldrb	r3, [r3, #4]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d3e4      	bcc.n	80055b2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f002 fc35 	bl	8007e5c <USB_ReadInterrupts>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055fc:	d13c      	bne.n	8005678 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055fe:	2301      	movs	r3, #1
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24
 8005602:	e02b      	b.n	800565c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	3318      	adds	r3, #24
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d115      	bne.n	8005656 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800562a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800562c:	2b00      	cmp	r3, #0
 800562e:	da12      	bge.n	8005656 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	3317      	adds	r3, #23
 8005640:	2201      	movs	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800564c:	b2db      	uxtb	r3, r3
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fab2 	bl	8005bba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	3301      	adds	r3, #1
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	791b      	ldrb	r3, [r3, #4]
 8005660:	461a      	mov	r2, r3
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	4293      	cmp	r3, r2
 8005666:	d3cd      	bcc.n	8005604 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f002 fbed 	bl	8007e5c <USB_ReadInterrupts>
 8005682:	4603      	mov	r3, r0
 8005684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005688:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800568c:	d156      	bne.n	800573c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800568e:	2301      	movs	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
 8005692:	e045      	b.n	8005720 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d12e      	bne.n	800571a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80056bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da2b      	bge.n	800571a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	0c1a      	lsrs	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80056cc:	4053      	eors	r3, r2
 80056ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d121      	bne.n	800571a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005716:	6053      	str	r3, [r2, #4]
            break;
 8005718:	e008      	b.n	800572c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	3301      	adds	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	791b      	ldrb	r3, [r3, #4]
 8005724:	461a      	mov	r2, r3
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	4293      	cmp	r3, r2
 800572a:	d3b3      	bcc.n	8005694 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800573a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4618      	mov	r0, r3
 8005742:	f002 fb8b 	bl	8007e5c <USB_ReadInterrupts>
 8005746:	4603      	mov	r3, r0
 8005748:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005750:	d10a      	bne.n	8005768 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f005 f860 	bl	800a818 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f002 fb75 	bl	8007e5c <USB_ReadInterrupts>
 8005772:	4603      	mov	r3, r0
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b04      	cmp	r3, #4
 800577a:	d115      	bne.n	80057a8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f005 f850 	bl	800a834 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	e000      	b.n	80057a8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80057a6:	bf00      	nop
    }
  }
}
 80057a8:	3734      	adds	r7, #52	@ 0x34
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd90      	pop	{r4, r7, pc}

080057ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_PCD_SetAddress+0x1a>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e012      	b.n	80057ee <HAL_PCD_SetAddress+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	78fa      	ldrb	r2, [r7, #3]
 80057d4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f002 fad4 	bl	8007d8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	4608      	mov	r0, r1
 8005800:	4611      	mov	r1, r2
 8005802:	461a      	mov	r2, r3
 8005804:	4603      	mov	r3, r0
 8005806:	70fb      	strb	r3, [r7, #3]
 8005808:	460b      	mov	r3, r1
 800580a:	803b      	strh	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da0f      	bge.n	800583c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	f003 020f 	and.w	r2, r3, #15
 8005822:	4613      	mov	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	3310      	adds	r3, #16
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	3304      	adds	r3, #4
 8005832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	705a      	strb	r2, [r3, #1]
 800583a:	e00f      	b.n	800585c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	3304      	adds	r3, #4
 8005854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	b2da      	uxtb	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005868:	883b      	ldrh	r3, [r7, #0]
 800586a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	78ba      	ldrb	r2, [r7, #2]
 8005876:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800588a:	78bb      	ldrb	r3, [r7, #2]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d102      	bne.n	8005896 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_PCD_EP_Open+0xae>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e00e      	b.n	80058c2 <HAL_PCD_EP_Open+0xcc>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 fc54 	bl	8007160 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80058c0:	7afb      	ldrb	r3, [r7, #11]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	460b      	mov	r3, r1
 80058d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da0f      	bge.n	80058fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	4613      	mov	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	3310      	adds	r3, #16
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	3304      	adds	r3, #4
 80058f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	705a      	strb	r2, [r3, #1]
 80058fc:	e00f      	b.n	800591e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	f003 020f 	and.w	r2, r3, #15
 8005904:	4613      	mov	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	3304      	adds	r3, #4
 8005916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_PCD_EP_Close+0x6e>
 8005934:	2302      	movs	r3, #2
 8005936:	e00e      	b.n	8005956 <HAL_PCD_EP_Close+0x8c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	4618      	mov	r0, r3
 8005948:	f001 fc92 	bl	8007270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	460b      	mov	r3, r1
 800596c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	f003 020f 	and.w	r2, r3, #15
 8005974:	4613      	mov	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	3304      	adds	r3, #4
 8005986:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2200      	movs	r2, #0
 8005998:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2200      	movs	r2, #0
 800599e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059a0:	7afb      	ldrb	r3, [r7, #11]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	799b      	ldrb	r3, [r3, #6]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d102      	bne.n	80059ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	799b      	ldrb	r3, [r3, #6]
 80059c2:	461a      	mov	r2, r3
 80059c4:	6979      	ldr	r1, [r7, #20]
 80059c6:	f001 fd2f 	bl	8007428 <USB_EPStartXfer>

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	460b      	mov	r3, r1
 80059e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059e4:	7afb      	ldrb	r3, [r7, #11]
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	3310      	adds	r3, #16
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	3304      	adds	r3, #4
 80059fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2201      	movs	r2, #1
 8005a12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	799b      	ldrb	r3, [r3, #6]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d102      	bne.n	8005a2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	799b      	ldrb	r3, [r3, #6]
 8005a36:	461a      	mov	r2, r3
 8005a38:	6979      	ldr	r1, [r7, #20]
 8005a3a:	f001 fcf5 	bl	8007428 <USB_EPStartXfer>

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	7912      	ldrb	r2, [r2, #4]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d901      	bls.n	8005a66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e04f      	b.n	8005b06 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	da0f      	bge.n	8005a8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	f003 020f 	and.w	r2, r3, #15
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	3310      	adds	r3, #16
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	3304      	adds	r3, #4
 8005a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	705a      	strb	r2, [r3, #1]
 8005a8c:	e00d      	b.n	8005aaa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	4613      	mov	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_PCD_EP_SetStall+0x82>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e01d      	b.n	8005b06 <HAL_PCD_EP_SetStall+0xbe>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f002 f883 	bl	8007be4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d109      	bne.n	8005afc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	7999      	ldrb	r1, [r3, #6]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005af6:	461a      	mov	r2, r3
 8005af8:	f002 fa74 	bl	8007fe4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	7912      	ldrb	r2, [r2, #4]
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e042      	b.n	8005bb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	da0f      	bge.n	8005b54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	3310      	adds	r3, #16
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	705a      	strb	r2, [r3, #1]
 8005b52:	e00f      	b.n	8005b74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	f003 020f 	and.w	r2, r3, #15
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4413      	add	r3, r2
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_PCD_EP_ClrStall+0x86>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e00e      	b.n	8005bb2 <HAL_PCD_EP_ClrStall+0xa4>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68f9      	ldr	r1, [r7, #12]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f002 f88c 	bl	8007cc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da0c      	bge.n	8005be8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	f003 020f 	and.w	r2, r3, #15
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	3310      	adds	r3, #16
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	4413      	add	r3, r2
 8005be2:	3304      	adds	r3, #4
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e00c      	b.n	8005c02 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	f003 020f 	and.w	r2, r3, #15
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3304      	adds	r3, #4
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 feab 	bl	8007964 <USB_EPStopXfer>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005c12:	7afb      	ldrb	r3, [r7, #11]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	@ 0x28
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	3310      	adds	r3, #16
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4413      	add	r3, r2
 8005c40:	3304      	adds	r3, #4
 8005c42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d901      	bls.n	8005c54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e06b      	b.n	8005d2c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d902      	bls.n	8005c70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3303      	adds	r3, #3
 8005c74:	089b      	lsrs	r3, r3, #2
 8005c76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c78:	e02a      	b.n	8005cd0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d902      	bls.n	8005c96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	3303      	adds	r3, #3
 8005c9a:	089b      	lsrs	r3, r3, #2
 8005c9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68d9      	ldr	r1, [r3, #12]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	6978      	ldr	r0, [r7, #20]
 8005cb4:	f001 ff00 	bl	8007ab8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	441a      	add	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d809      	bhi.n	8005cfa <PCD_WriteEmptyTxFifo+0xde>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d203      	bcs.n	8005cfa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1bf      	bne.n	8005c7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d811      	bhi.n	8005d2a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	6939      	ldr	r1, [r7, #16]
 8005d22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d26:	4013      	ands	r3, r2
 8005d28:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	333c      	adds	r3, #60	@ 0x3c
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	799b      	ldrb	r3, [r3, #6]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d17b      	bne.n	8005e62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4a61      	ldr	r2, [pc, #388]	@ (8005efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	f240 80b9 	bls.w	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80b3 	beq.w	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d96:	461a      	mov	r2, r3
 8005d98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d9c:	6093      	str	r3, [r2, #8]
 8005d9e:	e0a7      	b.n	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db6:	461a      	mov	r2, r3
 8005db8:	2320      	movs	r3, #32
 8005dba:	6093      	str	r3, [r2, #8]
 8005dbc:	e098      	b.n	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f040 8093 	bne.w	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8005efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d90f      	bls.n	8005df2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dee:	6093      	str	r3, [r2, #8]
 8005df0:	e07e      	b.n	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4413      	add	r3, r2
 8005e04:	3304      	adds	r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	0159      	lsls	r1, r3, #5
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	440b      	add	r3, r1
 8005e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1e:	1ad2      	subs	r2, r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d114      	bne.n	8005e54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	2101      	movs	r1, #1
 8005e40:	f002 f8d0 	bl	8007fe4 <USB_EP0_OutStart>
 8005e44:	e006      	b.n	8005e54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	441a      	add	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f004 fc22 	bl	800a6a4 <HAL_PCD_DataOutStageCallback>
 8005e60:	e046      	b.n	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4a26      	ldr	r2, [pc, #152]	@ (8005f00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d124      	bne.n	8005eb4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e86:	6093      	str	r3, [r2, #8]
 8005e88:	e032      	b.n	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2320      	movs	r3, #32
 8005ea4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f004 fbf9 	bl	800a6a4 <HAL_PCD_DataOutStageCallback>
 8005eb2:	e01d      	b.n	8005ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d114      	bne.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d108      	bne.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005edc:	461a      	mov	r2, r3
 8005ede:	2100      	movs	r1, #0
 8005ee0:	f002 f880 	bl	8007fe4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f004 fbda 	bl	800a6a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	4f54300a 	.word	0x4f54300a
 8005f00:	4f54310a 	.word	0x4f54310a

08005f04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	333c      	adds	r3, #60	@ 0x3c
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d90e      	bls.n	8005f58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d009      	beq.n	8005f58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	461a      	mov	r2, r3
 8005f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f004 fb91 	bl	800a680 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a0a      	ldr	r2, [pc, #40]	@ (8005f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d90c      	bls.n	8005f80 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	799b      	ldrb	r3, [r3, #6]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d108      	bne.n	8005f80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	f002 f832 	bl	8007fe4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	4f54300a 	.word	0x4f54300a

08005f90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d107      	bne.n	8005fbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005fae:	883b      	ldrh	r3, [r7, #0]
 8005fb0:	0419      	lsls	r1, r3, #16
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fbc:	e028      	b.n	8006010 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc4:	0c1b      	lsrs	r3, r3, #16
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e00d      	b.n	8005fee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	3340      	adds	r3, #64	@ 0x40
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	3301      	adds	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	7bfa      	ldrb	r2, [r7, #15]
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d3ec      	bcc.n	8005fd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ff8:	883b      	ldrh	r3, [r7, #0]
 8005ffa:	0418      	lsls	r0, r3, #16
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6819      	ldr	r1, [r3, #0]
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	3b01      	subs	r3, #1
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	4302      	orrs	r2, r0
 8006008:	3340      	adds	r3, #64	@ 0x40
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	887a      	ldrh	r2, [r7, #2]
 8006030:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e267      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d075      	beq.n	8006162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006076:	4b88      	ldr	r3, [pc, #544]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 030c 	and.w	r3, r3, #12
 800607e:	2b04      	cmp	r3, #4
 8006080:	d00c      	beq.n	800609c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006082:	4b85      	ldr	r3, [pc, #532]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800608a:	2b08      	cmp	r3, #8
 800608c:	d112      	bne.n	80060b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800608e:	4b82      	ldr	r3, [pc, #520]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800609a:	d10b      	bne.n	80060b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800609c:	4b7e      	ldr	r3, [pc, #504]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d05b      	beq.n	8006160 <HAL_RCC_OscConfig+0x108>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d157      	bne.n	8006160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e242      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060bc:	d106      	bne.n	80060cc <HAL_RCC_OscConfig+0x74>
 80060be:	4b76      	ldr	r3, [pc, #472]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a75      	ldr	r2, [pc, #468]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e01d      	b.n	8006108 <HAL_RCC_OscConfig+0xb0>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060d4:	d10c      	bne.n	80060f0 <HAL_RCC_OscConfig+0x98>
 80060d6:	4b70      	ldr	r3, [pc, #448]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a6f      	ldr	r2, [pc, #444]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a6c      	ldr	r2, [pc, #432]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	e00b      	b.n	8006108 <HAL_RCC_OscConfig+0xb0>
 80060f0:	4b69      	ldr	r3, [pc, #420]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a68      	ldr	r2, [pc, #416]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	4b66      	ldr	r3, [pc, #408]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a65      	ldr	r2, [pc, #404]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d013      	beq.n	8006138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006110:	f7fc fdca 	bl	8002ca8 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006118:	f7fc fdc6 	bl	8002ca8 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b64      	cmp	r3, #100	@ 0x64
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e207      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	4b5b      	ldr	r3, [pc, #364]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0xc0>
 8006136:	e014      	b.n	8006162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006138:	f7fc fdb6 	bl	8002ca8 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006140:	f7fc fdb2 	bl	8002ca8 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	@ 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e1f3      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006152:	4b51      	ldr	r3, [pc, #324]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f0      	bne.n	8006140 <HAL_RCC_OscConfig+0xe8>
 800615e:	e000      	b.n	8006162 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d063      	beq.n	8006236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800616e:	4b4a      	ldr	r3, [pc, #296]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800617a:	4b47      	ldr	r3, [pc, #284]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006182:	2b08      	cmp	r3, #8
 8006184:	d11c      	bne.n	80061c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006186:	4b44      	ldr	r3, [pc, #272]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d116      	bne.n	80061c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006192:	4b41      	ldr	r3, [pc, #260]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_RCC_OscConfig+0x152>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d001      	beq.n	80061aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e1c7      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4937      	ldr	r1, [pc, #220]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061be:	e03a      	b.n	8006236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d020      	beq.n	800620a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061c8:	4b34      	ldr	r3, [pc, #208]	@ (800629c <HAL_RCC_OscConfig+0x244>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ce:	f7fc fd6b 	bl	8002ca8 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d6:	f7fc fd67 	bl	8002ca8 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e1a8      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f4:	4b28      	ldr	r3, [pc, #160]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	4925      	ldr	r1, [pc, #148]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 8006204:	4313      	orrs	r3, r2
 8006206:	600b      	str	r3, [r1, #0]
 8006208:	e015      	b.n	8006236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800620a:	4b24      	ldr	r3, [pc, #144]	@ (800629c <HAL_RCC_OscConfig+0x244>)
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006210:	f7fc fd4a 	bl	8002ca8 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006218:	f7fc fd46 	bl	8002ca8 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e187      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800622a:	4b1b      	ldr	r3, [pc, #108]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f0      	bne.n	8006218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d036      	beq.n	80062b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d016      	beq.n	8006278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800624a:	4b15      	ldr	r3, [pc, #84]	@ (80062a0 <HAL_RCC_OscConfig+0x248>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006250:	f7fc fd2a 	bl	8002ca8 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006258:	f7fc fd26 	bl	8002ca8 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e167      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800626a:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <HAL_RCC_OscConfig+0x240>)
 800626c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0f0      	beq.n	8006258 <HAL_RCC_OscConfig+0x200>
 8006276:	e01b      	b.n	80062b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006278:	4b09      	ldr	r3, [pc, #36]	@ (80062a0 <HAL_RCC_OscConfig+0x248>)
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800627e:	f7fc fd13 	bl	8002ca8 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006284:	e00e      	b.n	80062a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006286:	f7fc fd0f 	bl	8002ca8 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d907      	bls.n	80062a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e150      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
 8006298:	40023800 	.word	0x40023800
 800629c:	42470000 	.word	0x42470000
 80062a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062a4:	4b88      	ldr	r3, [pc, #544]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80062a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ea      	bne.n	8006286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8097 	beq.w	80063ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062c2:	4b81      	ldr	r3, [pc, #516]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10f      	bne.n	80062ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ce:	2300      	movs	r3, #0
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	4b7d      	ldr	r3, [pc, #500]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	4a7c      	ldr	r2, [pc, #496]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80062d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80062de:	4b7a      	ldr	r3, [pc, #488]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e6:	60bb      	str	r3, [r7, #8]
 80062e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ea:	2301      	movs	r3, #1
 80062ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ee:	4b77      	ldr	r3, [pc, #476]	@ (80064cc <HAL_RCC_OscConfig+0x474>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d118      	bne.n	800632c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062fa:	4b74      	ldr	r3, [pc, #464]	@ (80064cc <HAL_RCC_OscConfig+0x474>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a73      	ldr	r2, [pc, #460]	@ (80064cc <HAL_RCC_OscConfig+0x474>)
 8006300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006306:	f7fc fccf 	bl	8002ca8 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800630e:	f7fc fccb 	bl	8002ca8 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e10c      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006320:	4b6a      	ldr	r3, [pc, #424]	@ (80064cc <HAL_RCC_OscConfig+0x474>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d106      	bne.n	8006342 <HAL_RCC_OscConfig+0x2ea>
 8006334:	4b64      	ldr	r3, [pc, #400]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006338:	4a63      	ldr	r2, [pc, #396]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006340:	e01c      	b.n	800637c <HAL_RCC_OscConfig+0x324>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b05      	cmp	r3, #5
 8006348:	d10c      	bne.n	8006364 <HAL_RCC_OscConfig+0x30c>
 800634a:	4b5f      	ldr	r3, [pc, #380]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	4a5e      	ldr	r2, [pc, #376]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 8006350:	f043 0304 	orr.w	r3, r3, #4
 8006354:	6713      	str	r3, [r2, #112]	@ 0x70
 8006356:	4b5c      	ldr	r3, [pc, #368]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635a:	4a5b      	ldr	r2, [pc, #364]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	6713      	str	r3, [r2, #112]	@ 0x70
 8006362:	e00b      	b.n	800637c <HAL_RCC_OscConfig+0x324>
 8006364:	4b58      	ldr	r3, [pc, #352]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 8006366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006368:	4a57      	ldr	r2, [pc, #348]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 800636a:	f023 0301 	bic.w	r3, r3, #1
 800636e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006370:	4b55      	ldr	r3, [pc, #340]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006374:	4a54      	ldr	r2, [pc, #336]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 8006376:	f023 0304 	bic.w	r3, r3, #4
 800637a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d015      	beq.n	80063b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006384:	f7fc fc90 	bl	8002ca8 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638a:	e00a      	b.n	80063a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638c:	f7fc fc8c 	bl	8002ca8 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800639a:	4293      	cmp	r3, r2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e0cb      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a2:	4b49      	ldr	r3, [pc, #292]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0ee      	beq.n	800638c <HAL_RCC_OscConfig+0x334>
 80063ae:	e014      	b.n	80063da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b0:	f7fc fc7a 	bl	8002ca8 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b6:	e00a      	b.n	80063ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b8:	f7fc fc76 	bl	8002ca8 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e0b5      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ce:	4b3e      	ldr	r3, [pc, #248]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ee      	bne.n	80063b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d105      	bne.n	80063ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063e0:	4b39      	ldr	r3, [pc, #228]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	4a38      	ldr	r2, [pc, #224]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80063e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80a1 	beq.w	8006538 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063f6:	4b34      	ldr	r3, [pc, #208]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d05c      	beq.n	80064bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d141      	bne.n	800648e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640a:	4b31      	ldr	r3, [pc, #196]	@ (80064d0 <HAL_RCC_OscConfig+0x478>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fc fc4a 	bl	8002ca8 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006418:	f7fc fc46 	bl	8002ca8 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e087      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800642a:	4b27      	ldr	r3, [pc, #156]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69da      	ldr	r2, [r3, #28]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	019b      	lsls	r3, r3, #6
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	3b01      	subs	r3, #1
 8006450:	041b      	lsls	r3, r3, #16
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	061b      	lsls	r3, r3, #24
 800645a:	491b      	ldr	r1, [pc, #108]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 800645c:	4313      	orrs	r3, r2
 800645e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006460:	4b1b      	ldr	r3, [pc, #108]	@ (80064d0 <HAL_RCC_OscConfig+0x478>)
 8006462:	2201      	movs	r2, #1
 8006464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006466:	f7fc fc1f 	bl	8002ca8 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800646c:	e008      	b.n	8006480 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800646e:	f7fc fc1b 	bl	8002ca8 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d901      	bls.n	8006480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e05c      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006480:	4b11      	ldr	r3, [pc, #68]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0f0      	beq.n	800646e <HAL_RCC_OscConfig+0x416>
 800648c:	e054      	b.n	8006538 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648e:	4b10      	ldr	r3, [pc, #64]	@ (80064d0 <HAL_RCC_OscConfig+0x478>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fc fc08 	bl	8002ca8 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800649c:	f7fc fc04 	bl	8002ca8 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e045      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ae:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <HAL_RCC_OscConfig+0x470>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x444>
 80064ba:	e03d      	b.n	8006538 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d107      	bne.n	80064d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e038      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
 80064c8:	40023800 	.word	0x40023800
 80064cc:	40007000 	.word	0x40007000
 80064d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006544 <HAL_RCC_OscConfig+0x4ec>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d028      	beq.n	8006534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d121      	bne.n	8006534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d11a      	bne.n	8006534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006504:	4013      	ands	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800650a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800650c:	4293      	cmp	r3, r2
 800650e:	d111      	bne.n	8006534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	3b01      	subs	r3, #1
 800651e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006520:	429a      	cmp	r2, r3
 8006522:	d107      	bne.n	8006534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006530:	429a      	cmp	r2, r3
 8006532:	d001      	beq.n	8006538 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40023800 	.word	0x40023800

08006548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0cc      	b.n	80066f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800655c:	4b68      	ldr	r3, [pc, #416]	@ (8006700 <HAL_RCC_ClockConfig+0x1b8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d90c      	bls.n	8006584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656a:	4b65      	ldr	r3, [pc, #404]	@ (8006700 <HAL_RCC_ClockConfig+0x1b8>)
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006572:	4b63      	ldr	r3, [pc, #396]	@ (8006700 <HAL_RCC_ClockConfig+0x1b8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d001      	beq.n	8006584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0b8      	b.n	80066f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d020      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800659c:	4b59      	ldr	r3, [pc, #356]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4a58      	ldr	r2, [pc, #352]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065b4:	4b53      	ldr	r3, [pc, #332]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	4a52      	ldr	r2, [pc, #328]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c0:	4b50      	ldr	r3, [pc, #320]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	494d      	ldr	r1, [pc, #308]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d044      	beq.n	8006668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d107      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e6:	4b47      	ldr	r3, [pc, #284]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d119      	bne.n	8006626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e07f      	b.n	80066f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d003      	beq.n	8006606 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006602:	2b03      	cmp	r3, #3
 8006604:	d107      	bne.n	8006616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006606:	4b3f      	ldr	r3, [pc, #252]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d109      	bne.n	8006626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e06f      	b.n	80066f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006616:	4b3b      	ldr	r3, [pc, #236]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e067      	b.n	80066f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006626:	4b37      	ldr	r3, [pc, #220]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f023 0203 	bic.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	4934      	ldr	r1, [pc, #208]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 8006634:	4313      	orrs	r3, r2
 8006636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006638:	f7fc fb36 	bl	8002ca8 <HAL_GetTick>
 800663c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	e00a      	b.n	8006656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006640:	f7fc fb32 	bl	8002ca8 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e04f      	b.n	80066f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006656:	4b2b      	ldr	r3, [pc, #172]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 020c 	and.w	r2, r3, #12
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	429a      	cmp	r2, r3
 8006666:	d1eb      	bne.n	8006640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006668:	4b25      	ldr	r3, [pc, #148]	@ (8006700 <HAL_RCC_ClockConfig+0x1b8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d20c      	bcs.n	8006690 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b22      	ldr	r3, [pc, #136]	@ (8006700 <HAL_RCC_ClockConfig+0x1b8>)
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800667e:	4b20      	ldr	r3, [pc, #128]	@ (8006700 <HAL_RCC_ClockConfig+0x1b8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d001      	beq.n	8006690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e032      	b.n	80066f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d008      	beq.n	80066ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800669c:	4b19      	ldr	r3, [pc, #100]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4916      	ldr	r1, [pc, #88]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ba:	4b12      	ldr	r3, [pc, #72]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	490e      	ldr	r1, [pc, #56]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066ce:	f000 f821 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 80066d2:	4602      	mov	r2, r0
 80066d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <HAL_RCC_ClockConfig+0x1bc>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	490a      	ldr	r1, [pc, #40]	@ (8006708 <HAL_RCC_ClockConfig+0x1c0>)
 80066e0:	5ccb      	ldrb	r3, [r1, r3]
 80066e2:	fa22 f303 	lsr.w	r3, r2, r3
 80066e6:	4a09      	ldr	r2, [pc, #36]	@ (800670c <HAL_RCC_ClockConfig+0x1c4>)
 80066e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066ea:	4b09      	ldr	r3, [pc, #36]	@ (8006710 <HAL_RCC_ClockConfig+0x1c8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fc fa96 	bl	8002c20 <HAL_InitTick>

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40023c00 	.word	0x40023c00
 8006704:	40023800 	.word	0x40023800
 8006708:	0800dbac 	.word	0x0800dbac
 800670c:	20000000 	.word	0x20000000
 8006710:	20000004 	.word	0x20000004

08006714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006718:	b094      	sub	sp, #80	@ 0x50
 800671a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800672c:	4b79      	ldr	r3, [pc, #484]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x200>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 030c 	and.w	r3, r3, #12
 8006734:	2b08      	cmp	r3, #8
 8006736:	d00d      	beq.n	8006754 <HAL_RCC_GetSysClockFreq+0x40>
 8006738:	2b08      	cmp	r3, #8
 800673a:	f200 80e1 	bhi.w	8006900 <HAL_RCC_GetSysClockFreq+0x1ec>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0x34>
 8006742:	2b04      	cmp	r3, #4
 8006744:	d003      	beq.n	800674e <HAL_RCC_GetSysClockFreq+0x3a>
 8006746:	e0db      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006748:	4b73      	ldr	r3, [pc, #460]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x204>)
 800674a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800674c:	e0db      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800674e:	4b73      	ldr	r3, [pc, #460]	@ (800691c <HAL_RCC_GetSysClockFreq+0x208>)
 8006750:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006752:	e0d8      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006754:	4b6f      	ldr	r3, [pc, #444]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x200>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800675c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800675e:	4b6d      	ldr	r3, [pc, #436]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x200>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d063      	beq.n	8006832 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800676a:	4b6a      	ldr	r3, [pc, #424]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x200>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	099b      	lsrs	r3, r3, #6
 8006770:	2200      	movs	r2, #0
 8006772:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006774:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677c:	633b      	str	r3, [r7, #48]	@ 0x30
 800677e:	2300      	movs	r3, #0
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34
 8006782:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006786:	4622      	mov	r2, r4
 8006788:	462b      	mov	r3, r5
 800678a:	f04f 0000 	mov.w	r0, #0
 800678e:	f04f 0100 	mov.w	r1, #0
 8006792:	0159      	lsls	r1, r3, #5
 8006794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006798:	0150      	lsls	r0, r2, #5
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4621      	mov	r1, r4
 80067a0:	1a51      	subs	r1, r2, r1
 80067a2:	6139      	str	r1, [r7, #16]
 80067a4:	4629      	mov	r1, r5
 80067a6:	eb63 0301 	sbc.w	r3, r3, r1
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067b8:	4659      	mov	r1, fp
 80067ba:	018b      	lsls	r3, r1, #6
 80067bc:	4651      	mov	r1, sl
 80067be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067c2:	4651      	mov	r1, sl
 80067c4:	018a      	lsls	r2, r1, #6
 80067c6:	4651      	mov	r1, sl
 80067c8:	ebb2 0801 	subs.w	r8, r2, r1
 80067cc:	4659      	mov	r1, fp
 80067ce:	eb63 0901 	sbc.w	r9, r3, r1
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067e6:	4690      	mov	r8, r2
 80067e8:	4699      	mov	r9, r3
 80067ea:	4623      	mov	r3, r4
 80067ec:	eb18 0303 	adds.w	r3, r8, r3
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	462b      	mov	r3, r5
 80067f4:	eb49 0303 	adc.w	r3, r9, r3
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	f04f 0300 	mov.w	r3, #0
 8006802:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006806:	4629      	mov	r1, r5
 8006808:	024b      	lsls	r3, r1, #9
 800680a:	4621      	mov	r1, r4
 800680c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006810:	4621      	mov	r1, r4
 8006812:	024a      	lsls	r2, r1, #9
 8006814:	4610      	mov	r0, r2
 8006816:	4619      	mov	r1, r3
 8006818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800681a:	2200      	movs	r2, #0
 800681c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800681e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006820:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006824:	f7fa fa18 	bl	8000c58 <__aeabi_uldivmod>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4613      	mov	r3, r2
 800682e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006830:	e058      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006832:	4b38      	ldr	r3, [pc, #224]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x200>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	099b      	lsrs	r3, r3, #6
 8006838:	2200      	movs	r2, #0
 800683a:	4618      	mov	r0, r3
 800683c:	4611      	mov	r1, r2
 800683e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	2300      	movs	r3, #0
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
 8006848:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800684c:	4642      	mov	r2, r8
 800684e:	464b      	mov	r3, r9
 8006850:	f04f 0000 	mov.w	r0, #0
 8006854:	f04f 0100 	mov.w	r1, #0
 8006858:	0159      	lsls	r1, r3, #5
 800685a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800685e:	0150      	lsls	r0, r2, #5
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4641      	mov	r1, r8
 8006866:	ebb2 0a01 	subs.w	sl, r2, r1
 800686a:	4649      	mov	r1, r9
 800686c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800687c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006880:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006884:	ebb2 040a 	subs.w	r4, r2, sl
 8006888:	eb63 050b 	sbc.w	r5, r3, fp
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	00eb      	lsls	r3, r5, #3
 8006896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800689a:	00e2      	lsls	r2, r4, #3
 800689c:	4614      	mov	r4, r2
 800689e:	461d      	mov	r5, r3
 80068a0:	4643      	mov	r3, r8
 80068a2:	18e3      	adds	r3, r4, r3
 80068a4:	603b      	str	r3, [r7, #0]
 80068a6:	464b      	mov	r3, r9
 80068a8:	eb45 0303 	adc.w	r3, r5, r3
 80068ac:	607b      	str	r3, [r7, #4]
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068ba:	4629      	mov	r1, r5
 80068bc:	028b      	lsls	r3, r1, #10
 80068be:	4621      	mov	r1, r4
 80068c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068c4:	4621      	mov	r1, r4
 80068c6:	028a      	lsls	r2, r1, #10
 80068c8:	4610      	mov	r0, r2
 80068ca:	4619      	mov	r1, r3
 80068cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ce:	2200      	movs	r2, #0
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	61fa      	str	r2, [r7, #28]
 80068d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068d8:	f7fa f9be 	bl	8000c58 <__aeabi_uldivmod>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4613      	mov	r3, r2
 80068e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x200>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	0c1b      	lsrs	r3, r3, #16
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	3301      	adds	r3, #1
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068fe:	e002      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006900:	4b05      	ldr	r3, [pc, #20]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x204>)
 8006902:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006908:	4618      	mov	r0, r3
 800690a:	3750      	adds	r7, #80	@ 0x50
 800690c:	46bd      	mov	sp, r7
 800690e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006912:	bf00      	nop
 8006914:	40023800 	.word	0x40023800
 8006918:	00f42400 	.word	0x00f42400
 800691c:	007a1200 	.word	0x007a1200

08006920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006924:	4b03      	ldr	r3, [pc, #12]	@ (8006934 <HAL_RCC_GetHCLKFreq+0x14>)
 8006926:	681b      	ldr	r3, [r3, #0]
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000000 	.word	0x20000000

08006938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800693c:	f7ff fff0 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8006940:	4602      	mov	r2, r0
 8006942:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	0a9b      	lsrs	r3, r3, #10
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4903      	ldr	r1, [pc, #12]	@ (800695c <HAL_RCC_GetPCLK1Freq+0x24>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006954:	4618      	mov	r0, r3
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40023800 	.word	0x40023800
 800695c:	0800dbbc 	.word	0x0800dbbc

08006960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e07b      	b.n	8006a6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d108      	bne.n	800698c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006982:	d009      	beq.n	8006998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	61da      	str	r2, [r3, #28]
 800698a:	e005      	b.n	8006998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fb ff66 	bl	8002884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1c:	ea42 0103 	orr.w	r1, r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	f003 0104 	and.w	r1, r3, #4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	f003 0210 	and.w	r2, r3, #16
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69da      	ldr	r2, [r3, #28]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a72:	b084      	sub	sp, #16
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	f107 001c 	add.w	r0, r7, #28
 8006a80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a84:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d123      	bne.n	8006ad4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ab4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d105      	bne.n	8006ac8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 fae9 	bl	80080a0 <USB_CoreReset>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	73fb      	strb	r3, [r7, #15]
 8006ad2:	e01b      	b.n	8006b0c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fadd 	bl	80080a0 <USB_CoreReset>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006aea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d106      	bne.n	8006b00 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	639a      	str	r2, [r3, #56]	@ 0x38
 8006afe:	e005      	b.n	8006b0c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b0c:	7fbb      	ldrb	r3, [r7, #30]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d10b      	bne.n	8006b2a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f043 0206 	orr.w	r2, r3, #6
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b36:	b004      	add	sp, #16
 8006b38:	4770      	bx	lr
	...

08006b3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d165      	bne.n	8006c1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4a41      	ldr	r2, [pc, #260]	@ (8006c58 <USB_SetTurnaroundTime+0x11c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d906      	bls.n	8006b66 <USB_SetTurnaroundTime+0x2a>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4a40      	ldr	r2, [pc, #256]	@ (8006c5c <USB_SetTurnaroundTime+0x120>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d202      	bcs.n	8006b66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b60:	230f      	movs	r3, #15
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	e062      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4a3c      	ldr	r2, [pc, #240]	@ (8006c5c <USB_SetTurnaroundTime+0x120>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d306      	bcc.n	8006b7c <USB_SetTurnaroundTime+0x40>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	4a3b      	ldr	r2, [pc, #236]	@ (8006c60 <USB_SetTurnaroundTime+0x124>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d202      	bcs.n	8006b7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b76:	230e      	movs	r3, #14
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e057      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4a38      	ldr	r2, [pc, #224]	@ (8006c60 <USB_SetTurnaroundTime+0x124>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d306      	bcc.n	8006b92 <USB_SetTurnaroundTime+0x56>
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4a37      	ldr	r2, [pc, #220]	@ (8006c64 <USB_SetTurnaroundTime+0x128>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d202      	bcs.n	8006b92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b8c:	230d      	movs	r3, #13
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e04c      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4a33      	ldr	r2, [pc, #204]	@ (8006c64 <USB_SetTurnaroundTime+0x128>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d306      	bcc.n	8006ba8 <USB_SetTurnaroundTime+0x6c>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4a32      	ldr	r2, [pc, #200]	@ (8006c68 <USB_SetTurnaroundTime+0x12c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d802      	bhi.n	8006ba8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	e041      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4a2f      	ldr	r2, [pc, #188]	@ (8006c68 <USB_SetTurnaroundTime+0x12c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d906      	bls.n	8006bbe <USB_SetTurnaroundTime+0x82>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8006c6c <USB_SetTurnaroundTime+0x130>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d802      	bhi.n	8006bbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006bb8:	230b      	movs	r3, #11
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e036      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c6c <USB_SetTurnaroundTime+0x130>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d906      	bls.n	8006bd4 <USB_SetTurnaroundTime+0x98>
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4a29      	ldr	r2, [pc, #164]	@ (8006c70 <USB_SetTurnaroundTime+0x134>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d802      	bhi.n	8006bd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bce:	230a      	movs	r3, #10
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e02b      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4a26      	ldr	r2, [pc, #152]	@ (8006c70 <USB_SetTurnaroundTime+0x134>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d906      	bls.n	8006bea <USB_SetTurnaroundTime+0xae>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4a25      	ldr	r2, [pc, #148]	@ (8006c74 <USB_SetTurnaroundTime+0x138>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d202      	bcs.n	8006bea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006be4:	2309      	movs	r3, #9
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e020      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4a21      	ldr	r2, [pc, #132]	@ (8006c74 <USB_SetTurnaroundTime+0x138>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d306      	bcc.n	8006c00 <USB_SetTurnaroundTime+0xc4>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4a20      	ldr	r2, [pc, #128]	@ (8006c78 <USB_SetTurnaroundTime+0x13c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d802      	bhi.n	8006c00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	e015      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4a1d      	ldr	r2, [pc, #116]	@ (8006c78 <USB_SetTurnaroundTime+0x13c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d906      	bls.n	8006c16 <USB_SetTurnaroundTime+0xda>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c7c <USB_SetTurnaroundTime+0x140>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d202      	bcs.n	8006c16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c10:	2307      	movs	r3, #7
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	e00a      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c16:	2306      	movs	r3, #6
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e007      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c22:	2309      	movs	r3, #9
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e001      	b.n	8006c2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c28:	2309      	movs	r3, #9
 8006c2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	029b      	lsls	r3, r3, #10
 8006c40:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c44:	431a      	orrs	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	00d8acbf 	.word	0x00d8acbf
 8006c5c:	00e4e1c0 	.word	0x00e4e1c0
 8006c60:	00f42400 	.word	0x00f42400
 8006c64:	01067380 	.word	0x01067380
 8006c68:	011a499f 	.word	0x011a499f
 8006c6c:	01312cff 	.word	0x01312cff
 8006c70:	014ca43f 	.word	0x014ca43f
 8006c74:	016e3600 	.word	0x016e3600
 8006c78:	01a6ab1f 	.word	0x01a6ab1f
 8006c7c:	01e84800 	.word	0x01e84800

08006c80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f043 0201 	orr.w	r2, r3, #1
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f023 0201 	bic.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d115      	bne.n	8006d12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cf2:	200a      	movs	r0, #10
 8006cf4:	f7fb ffe4 	bl	8002cc0 <HAL_Delay>
      ms += 10U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	330a      	adds	r3, #10
 8006cfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 f93f 	bl	8007f82 <USB_GetMode>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d01e      	beq.n	8006d48 <USB_SetCurrentMode+0x84>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d0e:	d9f0      	bls.n	8006cf2 <USB_SetCurrentMode+0x2e>
 8006d10:	e01a      	b.n	8006d48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d115      	bne.n	8006d44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d24:	200a      	movs	r0, #10
 8006d26:	f7fb ffcb 	bl	8002cc0 <HAL_Delay>
      ms += 10U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	330a      	adds	r3, #10
 8006d2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 f926 	bl	8007f82 <USB_GetMode>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <USB_SetCurrentMode+0x84>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d40:	d9f0      	bls.n	8006d24 <USB_SetCurrentMode+0x60>
 8006d42:	e001      	b.n	8006d48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e005      	b.n	8006d54 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d4c:	d101      	bne.n	8006d52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	e009      	b.n	8006d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3340      	adds	r3, #64	@ 0x40
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b0e      	cmp	r3, #14
 8006d94:	d9f2      	bls.n	8006d7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d11c      	bne.n	8006dd8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dac:	f043 0302 	orr.w	r3, r3, #2
 8006db0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006dd6:	e00b      	b.n	8006df0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ddc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006df6:	461a      	mov	r2, r3
 8006df8:	2300      	movs	r3, #0
 8006dfa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dfc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10d      	bne.n	8006e20 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f968 	bl	80070e4 <USB_SetDevSpeed>
 8006e14:	e008      	b.n	8006e28 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e16:	2101      	movs	r1, #1
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f963 	bl	80070e4 <USB_SetDevSpeed>
 8006e1e:	e003      	b.n	8006e28 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e20:	2103      	movs	r1, #3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f95e 	bl	80070e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e28:	2110      	movs	r1, #16
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f8fa 	bl	8007024 <USB_FlushTxFifo>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f924 	bl	8007088 <USB_FlushRxFifo>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e50:	461a      	mov	r2, r3
 8006e52:	2300      	movs	r3, #0
 8006e54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2300      	movs	r3, #0
 8006e60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e6e:	2300      	movs	r3, #0
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	e043      	b.n	8006efc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e8a:	d118      	bne.n	8006ebe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e013      	b.n	8006ed0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	e008      	b.n	8006ed0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006edc:	461a      	mov	r2, r3
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ef4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f00:	461a      	mov	r2, r3
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d3b5      	bcc.n	8006e74 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	e043      	b.n	8006f96 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f24:	d118      	bne.n	8006f58 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e013      	b.n	8006f6a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	e008      	b.n	8006f6a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f64:	461a      	mov	r2, r3
 8006f66:	2300      	movs	r3, #0
 8006f68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f76:	461a      	mov	r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	3301      	adds	r3, #1
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d3b5      	bcc.n	8006f0e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fb4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	f043 0210 	orr.w	r2, r3, #16
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	4b10      	ldr	r3, [pc, #64]	@ (8007020 <USB_DevInit+0x2c4>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fe4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f043 0208 	orr.w	r2, r3, #8
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ff8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d107      	bne.n	8007010 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007008:	f043 0304 	orr.w	r3, r3, #4
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800701c:	b004      	add	sp, #16
 800701e:	4770      	bx	lr
 8007020:	803c3800 	.word	0x803c3800

08007024 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800703e:	d901      	bls.n	8007044 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e01b      	b.n	800707c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	daf2      	bge.n	8007032 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	019b      	lsls	r3, r3, #6
 8007054:	f043 0220 	orr.w	r2, r3, #32
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3301      	adds	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007068:	d901      	bls.n	800706e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e006      	b.n	800707c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b20      	cmp	r3, #32
 8007078:	d0f0      	beq.n	800705c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070a0:	d901      	bls.n	80070a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e018      	b.n	80070d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	daf2      	bge.n	8007094 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2210      	movs	r2, #16
 80070b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070c4:	d901      	bls.n	80070ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e006      	b.n	80070d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0310 	and.w	r3, r3, #16
 80070d2:	2b10      	cmp	r3, #16
 80070d4:	d0f0      	beq.n	80070b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007104:	4313      	orrs	r3, r2
 8007106:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007116:	b480      	push	{r7}
 8007118:	b087      	sub	sp, #28
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 0306 	and.w	r3, r3, #6
 800712e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007136:	2300      	movs	r3, #0
 8007138:	75fb      	strb	r3, [r7, #23]
 800713a:	e00a      	b.n	8007152 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d002      	beq.n	8007148 <USB_GetDevSpeed+0x32>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b06      	cmp	r3, #6
 8007146:	d102      	bne.n	800714e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007148:	2302      	movs	r3, #2
 800714a:	75fb      	strb	r3, [r7, #23]
 800714c:	e001      	b.n	8007152 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800714e:	230f      	movs	r3, #15
 8007150:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
}
 8007154:	4618      	mov	r0, r3
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d13a      	bne.n	80071f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	b29b      	uxth	r3, r3
 8007194:	68f9      	ldr	r1, [r7, #12]
 8007196:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800719a:	4313      	orrs	r3, r2
 800719c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d155      	bne.n	8007260 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	791b      	ldrb	r3, [r3, #4]
 80071ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	059b      	lsls	r3, r3, #22
 80071d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071d8:	4313      	orrs	r3, r2
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	e036      	b.n	8007260 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f8:	69da      	ldr	r2, [r3, #28]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	2101      	movs	r1, #1
 8007204:	fa01 f303 	lsl.w	r3, r1, r3
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007210:	4313      	orrs	r3, r2
 8007212:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d11a      	bne.n	8007260 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	791b      	ldrb	r3, [r3, #4]
 8007244:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007246:	430b      	orrs	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800725e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d161      	bne.n	8007350 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800729e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a2:	d11f      	bne.n	80072e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	2101      	movs	r1, #1
 80072f6:	fa01 f303 	lsl.w	r3, r1, r3
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	43db      	mvns	r3, r3
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007304:	4013      	ands	r3, r2
 8007306:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	2101      	movs	r1, #1
 800731a:	fa01 f303 	lsl.w	r3, r1, r3
 800731e:	b29b      	uxth	r3, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007328:	4013      	ands	r3, r2
 800732a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	0159      	lsls	r1, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	440b      	add	r3, r1
 8007342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007346:	4619      	mov	r1, r3
 8007348:	4b35      	ldr	r3, [pc, #212]	@ (8007420 <USB_DeactivateEndpoint+0x1b0>)
 800734a:	4013      	ands	r3, r2
 800734c:	600b      	str	r3, [r1, #0]
 800734e:	e060      	b.n	8007412 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007366:	d11f      	bne.n	80073a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007382:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007386:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	0151      	lsls	r1, r2, #5
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	440a      	add	r2, r1
 800739e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	2101      	movs	r1, #1
 80073ba:	fa01 f303 	lsl.w	r3, r1, r3
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	43db      	mvns	r3, r3
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073c8:	4013      	ands	r3, r2
 80073ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d2:	69da      	ldr	r2, [r3, #28]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	2101      	movs	r1, #1
 80073de:	fa01 f303 	lsl.w	r3, r1, r3
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	43db      	mvns	r3, r3
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073ec:	4013      	ands	r3, r2
 80073ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	0159      	lsls	r1, r3, #5
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	440b      	add	r3, r1
 8007406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800740a:	4619      	mov	r1, r3
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <USB_DeactivateEndpoint+0x1b4>)
 800740e:	4013      	ands	r3, r2
 8007410:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	ec337800 	.word	0xec337800
 8007424:	eff37800 	.word	0xeff37800

08007428 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	@ 0x28
 800742c:	af02      	add	r7, sp, #8
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	2b01      	cmp	r3, #1
 8007446:	f040 817f 	bne.w	8007748 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d132      	bne.n	80074b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800746c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007470:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007490:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007494:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	0151      	lsls	r1, r2, #5
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	440a      	add	r2, r1
 80074ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074b0:	0cdb      	lsrs	r3, r3, #19
 80074b2:	04db      	lsls	r3, r3, #19
 80074b4:	6113      	str	r3, [r2, #16]
 80074b6:	e097      	b.n	80075e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074d2:	0cdb      	lsrs	r3, r3, #19
 80074d4:	04db      	lsls	r3, r3, #19
 80074d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80074f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80074fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d11a      	bne.n	8007538 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	429a      	cmp	r2, r3
 800750c:	d903      	bls.n	8007516 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	69fa      	ldr	r2, [r7, #28]
 800752a:	440a      	add	r2, r1
 800752c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007530:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007534:	6113      	str	r3, [r2, #16]
 8007536:	e044      	b.n	80075c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4413      	add	r3, r2
 8007542:	1e5a      	subs	r2, r3, #1
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	fbb2 f3f3 	udiv	r3, r2, r3
 800754c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	8afb      	ldrh	r3, [r7, #22]
 800755e:	04d9      	lsls	r1, r3, #19
 8007560:	4ba4      	ldr	r3, [pc, #656]	@ (80077f4 <USB_EPStartXfer+0x3cc>)
 8007562:	400b      	ands	r3, r1
 8007564:	69b9      	ldr	r1, [r7, #24]
 8007566:	0148      	lsls	r0, r1, #5
 8007568:	69f9      	ldr	r1, [r7, #28]
 800756a:	4401      	add	r1, r0
 800756c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007570:	4313      	orrs	r3, r2
 8007572:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	791b      	ldrb	r3, [r3, #4]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d122      	bne.n	80075c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	0151      	lsls	r1, r2, #5
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	440a      	add	r2, r1
 8007592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007596:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800759a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	8afb      	ldrh	r3, [r7, #22]
 80075ac:	075b      	lsls	r3, r3, #29
 80075ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80075b2:	69b9      	ldr	r1, [r7, #24]
 80075b4:	0148      	lsls	r0, r1, #5
 80075b6:	69f9      	ldr	r1, [r7, #28]
 80075b8:	4401      	add	r1, r0
 80075ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075be:	4313      	orrs	r3, r2
 80075c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075d8:	69b9      	ldr	r1, [r7, #24]
 80075da:	0148      	lsls	r0, r1, #5
 80075dc:	69f9      	ldr	r1, [r7, #28]
 80075de:	4401      	add	r1, r0
 80075e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075e4:	4313      	orrs	r3, r2
 80075e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d14b      	bne.n	8007686 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007602:	461a      	mov	r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	791b      	ldrb	r3, [r3, #4]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d128      	bne.n	8007664 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761e:	2b00      	cmp	r3, #0
 8007620:	d110      	bne.n	8007644 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800763c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e00f      	b.n	8007664 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800765e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007662:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800767e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	e166      	b.n	8007954 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	69fa      	ldr	r2, [r7, #28]
 800769a:	440a      	add	r2, r1
 800769c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	791b      	ldrb	r3, [r3, #4]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d015      	beq.n	80076da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 814e 	beq.w	8007954 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	2101      	movs	r1, #1
 80076ca:	fa01 f303 	lsl.w	r3, r1, r3
 80076ce:	69f9      	ldr	r1, [r7, #28]
 80076d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076d4:	4313      	orrs	r3, r2
 80076d6:	634b      	str	r3, [r1, #52]	@ 0x34
 80076d8:	e13c      	b.n	8007954 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d110      	bne.n	800770c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007704:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e00f      	b.n	800772c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800772a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	68d9      	ldr	r1, [r3, #12]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	b298      	uxth	r0, r3
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	4603      	mov	r3, r0
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f9b9 	bl	8007ab8 <USB_WritePacket>
 8007746:	e105      	b.n	8007954 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007762:	0cdb      	lsrs	r3, r3, #19
 8007764:	04db      	lsls	r3, r3, #19
 8007766:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	440a      	add	r2, r1
 800777e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007782:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007786:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800778a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d132      	bne.n	80077f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b6:	691a      	ldr	r2, [r3, #16]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077c0:	69b9      	ldr	r1, [r7, #24]
 80077c2:	0148      	lsls	r0, r1, #5
 80077c4:	69f9      	ldr	r1, [r7, #28]
 80077c6:	4401      	add	r1, r0
 80077c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077cc:	4313      	orrs	r3, r2
 80077ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	0151      	lsls	r1, r2, #5
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	440a      	add	r2, r1
 80077e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077ee:	6113      	str	r3, [r2, #16]
 80077f0:	e062      	b.n	80078b8 <USB_EPStartXfer+0x490>
 80077f2:	bf00      	nop
 80077f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d123      	bne.n	8007848 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007816:	69b9      	ldr	r1, [r7, #24]
 8007818:	0148      	lsls	r0, r1, #5
 800781a:	69f9      	ldr	r1, [r7, #28]
 800781c:	4401      	add	r1, r0
 800781e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007822:	4313      	orrs	r3, r2
 8007824:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	440a      	add	r2, r1
 800783c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007840:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007844:	6113      	str	r3, [r2, #16]
 8007846:	e037      	b.n	80078b8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4413      	add	r3, r2
 8007852:	1e5a      	subs	r2, r3, #1
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	fbb2 f3f3 	udiv	r3, r2, r3
 800785c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	8afa      	ldrh	r2, [r7, #22]
 8007864:	fb03 f202 	mul.w	r2, r3, r2
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	8afb      	ldrh	r3, [r7, #22]
 800787c:	04d9      	lsls	r1, r3, #19
 800787e:	4b38      	ldr	r3, [pc, #224]	@ (8007960 <USB_EPStartXfer+0x538>)
 8007880:	400b      	ands	r3, r1
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	0148      	lsls	r0, r1, #5
 8007886:	69f9      	ldr	r1, [r7, #28]
 8007888:	4401      	add	r1, r0
 800788a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800788e:	4313      	orrs	r3, r2
 8007890:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078a8:	69b9      	ldr	r1, [r7, #24]
 80078aa:	0148      	lsls	r0, r1, #5
 80078ac:	69f9      	ldr	r1, [r7, #28]
 80078ae:	4401      	add	r1, r0
 80078b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078b4:	4313      	orrs	r3, r2
 80078b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d10d      	bne.n	80078da <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	68d9      	ldr	r1, [r3, #12]
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d6:	460a      	mov	r2, r1
 80078d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d128      	bne.n	8007934 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d110      	bne.n	8007914 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	440a      	add	r2, r1
 8007908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800790c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	e00f      	b.n	8007934 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	0151      	lsls	r1, r2, #5
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	440a      	add	r2, r1
 800792a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800792e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007932:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800794e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007952:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	1ff80000 	.word	0x1ff80000

08007964 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d14a      	bne.n	8007a18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800799a:	f040 8086 	bne.w	8007aaa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	7812      	ldrb	r2, [r2, #0]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3301      	adds	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d902      	bls.n	80079fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
          break;
 80079fa:	e056      	b.n	8007aaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a14:	d0e7      	beq.n	80079e6 <USB_EPStopXfer+0x82>
 8007a16:	e048      	b.n	8007aaa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a30:	d13b      	bne.n	8007aaa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	7812      	ldrb	r2, [r2, #0]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	7812      	ldrb	r2, [r2, #0]
 8007a6a:	0151      	lsls	r1, r2, #5
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	440a      	add	r2, r1
 8007a70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d902      	bls.n	8007a90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a8e:	e00c      	b.n	8007aaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aa8:	d0e7      	beq.n	8007a7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b089      	sub	sp, #36	@ 0x24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	71fb      	strb	r3, [r7, #7]
 8007aca:	4613      	mov	r3, r2
 8007acc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d123      	bne.n	8007b26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ade:	88bb      	ldrh	r3, [r7, #4]
 8007ae0:	3303      	adds	r3, #3
 8007ae2:	089b      	lsrs	r3, r3, #2
 8007ae4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	e018      	b.n	8007b1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	031a      	lsls	r2, r3, #12
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007af8:	461a      	mov	r2, r3
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	3301      	adds	r3, #1
 8007b04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	3301      	adds	r3, #1
 8007b16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d3e2      	bcc.n	8007aec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3724      	adds	r7, #36	@ 0x24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b08b      	sub	sp, #44	@ 0x2c
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	089b      	lsrs	r3, r3, #2
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b52:	88fb      	ldrh	r3, [r7, #6]
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	623b      	str	r3, [r7, #32]
 8007b5e:	e014      	b.n	8007b8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	3301      	adds	r3, #1
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	3301      	adds	r3, #1
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	3301      	adds	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	3301      	adds	r3, #1
 8007b88:	623b      	str	r3, [r7, #32]
 8007b8a:	6a3a      	ldr	r2, [r7, #32]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d3e6      	bcc.n	8007b60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b92:	8bfb      	ldrh	r3, [r7, #30]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01e      	beq.n	8007bd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f107 0310 	add.w	r3, r7, #16
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	701a      	strb	r2, [r3, #0]
      i++;
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bca:	8bfb      	ldrh	r3, [r7, #30]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bd0:	8bfb      	ldrh	r3, [r7, #30]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1ea      	bne.n	8007bac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	372c      	adds	r7, #44	@ 0x2c
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d12c      	bne.n	8007c5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	db12      	blt.n	8007c38 <USB_EPSetStall+0x54>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00f      	beq.n	8007c38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e02b      	b.n	8007cb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	db12      	blt.n	8007c92 <USB_EPSetStall+0xae>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00f      	beq.n	8007c92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d128      	bne.n	8007d2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007cfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	791b      	ldrb	r3, [r3, #4]
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d003      	beq.n	8007d0c <USB_EPClearStall+0x4c>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	791b      	ldrb	r3, [r3, #4]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d138      	bne.n	8007d7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	e027      	b.n	8007d7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	0151      	lsls	r1, r2, #5
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	440a      	add	r2, r1
 8007d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	791b      	ldrb	r3, [r3, #4]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d003      	beq.n	8007d5e <USB_EPClearStall+0x9e>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	791b      	ldrb	r3, [r3, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d10f      	bne.n	8007d7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	0151      	lsls	r1, r2, #5
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	440a      	add	r2, r1
 8007d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007daa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007dae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007dc0:	68f9      	ldr	r1, [r7, #12]
 8007dc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007df2:	f023 0303 	bic.w	r3, r3, #3
 8007df6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e06:	f023 0302 	bic.w	r3, r3, #2
 8007e0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e34:	f023 0303 	bic.w	r3, r3, #3
 8007e38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e48:	f043 0302 	orr.w	r3, r3, #2
 8007e4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4013      	ands	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e74:	68fb      	ldr	r3, [r7, #12]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	0c1b      	lsrs	r3, r3, #16
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b085      	sub	sp, #20
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	b29b      	uxth	r3, r3
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4013      	ands	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f18:	68bb      	ldr	r3, [r7, #8]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b087      	sub	sp, #28
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	fa22 f303 	lsr.w	r3, r2, r3
 8007f56:	01db      	lsls	r3, r3, #7
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4013      	ands	r3, r2
 8007f72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f74:	68bb      	ldr	r3, [r7, #8]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007fbc:	f023 0307 	bic.w	r3, r3, #7
 8007fc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	460b      	mov	r3, r1
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	333c      	adds	r3, #60	@ 0x3c
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	4a26      	ldr	r2, [pc, #152]	@ (800809c <USB_EP0_OutStart+0xb8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d90a      	bls.n	800801e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008018:	d101      	bne.n	800801e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	e037      	b.n	800808e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008024:	461a      	mov	r2, r3
 8008026:	2300      	movs	r3, #0
 8008028:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008038:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800803c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800804c:	f043 0318 	orr.w	r3, r3, #24
 8008050:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008060:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008064:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d10f      	bne.n	800808c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008072:	461a      	mov	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008086:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800808a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	4f54300a 	.word	0x4f54300a

080080a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080b8:	d901      	bls.n	80080be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e022      	b.n	8008104 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	daf2      	bge.n	80080ac <USB_CoreReset+0xc>

  count = 10U;
 80080c6:	230a      	movs	r3, #10
 80080c8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80080ca:	e002      	b.n	80080d2 <USB_CoreReset+0x32>
  {
    count--;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f9      	bne.n	80080cc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f043 0201 	orr.w	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080f0:	d901      	bls.n	80080f6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e006      	b.n	8008104 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d0f0      	beq.n	80080e4 <USB_CoreReset+0x44>

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800811c:	2054      	movs	r0, #84	@ 0x54
 800811e:	f002 fd0f 	bl	800ab40 <USBD_static_malloc>
 8008122:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	32b0      	adds	r2, #176	@ 0xb0
 8008134:	2100      	movs	r1, #0
 8008136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800813a:	2302      	movs	r3, #2
 800813c:	e08b      	b.n	8008256 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	32b0      	adds	r2, #176	@ 0xb0
 8008148:	68f9      	ldr	r1, [r7, #12]
 800814a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	32b0      	adds	r2, #176	@ 0xb0
 8008158:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	7c1b      	ldrb	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d11b      	bne.n	80081a2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800816a:	4b3d      	ldr	r3, [pc, #244]	@ (8008260 <USBD_CUSTOM_HID_Init+0x150>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	f003 020f 	and.w	r2, r3, #15
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	4613      	mov	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	440b      	add	r3, r1
 800817e:	331c      	adds	r3, #28
 8008180:	2205      	movs	r2, #5
 8008182:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008184:	4b37      	ldr	r3, [pc, #220]	@ (8008264 <USBD_CUSTOM_HID_Init+0x154>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	f003 020f 	and.w	r2, r3, #15
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800819c:	2205      	movs	r2, #5
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e01a      	b.n	80081d8 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80081a2:	4b2f      	ldr	r3, [pc, #188]	@ (8008260 <USBD_CUSTOM_HID_Init+0x150>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 020f 	and.w	r2, r3, #15
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	331c      	adds	r3, #28
 80081b8:	2205      	movs	r2, #5
 80081ba:	601a      	str	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80081bc:	4b29      	ldr	r3, [pc, #164]	@ (8008264 <USBD_CUSTOM_HID_Init+0x154>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 020f 	and.w	r2, r3, #15
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80081d4:	2205      	movs	r2, #5
 80081d6:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80081d8:	4b21      	ldr	r3, [pc, #132]	@ (8008260 <USBD_CUSTOM_HID_Init+0x150>)
 80081da:	7819      	ldrb	r1, [r3, #0]
 80081dc:	2340      	movs	r3, #64	@ 0x40
 80081de:	2203      	movs	r2, #3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f002 fb9c 	bl	800a91e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80081e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008260 <USBD_CUSTOM_HID_Init+0x150>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	f003 020f 	and.w	r2, r3, #15
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	3323      	adds	r3, #35	@ 0x23
 80081fc:	2201      	movs	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]
  {
    return (uint8_t)USBD_FAIL;
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008200:	4b18      	ldr	r3, [pc, #96]	@ (8008264 <USBD_CUSTOM_HID_Init+0x154>)
 8008202:	7819      	ldrb	r1, [r3, #0]
 8008204:	2340      	movs	r3, #64	@ 0x40
 8008206:	2203      	movs	r2, #3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f002 fb88 	bl	800a91e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800820e:	4b15      	ldr	r3, [pc, #84]	@ (8008264 <USBD_CUSTOM_HID_Init+0x154>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	f003 020f 	and.w	r2, r3, #15
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	440b      	add	r3, r1
 8008222:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008226:	2201      	movs	r2, #1
 8008228:	701a      	strb	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	33b0      	adds	r3, #176	@ 0xb0
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008246:	4b07      	ldr	r3, [pc, #28]	@ (8008264 <USBD_CUSTOM_HID_Init+0x154>)
 8008248:	7819      	ldrb	r1, [r3, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	2340      	movs	r3, #64	@ 0x40
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f002 fc54 	bl	800aafc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000086 	.word	0x20000086
 8008264:	20000087 	.word	0x20000087

08008268 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008274:	4b37      	ldr	r3, [pc, #220]	@ (8008354 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f002 fb75 	bl	800a96a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008280:	4b34      	ldr	r3, [pc, #208]	@ (8008354 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 020f 	and.w	r2, r3, #15
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	440b      	add	r3, r1
 8008294:	3323      	adds	r3, #35	@ 0x23
 8008296:	2200      	movs	r2, #0
 8008298:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800829a:	4b2e      	ldr	r3, [pc, #184]	@ (8008354 <USBD_CUSTOM_HID_DeInit+0xec>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	f003 020f 	and.w	r2, r3, #15
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	331c      	adds	r3, #28
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80082b4:	4b28      	ldr	r3, [pc, #160]	@ (8008358 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f002 fb55 	bl	800a96a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80082c0:	4b25      	ldr	r3, [pc, #148]	@ (8008358 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f003 020f 	and.w	r2, r3, #15
 80082c8:	6879      	ldr	r1, [r7, #4]
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80082dc:	4b1e      	ldr	r3, [pc, #120]	@ (8008358 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	f003 020f 	and.w	r2, r3, #15
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	440b      	add	r3, r1
 80082f0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32b0      	adds	r2, #176	@ 0xb0
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01f      	beq.n	800834a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	33b0      	adds	r3, #176	@ 0xb0
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	32b0      	adds	r2, #176	@ 0xb0
 8008328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832c:	4618      	mov	r0, r3
 800832e:	f002 fc15 	bl	800ab5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	32b0      	adds	r2, #176	@ 0xb0
 800833c:	2100      	movs	r1, #0
 800833e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20000086 	.word	0x20000086
 8008358:	20000087 	.word	0x20000087

0800835c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	32b0      	adds	r2, #176	@ 0xb0
 8008370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008374:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800838c:	2303      	movs	r3, #3
 800838e:	e108      	b.n	80085a2 <USBD_CUSTOM_HID_Setup+0x246>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008398:	2b00      	cmp	r3, #0
 800839a:	d05c      	beq.n	8008456 <USBD_CUSTOM_HID_Setup+0xfa>
 800839c:	2b20      	cmp	r3, #32
 800839e:	f040 80f8 	bne.w	8008592 <USBD_CUSTOM_HID_Setup+0x236>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	3b02      	subs	r3, #2
 80083a8:	2b09      	cmp	r3, #9
 80083aa:	d84c      	bhi.n	8008446 <USBD_CUSTOM_HID_Setup+0xea>
 80083ac:	a201      	add	r2, pc, #4	@ (adr r2, 80083b4 <USBD_CUSTOM_HID_Setup+0x58>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	0800840d 	.word	0x0800840d
 80083b8:	080083eb 	.word	0x080083eb
 80083bc:	08008447 	.word	0x08008447
 80083c0:	08008447 	.word	0x08008447
 80083c4:	08008447 	.word	0x08008447
 80083c8:	08008447 	.word	0x08008447
 80083cc:	08008447 	.word	0x08008447
 80083d0:	0800841d 	.word	0x0800841d
 80083d4:	080083fb 	.word	0x080083fb
 80083d8:	080083dd 	.word	0x080083dd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	885b      	ldrh	r3, [r3, #2]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	461a      	mov	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80083e8:	e034      	b.n	8008454 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	3340      	adds	r3, #64	@ 0x40
 80083ee:	2201      	movs	r2, #1
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 fcfa 	bl	8009dec <USBD_CtlSendData>
          break;
 80083f8:	e02c      	b.n	8008454 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	885b      	ldrh	r3, [r3, #2]
 80083fe:	0a1b      	lsrs	r3, r3, #8
 8008400:	b29b      	uxth	r3, r3
 8008402:	b2db      	uxtb	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 800840a:	e023      	b.n	8008454 <USBD_CUSTOM_HID_Setup+0xf8>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	3344      	adds	r3, #68	@ 0x44
 8008410:	2201      	movs	r2, #1
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 fce9 	bl	8009dec <USBD_CtlSendData>
          break;
 800841a:	e01b      	b.n	8008454 <USBD_CUSTOM_HID_Setup+0xf8>
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED

          if (req->wLength > USBD_CUSTOMHID_OUTREPORT_BUF_SIZE)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	88db      	ldrh	r3, [r3, #6]
 8008420:	2b40      	cmp	r3, #64	@ 0x40
 8008422:	d905      	bls.n	8008430 <USBD_CUSTOM_HID_Setup+0xd4>
          {
            /* Stall EP0 */
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f001 fc63 	bl	8009cf2 <USBD_CtlError>
            return USBD_FAIL;
 800842c:	2303      	movs	r3, #3
 800842e:	e0b8      	b.n	80085a2 <USBD_CUSTOM_HID_Setup+0x246>
          }

          hhid->IsReportAvailable = 1U;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	2201      	movs	r2, #1
 8008434:	64da      	str	r2, [r3, #76]	@ 0x4c

          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008436:	6939      	ldr	r1, [r7, #16]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	88db      	ldrh	r3, [r3, #6]
 800843c:	461a      	mov	r2, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 fd03 	bl	8009e4a <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008444:	e006      	b.n	8008454 <USBD_CUSTOM_HID_Setup+0xf8>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 fc52 	bl	8009cf2 <USBD_CtlError>
          ret = USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	75fb      	strb	r3, [r7, #23]
          break;
 8008452:	bf00      	nop
      }
      break;
 8008454:	e0a4      	b.n	80085a0 <USBD_CUSTOM_HID_Setup+0x244>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	2b0b      	cmp	r3, #11
 800845c:	f200 8090 	bhi.w	8008580 <USBD_CUSTOM_HID_Setup+0x224>
 8008460:	a201      	add	r2, pc, #4	@ (adr r2, 8008468 <USBD_CUSTOM_HID_Setup+0x10c>)
 8008462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008466:	bf00      	nop
 8008468:	08008499 	.word	0x08008499
 800846c:	0800858f 	.word	0x0800858f
 8008470:	08008581 	.word	0x08008581
 8008474:	08008581 	.word	0x08008581
 8008478:	08008581 	.word	0x08008581
 800847c:	08008581 	.word	0x08008581
 8008480:	080084c3 	.word	0x080084c3
 8008484:	08008581 	.word	0x08008581
 8008488:	08008581 	.word	0x08008581
 800848c:	08008581 	.word	0x08008581
 8008490:	0800852f 	.word	0x0800852f
 8008494:	08008559 	.word	0x08008559
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d107      	bne.n	80084b4 <USBD_CUSTOM_HID_Setup+0x158>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80084a4:	f107 030e 	add.w	r3, r7, #14
 80084a8:	2202      	movs	r2, #2
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 fc9d 	bl	8009dec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084b2:	e06d      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fc1b 	bl	8009cf2 <USBD_CtlError>
            ret = USBD_FAIL;
 80084bc:	2303      	movs	r3, #3
 80084be:	75fb      	strb	r3, [r7, #23]
          break;
 80084c0:	e066      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	885b      	ldrh	r3, [r3, #2]
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b22      	cmp	r3, #34	@ 0x22
 80084cc:	d110      	bne.n	80084f0 <USBD_CUSTOM_HID_Setup+0x194>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	88db      	ldrh	r3, [r3, #6]
 80084d2:	2b1b      	cmp	r3, #27
 80084d4:	bf28      	it	cs
 80084d6:	231b      	movcs	r3, #27
 80084d8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	33b0      	adds	r3, #176	@ 0xb0
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	e00d      	b.n	800850c <USBD_CUSTOM_HID_Setup+0x1b0>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	885b      	ldrh	r3, [r3, #2]
 80084f4:	0a1b      	lsrs	r3, r3, #8
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b21      	cmp	r3, #33	@ 0x21
 80084fa:	d107      	bne.n	800850c <USBD_CUSTOM_HID_Setup+0x1b0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80084fc:	4b2b      	ldr	r3, [pc, #172]	@ (80085ac <USBD_CUSTOM_HID_Setup+0x250>)
 80084fe:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	88db      	ldrh	r3, [r3, #6]
 8008504:	2b09      	cmp	r3, #9
 8008506:	bf28      	it	cs
 8008508:	2309      	movcs	r3, #9
 800850a:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d006      	beq.n	8008520 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8008512:	8bfb      	ldrh	r3, [r7, #30]
 8008514:	461a      	mov	r2, r3
 8008516:	69b9      	ldr	r1, [r7, #24]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 fc67 	bl	8009dec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800851e:	e037      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 fbe5 	bl	8009cf2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	75fb      	strb	r3, [r7, #23]
          break;
 800852c:	e030      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b03      	cmp	r3, #3
 8008538:	d107      	bne.n	800854a <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	3348      	adds	r3, #72	@ 0x48
 800853e:	2201      	movs	r2, #1
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fc52 	bl	8009dec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008548:	e022      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fbd0 	bl	8009cf2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008552:	2303      	movs	r3, #3
 8008554:	75fb      	strb	r3, [r7, #23]
          break;
 8008556:	e01b      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b03      	cmp	r3, #3
 8008562:	d106      	bne.n	8008572 <USBD_CUSTOM_HID_Setup+0x216>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	885b      	ldrh	r3, [r3, #2]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008570:	e00e      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>
            USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 fbbc 	bl	8009cf2 <USBD_CtlError>
            ret = USBD_FAIL;
 800857a:	2303      	movs	r3, #3
 800857c:	75fb      	strb	r3, [r7, #23]
          break;
 800857e:	e007      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fbb5 	bl	8009cf2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008588:	2303      	movs	r3, #3
 800858a:	75fb      	strb	r3, [r7, #23]
          break;
 800858c:	e000      	b.n	8008590 <USBD_CUSTOM_HID_Setup+0x234>
          break;
 800858e:	bf00      	nop
      }
      break;
 8008590:	e006      	b.n	80085a0 <USBD_CUSTOM_HID_Setup+0x244>

    default:
      USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fbac 	bl	8009cf2 <USBD_CtlError>
      ret = USBD_FAIL;
 800859a:	2303      	movs	r3, #3
 800859c:	75fb      	strb	r3, [r7, #23]
      break;
 800859e:	bf00      	nop
  }
  return (uint8_t)ret;
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000070 	.word	0x20000070

080085b0 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	32b0      	adds	r2, #176	@ 0xb0
 80085c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085cc:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e019      	b.n	800860c <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d112      	bne.n	800860a <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10b      	bne.n	8008606 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80085f6:	4b07      	ldr	r3, [pc, #28]	@ (8008614 <USBD_CUSTOM_HID_SendReport+0x64>)
 80085f8:	7819      	ldrb	r1, [r3, #0]
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f002 fa5b 	bl	800aaba <USBD_LL_Transmit>
 8008604:	e001      	b.n	800860a <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20000086 	.word	0x20000086

08008618 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008620:	2181      	movs	r1, #129	@ 0x81
 8008622:	4815      	ldr	r0, [pc, #84]	@ (8008678 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008624:	f000 fd2c 	bl	8009080 <USBD_GetEpDesc>
 8008628:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800862a:	2101      	movs	r1, #1
 800862c:	4812      	ldr	r0, [pc, #72]	@ (8008678 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800862e:	f000 fd27 	bl	8009080 <USBD_GetEpDesc>
 8008632:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008642:	711a      	strb	r2, [r3, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2205      	movs	r2, #5
 800864c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800865c:	711a      	strb	r2, [r3, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2205      	movs	r2, #5
 8008666:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2229      	movs	r2, #41	@ 0x29
 800866c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800866e:	4b02      	ldr	r3, [pc, #8]	@ (8008678 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20000044 	.word	0x20000044

0800867c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008684:	2181      	movs	r1, #129	@ 0x81
 8008686:	4815      	ldr	r0, [pc, #84]	@ (80086dc <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008688:	f000 fcfa 	bl	8009080 <USBD_GetEpDesc>
 800868c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800868e:	2101      	movs	r1, #1
 8008690:	4812      	ldr	r0, [pc, #72]	@ (80086dc <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008692:	f000 fcf5 	bl	8009080 <USBD_GetEpDesc>
 8008696:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086a6:	711a      	strb	r2, [r3, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2205      	movs	r2, #5
 80086b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086c0:	711a      	strb	r2, [r3, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2205      	movs	r2, #5
 80086ca:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2229      	movs	r2, #41	@ 0x29
 80086d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80086d2:	4b02      	ldr	r3, [pc, #8]	@ (80086dc <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000044 	.word	0x20000044

080086e0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80086e8:	2181      	movs	r1, #129	@ 0x81
 80086ea:	4815      	ldr	r0, [pc, #84]	@ (8008740 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80086ec:	f000 fcc8 	bl	8009080 <USBD_GetEpDesc>
 80086f0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80086f2:	2101      	movs	r1, #1
 80086f4:	4812      	ldr	r0, [pc, #72]	@ (8008740 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80086f6:	f000 fcc3 	bl	8009080 <USBD_GetEpDesc>
 80086fa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800870a:	711a      	strb	r2, [r3, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2205      	movs	r2, #5
 8008714:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d009      	beq.n	8008730 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2200      	movs	r2, #0
 8008720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008724:	711a      	strb	r2, [r3, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2205      	movs	r2, #5
 800872e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2229      	movs	r2, #41	@ 0x29
 8008734:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008736:	4b02      	ldr	r3, [pc, #8]	@ (8008740 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000044 	.word	0x20000044

08008744 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	32b0      	adds	r2, #176	@ 0xb0
 800875a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	460b      	mov	r3, r1
 800877c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	32b0      	adds	r2, #176	@ 0xb0
 8008788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008790:	2303      	movs	r3, #3
 8008792:	e014      	b.n	80087be <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	32b0      	adds	r2, #176	@ 0xb0
 800879e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */

#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	33b0      	adds	r3, #176	@ 0xb0
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4610      	mov	r0, r2
 80087ba:	4798      	blx	r3
#else
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                           hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */

  return (uint8_t)USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	32b0      	adds	r2, #176	@ 0xb0
 80087da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e00f      	b.n	8008806 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	32b0      	adds	r2, #176	@ 0xb0
 80087f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80087f6:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80087f8:	7819      	ldrb	r1, [r3, #0]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	2340      	movs	r3, #64	@ 0x40
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 f97c 	bl	800aafc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000087 	.word	0x20000087

08008814 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	32b0      	adds	r2, #176	@ 0xb0
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008832:	2303      	movs	r3, #3
 8008834:	e013      	b.n	800885e <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800883a:	2b01      	cmp	r3, #1
 800883c:	d10e      	bne.n	800885c <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
#ifdef USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	33b0      	adds	r3, #176	@ 0xb0
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	4610      	mov	r0, r2
 8008854:	4798      	blx	r3
#else
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
                                                                             hhid->Report_buf[1]);
#endif /* USBD_CUSTOMHID_REPORT_BUFFER_EVENT_ENABLED */
    hhid->IsReportAvailable = 0U;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	220a      	movs	r2, #10
 8008874:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008876:	4b03      	ldr	r3, [pc, #12]	@ (8008884 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	2000007c 	.word	0x2000007c

08008888 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	e009      	b.n	80088b0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	33b0      	adds	r3, #176	@ 0xb0
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e01f      	b.n	8008914 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	79fa      	ldrb	r2, [r7, #7]
 8008906:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f001 ffa1 	bl	800a850 <USBD_LL_Init>
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008930:	2303      	movs	r3, #3
 8008932:	e025      	b.n	8008980 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32ae      	adds	r2, #174	@ 0xae
 8008946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00f      	beq.n	8008970 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	32ae      	adds	r2, #174	@ 0xae
 800895a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008960:	f107 020e 	add.w	r2, r7, #14
 8008964:	4610      	mov	r0, r2
 8008966:	4798      	blx	r3
 8008968:	4602      	mov	r2, r0
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 ffa9 	bl	800a8e8 <USBD_LL_Start>
 8008996:	4603      	mov	r3, r0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	460b      	mov	r3, r1
 80089c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d009      	beq.n	80089e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	4611      	mov	r1, r2
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	4798      	blx	r3
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a14:	2303      	movs	r3, #3
 8008a16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 f922 	bl	8009c7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d01a      	beq.n	8008a94 <USBD_LL_SetupStage+0x72>
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d822      	bhi.n	8008aa8 <USBD_LL_SetupStage+0x86>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <USBD_LL_SetupStage+0x4a>
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d00a      	beq.n	8008a80 <USBD_LL_SetupStage+0x5e>
 8008a6a:	e01d      	b.n	8008aa8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fb77 	bl	8009168 <USBD_StdDevReq>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7e:	e020      	b.n	8008ac2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fbdf 	bl	800924c <USBD_StdItfReq>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73fb      	strb	r3, [r7, #15]
      break;
 8008a92:	e016      	b.n	8008ac2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fc41 	bl	8009324 <USBD_StdEPReq>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa6:	e00c      	b.n	8008ac2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008aae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 ff76 	bl	800a9a8 <USBD_LL_StallEP>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac0:	bf00      	nop
  }

  return ret;
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d177      	bne.n	8008bd4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008aea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	f040 80a1 	bne.w	8008c3a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	8992      	ldrh	r2, [r2, #12]
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d91c      	bls.n	8008b3e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	8992      	ldrh	r2, [r2, #12]
 8008b0c:	1a9a      	subs	r2, r3, r2
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	8992      	ldrh	r2, [r2, #12]
 8008b1a:	441a      	add	r2, r3
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6919      	ldr	r1, [r3, #16]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	899b      	ldrh	r3, [r3, #12]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bf38      	it	cc
 8008b32:	4613      	movcc	r3, r2
 8008b34:	461a      	mov	r2, r3
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f001 f9a8 	bl	8009e8c <USBD_CtlContinueRx>
 8008b3c:	e07d      	b.n	8008c3a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b44:	f003 031f 	and.w	r3, r3, #31
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d014      	beq.n	8008b76 <USBD_LL_DataOutStage+0xaa>
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d81d      	bhi.n	8008b8c <USBD_LL_DataOutStage+0xc0>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <USBD_LL_DataOutStage+0x8e>
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d003      	beq.n	8008b60 <USBD_LL_DataOutStage+0x94>
 8008b58:	e018      	b.n	8008b8c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75bb      	strb	r3, [r7, #22]
            break;
 8008b5e:	e018      	b.n	8008b92 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	4619      	mov	r1, r3
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fa6e 	bl	800904c <USBD_CoreFindIF>
 8008b70:	4603      	mov	r3, r0
 8008b72:	75bb      	strb	r3, [r7, #22]
            break;
 8008b74:	e00d      	b.n	8008b92 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	4619      	mov	r1, r3
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fa70 	bl	8009066 <USBD_CoreFindEP>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75bb      	strb	r3, [r7, #22]
            break;
 8008b8a:	e002      	b.n	8008b92 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	75bb      	strb	r3, [r7, #22]
            break;
 8008b90:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b92:	7dbb      	ldrb	r3, [r7, #22]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d119      	bne.n	8008bcc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d113      	bne.n	8008bcc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ba4:	7dba      	ldrb	r2, [r7, #22]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	32ae      	adds	r2, #174	@ 0xae
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008bb4:	7dba      	ldrb	r2, [r7, #22]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bbc:	7dba      	ldrb	r2, [r7, #22]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	32ae      	adds	r2, #174	@ 0xae
 8008bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f001 f96e 	bl	8009eae <USBD_CtlSendStatus>
 8008bd2:	e032      	b.n	8008c3a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008bd4:	7afb      	ldrb	r3, [r7, #11]
 8008bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fa41 	bl	8009066 <USBD_CoreFindEP>
 8008be4:	4603      	mov	r3, r0
 8008be6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008be8:	7dbb      	ldrb	r3, [r7, #22]
 8008bea:	2bff      	cmp	r3, #255	@ 0xff
 8008bec:	d025      	beq.n	8008c3a <USBD_LL_DataOutStage+0x16e>
 8008bee:	7dbb      	ldrb	r3, [r7, #22]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d122      	bne.n	8008c3a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d117      	bne.n	8008c30 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c00:	7dba      	ldrb	r2, [r7, #22]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	32ae      	adds	r2, #174	@ 0xae
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00f      	beq.n	8008c30 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008c10:	7dba      	ldrb	r2, [r7, #22]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c18:	7dba      	ldrb	r2, [r7, #22]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	32ae      	adds	r2, #174	@ 0xae
 8008c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	7afa      	ldrb	r2, [r7, #11]
 8008c26:	4611      	mov	r1, r2
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	4798      	blx	r3
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	e000      	b.n	8008c3c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d178      	bne.n	8008d4a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3314      	adds	r3, #20
 8008c5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d163      	bne.n	8008d30 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	8992      	ldrh	r2, [r2, #12]
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d91c      	bls.n	8008cae <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	8992      	ldrh	r2, [r2, #12]
 8008c7c:	1a9a      	subs	r2, r3, r2
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	8992      	ldrh	r2, [r2, #12]
 8008c8a:	441a      	add	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6919      	ldr	r1, [r3, #16]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f001 f8c4 	bl	8009e28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f001 ff28 	bl	800aafc <USBD_LL_PrepareReceive>
 8008cac:	e040      	b.n	8008d30 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	899b      	ldrh	r3, [r3, #12]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d11c      	bne.n	8008cf6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d316      	bcc.n	8008cf6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d20f      	bcs.n	8008cf6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f001 f8a4 	bl	8009e28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ce8:	2300      	movs	r3, #0
 8008cea:	2200      	movs	r2, #0
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f001 ff04 	bl	800aafc <USBD_LL_PrepareReceive>
 8008cf4:	e01c      	b.n	8008d30 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d10f      	bne.n	8008d22 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d22:	2180      	movs	r1, #128	@ 0x80
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f001 fe3f 	bl	800a9a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f001 f8d2 	bl	8009ed4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d03a      	beq.n	8008db0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff fe30 	bl	80089a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008d48:	e032      	b.n	8008db0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	4619      	mov	r1, r3
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 f986 	bl	8009066 <USBD_CoreFindEP>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	2bff      	cmp	r3, #255	@ 0xff
 8008d62:	d025      	beq.n	8008db0 <USBD_LL_DataInStage+0x16c>
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d122      	bne.n	8008db0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d11c      	bne.n	8008db0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d76:	7dfa      	ldrb	r2, [r7, #23]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	32ae      	adds	r2, #174	@ 0xae
 8008d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d014      	beq.n	8008db0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008d86:	7dfa      	ldrb	r2, [r7, #23]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d8e:	7dfa      	ldrb	r2, [r7, #23]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	32ae      	adds	r2, #174	@ 0xae
 8008d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	7afa      	ldrb	r2, [r7, #11]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	4798      	blx	r3
 8008da2:	4603      	mov	r3, r0
 8008da4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008da6:	7dbb      	ldrb	r3, [r7, #22]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008dac:	7dbb      	ldrb	r3, [r7, #22]
 8008dae:	e000      	b.n	8008db2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d014      	beq.n	8008e20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00e      	beq.n	8008e20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6852      	ldr	r2, [r2, #4]
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	4611      	mov	r1, r2
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e20:	2340      	movs	r3, #64	@ 0x40
 8008e22:	2200      	movs	r2, #0
 8008e24:	2100      	movs	r1, #0
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 fd79 	bl	800a91e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2240      	movs	r2, #64	@ 0x40
 8008e38:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e3c:	2340      	movs	r3, #64	@ 0x40
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2180      	movs	r1, #128	@ 0x80
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 fd6b 	bl	800a91e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2240      	movs	r2, #64	@ 0x40
 8008e54:	841a      	strh	r2, [r3, #32]

  return ret;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d006      	beq.n	8008ea2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d106      	bne.n	8008eda <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d110      	bne.n	8008f1e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00b      	beq.n	8008f1e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d005      	beq.n	8008f1e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	32ae      	adds	r2, #174	@ 0xae
 8008f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e01c      	b.n	8008f84 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d115      	bne.n	8008f82 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	32ae      	adds	r2, #174	@ 0xae
 8008f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00b      	beq.n	8008f82 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	32ae      	adds	r2, #174	@ 0xae
 8008f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	32ae      	adds	r2, #174	@ 0xae
 8008fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e01c      	b.n	8008fe8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d115      	bne.n	8008fe6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	32ae      	adds	r2, #174	@ 0xae
 8008fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	32ae      	adds	r2, #174	@ 0xae
 8008fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00e      	beq.n	8009042 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6852      	ldr	r2, [r2, #4]
 8009030:	b2d2      	uxtb	r2, r2
 8009032:	4611      	mov	r1, r2
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800903e:	2303      	movs	r3, #3
 8009040:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009058:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800905a:	4618      	mov	r0, r3
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009072:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	885b      	ldrh	r3, [r3, #2]
 800909c:	b29b      	uxth	r3, r3
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	7812      	ldrb	r2, [r2, #0]
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d91f      	bls.n	80090e6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80090ac:	e013      	b.n	80090d6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80090ae:	f107 030a 	add.w	r3, r7, #10
 80090b2:	4619      	mov	r1, r3
 80090b4:	6978      	ldr	r0, [r7, #20]
 80090b6:	f000 f81b 	bl	80090f0 <USBD_GetNextDesc>
 80090ba:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	2b05      	cmp	r3, #5
 80090c2:	d108      	bne.n	80090d6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	789b      	ldrb	r3, [r3, #2]
 80090cc:	78fa      	ldrb	r2, [r7, #3]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d008      	beq.n	80090e4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	885b      	ldrh	r3, [r3, #2]
 80090da:	b29a      	uxth	r2, r3
 80090dc:	897b      	ldrh	r3, [r7, #10]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d8e5      	bhi.n	80090ae <USBD_GetEpDesc+0x2e>
 80090e2:	e000      	b.n	80090e6 <USBD_GetEpDesc+0x66>
          break;
 80090e4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090e6:	693b      	ldr	r3, [r7, #16]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	7812      	ldrb	r2, [r2, #0]
 8009106:	4413      	add	r3, r2
 8009108:	b29a      	uxth	r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4413      	add	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800911a:	68fb      	ldr	r3, [r7, #12]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	3301      	adds	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009146:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800914a:	021b      	lsls	r3, r3, #8
 800914c:	b21a      	sxth	r2, r3
 800914e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009152:	4313      	orrs	r3, r2
 8009154:	b21b      	sxth	r3, r3
 8009156:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009158:	89fb      	ldrh	r3, [r7, #14]
}
 800915a:	4618      	mov	r0, r3
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
	...

08009168 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800917e:	2b40      	cmp	r3, #64	@ 0x40
 8009180:	d005      	beq.n	800918e <USBD_StdDevReq+0x26>
 8009182:	2b40      	cmp	r3, #64	@ 0x40
 8009184:	d857      	bhi.n	8009236 <USBD_StdDevReq+0xce>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00f      	beq.n	80091aa <USBD_StdDevReq+0x42>
 800918a:	2b20      	cmp	r3, #32
 800918c:	d153      	bne.n	8009236 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	32ae      	adds	r2, #174	@ 0xae
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	4798      	blx	r3
 80091a4:	4603      	mov	r3, r0
 80091a6:	73fb      	strb	r3, [r7, #15]
      break;
 80091a8:	e04a      	b.n	8009240 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	785b      	ldrb	r3, [r3, #1]
 80091ae:	2b09      	cmp	r3, #9
 80091b0:	d83b      	bhi.n	800922a <USBD_StdDevReq+0xc2>
 80091b2:	a201      	add	r2, pc, #4	@ (adr r2, 80091b8 <USBD_StdDevReq+0x50>)
 80091b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b8:	0800920d 	.word	0x0800920d
 80091bc:	08009221 	.word	0x08009221
 80091c0:	0800922b 	.word	0x0800922b
 80091c4:	08009217 	.word	0x08009217
 80091c8:	0800922b 	.word	0x0800922b
 80091cc:	080091eb 	.word	0x080091eb
 80091d0:	080091e1 	.word	0x080091e1
 80091d4:	0800922b 	.word	0x0800922b
 80091d8:	08009203 	.word	0x08009203
 80091dc:	080091f5 	.word	0x080091f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa3e 	bl	8009664 <USBD_GetDescriptor>
          break;
 80091e8:	e024      	b.n	8009234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fba3 	bl	8009938 <USBD_SetAddress>
          break;
 80091f2:	e01f      	b.n	8009234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fbe2 	bl	80099c0 <USBD_SetConfig>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]
          break;
 8009200:	e018      	b.n	8009234 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fc85 	bl	8009b14 <USBD_GetConfig>
          break;
 800920a:	e013      	b.n	8009234 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fcb6 	bl	8009b80 <USBD_GetStatus>
          break;
 8009214:	e00e      	b.n	8009234 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fce5 	bl	8009be8 <USBD_SetFeature>
          break;
 800921e:	e009      	b.n	8009234 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fd09 	bl	8009c3a <USBD_ClrFeature>
          break;
 8009228:	e004      	b.n	8009234 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fd60 	bl	8009cf2 <USBD_CtlError>
          break;
 8009232:	bf00      	nop
      }
      break;
 8009234:	e004      	b.n	8009240 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fd5a 	bl	8009cf2 <USBD_CtlError>
      break;
 800923e:	bf00      	nop
  }

  return ret;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop

0800924c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009262:	2b40      	cmp	r3, #64	@ 0x40
 8009264:	d005      	beq.n	8009272 <USBD_StdItfReq+0x26>
 8009266:	2b40      	cmp	r3, #64	@ 0x40
 8009268:	d852      	bhi.n	8009310 <USBD_StdItfReq+0xc4>
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <USBD_StdItfReq+0x26>
 800926e:	2b20      	cmp	r3, #32
 8009270:	d14e      	bne.n	8009310 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009278:	b2db      	uxtb	r3, r3
 800927a:	3b01      	subs	r3, #1
 800927c:	2b02      	cmp	r3, #2
 800927e:	d840      	bhi.n	8009302 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	889b      	ldrh	r3, [r3, #4]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b01      	cmp	r3, #1
 8009288:	d836      	bhi.n	80092f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	889b      	ldrh	r3, [r3, #4]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7ff feda 	bl	800904c <USBD_CoreFindIF>
 8009298:	4603      	mov	r3, r0
 800929a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	2bff      	cmp	r3, #255	@ 0xff
 80092a0:	d01d      	beq.n	80092de <USBD_StdItfReq+0x92>
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d11a      	bne.n	80092de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80092a8:	7bba      	ldrb	r2, [r7, #14]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	32ae      	adds	r2, #174	@ 0xae
 80092ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00f      	beq.n	80092d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80092b8:	7bba      	ldrb	r2, [r7, #14]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092c0:	7bba      	ldrb	r2, [r7, #14]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	32ae      	adds	r2, #174	@ 0xae
 80092c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092d6:	e004      	b.n	80092e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092d8:	2303      	movs	r3, #3
 80092da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092dc:	e001      	b.n	80092e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092de:	2303      	movs	r3, #3
 80092e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	88db      	ldrh	r3, [r3, #6]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d110      	bne.n	800930c <USBD_StdItfReq+0xc0>
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10d      	bne.n	800930c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fddc 	bl	8009eae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092f6:	e009      	b.n	800930c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fcf9 	bl	8009cf2 <USBD_CtlError>
          break;
 8009300:	e004      	b.n	800930c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fcf4 	bl	8009cf2 <USBD_CtlError>
          break;
 800930a:	e000      	b.n	800930e <USBD_StdItfReq+0xc2>
          break;
 800930c:	bf00      	nop
      }
      break;
 800930e:	e004      	b.n	800931a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fced 	bl	8009cf2 <USBD_CtlError>
      break;
 8009318:	bf00      	nop
  }

  return ret;
 800931a:	7bfb      	ldrb	r3, [r7, #15]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	889b      	ldrh	r3, [r3, #4]
 8009336:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009340:	2b40      	cmp	r3, #64	@ 0x40
 8009342:	d007      	beq.n	8009354 <USBD_StdEPReq+0x30>
 8009344:	2b40      	cmp	r3, #64	@ 0x40
 8009346:	f200 8181 	bhi.w	800964c <USBD_StdEPReq+0x328>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d02a      	beq.n	80093a4 <USBD_StdEPReq+0x80>
 800934e:	2b20      	cmp	r3, #32
 8009350:	f040 817c 	bne.w	800964c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff fe84 	bl	8009066 <USBD_CoreFindEP>
 800935e:	4603      	mov	r3, r0
 8009360:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009362:	7b7b      	ldrb	r3, [r7, #13]
 8009364:	2bff      	cmp	r3, #255	@ 0xff
 8009366:	f000 8176 	beq.w	8009656 <USBD_StdEPReq+0x332>
 800936a:	7b7b      	ldrb	r3, [r7, #13]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f040 8172 	bne.w	8009656 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009372:	7b7a      	ldrb	r2, [r7, #13]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800937a:	7b7a      	ldrb	r2, [r7, #13]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	32ae      	adds	r2, #174	@ 0xae
 8009380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 8165 	beq.w	8009656 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800938c:	7b7a      	ldrb	r2, [r7, #13]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	32ae      	adds	r2, #174	@ 0xae
 8009392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	4798      	blx	r3
 800939e:	4603      	mov	r3, r0
 80093a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093a2:	e158      	b.n	8009656 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	785b      	ldrb	r3, [r3, #1]
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d008      	beq.n	80093be <USBD_StdEPReq+0x9a>
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	f300 8147 	bgt.w	8009640 <USBD_StdEPReq+0x31c>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f000 809b 	beq.w	80094ee <USBD_StdEPReq+0x1ca>
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d03c      	beq.n	8009436 <USBD_StdEPReq+0x112>
 80093bc:	e140      	b.n	8009640 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d002      	beq.n	80093d0 <USBD_StdEPReq+0xac>
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d016      	beq.n	80093fc <USBD_StdEPReq+0xd8>
 80093ce:	e02c      	b.n	800942a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <USBD_StdEPReq+0xce>
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	2b80      	cmp	r3, #128	@ 0x80
 80093da:	d00a      	beq.n	80093f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 fae1 	bl	800a9a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093e6:	2180      	movs	r1, #128	@ 0x80
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 fadd 	bl	800a9a8 <USBD_LL_StallEP>
 80093ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093f0:	e020      	b.n	8009434 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fc7c 	bl	8009cf2 <USBD_CtlError>
              break;
 80093fa:	e01b      	b.n	8009434 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	885b      	ldrh	r3, [r3, #2]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10e      	bne.n	8009422 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00b      	beq.n	8009422 <USBD_StdEPReq+0xfe>
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	2b80      	cmp	r3, #128	@ 0x80
 800940e:	d008      	beq.n	8009422 <USBD_StdEPReq+0xfe>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	88db      	ldrh	r3, [r3, #6]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d104      	bne.n	8009422 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 fac3 	bl	800a9a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fd43 	bl	8009eae <USBD_CtlSendStatus>

              break;
 8009428:	e004      	b.n	8009434 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fc60 	bl	8009cf2 <USBD_CtlError>
              break;
 8009432:	bf00      	nop
          }
          break;
 8009434:	e109      	b.n	800964a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b02      	cmp	r3, #2
 8009440:	d002      	beq.n	8009448 <USBD_StdEPReq+0x124>
 8009442:	2b03      	cmp	r3, #3
 8009444:	d016      	beq.n	8009474 <USBD_StdEPReq+0x150>
 8009446:	e04b      	b.n	80094e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00d      	beq.n	800946a <USBD_StdEPReq+0x146>
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2b80      	cmp	r3, #128	@ 0x80
 8009452:	d00a      	beq.n	800946a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009454:	7bbb      	ldrb	r3, [r7, #14]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 faa5 	bl	800a9a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800945e:	2180      	movs	r1, #128	@ 0x80
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 faa1 	bl	800a9a8 <USBD_LL_StallEP>
 8009466:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009468:	e040      	b.n	80094ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fc40 	bl	8009cf2 <USBD_CtlError>
              break;
 8009472:	e03b      	b.n	80094ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	885b      	ldrh	r3, [r3, #2]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d136      	bne.n	80094ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009486:	7bbb      	ldrb	r3, [r7, #14]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 faab 	bl	800a9e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fd0c 	bl	8009eae <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff fde3 	bl	8009066 <USBD_CoreFindEP>
 80094a0:	4603      	mov	r3, r0
 80094a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094a4:	7b7b      	ldrb	r3, [r7, #13]
 80094a6:	2bff      	cmp	r3, #255	@ 0xff
 80094a8:	d01f      	beq.n	80094ea <USBD_StdEPReq+0x1c6>
 80094aa:	7b7b      	ldrb	r3, [r7, #13]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d11c      	bne.n	80094ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80094b0:	7b7a      	ldrb	r2, [r7, #13]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80094b8:	7b7a      	ldrb	r2, [r7, #13]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	32ae      	adds	r2, #174	@ 0xae
 80094be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d010      	beq.n	80094ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094c8:	7b7a      	ldrb	r2, [r7, #13]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	32ae      	adds	r2, #174	@ 0xae
 80094ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	4798      	blx	r3
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094de:	e004      	b.n	80094ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fc05 	bl	8009cf2 <USBD_CtlError>
              break;
 80094e8:	e000      	b.n	80094ec <USBD_StdEPReq+0x1c8>
              break;
 80094ea:	bf00      	nop
          }
          break;
 80094ec:	e0ad      	b.n	800964a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d002      	beq.n	8009500 <USBD_StdEPReq+0x1dc>
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d033      	beq.n	8009566 <USBD_StdEPReq+0x242>
 80094fe:	e099      	b.n	8009634 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <USBD_StdEPReq+0x1f2>
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	2b80      	cmp	r3, #128	@ 0x80
 800950a:	d004      	beq.n	8009516 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fbef 	bl	8009cf2 <USBD_CtlError>
                break;
 8009514:	e093      	b.n	800963e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800951a:	2b00      	cmp	r3, #0
 800951c:	da0b      	bge.n	8009536 <USBD_StdEPReq+0x212>
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	3310      	adds	r3, #16
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	4413      	add	r3, r2
 8009532:	3304      	adds	r3, #4
 8009534:	e00b      	b.n	800954e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	4413      	add	r3, r2
 800954c:	3304      	adds	r3, #4
 800954e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2200      	movs	r2, #0
 8009554:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	330e      	adds	r3, #14
 800955a:	2202      	movs	r2, #2
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fc44 	bl	8009dec <USBD_CtlSendData>
              break;
 8009564:	e06b      	b.n	800963e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800956a:	2b00      	cmp	r3, #0
 800956c:	da11      	bge.n	8009592 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	f003 020f 	and.w	r2, r3, #15
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	3323      	adds	r3, #35	@ 0x23
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d117      	bne.n	80095b8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fbb1 	bl	8009cf2 <USBD_CtlError>
                  break;
 8009590:	e055      	b.n	800963e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	f003 020f 	and.w	r2, r3, #15
 8009598:	6879      	ldr	r1, [r7, #4]
 800959a:	4613      	mov	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	440b      	add	r3, r1
 80095a4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d104      	bne.n	80095b8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fb9e 	bl	8009cf2 <USBD_CtlError>
                  break;
 80095b6:	e042      	b.n	800963e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	da0b      	bge.n	80095d8 <USBD_StdEPReq+0x2b4>
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	3310      	adds	r3, #16
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	4413      	add	r3, r2
 80095d4:	3304      	adds	r3, #4
 80095d6:	e00b      	b.n	80095f0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	3304      	adds	r3, #4
 80095f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <USBD_StdEPReq+0x2da>
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b80      	cmp	r3, #128	@ 0x80
 80095fc:	d103      	bne.n	8009606 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2200      	movs	r2, #0
 8009602:	739a      	strb	r2, [r3, #14]
 8009604:	e00e      	b.n	8009624 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fa0a 	bl	800aa24 <USBD_LL_IsStallEP>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2201      	movs	r2, #1
 800961a:	739a      	strb	r2, [r3, #14]
 800961c:	e002      	b.n	8009624 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2200      	movs	r2, #0
 8009622:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	330e      	adds	r3, #14
 8009628:	2202      	movs	r2, #2
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fbdd 	bl	8009dec <USBD_CtlSendData>
              break;
 8009632:	e004      	b.n	800963e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fb5b 	bl	8009cf2 <USBD_CtlError>
              break;
 800963c:	bf00      	nop
          }
          break;
 800963e:	e004      	b.n	800964a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fb55 	bl	8009cf2 <USBD_CtlError>
          break;
 8009648:	bf00      	nop
      }
      break;
 800964a:	e005      	b.n	8009658 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fb4f 	bl	8009cf2 <USBD_CtlError>
      break;
 8009654:	e000      	b.n	8009658 <USBD_StdEPReq+0x334>
      break;
 8009656:	bf00      	nop
  }

  return ret;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	885b      	ldrh	r3, [r3, #2]
 800967e:	0a1b      	lsrs	r3, r3, #8
 8009680:	b29b      	uxth	r3, r3
 8009682:	3b01      	subs	r3, #1
 8009684:	2b06      	cmp	r3, #6
 8009686:	f200 8128 	bhi.w	80098da <USBD_GetDescriptor+0x276>
 800968a:	a201      	add	r2, pc, #4	@ (adr r2, 8009690 <USBD_GetDescriptor+0x2c>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	080096ad 	.word	0x080096ad
 8009694:	080096c5 	.word	0x080096c5
 8009698:	08009705 	.word	0x08009705
 800969c:	080098db 	.word	0x080098db
 80096a0:	080098db 	.word	0x080098db
 80096a4:	0800987b 	.word	0x0800987b
 80096a8:	080098a7 	.word	0x080098a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	7c12      	ldrb	r2, [r2, #16]
 80096b8:	f107 0108 	add.w	r1, r7, #8
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	60f8      	str	r0, [r7, #12]
      break;
 80096c2:	e112      	b.n	80098ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	7c1b      	ldrb	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10d      	bne.n	80096e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d4:	f107 0208 	add.w	r2, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	2202      	movs	r2, #2
 80096e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096e6:	e100      	b.n	80098ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f0:	f107 0208 	add.w	r2, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3301      	adds	r3, #1
 80096fe:	2202      	movs	r2, #2
 8009700:	701a      	strb	r2, [r3, #0]
      break;
 8009702:	e0f2      	b.n	80098ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	885b      	ldrh	r3, [r3, #2]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b05      	cmp	r3, #5
 800970c:	f200 80ac 	bhi.w	8009868 <USBD_GetDescriptor+0x204>
 8009710:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <USBD_GetDescriptor+0xb4>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	08009731 	.word	0x08009731
 800971c:	08009765 	.word	0x08009765
 8009720:	08009799 	.word	0x08009799
 8009724:	080097cd 	.word	0x080097cd
 8009728:	08009801 	.word	0x08009801
 800972c:	08009835 	.word	0x08009835
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00b      	beq.n	8009754 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	7c12      	ldrb	r2, [r2, #16]
 8009748:	f107 0108 	add.w	r1, r7, #8
 800974c:	4610      	mov	r0, r2
 800974e:	4798      	blx	r3
 8009750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009752:	e091      	b.n	8009878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 facb 	bl	8009cf2 <USBD_CtlError>
            err++;
 800975c:	7afb      	ldrb	r3, [r7, #11]
 800975e:	3301      	adds	r3, #1
 8009760:	72fb      	strb	r3, [r7, #11]
          break;
 8009762:	e089      	b.n	8009878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00b      	beq.n	8009788 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	7c12      	ldrb	r2, [r2, #16]
 800977c:	f107 0108 	add.w	r1, r7, #8
 8009780:	4610      	mov	r0, r2
 8009782:	4798      	blx	r3
 8009784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009786:	e077      	b.n	8009878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fab1 	bl	8009cf2 <USBD_CtlError>
            err++;
 8009790:	7afb      	ldrb	r3, [r7, #11]
 8009792:	3301      	adds	r3, #1
 8009794:	72fb      	strb	r3, [r7, #11]
          break;
 8009796:	e06f      	b.n	8009878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	7c12      	ldrb	r2, [r2, #16]
 80097b0:	f107 0108 	add.w	r1, r7, #8
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ba:	e05d      	b.n	8009878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fa97 	bl	8009cf2 <USBD_CtlError>
            err++;
 80097c4:	7afb      	ldrb	r3, [r7, #11]
 80097c6:	3301      	adds	r3, #1
 80097c8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ca:	e055      	b.n	8009878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	7c12      	ldrb	r2, [r2, #16]
 80097e4:	f107 0108 	add.w	r1, r7, #8
 80097e8:	4610      	mov	r0, r2
 80097ea:	4798      	blx	r3
 80097ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ee:	e043      	b.n	8009878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fa7d 	bl	8009cf2 <USBD_CtlError>
            err++;
 80097f8:	7afb      	ldrb	r3, [r7, #11]
 80097fa:	3301      	adds	r3, #1
 80097fc:	72fb      	strb	r3, [r7, #11]
          break;
 80097fe:	e03b      	b.n	8009878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	7c12      	ldrb	r2, [r2, #16]
 8009818:	f107 0108 	add.w	r1, r7, #8
 800981c:	4610      	mov	r0, r2
 800981e:	4798      	blx	r3
 8009820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009822:	e029      	b.n	8009878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fa63 	bl	8009cf2 <USBD_CtlError>
            err++;
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	3301      	adds	r3, #1
 8009830:	72fb      	strb	r3, [r7, #11]
          break;
 8009832:	e021      	b.n	8009878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	7c12      	ldrb	r2, [r2, #16]
 800984c:	f107 0108 	add.w	r1, r7, #8
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
 8009854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009856:	e00f      	b.n	8009878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fa49 	bl	8009cf2 <USBD_CtlError>
            err++;
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	3301      	adds	r3, #1
 8009864:	72fb      	strb	r3, [r7, #11]
          break;
 8009866:	e007      	b.n	8009878 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa41 	bl	8009cf2 <USBD_CtlError>
          err++;
 8009870:	7afb      	ldrb	r3, [r7, #11]
 8009872:	3301      	adds	r3, #1
 8009874:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009876:	bf00      	nop
      }
      break;
 8009878:	e037      	b.n	80098ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7c1b      	ldrb	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d109      	bne.n	8009896 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800988a:	f107 0208 	add.w	r2, r7, #8
 800988e:	4610      	mov	r0, r2
 8009890:	4798      	blx	r3
 8009892:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009894:	e029      	b.n	80098ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fa2a 	bl	8009cf2 <USBD_CtlError>
        err++;
 800989e:	7afb      	ldrb	r3, [r7, #11]
 80098a0:	3301      	adds	r3, #1
 80098a2:	72fb      	strb	r3, [r7, #11]
      break;
 80098a4:	e021      	b.n	80098ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	7c1b      	ldrb	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10d      	bne.n	80098ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b6:	f107 0208 	add.w	r2, r7, #8
 80098ba:	4610      	mov	r0, r2
 80098bc:	4798      	blx	r3
 80098be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3301      	adds	r3, #1
 80098c4:	2207      	movs	r2, #7
 80098c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098c8:	e00f      	b.n	80098ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fa10 	bl	8009cf2 <USBD_CtlError>
        err++;
 80098d2:	7afb      	ldrb	r3, [r7, #11]
 80098d4:	3301      	adds	r3, #1
 80098d6:	72fb      	strb	r3, [r7, #11]
      break;
 80098d8:	e007      	b.n	80098ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fa08 	bl	8009cf2 <USBD_CtlError>
      err++;
 80098e2:	7afb      	ldrb	r3, [r7, #11]
 80098e4:	3301      	adds	r3, #1
 80098e6:	72fb      	strb	r3, [r7, #11]
      break;
 80098e8:	bf00      	nop
  }

  if (err != 0U)
 80098ea:	7afb      	ldrb	r3, [r7, #11]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11e      	bne.n	800992e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	88db      	ldrh	r3, [r3, #6]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d016      	beq.n	8009926 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098f8:	893b      	ldrh	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00e      	beq.n	800991c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	88da      	ldrh	r2, [r3, #6]
 8009902:	893b      	ldrh	r3, [r7, #8]
 8009904:	4293      	cmp	r3, r2
 8009906:	bf28      	it	cs
 8009908:	4613      	movcs	r3, r2
 800990a:	b29b      	uxth	r3, r3
 800990c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800990e:	893b      	ldrh	r3, [r7, #8]
 8009910:	461a      	mov	r2, r3
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fa69 	bl	8009dec <USBD_CtlSendData>
 800991a:	e009      	b.n	8009930 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f9e7 	bl	8009cf2 <USBD_CtlError>
 8009924:	e004      	b.n	8009930 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fac1 	bl	8009eae <USBD_CtlSendStatus>
 800992c:	e000      	b.n	8009930 <USBD_GetDescriptor+0x2cc>
    return;
 800992e:	bf00      	nop
  }
}
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop

08009938 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	889b      	ldrh	r3, [r3, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d131      	bne.n	80099ae <USBD_SetAddress+0x76>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	88db      	ldrh	r3, [r3, #6]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d12d      	bne.n	80099ae <USBD_SetAddress+0x76>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	885b      	ldrh	r3, [r3, #2]
 8009956:	2b7f      	cmp	r3, #127	@ 0x7f
 8009958:	d829      	bhi.n	80099ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	885b      	ldrh	r3, [r3, #2]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009964:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b03      	cmp	r3, #3
 8009970:	d104      	bne.n	800997c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f9bc 	bl	8009cf2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997a:	e01d      	b.n	80099b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	7bfa      	ldrb	r2, [r7, #15]
 8009980:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 f877 	bl	800aa7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fa8d 	bl	8009eae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2202      	movs	r2, #2
 800999e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a2:	e009      	b.n	80099b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ac:	e004      	b.n	80099b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f99e 	bl	8009cf2 <USBD_CtlError>
  }
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	885b      	ldrh	r3, [r3, #2]
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	4b4e      	ldr	r3, [pc, #312]	@ (8009b10 <USBD_SetConfig+0x150>)
 80099d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099d8:	4b4d      	ldr	r3, [pc, #308]	@ (8009b10 <USBD_SetConfig+0x150>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d905      	bls.n	80099ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f985 	bl	8009cf2 <USBD_CtlError>
    return USBD_FAIL;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e08c      	b.n	8009b06 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d002      	beq.n	80099fe <USBD_SetConfig+0x3e>
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d029      	beq.n	8009a50 <USBD_SetConfig+0x90>
 80099fc:	e075      	b.n	8009aea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099fe:	4b44      	ldr	r3, [pc, #272]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d020      	beq.n	8009a48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a06:	4b42      	ldr	r3, [pc, #264]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a10:	4b3f      	ldr	r3, [pc, #252]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7fe ffcd 	bl	80089b6 <USBD_SetClassConfig>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d008      	beq.n	8009a38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f962 	bl	8009cf2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2202      	movs	r2, #2
 8009a32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a36:	e065      	b.n	8009b04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fa38 	bl	8009eae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2203      	movs	r2, #3
 8009a42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a46:	e05d      	b.n	8009b04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa30 	bl	8009eae <USBD_CtlSendStatus>
      break;
 8009a4e:	e059      	b.n	8009b04 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a50:	4b2f      	ldr	r3, [pc, #188]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d112      	bne.n	8009a7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a60:	4b2b      	ldr	r3, [pc, #172]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	461a      	mov	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a6a:	4b29      	ldr	r3, [pc, #164]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fe ffbc 	bl	80089ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa19 	bl	8009eae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a7c:	e042      	b.n	8009b04 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a7e:	4b24      	ldr	r3, [pc, #144]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d02a      	beq.n	8009ae2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7fe ffaa 	bl	80089ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7fe ff83 	bl	80089b6 <USBD_SetClassConfig>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00f      	beq.n	8009ada <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f918 	bl	8009cf2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7fe ff8f 	bl	80089ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ad8:	e014      	b.n	8009b04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f9e7 	bl	8009eae <USBD_CtlSendStatus>
      break;
 8009ae0:	e010      	b.n	8009b04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f9e3 	bl	8009eae <USBD_CtlSendStatus>
      break;
 8009ae8:	e00c      	b.n	8009b04 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f900 	bl	8009cf2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009af2:	4b07      	ldr	r3, [pc, #28]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7fe ff78 	bl	80089ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	73fb      	strb	r3, [r7, #15]
      break;
 8009b02:	bf00      	nop
  }

  return ret;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000480 	.word	0x20000480

08009b14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	88db      	ldrh	r3, [r3, #6]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d004      	beq.n	8009b30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f8e2 	bl	8009cf2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b2e:	e023      	b.n	8009b78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	dc02      	bgt.n	8009b42 <USBD_GetConfig+0x2e>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	dc03      	bgt.n	8009b48 <USBD_GetConfig+0x34>
 8009b40:	e015      	b.n	8009b6e <USBD_GetConfig+0x5a>
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d00b      	beq.n	8009b5e <USBD_GetConfig+0x4a>
 8009b46:	e012      	b.n	8009b6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3308      	adds	r3, #8
 8009b52:	2201      	movs	r2, #1
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f948 	bl	8009dec <USBD_CtlSendData>
        break;
 8009b5c:	e00c      	b.n	8009b78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3304      	adds	r3, #4
 8009b62:	2201      	movs	r2, #1
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f940 	bl	8009dec <USBD_CtlSendData>
        break;
 8009b6c:	e004      	b.n	8009b78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f8be 	bl	8009cf2 <USBD_CtlError>
        break;
 8009b76:	bf00      	nop
}
 8009b78:	bf00      	nop
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	3b01      	subs	r3, #1
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d81e      	bhi.n	8009bd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	88db      	ldrh	r3, [r3, #6]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d004      	beq.n	8009baa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f8a5 	bl	8009cf2 <USBD_CtlError>
        break;
 8009ba8:	e01a      	b.n	8009be0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f043 0202 	orr.w	r2, r3, #2
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	330c      	adds	r3, #12
 8009bca:	2202      	movs	r2, #2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f90c 	bl	8009dec <USBD_CtlSendData>
      break;
 8009bd4:	e004      	b.n	8009be0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f88a 	bl	8009cf2 <USBD_CtlError>
      break;
 8009bde:	bf00      	nop
  }
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d107      	bne.n	8009c0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f953 	bl	8009eae <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c08:	e013      	b.n	8009c32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d10b      	bne.n	8009c2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	889b      	ldrh	r3, [r3, #4]
 8009c16:	0a1b      	lsrs	r3, r3, #8
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f943 	bl	8009eae <USBD_CtlSendStatus>
}
 8009c28:	e003      	b.n	8009c32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f860 	bl	8009cf2 <USBD_CtlError>
}
 8009c32:	bf00      	nop
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d80b      	bhi.n	8009c6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	885b      	ldrh	r3, [r3, #2]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d10c      	bne.n	8009c74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f923 	bl	8009eae <USBD_CtlSendStatus>
      }
      break;
 8009c68:	e004      	b.n	8009c74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f840 	bl	8009cf2 <USBD_CtlError>
      break;
 8009c72:	e000      	b.n	8009c76 <USBD_ClrFeature+0x3c>
      break;
 8009c74:	bf00      	nop
  }
}
 8009c76:	bf00      	nop
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	781a      	ldrb	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3301      	adds	r3, #1
 8009c98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fa3d 	bl	8009128 <SWAPBYTE>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7ff fa30 	bl	8009128 <SWAPBYTE>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff fa23 	bl	8009128 <SWAPBYTE>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	80da      	strh	r2, [r3, #6]
}
 8009cea:	bf00      	nop
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cfc:	2180      	movs	r1, #128	@ 0x80
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fe52 	bl	800a9a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d04:	2100      	movs	r1, #0
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fe4e 	bl	800a9a8 <USBD_LL_StallEP>
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d042      	beq.n	8009db0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009d2e:	6938      	ldr	r0, [r7, #16]
 8009d30:	f000 f842 	bl	8009db8 <USBD_GetLen>
 8009d34:	4603      	mov	r3, r0
 8009d36:	3301      	adds	r3, #1
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d3e:	d808      	bhi.n	8009d52 <USBD_GetString+0x3e>
 8009d40:	6938      	ldr	r0, [r7, #16]
 8009d42:	f000 f839 	bl	8009db8 <USBD_GetLen>
 8009d46:	4603      	mov	r3, r0
 8009d48:	3301      	adds	r3, #1
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	e001      	b.n	8009d56 <USBD_GetString+0x42>
 8009d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	4413      	add	r3, r2
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7812      	ldrb	r2, [r2, #0]
 8009d64:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	4413      	add	r3, r2
 8009d72:	2203      	movs	r2, #3
 8009d74:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d7c:	e013      	b.n	8009da6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	4413      	add	r3, r2
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	7812      	ldrb	r2, [r2, #0]
 8009d88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	613b      	str	r3, [r7, #16]
    idx++;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	3301      	adds	r3, #1
 8009d94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	3301      	adds	r3, #1
 8009da4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e7      	bne.n	8009d7e <USBD_GetString+0x6a>
 8009dae:	e000      	b.n	8009db2 <USBD_GetString+0x9e>
    return;
 8009db0:	bf00      	nop
  }
}
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009dc8:	e005      	b.n	8009dd6 <USBD_GetLen+0x1e>
  {
    len++;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1f5      	bne.n	8009dca <USBD_GetLen+0x12>
  }

  return len;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	2100      	movs	r1, #0
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 fe4e 	bl	800aaba <USBD_LL_Transmit>

  return USBD_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	2100      	movs	r1, #0
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 fe3d 	bl	800aaba <USBD_LL_Transmit>

  return USBD_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2203      	movs	r2, #3
 8009e5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 fe3d 	bl	800aafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 fe2c 	bl	800aafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2204      	movs	r2, #4
 8009eba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fdf8 	bl	800aaba <USBD_LL_Transmit>

  return USBD_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2205      	movs	r2, #5
 8009ee0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fe06 	bl	800aafc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <shtc3_init>:
/* Exported functions definitions --------------------------------------------*/
/**
 * @brief Function to initialize a SHTC3 instance
 */
int shtc3_init(shtc3_t *const me, void *i2c_handle, uint8_t dev_addr)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b087      	sub	sp, #28
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	4613      	mov	r3, r2
 8009f06:	71fb      	strb	r3, [r7, #7]
	/* Variable to return error code */
	int ret = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	617b      	str	r3, [r7, #20]
	me->i2c_dev.handle = (I2C_HandleTypeDef *)i2c_handle;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	605a      	str	r2, [r3, #4]
	me->i2c_dev.addr = dev_addr;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	79fa      	ldrb	r2, [r7, #7]
 8009f16:	701a      	strb	r2, [r3, #0]
	me->id = 0;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	811a      	strh	r2, [r3, #8]
	me->state = SHTC3_IDLE;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	729a      	strb	r2, [r3, #10]

	/* Return 0 */
	return ret;
 8009f24:	697b      	ldr	r3, [r7, #20]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	371c      	adds	r7, #28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <shtc3_get_id>:

/**
 * @brief Function to get the device ID
 */
int shtc3_get_id(shtc3_t *const me)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
	me->id = 0;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	811a      	strh	r2, [r3, #8]

	/* Variable to return error code */
	int ret = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_READ_ID, &me->i2c_dev);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f64e 70c8 	movw	r0, #61384	@ 0xefc8
 8009f4c:	f000 f8ef 	bl	800a12e <shtc3_reg_write>

	uint8_t data[3] = {0};
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	2100      	movs	r1, #0
 8009f56:	460a      	mov	r2, r1
 8009f58:	801a      	strh	r2, [r3, #0]
 8009f5a:	460a      	mov	r2, r1
 8009f5c:	709a      	strb	r2, [r3, #2]
	shtc3_reg_read(data, 3, &me->i2c_dev);
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	f107 0308 	add.w	r3, r7, #8
 8009f64:	2103      	movs	r1, #3
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 f8bc 	bl	800a0e4 <shtc3_reg_read>

	/* Check data received CRC */
	if (!check_crc(data, 2, data[2])) {
 8009f6c:	7aba      	ldrb	r2, [r7, #10]
 8009f6e:	f107 0308 	add.w	r3, r7, #8
 8009f72:	2102      	movs	r1, #2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 f940 	bl	800a1fa <check_crc>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f083 0301 	eor.w	r3, r3, #1
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <shtc3_get_id+0x5a>
		return -1;
 8009f86:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8a:	e00b      	b.n	8009fa4 <shtc3_get_id+0x72>
	}

	me->id = data[0] << 8 | data[1];
 8009f8c:	7a3b      	ldrb	r3, [r7, #8]
 8009f8e:	b21b      	sxth	r3, r3
 8009f90:	021b      	lsls	r3, r3, #8
 8009f92:	b21a      	sxth	r2, r3
 8009f94:	7a7b      	ldrb	r3, [r7, #9]
 8009f96:	b21b      	sxth	r3, r3
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	b21b      	sxth	r3, r3
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	811a      	strh	r2, [r3, #8]

	/* Return 0 */
	return ret;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <shtc3_raw_write_temp_and_hum>:
	/* Return 0 */
	return ret;
}

int shtc3_raw_write_temp_and_hum(shtc3_t *const me)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60fb      	str	r3, [r7, #12]

	shtc3_wakeup(me);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f87f 	bl	800a0bc <shtc3_wakeup>

	ret = shtc3_reg_write(SHTC3_CMD_MEAS_T_RH_POLLING_NM, &me->i2c_dev);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	f647 0066 	movw	r0, #30822	@ 0x7866
 8009fc6:	f000 f8b2 	bl	800a12e <shtc3_reg_write>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	60fb      	str	r3, [r7, #12]

	return ret;
 8009fce:	68fb      	ldr	r3, [r7, #12]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <shtc3_raw_read_temp_and_hum>:

int shtc3_raw_read_temp_and_hum(shtc3_t *const me)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	617b      	str	r3, [r7, #20]

	uint8_t data[6] = {0};
 8009fe4:	f107 030c 	add.w	r3, r7, #12
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	809a      	strh	r2, [r3, #4]
	ret = shtc3_reg_read(data, 6, &me->i2c_dev);
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	2106      	movs	r1, #6
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 f874 	bl	800a0e4 <shtc3_reg_read>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	617b      	str	r3, [r7, #20]
	if(0 != ret) {return ret;}
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <shtc3_raw_read_temp_and_hum+0x32>
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	e043      	b.n	800a092 <shtc3_raw_read_temp_and_hum+0xba>

	/* Check data received CRC */
	if (!check_crc(&data[0], 2, data[2])) {
 800a00a:	7bba      	ldrb	r2, [r7, #14]
 800a00c:	f107 030c 	add.w	r3, r7, #12
 800a010:	2102      	movs	r1, #2
 800a012:	4618      	mov	r0, r3
 800a014:	f000 f8f1 	bl	800a1fa <check_crc>
 800a018:	4603      	mov	r3, r0
 800a01a:	f083 0301 	eor.w	r3, r3, #1
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <shtc3_raw_read_temp_and_hum+0x52>
		return -1;
 800a024:	f04f 33ff 	mov.w	r3, #4294967295
 800a028:	e033      	b.n	800a092 <shtc3_raw_read_temp_and_hum+0xba>
	}

	if (!check_crc(&data[3], 2, data[5])) {
 800a02a:	7c7a      	ldrb	r2, [r7, #17]
 800a02c:	f107 030c 	add.w	r3, r7, #12
 800a030:	3303      	adds	r3, #3
 800a032:	2102      	movs	r1, #2
 800a034:	4618      	mov	r0, r3
 800a036:	f000 f8e0 	bl	800a1fa <check_crc>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f083 0301 	eor.w	r3, r3, #1
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <shtc3_raw_read_temp_and_hum+0x74>
		return -1;
 800a046:	f04f 33ff 	mov.w	r3, #4294967295
 800a04a:	e022      	b.n	800a092 <shtc3_raw_read_temp_and_hum+0xba>
	}

	me->temp = calc_temp((uint16_t)((data[0] << 8) | (data[1])));
 800a04c:	7b3b      	ldrb	r3, [r7, #12]
 800a04e:	b21b      	sxth	r3, r3
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	b21a      	sxth	r2, r3
 800a054:	7b7b      	ldrb	r3, [r7, #13]
 800a056:	b21b      	sxth	r3, r3
 800a058:	4313      	orrs	r3, r2
 800a05a:	b21b      	sxth	r3, r3
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 f8e4 	bl	800a22c <calc_temp>
 800a064:	eef0 7a40 	vmov.f32	s15, s0
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	edc3 7a03 	vstr	s15, [r3, #12]
	me->hum = calc_hum((uint16_t)((data[3] << 8) | (data[4])));
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	b21b      	sxth	r3, r3
 800a072:	021b      	lsls	r3, r3, #8
 800a074:	b21a      	sxth	r2, r3
 800a076:	7c3b      	ldrb	r3, [r7, #16]
 800a078:	b21b      	sxth	r3, r3
 800a07a:	4313      	orrs	r3, r2
 800a07c:	b21b      	sxth	r3, r3
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4618      	mov	r0, r3
 800a082:	f000 f8f7 	bl	800a274 <calc_hum>
 800a086:	eef0 7a40 	vmov.f32	s15, s0
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	edc3 7a04 	vstr	s15, [r3, #16]

	/* Return 0 */
	return ret;
 800a090:	697b      	ldr	r3, [r7, #20]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <shtc3_sleep>:

/**
 * @brief Function to put the device in sleep mode
 */
int shtc3_sleep(shtc3_t *const me)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_SLEEP, &me->i2c_dev);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	f24b 0098 	movw	r0, #45208	@ 0xb098
 800a0ae:	f000 f83e 	bl	800a12e <shtc3_reg_write>

	/* Return 0 */
	return ret;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <shtc3_wakeup>:

/**
 * @brief Function to wakeup the device from sleep mode
 */
int shtc3_wakeup(shtc3_t *const me)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
	/* Variable to return error code */
	int ret = 0;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]

	shtc3_reg_write(SHTC3_CMD_WAKEUP, &me->i2c_dev);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	f243 5017 	movw	r0, #13591	@ 0x3517
 800a0d0:	f000 f82d 	bl	800a12e <shtc3_reg_write>

	HAL_Delay(1);
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	f7f8 fdf3 	bl	8002cc0 <HAL_Delay>

	/* Return 0 */
	return ret;
 800a0da:	68fb      	ldr	r3, [r7, #12]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <shtc3_reg_read>:
/* Private function definitions ----------------------------------------------*/
/**
 * @brief Function that implements the default I2C read transaction
 */
static int8_t shtc3_reg_read(uint8_t *data, uint32_t data_len, void *intf)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Receive(i2c_dev->handle, (i2c_dev->addr << 1) | 0x01,
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	6858      	ldr	r0, [r3, #4]
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b21b      	sxth	r3, r3
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	b21b      	sxth	r3, r3
 800a102:	f043 0301 	orr.w	r3, r3, #1
 800a106:	b21b      	sxth	r3, r3
 800a108:	b299      	uxth	r1, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	220a      	movs	r2, #10
 800a110:	9200      	str	r2, [sp, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	f7f9 fb04 	bl	8003720 <HAL_I2C_Master_Receive>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <shtc3_reg_read+0x40>
			data, data_len, 10) > 0) {
		return -1;
 800a11e:	f04f 33ff 	mov.w	r3, #4294967295
 800a122:	e000      	b.n	800a126 <shtc3_reg_read+0x42>
	}

	return 0;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <shtc3_reg_write>:

/**
 * @brief Function that implements the default I2C write transaction
 */
static int8_t shtc3_reg_write(uint16_t data, void *intf)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b088      	sub	sp, #32
 800a132:	af02      	add	r7, sp, #8
 800a134:	4603      	mov	r3, r0
 800a136:	6039      	str	r1, [r7, #0]
 800a138:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 800a13a:	f107 030c 	add.w	r3, r7, #12
 800a13e:	2200      	movs	r2, #0
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	605a      	str	r2, [r3, #4]
			(uint8_t)((data >> 8) & 0xFF),
 800a144:	88fb      	ldrh	r3, [r7, #6]
 800a146:	0a1b      	lsrs	r3, r3, #8
 800a148:	b29b      	uxth	r3, r3
 800a14a:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 800a14c:	733b      	strb	r3, [r7, #12]
			(uint8_t)(data & 0xFF)
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	b2db      	uxtb	r3, r3
	uint8_t buffer[SHTC3_I2C_BUFFER_LEN_MAX] = {
 800a152:	737b      	strb	r3, [r7, #13]
	};

	/* Transmit buffer */
	shtc3_i2c_t *i2c_dev = (shtc3_i2c_t *)intf;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	617b      	str	r3, [r7, #20]

	if (HAL_I2C_Master_Transmit(i2c_dev->handle, i2c_dev->addr << 1, buffer, 2,
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6858      	ldr	r0, [r3, #4]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	b299      	uxth	r1, r3
 800a164:	f107 020c 	add.w	r2, r7, #12
 800a168:	2364      	movs	r3, #100	@ 0x64
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	2302      	movs	r3, #2
 800a16e:	f7f9 f9d9 	bl	8003524 <HAL_I2C_Master_Transmit>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <shtc3_reg_write+0x50>
			100)) {
		return -1;
 800a178:	f04f 33ff 	mov.w	r3, #4294967295
 800a17c:	e000      	b.n	800a180 <shtc3_reg_write+0x52>
	}

	return 0;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <generate_crc>:

/**
 * @brief Function that generates a CRC byte for a given data
 */
static uint8_t generate_crc(const uint8_t *data, uint16_t count) {
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	807b      	strh	r3, [r7, #2]
  uint16_t current_byte;
  uint8_t crc = CRC8_INIT;
 800a194:	23ff      	movs	r3, #255	@ 0xff
 800a196:	737b      	strb	r3, [r7, #13]
  uint8_t crc_bit;

  /* calculates 8-Bit checksum with given polynomial */
  for (current_byte = 0; current_byte < count; ++current_byte) {
 800a198:	2300      	movs	r3, #0
 800a19a:	81fb      	strh	r3, [r7, #14]
 800a19c:	e022      	b.n	800a1e4 <generate_crc+0x5c>
  	crc ^= (data[current_byte]);
 800a19e:	89fb      	ldrh	r3, [r7, #14]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	781a      	ldrb	r2, [r3, #0]
 800a1a6:	7b7b      	ldrb	r3, [r7, #13]
 800a1a8:	4053      	eors	r3, r2
 800a1aa:	737b      	strb	r3, [r7, #13]

  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a1ac:	2308      	movs	r3, #8
 800a1ae:	733b      	strb	r3, [r7, #12]
 800a1b0:	e012      	b.n	800a1d8 <generate_crc+0x50>
  		if (crc & 0x80) {
 800a1b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	da08      	bge.n	800a1cc <generate_crc+0x44>
  			crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800a1ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	b25b      	sxtb	r3, r3
 800a1c2:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 800a1c6:	b25b      	sxtb	r3, r3
 800a1c8:	737b      	strb	r3, [r7, #13]
 800a1ca:	e002      	b.n	800a1d2 <generate_crc+0x4a>
  		}
  		else {
  			crc = (crc << 1);
 800a1cc:	7b7b      	ldrb	r3, [r7, #13]
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	737b      	strb	r3, [r7, #13]
  	for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a1d2:	7b3b      	ldrb	r3, [r7, #12]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	733b      	strb	r3, [r7, #12]
 800a1d8:	7b3b      	ldrb	r3, [r7, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1e9      	bne.n	800a1b2 <generate_crc+0x2a>
  for (current_byte = 0; current_byte < count; ++current_byte) {
 800a1de:	89fb      	ldrh	r3, [r7, #14]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	81fb      	strh	r3, [r7, #14]
 800a1e4:	89fa      	ldrh	r2, [r7, #14]
 800a1e6:	887b      	ldrh	r3, [r7, #2]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d3d8      	bcc.n	800a19e <generate_crc+0x16>
  		}
  	}
  }
  return crc;
 800a1ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <check_crc>:

/**
 * @brief Function that checks the CRC for the received data
 */
static bool check_crc(const uint8_t *data, uint16_t count, uint8_t checksum) {
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	460b      	mov	r3, r1
 800a204:	807b      	strh	r3, [r7, #2]
 800a206:	4613      	mov	r3, r2
 800a208:	707b      	strb	r3, [r7, #1]
	if (generate_crc(data, count) != checksum) {
 800a20a:	887b      	ldrh	r3, [r7, #2]
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff ffba 	bl	800a188 <generate_crc>
 800a214:	4603      	mov	r3, r0
 800a216:	461a      	mov	r2, r3
 800a218:	787b      	ldrb	r3, [r7, #1]
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d001      	beq.n	800a222 <check_crc+0x28>
		return false;
 800a21e:	2300      	movs	r3, #0
 800a220:	e000      	b.n	800a224 <check_crc+0x2a>
	}

	return true;
 800a222:	2301      	movs	r3, #1
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <calc_temp>:

static float calc_temp(uint16_t raw_temp)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	80fb      	strh	r3, [r7, #6]
	return 175 * (float)raw_temp / 65536.0f - 45.0f;
 800a236:	88fb      	ldrh	r3, [r7, #6]
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a240:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800a268 <calc_temp+0x3c>
 800a244:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a248:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800a26c <calc_temp+0x40>
 800a24c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a250:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a270 <calc_temp+0x44>
 800a254:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800a258:	eeb0 0a67 	vmov.f32	s0, s15
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	432f0000 	.word	0x432f0000
 800a26c:	47800000 	.word	0x47800000
 800a270:	42340000 	.word	0x42340000

0800a274 <calc_hum>:

static float calc_hum(uint16_t raw_hum)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	80fb      	strh	r3, [r7, #6]
	return 100 * (float)raw_hum / 65536.0f;
 800a27e:	88fb      	ldrh	r3, [r7, #6]
 800a280:	ee07 3a90 	vmov	s15, r3
 800a284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a288:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800a2ac <calc_hum+0x38>
 800a28c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a290:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a2b0 <calc_hum+0x3c>
 800a294:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a298:	eef0 7a66 	vmov.f32	s15, s13
}
 800a29c:	eeb0 0a67 	vmov.f32	s0, s15
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	42c80000 	.word	0x42c80000
 800a2b0:	47800000 	.word	0x47800000

0800a2b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	4912      	ldr	r1, [pc, #72]	@ (800a304 <MX_USB_DEVICE_Init+0x50>)
 800a2bc:	4812      	ldr	r0, [pc, #72]	@ (800a308 <MX_USB_DEVICE_Init+0x54>)
 800a2be:	f7fe fafd 	bl	80088bc <USBD_Init>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2c8:	f7f8 faa0 	bl	800280c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a2cc:	490f      	ldr	r1, [pc, #60]	@ (800a30c <MX_USB_DEVICE_Init+0x58>)
 800a2ce:	480e      	ldr	r0, [pc, #56]	@ (800a308 <MX_USB_DEVICE_Init+0x54>)
 800a2d0:	f7fe fb24 	bl	800891c <USBD_RegisterClass>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2da:	f7f8 fa97 	bl	800280c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a2de:	490c      	ldr	r1, [pc, #48]	@ (800a310 <MX_USB_DEVICE_Init+0x5c>)
 800a2e0:	4809      	ldr	r0, [pc, #36]	@ (800a308 <MX_USB_DEVICE_Init+0x54>)
 800a2e2:	f7fe fad1 	bl	8008888 <USBD_CUSTOM_HID_RegisterInterface>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2ec:	f7f8 fa8e 	bl	800280c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2f0:	4805      	ldr	r0, [pc, #20]	@ (800a308 <MX_USB_DEVICE_Init+0x54>)
 800a2f2:	f7fe fb49 	bl	8008988 <USBD_Start>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2fc:	f7f8 fa86 	bl	800280c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a300:	bf00      	nop
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200000b4 	.word	0x200000b4
 800a308:	20000484 	.word	0x20000484
 800a30c:	2000000c 	.word	0x2000000c
 800a310:	200000a4 	.word	0x200000a4

0800a314 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPIN_SIZE);  // IN
 800a318:	2340      	movs	r3, #64	@ 0x40
 800a31a:	2203      	movs	r2, #3
 800a31c:	2181      	movs	r1, #129	@ 0x81
 800a31e:	4806      	ldr	r0, [pc, #24]	@ (800a338 <CUSTOM_HID_Init_FS+0x24>)
 800a320:	f000 fafd 	bl	800a91e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, CUSTOM_HID_EPOUT_SIZE); // OUT
 800a324:	2340      	movs	r3, #64	@ 0x40
 800a326:	2203      	movs	r2, #3
 800a328:	2101      	movs	r1, #1
 800a32a:	4803      	ldr	r0, [pc, #12]	@ (800a338 <CUSTOM_HID_Init_FS+0x24>)
 800a32c:	f000 faf7 	bl	800a91e <USBD_LL_OpenEP>
  return (USBD_OK);
 800a330:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a332:	4618      	mov	r0, r3
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20000484 	.word	0x20000484

0800a33c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a33c:	b480      	push	{r7}
 800a33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPIN_ADDR);
//  USBD_LL_CloseEP(&hUsbDeviceFS, CUSTOM_HID_EPOUT_ADDR);
  return (USBD_OK);
 800a340:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a342:	4618      	mov	r0, r3
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *buffer)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800a354:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a358:	480e      	ldr	r0, [pc, #56]	@ (800a394 <CUSTOM_HID_OutEvent_FS+0x48>)
 800a35a:	f7f8 ff84 	bl	8003266 <HAL_GPIO_TogglePin>

  usb_copy_buffer(buffer, 64);
 800a35e:	2140      	movs	r1, #64	@ 0x40
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7f7 ff85 	bl	8002270 <usb_copy_buffer>

  memset(buffer, 0, strlen(buffer));
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7f5 ff8a 	bl	8000280 <strlen>
 800a36c:	4603      	mov	r3, r0
 800a36e:	461a      	mov	r2, r3
 800a370:	2100      	movs	r1, #0
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f001 fa1d 	bl	800b7b2 <memset>

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800a378:	4807      	ldr	r0, [pc, #28]	@ (800a398 <CUSTOM_HID_OutEvent_FS+0x4c>)
 800a37a:	f7fe fa25 	bl	80087c8 <USBD_CUSTOM_HID_ReceivePacket>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <CUSTOM_HID_OutEvent_FS+0x3e>
  {
    return -1;
 800a384:	f04f 33ff 	mov.w	r3, #4294967295
 800a388:	e000      	b.n	800a38c <CUSTOM_HID_OutEvent_FS+0x40>
  }

  return (USBD_OK);
 800a38a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	40020c00 	.word	0x40020c00
 800a398:	20000484 	.word	0x20000484

0800a39c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	6039      	str	r1, [r7, #0]
 800a3a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2212      	movs	r2, #18
 800a3ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3ae:	4b03      	ldr	r3, [pc, #12]	@ (800a3bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	200000d0 	.word	0x200000d0

0800a3c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	6039      	str	r1, [r7, #0]
 800a3ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2204      	movs	r2, #4
 800a3d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3d2:	4b03      	ldr	r3, [pc, #12]	@ (800a3e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	200000e4 	.word	0x200000e4

0800a3e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3f0:	79fb      	ldrb	r3, [r7, #7]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d105      	bne.n	800a402 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	4907      	ldr	r1, [pc, #28]	@ (800a418 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3fa:	4808      	ldr	r0, [pc, #32]	@ (800a41c <USBD_FS_ProductStrDescriptor+0x38>)
 800a3fc:	f7ff fc8a 	bl	8009d14 <USBD_GetString>
 800a400:	e004      	b.n	800a40c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	4904      	ldr	r1, [pc, #16]	@ (800a418 <USBD_FS_ProductStrDescriptor+0x34>)
 800a406:	4805      	ldr	r0, [pc, #20]	@ (800a41c <USBD_FS_ProductStrDescriptor+0x38>)
 800a408:	f7ff fc84 	bl	8009d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a40c:	4b02      	ldr	r3, [pc, #8]	@ (800a418 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000760 	.word	0x20000760
 800a41c:	0800db5c 	.word	0x0800db5c

0800a420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	4904      	ldr	r1, [pc, #16]	@ (800a440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a430:	4804      	ldr	r0, [pc, #16]	@ (800a444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a432:	f7ff fc6f 	bl	8009d14 <USBD_GetString>
  return USBD_StrDesc;
 800a436:	4b02      	ldr	r3, [pc, #8]	@ (800a440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20000760 	.word	0x20000760
 800a444:	0800db6c 	.word	0x0800db6c

0800a448 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	6039      	str	r1, [r7, #0]
 800a452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	221a      	movs	r2, #26
 800a458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a45a:	f000 f843 	bl	800a4e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a45e:	4b02      	ldr	r3, [pc, #8]	@ (800a468 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	200000e8 	.word	0x200000e8

0800a46c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	6039      	str	r1, [r7, #0]
 800a476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d105      	bne.n	800a48a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	4907      	ldr	r1, [pc, #28]	@ (800a4a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a482:	4808      	ldr	r0, [pc, #32]	@ (800a4a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a484:	f7ff fc46 	bl	8009d14 <USBD_GetString>
 800a488:	e004      	b.n	800a494 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	4904      	ldr	r1, [pc, #16]	@ (800a4a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a48e:	4805      	ldr	r0, [pc, #20]	@ (800a4a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a490:	f7ff fc40 	bl	8009d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a494:	4b02      	ldr	r3, [pc, #8]	@ (800a4a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a496:	4618      	mov	r0, r3
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	20000760 	.word	0x20000760
 800a4a4:	0800db80 	.word	0x0800db80

0800a4a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	6039      	str	r1, [r7, #0]
 800a4b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4b4:	79fb      	ldrb	r3, [r7, #7]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d105      	bne.n	800a4c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	4907      	ldr	r1, [pc, #28]	@ (800a4dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4be:	4808      	ldr	r0, [pc, #32]	@ (800a4e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4c0:	f7ff fc28 	bl	8009d14 <USBD_GetString>
 800a4c4:	e004      	b.n	800a4d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	4904      	ldr	r1, [pc, #16]	@ (800a4dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4ca:	4805      	ldr	r0, [pc, #20]	@ (800a4e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4cc:	f7ff fc22 	bl	8009d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4d0:	4b02      	ldr	r3, [pc, #8]	@ (800a4dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000760 	.word	0x20000760
 800a4e0:	0800db94 	.word	0x0800db94

0800a4e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a528 <Get_SerialNum+0x44>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a52c <Get_SerialNum+0x48>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a530 <Get_SerialNum+0x4c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4413      	add	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d009      	beq.n	800a51e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a50a:	2208      	movs	r2, #8
 800a50c:	4909      	ldr	r1, [pc, #36]	@ (800a534 <Get_SerialNum+0x50>)
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 f814 	bl	800a53c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a514:	2204      	movs	r2, #4
 800a516:	4908      	ldr	r1, [pc, #32]	@ (800a538 <Get_SerialNum+0x54>)
 800a518:	68b8      	ldr	r0, [r7, #8]
 800a51a:	f000 f80f 	bl	800a53c <IntToUnicode>
  }
}
 800a51e:	bf00      	nop
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	1fff7a10 	.word	0x1fff7a10
 800a52c:	1fff7a14 	.word	0x1fff7a14
 800a530:	1fff7a18 	.word	0x1fff7a18
 800a534:	200000ea 	.word	0x200000ea
 800a538:	200000fa 	.word	0x200000fa

0800a53c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	4613      	mov	r3, r2
 800a548:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a54e:	2300      	movs	r3, #0
 800a550:	75fb      	strb	r3, [r7, #23]
 800a552:	e027      	b.n	800a5a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	0f1b      	lsrs	r3, r3, #28
 800a558:	2b09      	cmp	r3, #9
 800a55a:	d80b      	bhi.n	800a574 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	0f1b      	lsrs	r3, r3, #28
 800a560:	b2da      	uxtb	r2, r3
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	4619      	mov	r1, r3
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	440b      	add	r3, r1
 800a56c:	3230      	adds	r2, #48	@ 0x30
 800a56e:	b2d2      	uxtb	r2, r2
 800a570:	701a      	strb	r2, [r3, #0]
 800a572:	e00a      	b.n	800a58a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	0f1b      	lsrs	r3, r3, #28
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	4619      	mov	r1, r3
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	440b      	add	r3, r1
 800a584:	3237      	adds	r2, #55	@ 0x37
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	011b      	lsls	r3, r3, #4
 800a58e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a590:	7dfb      	ldrb	r3, [r7, #23]
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	3301      	adds	r3, #1
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	4413      	add	r3, r2
 800a59a:	2200      	movs	r2, #0
 800a59c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	75fb      	strb	r3, [r7, #23]
 800a5a4:	7dfa      	ldrb	r2, [r7, #23]
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d3d3      	bcc.n	800a554 <IntToUnicode+0x18>
  }
}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	371c      	adds	r7, #28
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
	...

0800a5bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	@ 0x28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5c4:	f107 0314 	add.w	r3, r7, #20
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]
 800a5cc:	605a      	str	r2, [r3, #4]
 800a5ce:	609a      	str	r2, [r3, #8]
 800a5d0:	60da      	str	r2, [r3, #12]
 800a5d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5dc:	d147      	bne.n	800a66e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5de:	2300      	movs	r3, #0
 800a5e0:	613b      	str	r3, [r7, #16]
 800a5e2:	4b25      	ldr	r3, [pc, #148]	@ (800a678 <HAL_PCD_MspInit+0xbc>)
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e6:	4a24      	ldr	r2, [pc, #144]	@ (800a678 <HAL_PCD_MspInit+0xbc>)
 800a5e8:	f043 0301 	orr.w	r3, r3, #1
 800a5ec:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5ee:	4b22      	ldr	r3, [pc, #136]	@ (800a678 <HAL_PCD_MspInit+0xbc>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	613b      	str	r3, [r7, #16]
 800a5f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a5fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a600:	2300      	movs	r3, #0
 800a602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a608:	f107 0314 	add.w	r3, r7, #20
 800a60c:	4619      	mov	r1, r3
 800a60e:	481b      	ldr	r0, [pc, #108]	@ (800a67c <HAL_PCD_MspInit+0xc0>)
 800a610:	f7f8 fc8c 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a614:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a61a:	2302      	movs	r3, #2
 800a61c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a622:	2303      	movs	r3, #3
 800a624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a626:	230a      	movs	r3, #10
 800a628:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a62a:	f107 0314 	add.w	r3, r7, #20
 800a62e:	4619      	mov	r1, r3
 800a630:	4812      	ldr	r0, [pc, #72]	@ (800a67c <HAL_PCD_MspInit+0xc0>)
 800a632:	f7f8 fc7b 	bl	8002f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a636:	4b10      	ldr	r3, [pc, #64]	@ (800a678 <HAL_PCD_MspInit+0xbc>)
 800a638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63a:	4a0f      	ldr	r2, [pc, #60]	@ (800a678 <HAL_PCD_MspInit+0xbc>)
 800a63c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a640:	6353      	str	r3, [r2, #52]	@ 0x34
 800a642:	2300      	movs	r3, #0
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	4b0c      	ldr	r3, [pc, #48]	@ (800a678 <HAL_PCD_MspInit+0xbc>)
 800a648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a64a:	4a0b      	ldr	r2, [pc, #44]	@ (800a678 <HAL_PCD_MspInit+0xbc>)
 800a64c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a650:	6453      	str	r3, [r2, #68]	@ 0x44
 800a652:	4b09      	ldr	r3, [pc, #36]	@ (800a678 <HAL_PCD_MspInit+0xbc>)
 800a654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	2043      	movs	r0, #67	@ 0x43
 800a664:	f7f8 fc2b 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a668:	2043      	movs	r0, #67	@ 0x43
 800a66a:	f7f8 fc44 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a66e:	bf00      	nop
 800a670:	3728      	adds	r7, #40	@ 0x28
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	40023800 	.word	0x40023800
 800a67c:	40020000 	.word	0x40020000

0800a680 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f7fe f9c3 	bl	8008a22 <USBD_LL_SetupStage>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	00db      	lsls	r3, r3, #3
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	f7fe f9fd 	bl	8008acc <USBD_LL_DataOutStage>
}
 800a6d2:	bf00      	nop
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6ec:	78fa      	ldrb	r2, [r7, #3]
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	440b      	add	r3, r1
 800a6fa:	3320      	adds	r3, #32
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	4619      	mov	r1, r3
 800a702:	f7fe fa9f 	bl	8008c44 <USBD_LL_DataInStage>
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fe fbe3 	bl	8008ee8 <USBD_LL_SOF>
}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a732:	2301      	movs	r3, #1
 800a734:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	79db      	ldrb	r3, [r3, #7]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d001      	beq.n	800a742 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a73e:	f7f8 f865 	bl	800280c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a748:	7bfa      	ldrb	r2, [r7, #15]
 800a74a:	4611      	mov	r1, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fe fb87 	bl	8008e60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fe fb2e 	bl	8008dba <USBD_LL_Reset>
}
 800a75e:	bf00      	nop
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fb82 	bl	8008e80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	6812      	ldr	r2, [r2, #0]
 800a78a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a78e:	f043 0301 	orr.w	r3, r3, #1
 800a792:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	7adb      	ldrb	r3, [r3, #11]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d005      	beq.n	800a7a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a79c:	4b04      	ldr	r3, [pc, #16]	@ (800a7b0 <HAL_PCD_SuspendCallback+0x48>)
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	4a03      	ldr	r2, [pc, #12]	@ (800a7b0 <HAL_PCD_SuspendCallback+0x48>)
 800a7a2:	f043 0306 	orr.w	r3, r3, #6
 800a7a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7a8:	bf00      	nop
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	e000ed00 	.word	0xe000ed00

0800a7b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fb78 	bl	8008eb8 <USBD_LL_Resume>
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fbd0 	bl	8008f8c <USBD_LL_IsoOUTIncomplete>
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a806:	78fa      	ldrb	r2, [r7, #3]
 800a808:	4611      	mov	r1, r2
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fe fb8c 	bl	8008f28 <USBD_LL_IsoINIncomplete>
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fbe2 	bl	8008ff0 <USBD_LL_DevConnected>
}
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe fbdf 	bl	8009006 <USBD_LL_DevDisconnected>
}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d13c      	bne.n	800a8da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a860:	4a20      	ldr	r2, [pc, #128]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a1e      	ldr	r2, [pc, #120]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a86c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a870:	4b1c      	ldr	r3, [pc, #112]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a872:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a876:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a878:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a87a:	2204      	movs	r2, #4
 800a87c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a87e:	4b19      	ldr	r3, [pc, #100]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a880:	2202      	movs	r2, #2
 800a882:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a884:	4b17      	ldr	r3, [pc, #92]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a886:	2200      	movs	r2, #0
 800a888:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a88a:	4b16      	ldr	r3, [pc, #88]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a88c:	2202      	movs	r2, #2
 800a88e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a890:	4b14      	ldr	r3, [pc, #80]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a892:	2200      	movs	r2, #0
 800a894:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a896:	4b13      	ldr	r3, [pc, #76]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a898:	2200      	movs	r2, #0
 800a89a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a89c:	4b11      	ldr	r3, [pc, #68]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8a2:	4b10      	ldr	r3, [pc, #64]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8ae:	480d      	ldr	r0, [pc, #52]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a8b0:	f7fa f998 	bl	8004be4 <HAL_PCD_Init>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8ba:	f7f7 ffa7 	bl	800280c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8be:	2180      	movs	r1, #128	@ 0x80
 800a8c0:	4808      	ldr	r0, [pc, #32]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a8c2:	f7fb fbac 	bl	800601e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8c6:	2240      	movs	r2, #64	@ 0x40
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	4806      	ldr	r0, [pc, #24]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a8cc:	f7fb fb60 	bl	8005f90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8d0:	2280      	movs	r2, #128	@ 0x80
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	4803      	ldr	r0, [pc, #12]	@ (800a8e4 <USBD_LL_Init+0x94>)
 800a8d6:	f7fb fb5b 	bl	8005f90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20000960 	.word	0x20000960

0800a8e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fa fa7f 	bl	8004e02 <HAL_PCD_Start>
 800a904:	4603      	mov	r3, r0
 800a906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 f930 	bl	800ab70 <USBD_Get_USB_Status>
 800a910:	4603      	mov	r3, r0
 800a912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a914:	7bbb      	ldrb	r3, [r7, #14]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	4608      	mov	r0, r1
 800a928:	4611      	mov	r1, r2
 800a92a:	461a      	mov	r2, r3
 800a92c:	4603      	mov	r3, r0
 800a92e:	70fb      	strb	r3, [r7, #3]
 800a930:	460b      	mov	r3, r1
 800a932:	70bb      	strb	r3, [r7, #2]
 800a934:	4613      	mov	r3, r2
 800a936:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a946:	78bb      	ldrb	r3, [r7, #2]
 800a948:	883a      	ldrh	r2, [r7, #0]
 800a94a:	78f9      	ldrb	r1, [r7, #3]
 800a94c:	f7fa ff53 	bl	80057f6 <HAL_PCD_EP_Open>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 f90a 	bl	800ab70 <USBD_Get_USB_Status>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a960:	7bbb      	ldrb	r3, [r7, #14]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a984:	78fa      	ldrb	r2, [r7, #3]
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fa ff9e 	bl	80058ca <HAL_PCD_EP_Close>
 800a98e:	4603      	mov	r3, r0
 800a990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f8eb 	bl	800ab70 <USBD_Get_USB_Status>
 800a99a:	4603      	mov	r3, r0
 800a99c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9c2:	78fa      	ldrb	r2, [r7, #3]
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fb f83e 	bl	8005a48 <HAL_PCD_EP_SetStall>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 f8cc 	bl	800ab70 <USBD_Get_USB_Status>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa00:	78fa      	ldrb	r2, [r7, #3]
 800aa02:	4611      	mov	r1, r2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fb f882 	bl	8005b0e <HAL_PCD_EP_ClrStall>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 f8ad 	bl	800ab70 <USBD_Get_USB_Status>
 800aa16:	4603      	mov	r3, r0
 800aa18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	da0b      	bge.n	800aa58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa46:	68f9      	ldr	r1, [r7, #12]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	440b      	add	r3, r1
 800aa52:	3316      	adds	r3, #22
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	e00b      	b.n	800aa70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa5e:	68f9      	ldr	r1, [r7, #12]
 800aa60:	4613      	mov	r3, r2
 800aa62:	00db      	lsls	r3, r3, #3
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aa6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa96:	78fa      	ldrb	r2, [r7, #3]
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fa fe87 	bl	80057ae <HAL_PCD_SetAddress>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 f862 	bl	800ab70 <USBD_Get_USB_Status>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b086      	sub	sp, #24
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	60f8      	str	r0, [r7, #12]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	603b      	str	r3, [r7, #0]
 800aac6:	460b      	mov	r3, r1
 800aac8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aad8:	7af9      	ldrb	r1, [r7, #11]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	f7fa ff79 	bl	80059d4 <HAL_PCD_EP_Transmit>
 800aae2:	4603      	mov	r3, r0
 800aae4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 f841 	bl	800ab70 <USBD_Get_USB_Status>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	607a      	str	r2, [r7, #4]
 800ab06:	603b      	str	r3, [r7, #0]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab1a:	7af9      	ldrb	r1, [r7, #11]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	f7fa ff1d 	bl	800595e <HAL_PCD_EP_Receive>
 800ab24:	4603      	mov	r3, r0
 800ab26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab28:	7dfb      	ldrb	r3, [r7, #23]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 f820 	bl	800ab70 <USBD_Get_USB_Status>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
	...

0800ab40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800ab48:	4b03      	ldr	r3, [pc, #12]	@ (800ab58 <USBD_static_malloc+0x18>)
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	20000e44 	.word	0x20000e44

0800ab5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]

}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d817      	bhi.n	800abb4 <USBD_Get_USB_Status+0x44>
 800ab84:	a201      	add	r2, pc, #4	@ (adr r2, 800ab8c <USBD_Get_USB_Status+0x1c>)
 800ab86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8a:	bf00      	nop
 800ab8c:	0800ab9d 	.word	0x0800ab9d
 800ab90:	0800aba3 	.word	0x0800aba3
 800ab94:	0800aba9 	.word	0x0800aba9
 800ab98:	0800abaf 	.word	0x0800abaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aba0:	e00b      	b.n	800abba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aba2:	2303      	movs	r3, #3
 800aba4:	73fb      	strb	r3, [r7, #15]
    break;
 800aba6:	e008      	b.n	800abba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aba8:	2301      	movs	r3, #1
 800abaa:	73fb      	strb	r3, [r7, #15]
    break;
 800abac:	e005      	b.n	800abba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abae:	2303      	movs	r3, #3
 800abb0:	73fb      	strb	r3, [r7, #15]
    break;
 800abb2:	e002      	b.n	800abba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abb4:	2303      	movs	r3, #3
 800abb6:	73fb      	strb	r3, [r7, #15]
    break;
 800abb8:	bf00      	nop
  }
  return usb_status;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <_strtoul_l.isra.0>:
 800abc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abcc:	4e34      	ldr	r6, [pc, #208]	@ (800aca0 <_strtoul_l.isra.0+0xd8>)
 800abce:	4686      	mov	lr, r0
 800abd0:	460d      	mov	r5, r1
 800abd2:	4628      	mov	r0, r5
 800abd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abd8:	5d37      	ldrb	r7, [r6, r4]
 800abda:	f017 0708 	ands.w	r7, r7, #8
 800abde:	d1f8      	bne.n	800abd2 <_strtoul_l.isra.0+0xa>
 800abe0:	2c2d      	cmp	r4, #45	@ 0x2d
 800abe2:	d110      	bne.n	800ac06 <_strtoul_l.isra.0+0x3e>
 800abe4:	782c      	ldrb	r4, [r5, #0]
 800abe6:	2701      	movs	r7, #1
 800abe8:	1c85      	adds	r5, r0, #2
 800abea:	f033 0010 	bics.w	r0, r3, #16
 800abee:	d115      	bne.n	800ac1c <_strtoul_l.isra.0+0x54>
 800abf0:	2c30      	cmp	r4, #48	@ 0x30
 800abf2:	d10d      	bne.n	800ac10 <_strtoul_l.isra.0+0x48>
 800abf4:	7828      	ldrb	r0, [r5, #0]
 800abf6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800abfa:	2858      	cmp	r0, #88	@ 0x58
 800abfc:	d108      	bne.n	800ac10 <_strtoul_l.isra.0+0x48>
 800abfe:	786c      	ldrb	r4, [r5, #1]
 800ac00:	3502      	adds	r5, #2
 800ac02:	2310      	movs	r3, #16
 800ac04:	e00a      	b.n	800ac1c <_strtoul_l.isra.0+0x54>
 800ac06:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac08:	bf04      	itt	eq
 800ac0a:	782c      	ldrbeq	r4, [r5, #0]
 800ac0c:	1c85      	addeq	r5, r0, #2
 800ac0e:	e7ec      	b.n	800abea <_strtoul_l.isra.0+0x22>
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1f6      	bne.n	800ac02 <_strtoul_l.isra.0+0x3a>
 800ac14:	2c30      	cmp	r4, #48	@ 0x30
 800ac16:	bf14      	ite	ne
 800ac18:	230a      	movne	r3, #10
 800ac1a:	2308      	moveq	r3, #8
 800ac1c:	f04f 38ff 	mov.w	r8, #4294967295
 800ac20:	2600      	movs	r6, #0
 800ac22:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac26:	fb03 f908 	mul.w	r9, r3, r8
 800ac2a:	ea6f 0909 	mvn.w	r9, r9
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ac34:	f1bc 0f09 	cmp.w	ip, #9
 800ac38:	d810      	bhi.n	800ac5c <_strtoul_l.isra.0+0x94>
 800ac3a:	4664      	mov	r4, ip
 800ac3c:	42a3      	cmp	r3, r4
 800ac3e:	dd1e      	ble.n	800ac7e <_strtoul_l.isra.0+0xb6>
 800ac40:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ac44:	d007      	beq.n	800ac56 <_strtoul_l.isra.0+0x8e>
 800ac46:	4580      	cmp	r8, r0
 800ac48:	d316      	bcc.n	800ac78 <_strtoul_l.isra.0+0xb0>
 800ac4a:	d101      	bne.n	800ac50 <_strtoul_l.isra.0+0x88>
 800ac4c:	45a1      	cmp	r9, r4
 800ac4e:	db13      	blt.n	800ac78 <_strtoul_l.isra.0+0xb0>
 800ac50:	fb00 4003 	mla	r0, r0, r3, r4
 800ac54:	2601      	movs	r6, #1
 800ac56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac5a:	e7e9      	b.n	800ac30 <_strtoul_l.isra.0+0x68>
 800ac5c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ac60:	f1bc 0f19 	cmp.w	ip, #25
 800ac64:	d801      	bhi.n	800ac6a <_strtoul_l.isra.0+0xa2>
 800ac66:	3c37      	subs	r4, #55	@ 0x37
 800ac68:	e7e8      	b.n	800ac3c <_strtoul_l.isra.0+0x74>
 800ac6a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ac6e:	f1bc 0f19 	cmp.w	ip, #25
 800ac72:	d804      	bhi.n	800ac7e <_strtoul_l.isra.0+0xb6>
 800ac74:	3c57      	subs	r4, #87	@ 0x57
 800ac76:	e7e1      	b.n	800ac3c <_strtoul_l.isra.0+0x74>
 800ac78:	f04f 36ff 	mov.w	r6, #4294967295
 800ac7c:	e7eb      	b.n	800ac56 <_strtoul_l.isra.0+0x8e>
 800ac7e:	1c73      	adds	r3, r6, #1
 800ac80:	d106      	bne.n	800ac90 <_strtoul_l.isra.0+0xc8>
 800ac82:	2322      	movs	r3, #34	@ 0x22
 800ac84:	f8ce 3000 	str.w	r3, [lr]
 800ac88:	4630      	mov	r0, r6
 800ac8a:	b932      	cbnz	r2, 800ac9a <_strtoul_l.isra.0+0xd2>
 800ac8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac90:	b107      	cbz	r7, 800ac94 <_strtoul_l.isra.0+0xcc>
 800ac92:	4240      	negs	r0, r0
 800ac94:	2a00      	cmp	r2, #0
 800ac96:	d0f9      	beq.n	800ac8c <_strtoul_l.isra.0+0xc4>
 800ac98:	b106      	cbz	r6, 800ac9c <_strtoul_l.isra.0+0xd4>
 800ac9a:	1e69      	subs	r1, r5, #1
 800ac9c:	6011      	str	r1, [r2, #0]
 800ac9e:	e7f5      	b.n	800ac8c <_strtoul_l.isra.0+0xc4>
 800aca0:	0800dbc5 	.word	0x0800dbc5

0800aca4 <strtoul>:
 800aca4:	4613      	mov	r3, r2
 800aca6:	460a      	mov	r2, r1
 800aca8:	4601      	mov	r1, r0
 800acaa:	4802      	ldr	r0, [pc, #8]	@ (800acb4 <strtoul+0x10>)
 800acac:	6800      	ldr	r0, [r0, #0]
 800acae:	f7ff bf8b 	b.w	800abc8 <_strtoul_l.isra.0>
 800acb2:	bf00      	nop
 800acb4:	20000110 	.word	0x20000110

0800acb8 <__cvt>:
 800acb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acbc:	ec57 6b10 	vmov	r6, r7, d0
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	460c      	mov	r4, r1
 800acc4:	4619      	mov	r1, r3
 800acc6:	463b      	mov	r3, r7
 800acc8:	bfbb      	ittet	lt
 800acca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800acce:	461f      	movlt	r7, r3
 800acd0:	2300      	movge	r3, #0
 800acd2:	232d      	movlt	r3, #45	@ 0x2d
 800acd4:	700b      	strb	r3, [r1, #0]
 800acd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acd8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800acdc:	4691      	mov	r9, r2
 800acde:	f023 0820 	bic.w	r8, r3, #32
 800ace2:	bfbc      	itt	lt
 800ace4:	4632      	movlt	r2, r6
 800ace6:	4616      	movlt	r6, r2
 800ace8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acec:	d005      	beq.n	800acfa <__cvt+0x42>
 800acee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800acf2:	d100      	bne.n	800acf6 <__cvt+0x3e>
 800acf4:	3401      	adds	r4, #1
 800acf6:	2102      	movs	r1, #2
 800acf8:	e000      	b.n	800acfc <__cvt+0x44>
 800acfa:	2103      	movs	r1, #3
 800acfc:	ab03      	add	r3, sp, #12
 800acfe:	9301      	str	r3, [sp, #4]
 800ad00:	ab02      	add	r3, sp, #8
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	ec47 6b10 	vmov	d0, r6, r7
 800ad08:	4653      	mov	r3, sl
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	f000 fe7c 	bl	800ba08 <_dtoa_r>
 800ad10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad14:	4605      	mov	r5, r0
 800ad16:	d119      	bne.n	800ad4c <__cvt+0x94>
 800ad18:	f019 0f01 	tst.w	r9, #1
 800ad1c:	d00e      	beq.n	800ad3c <__cvt+0x84>
 800ad1e:	eb00 0904 	add.w	r9, r0, r4
 800ad22:	2200      	movs	r2, #0
 800ad24:	2300      	movs	r3, #0
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	f7f5 fed5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad2e:	b108      	cbz	r0, 800ad34 <__cvt+0x7c>
 800ad30:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad34:	2230      	movs	r2, #48	@ 0x30
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	454b      	cmp	r3, r9
 800ad3a:	d31e      	bcc.n	800ad7a <__cvt+0xc2>
 800ad3c:	9b03      	ldr	r3, [sp, #12]
 800ad3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad40:	1b5b      	subs	r3, r3, r5
 800ad42:	4628      	mov	r0, r5
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	b004      	add	sp, #16
 800ad48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad50:	eb00 0904 	add.w	r9, r0, r4
 800ad54:	d1e5      	bne.n	800ad22 <__cvt+0x6a>
 800ad56:	7803      	ldrb	r3, [r0, #0]
 800ad58:	2b30      	cmp	r3, #48	@ 0x30
 800ad5a:	d10a      	bne.n	800ad72 <__cvt+0xba>
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2300      	movs	r3, #0
 800ad60:	4630      	mov	r0, r6
 800ad62:	4639      	mov	r1, r7
 800ad64:	f7f5 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad68:	b918      	cbnz	r0, 800ad72 <__cvt+0xba>
 800ad6a:	f1c4 0401 	rsb	r4, r4, #1
 800ad6e:	f8ca 4000 	str.w	r4, [sl]
 800ad72:	f8da 3000 	ldr.w	r3, [sl]
 800ad76:	4499      	add	r9, r3
 800ad78:	e7d3      	b.n	800ad22 <__cvt+0x6a>
 800ad7a:	1c59      	adds	r1, r3, #1
 800ad7c:	9103      	str	r1, [sp, #12]
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	e7d9      	b.n	800ad36 <__cvt+0x7e>

0800ad82 <__exponent>:
 800ad82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad84:	2900      	cmp	r1, #0
 800ad86:	bfba      	itte	lt
 800ad88:	4249      	neglt	r1, r1
 800ad8a:	232d      	movlt	r3, #45	@ 0x2d
 800ad8c:	232b      	movge	r3, #43	@ 0x2b
 800ad8e:	2909      	cmp	r1, #9
 800ad90:	7002      	strb	r2, [r0, #0]
 800ad92:	7043      	strb	r3, [r0, #1]
 800ad94:	dd29      	ble.n	800adea <__exponent+0x68>
 800ad96:	f10d 0307 	add.w	r3, sp, #7
 800ad9a:	461d      	mov	r5, r3
 800ad9c:	270a      	movs	r7, #10
 800ad9e:	461a      	mov	r2, r3
 800ada0:	fbb1 f6f7 	udiv	r6, r1, r7
 800ada4:	fb07 1416 	mls	r4, r7, r6, r1
 800ada8:	3430      	adds	r4, #48	@ 0x30
 800adaa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800adae:	460c      	mov	r4, r1
 800adb0:	2c63      	cmp	r4, #99	@ 0x63
 800adb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800adb6:	4631      	mov	r1, r6
 800adb8:	dcf1      	bgt.n	800ad9e <__exponent+0x1c>
 800adba:	3130      	adds	r1, #48	@ 0x30
 800adbc:	1e94      	subs	r4, r2, #2
 800adbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800adc2:	1c41      	adds	r1, r0, #1
 800adc4:	4623      	mov	r3, r4
 800adc6:	42ab      	cmp	r3, r5
 800adc8:	d30a      	bcc.n	800ade0 <__exponent+0x5e>
 800adca:	f10d 0309 	add.w	r3, sp, #9
 800adce:	1a9b      	subs	r3, r3, r2
 800add0:	42ac      	cmp	r4, r5
 800add2:	bf88      	it	hi
 800add4:	2300      	movhi	r3, #0
 800add6:	3302      	adds	r3, #2
 800add8:	4403      	add	r3, r0
 800adda:	1a18      	subs	r0, r3, r0
 800addc:	b003      	add	sp, #12
 800adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ade4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ade8:	e7ed      	b.n	800adc6 <__exponent+0x44>
 800adea:	2330      	movs	r3, #48	@ 0x30
 800adec:	3130      	adds	r1, #48	@ 0x30
 800adee:	7083      	strb	r3, [r0, #2]
 800adf0:	70c1      	strb	r1, [r0, #3]
 800adf2:	1d03      	adds	r3, r0, #4
 800adf4:	e7f1      	b.n	800adda <__exponent+0x58>
	...

0800adf8 <_printf_float>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	b08d      	sub	sp, #52	@ 0x34
 800adfe:	460c      	mov	r4, r1
 800ae00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae04:	4616      	mov	r6, r2
 800ae06:	461f      	mov	r7, r3
 800ae08:	4605      	mov	r5, r0
 800ae0a:	f000 fced 	bl	800b7e8 <_localeconv_r>
 800ae0e:	6803      	ldr	r3, [r0, #0]
 800ae10:	9304      	str	r3, [sp, #16]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7f5 fa34 	bl	8000280 <strlen>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae20:	9005      	str	r0, [sp, #20]
 800ae22:	3307      	adds	r3, #7
 800ae24:	f023 0307 	bic.w	r3, r3, #7
 800ae28:	f103 0208 	add.w	r2, r3, #8
 800ae2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae30:	f8d4 b000 	ldr.w	fp, [r4]
 800ae34:	f8c8 2000 	str.w	r2, [r8]
 800ae38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae40:	9307      	str	r3, [sp, #28]
 800ae42:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae4e:	4b9c      	ldr	r3, [pc, #624]	@ (800b0c0 <_printf_float+0x2c8>)
 800ae50:	f04f 32ff 	mov.w	r2, #4294967295
 800ae54:	f7f5 fe72 	bl	8000b3c <__aeabi_dcmpun>
 800ae58:	bb70      	cbnz	r0, 800aeb8 <_printf_float+0xc0>
 800ae5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae5e:	4b98      	ldr	r3, [pc, #608]	@ (800b0c0 <_printf_float+0x2c8>)
 800ae60:	f04f 32ff 	mov.w	r2, #4294967295
 800ae64:	f7f5 fe4c 	bl	8000b00 <__aeabi_dcmple>
 800ae68:	bb30      	cbnz	r0, 800aeb8 <_printf_float+0xc0>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4640      	mov	r0, r8
 800ae70:	4649      	mov	r1, r9
 800ae72:	f7f5 fe3b 	bl	8000aec <__aeabi_dcmplt>
 800ae76:	b110      	cbz	r0, 800ae7e <_printf_float+0x86>
 800ae78:	232d      	movs	r3, #45	@ 0x2d
 800ae7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae7e:	4a91      	ldr	r2, [pc, #580]	@ (800b0c4 <_printf_float+0x2cc>)
 800ae80:	4b91      	ldr	r3, [pc, #580]	@ (800b0c8 <_printf_float+0x2d0>)
 800ae82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae86:	bf8c      	ite	hi
 800ae88:	4690      	movhi	r8, r2
 800ae8a:	4698      	movls	r8, r3
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	6123      	str	r3, [r4, #16]
 800ae90:	f02b 0304 	bic.w	r3, fp, #4
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	f04f 0900 	mov.w	r9, #0
 800ae9a:	9700      	str	r7, [sp, #0]
 800ae9c:	4633      	mov	r3, r6
 800ae9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aea0:	4621      	mov	r1, r4
 800aea2:	4628      	mov	r0, r5
 800aea4:	f000 f9d2 	bl	800b24c <_printf_common>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	f040 808d 	bne.w	800afc8 <_printf_float+0x1d0>
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	b00d      	add	sp, #52	@ 0x34
 800aeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb8:	4642      	mov	r2, r8
 800aeba:	464b      	mov	r3, r9
 800aebc:	4640      	mov	r0, r8
 800aebe:	4649      	mov	r1, r9
 800aec0:	f7f5 fe3c 	bl	8000b3c <__aeabi_dcmpun>
 800aec4:	b140      	cbz	r0, 800aed8 <_printf_float+0xe0>
 800aec6:	464b      	mov	r3, r9
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfbc      	itt	lt
 800aecc:	232d      	movlt	r3, #45	@ 0x2d
 800aece:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aed2:	4a7e      	ldr	r2, [pc, #504]	@ (800b0cc <_printf_float+0x2d4>)
 800aed4:	4b7e      	ldr	r3, [pc, #504]	@ (800b0d0 <_printf_float+0x2d8>)
 800aed6:	e7d4      	b.n	800ae82 <_printf_float+0x8a>
 800aed8:	6863      	ldr	r3, [r4, #4]
 800aeda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aede:	9206      	str	r2, [sp, #24]
 800aee0:	1c5a      	adds	r2, r3, #1
 800aee2:	d13b      	bne.n	800af5c <_printf_float+0x164>
 800aee4:	2306      	movs	r3, #6
 800aee6:	6063      	str	r3, [r4, #4]
 800aee8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aeec:	2300      	movs	r3, #0
 800aeee:	6022      	str	r2, [r4, #0]
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	ab0a      	add	r3, sp, #40	@ 0x28
 800aef4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aef8:	ab09      	add	r3, sp, #36	@ 0x24
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	6861      	ldr	r1, [r4, #4]
 800aefe:	ec49 8b10 	vmov	d0, r8, r9
 800af02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af06:	4628      	mov	r0, r5
 800af08:	f7ff fed6 	bl	800acb8 <__cvt>
 800af0c:	9b06      	ldr	r3, [sp, #24]
 800af0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af10:	2b47      	cmp	r3, #71	@ 0x47
 800af12:	4680      	mov	r8, r0
 800af14:	d129      	bne.n	800af6a <_printf_float+0x172>
 800af16:	1cc8      	adds	r0, r1, #3
 800af18:	db02      	blt.n	800af20 <_printf_float+0x128>
 800af1a:	6863      	ldr	r3, [r4, #4]
 800af1c:	4299      	cmp	r1, r3
 800af1e:	dd41      	ble.n	800afa4 <_printf_float+0x1ac>
 800af20:	f1aa 0a02 	sub.w	sl, sl, #2
 800af24:	fa5f fa8a 	uxtb.w	sl, sl
 800af28:	3901      	subs	r1, #1
 800af2a:	4652      	mov	r2, sl
 800af2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af30:	9109      	str	r1, [sp, #36]	@ 0x24
 800af32:	f7ff ff26 	bl	800ad82 <__exponent>
 800af36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af38:	1813      	adds	r3, r2, r0
 800af3a:	2a01      	cmp	r2, #1
 800af3c:	4681      	mov	r9, r0
 800af3e:	6123      	str	r3, [r4, #16]
 800af40:	dc02      	bgt.n	800af48 <_printf_float+0x150>
 800af42:	6822      	ldr	r2, [r4, #0]
 800af44:	07d2      	lsls	r2, r2, #31
 800af46:	d501      	bpl.n	800af4c <_printf_float+0x154>
 800af48:	3301      	adds	r3, #1
 800af4a:	6123      	str	r3, [r4, #16]
 800af4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0a2      	beq.n	800ae9a <_printf_float+0xa2>
 800af54:	232d      	movs	r3, #45	@ 0x2d
 800af56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af5a:	e79e      	b.n	800ae9a <_printf_float+0xa2>
 800af5c:	9a06      	ldr	r2, [sp, #24]
 800af5e:	2a47      	cmp	r2, #71	@ 0x47
 800af60:	d1c2      	bne.n	800aee8 <_printf_float+0xf0>
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1c0      	bne.n	800aee8 <_printf_float+0xf0>
 800af66:	2301      	movs	r3, #1
 800af68:	e7bd      	b.n	800aee6 <_printf_float+0xee>
 800af6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af6e:	d9db      	bls.n	800af28 <_printf_float+0x130>
 800af70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af74:	d118      	bne.n	800afa8 <_printf_float+0x1b0>
 800af76:	2900      	cmp	r1, #0
 800af78:	6863      	ldr	r3, [r4, #4]
 800af7a:	dd0b      	ble.n	800af94 <_printf_float+0x19c>
 800af7c:	6121      	str	r1, [r4, #16]
 800af7e:	b913      	cbnz	r3, 800af86 <_printf_float+0x18e>
 800af80:	6822      	ldr	r2, [r4, #0]
 800af82:	07d0      	lsls	r0, r2, #31
 800af84:	d502      	bpl.n	800af8c <_printf_float+0x194>
 800af86:	3301      	adds	r3, #1
 800af88:	440b      	add	r3, r1
 800af8a:	6123      	str	r3, [r4, #16]
 800af8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af8e:	f04f 0900 	mov.w	r9, #0
 800af92:	e7db      	b.n	800af4c <_printf_float+0x154>
 800af94:	b913      	cbnz	r3, 800af9c <_printf_float+0x1a4>
 800af96:	6822      	ldr	r2, [r4, #0]
 800af98:	07d2      	lsls	r2, r2, #31
 800af9a:	d501      	bpl.n	800afa0 <_printf_float+0x1a8>
 800af9c:	3302      	adds	r3, #2
 800af9e:	e7f4      	b.n	800af8a <_printf_float+0x192>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e7f2      	b.n	800af8a <_printf_float+0x192>
 800afa4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800afa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afaa:	4299      	cmp	r1, r3
 800afac:	db05      	blt.n	800afba <_printf_float+0x1c2>
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	6121      	str	r1, [r4, #16]
 800afb2:	07d8      	lsls	r0, r3, #31
 800afb4:	d5ea      	bpl.n	800af8c <_printf_float+0x194>
 800afb6:	1c4b      	adds	r3, r1, #1
 800afb8:	e7e7      	b.n	800af8a <_printf_float+0x192>
 800afba:	2900      	cmp	r1, #0
 800afbc:	bfd4      	ite	le
 800afbe:	f1c1 0202 	rsble	r2, r1, #2
 800afc2:	2201      	movgt	r2, #1
 800afc4:	4413      	add	r3, r2
 800afc6:	e7e0      	b.n	800af8a <_printf_float+0x192>
 800afc8:	6823      	ldr	r3, [r4, #0]
 800afca:	055a      	lsls	r2, r3, #21
 800afcc:	d407      	bmi.n	800afde <_printf_float+0x1e6>
 800afce:	6923      	ldr	r3, [r4, #16]
 800afd0:	4642      	mov	r2, r8
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	d12b      	bne.n	800b034 <_printf_float+0x23c>
 800afdc:	e767      	b.n	800aeae <_printf_float+0xb6>
 800afde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afe2:	f240 80dd 	bls.w	800b1a0 <_printf_float+0x3a8>
 800afe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afea:	2200      	movs	r2, #0
 800afec:	2300      	movs	r3, #0
 800afee:	f7f5 fd73 	bl	8000ad8 <__aeabi_dcmpeq>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d033      	beq.n	800b05e <_printf_float+0x266>
 800aff6:	4a37      	ldr	r2, [pc, #220]	@ (800b0d4 <_printf_float+0x2dc>)
 800aff8:	2301      	movs	r3, #1
 800affa:	4631      	mov	r1, r6
 800affc:	4628      	mov	r0, r5
 800affe:	47b8      	blx	r7
 800b000:	3001      	adds	r0, #1
 800b002:	f43f af54 	beq.w	800aeae <_printf_float+0xb6>
 800b006:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b00a:	4543      	cmp	r3, r8
 800b00c:	db02      	blt.n	800b014 <_printf_float+0x21c>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	07d8      	lsls	r0, r3, #31
 800b012:	d50f      	bpl.n	800b034 <_printf_float+0x23c>
 800b014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b018:	4631      	mov	r1, r6
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b8      	blx	r7
 800b01e:	3001      	adds	r0, #1
 800b020:	f43f af45 	beq.w	800aeae <_printf_float+0xb6>
 800b024:	f04f 0900 	mov.w	r9, #0
 800b028:	f108 38ff 	add.w	r8, r8, #4294967295
 800b02c:	f104 0a1a 	add.w	sl, r4, #26
 800b030:	45c8      	cmp	r8, r9
 800b032:	dc09      	bgt.n	800b048 <_printf_float+0x250>
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	079b      	lsls	r3, r3, #30
 800b038:	f100 8103 	bmi.w	800b242 <_printf_float+0x44a>
 800b03c:	68e0      	ldr	r0, [r4, #12]
 800b03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b040:	4298      	cmp	r0, r3
 800b042:	bfb8      	it	lt
 800b044:	4618      	movlt	r0, r3
 800b046:	e734      	b.n	800aeb2 <_printf_float+0xba>
 800b048:	2301      	movs	r3, #1
 800b04a:	4652      	mov	r2, sl
 800b04c:	4631      	mov	r1, r6
 800b04e:	4628      	mov	r0, r5
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	f43f af2b 	beq.w	800aeae <_printf_float+0xb6>
 800b058:	f109 0901 	add.w	r9, r9, #1
 800b05c:	e7e8      	b.n	800b030 <_printf_float+0x238>
 800b05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b060:	2b00      	cmp	r3, #0
 800b062:	dc39      	bgt.n	800b0d8 <_printf_float+0x2e0>
 800b064:	4a1b      	ldr	r2, [pc, #108]	@ (800b0d4 <_printf_float+0x2dc>)
 800b066:	2301      	movs	r3, #1
 800b068:	4631      	mov	r1, r6
 800b06a:	4628      	mov	r0, r5
 800b06c:	47b8      	blx	r7
 800b06e:	3001      	adds	r0, #1
 800b070:	f43f af1d 	beq.w	800aeae <_printf_float+0xb6>
 800b074:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b078:	ea59 0303 	orrs.w	r3, r9, r3
 800b07c:	d102      	bne.n	800b084 <_printf_float+0x28c>
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	07d9      	lsls	r1, r3, #31
 800b082:	d5d7      	bpl.n	800b034 <_printf_float+0x23c>
 800b084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	f43f af0d 	beq.w	800aeae <_printf_float+0xb6>
 800b094:	f04f 0a00 	mov.w	sl, #0
 800b098:	f104 0b1a 	add.w	fp, r4, #26
 800b09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b09e:	425b      	negs	r3, r3
 800b0a0:	4553      	cmp	r3, sl
 800b0a2:	dc01      	bgt.n	800b0a8 <_printf_float+0x2b0>
 800b0a4:	464b      	mov	r3, r9
 800b0a6:	e793      	b.n	800afd0 <_printf_float+0x1d8>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	465a      	mov	r2, fp
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	47b8      	blx	r7
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	f43f aefb 	beq.w	800aeae <_printf_float+0xb6>
 800b0b8:	f10a 0a01 	add.w	sl, sl, #1
 800b0bc:	e7ee      	b.n	800b09c <_printf_float+0x2a4>
 800b0be:	bf00      	nop
 800b0c0:	7fefffff 	.word	0x7fefffff
 800b0c4:	0800dcc9 	.word	0x0800dcc9
 800b0c8:	0800dcc5 	.word	0x0800dcc5
 800b0cc:	0800dcd1 	.word	0x0800dcd1
 800b0d0:	0800dccd 	.word	0x0800dccd
 800b0d4:	0800dcd5 	.word	0x0800dcd5
 800b0d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0de:	4553      	cmp	r3, sl
 800b0e0:	bfa8      	it	ge
 800b0e2:	4653      	movge	r3, sl
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	4699      	mov	r9, r3
 800b0e8:	dc36      	bgt.n	800b158 <_printf_float+0x360>
 800b0ea:	f04f 0b00 	mov.w	fp, #0
 800b0ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0f2:	f104 021a 	add.w	r2, r4, #26
 800b0f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0f8:	9306      	str	r3, [sp, #24]
 800b0fa:	eba3 0309 	sub.w	r3, r3, r9
 800b0fe:	455b      	cmp	r3, fp
 800b100:	dc31      	bgt.n	800b166 <_printf_float+0x36e>
 800b102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b104:	459a      	cmp	sl, r3
 800b106:	dc3a      	bgt.n	800b17e <_printf_float+0x386>
 800b108:	6823      	ldr	r3, [r4, #0]
 800b10a:	07da      	lsls	r2, r3, #31
 800b10c:	d437      	bmi.n	800b17e <_printf_float+0x386>
 800b10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b110:	ebaa 0903 	sub.w	r9, sl, r3
 800b114:	9b06      	ldr	r3, [sp, #24]
 800b116:	ebaa 0303 	sub.w	r3, sl, r3
 800b11a:	4599      	cmp	r9, r3
 800b11c:	bfa8      	it	ge
 800b11e:	4699      	movge	r9, r3
 800b120:	f1b9 0f00 	cmp.w	r9, #0
 800b124:	dc33      	bgt.n	800b18e <_printf_float+0x396>
 800b126:	f04f 0800 	mov.w	r8, #0
 800b12a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b12e:	f104 0b1a 	add.w	fp, r4, #26
 800b132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b134:	ebaa 0303 	sub.w	r3, sl, r3
 800b138:	eba3 0309 	sub.w	r3, r3, r9
 800b13c:	4543      	cmp	r3, r8
 800b13e:	f77f af79 	ble.w	800b034 <_printf_float+0x23c>
 800b142:	2301      	movs	r3, #1
 800b144:	465a      	mov	r2, fp
 800b146:	4631      	mov	r1, r6
 800b148:	4628      	mov	r0, r5
 800b14a:	47b8      	blx	r7
 800b14c:	3001      	adds	r0, #1
 800b14e:	f43f aeae 	beq.w	800aeae <_printf_float+0xb6>
 800b152:	f108 0801 	add.w	r8, r8, #1
 800b156:	e7ec      	b.n	800b132 <_printf_float+0x33a>
 800b158:	4642      	mov	r2, r8
 800b15a:	4631      	mov	r1, r6
 800b15c:	4628      	mov	r0, r5
 800b15e:	47b8      	blx	r7
 800b160:	3001      	adds	r0, #1
 800b162:	d1c2      	bne.n	800b0ea <_printf_float+0x2f2>
 800b164:	e6a3      	b.n	800aeae <_printf_float+0xb6>
 800b166:	2301      	movs	r3, #1
 800b168:	4631      	mov	r1, r6
 800b16a:	4628      	mov	r0, r5
 800b16c:	9206      	str	r2, [sp, #24]
 800b16e:	47b8      	blx	r7
 800b170:	3001      	adds	r0, #1
 800b172:	f43f ae9c 	beq.w	800aeae <_printf_float+0xb6>
 800b176:	9a06      	ldr	r2, [sp, #24]
 800b178:	f10b 0b01 	add.w	fp, fp, #1
 800b17c:	e7bb      	b.n	800b0f6 <_printf_float+0x2fe>
 800b17e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b182:	4631      	mov	r1, r6
 800b184:	4628      	mov	r0, r5
 800b186:	47b8      	blx	r7
 800b188:	3001      	adds	r0, #1
 800b18a:	d1c0      	bne.n	800b10e <_printf_float+0x316>
 800b18c:	e68f      	b.n	800aeae <_printf_float+0xb6>
 800b18e:	9a06      	ldr	r2, [sp, #24]
 800b190:	464b      	mov	r3, r9
 800b192:	4442      	add	r2, r8
 800b194:	4631      	mov	r1, r6
 800b196:	4628      	mov	r0, r5
 800b198:	47b8      	blx	r7
 800b19a:	3001      	adds	r0, #1
 800b19c:	d1c3      	bne.n	800b126 <_printf_float+0x32e>
 800b19e:	e686      	b.n	800aeae <_printf_float+0xb6>
 800b1a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1a4:	f1ba 0f01 	cmp.w	sl, #1
 800b1a8:	dc01      	bgt.n	800b1ae <_printf_float+0x3b6>
 800b1aa:	07db      	lsls	r3, r3, #31
 800b1ac:	d536      	bpl.n	800b21c <_printf_float+0x424>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4642      	mov	r2, r8
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	47b8      	blx	r7
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	f43f ae78 	beq.w	800aeae <_printf_float+0xb6>
 800b1be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	47b8      	blx	r7
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	f43f ae70 	beq.w	800aeae <_printf_float+0xb6>
 800b1ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1da:	f7f5 fc7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1de:	b9c0      	cbnz	r0, 800b212 <_printf_float+0x41a>
 800b1e0:	4653      	mov	r3, sl
 800b1e2:	f108 0201 	add.w	r2, r8, #1
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d10c      	bne.n	800b20a <_printf_float+0x412>
 800b1f0:	e65d      	b.n	800aeae <_printf_float+0xb6>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	465a      	mov	r2, fp
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae56 	beq.w	800aeae <_printf_float+0xb6>
 800b202:	f108 0801 	add.w	r8, r8, #1
 800b206:	45d0      	cmp	r8, sl
 800b208:	dbf3      	blt.n	800b1f2 <_printf_float+0x3fa>
 800b20a:	464b      	mov	r3, r9
 800b20c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b210:	e6df      	b.n	800afd2 <_printf_float+0x1da>
 800b212:	f04f 0800 	mov.w	r8, #0
 800b216:	f104 0b1a 	add.w	fp, r4, #26
 800b21a:	e7f4      	b.n	800b206 <_printf_float+0x40e>
 800b21c:	2301      	movs	r3, #1
 800b21e:	4642      	mov	r2, r8
 800b220:	e7e1      	b.n	800b1e6 <_printf_float+0x3ee>
 800b222:	2301      	movs	r3, #1
 800b224:	464a      	mov	r2, r9
 800b226:	4631      	mov	r1, r6
 800b228:	4628      	mov	r0, r5
 800b22a:	47b8      	blx	r7
 800b22c:	3001      	adds	r0, #1
 800b22e:	f43f ae3e 	beq.w	800aeae <_printf_float+0xb6>
 800b232:	f108 0801 	add.w	r8, r8, #1
 800b236:	68e3      	ldr	r3, [r4, #12]
 800b238:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b23a:	1a5b      	subs	r3, r3, r1
 800b23c:	4543      	cmp	r3, r8
 800b23e:	dcf0      	bgt.n	800b222 <_printf_float+0x42a>
 800b240:	e6fc      	b.n	800b03c <_printf_float+0x244>
 800b242:	f04f 0800 	mov.w	r8, #0
 800b246:	f104 0919 	add.w	r9, r4, #25
 800b24a:	e7f4      	b.n	800b236 <_printf_float+0x43e>

0800b24c <_printf_common>:
 800b24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	4616      	mov	r6, r2
 800b252:	4698      	mov	r8, r3
 800b254:	688a      	ldr	r2, [r1, #8]
 800b256:	690b      	ldr	r3, [r1, #16]
 800b258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b25c:	4293      	cmp	r3, r2
 800b25e:	bfb8      	it	lt
 800b260:	4613      	movlt	r3, r2
 800b262:	6033      	str	r3, [r6, #0]
 800b264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b268:	4607      	mov	r7, r0
 800b26a:	460c      	mov	r4, r1
 800b26c:	b10a      	cbz	r2, 800b272 <_printf_common+0x26>
 800b26e:	3301      	adds	r3, #1
 800b270:	6033      	str	r3, [r6, #0]
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	0699      	lsls	r1, r3, #26
 800b276:	bf42      	ittt	mi
 800b278:	6833      	ldrmi	r3, [r6, #0]
 800b27a:	3302      	addmi	r3, #2
 800b27c:	6033      	strmi	r3, [r6, #0]
 800b27e:	6825      	ldr	r5, [r4, #0]
 800b280:	f015 0506 	ands.w	r5, r5, #6
 800b284:	d106      	bne.n	800b294 <_printf_common+0x48>
 800b286:	f104 0a19 	add.w	sl, r4, #25
 800b28a:	68e3      	ldr	r3, [r4, #12]
 800b28c:	6832      	ldr	r2, [r6, #0]
 800b28e:	1a9b      	subs	r3, r3, r2
 800b290:	42ab      	cmp	r3, r5
 800b292:	dc26      	bgt.n	800b2e2 <_printf_common+0x96>
 800b294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b298:	6822      	ldr	r2, [r4, #0]
 800b29a:	3b00      	subs	r3, #0
 800b29c:	bf18      	it	ne
 800b29e:	2301      	movne	r3, #1
 800b2a0:	0692      	lsls	r2, r2, #26
 800b2a2:	d42b      	bmi.n	800b2fc <_printf_common+0xb0>
 800b2a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	47c8      	blx	r9
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d01e      	beq.n	800b2f0 <_printf_common+0xa4>
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	6922      	ldr	r2, [r4, #16]
 800b2b6:	f003 0306 	and.w	r3, r3, #6
 800b2ba:	2b04      	cmp	r3, #4
 800b2bc:	bf02      	ittt	eq
 800b2be:	68e5      	ldreq	r5, [r4, #12]
 800b2c0:	6833      	ldreq	r3, [r6, #0]
 800b2c2:	1aed      	subeq	r5, r5, r3
 800b2c4:	68a3      	ldr	r3, [r4, #8]
 800b2c6:	bf0c      	ite	eq
 800b2c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2cc:	2500      	movne	r5, #0
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	bfc4      	itt	gt
 800b2d2:	1a9b      	subgt	r3, r3, r2
 800b2d4:	18ed      	addgt	r5, r5, r3
 800b2d6:	2600      	movs	r6, #0
 800b2d8:	341a      	adds	r4, #26
 800b2da:	42b5      	cmp	r5, r6
 800b2dc:	d11a      	bne.n	800b314 <_printf_common+0xc8>
 800b2de:	2000      	movs	r0, #0
 800b2e0:	e008      	b.n	800b2f4 <_printf_common+0xa8>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	47c8      	blx	r9
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d103      	bne.n	800b2f8 <_printf_common+0xac>
 800b2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	e7c6      	b.n	800b28a <_printf_common+0x3e>
 800b2fc:	18e1      	adds	r1, r4, r3
 800b2fe:	1c5a      	adds	r2, r3, #1
 800b300:	2030      	movs	r0, #48	@ 0x30
 800b302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b306:	4422      	add	r2, r4
 800b308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b30c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b310:	3302      	adds	r3, #2
 800b312:	e7c7      	b.n	800b2a4 <_printf_common+0x58>
 800b314:	2301      	movs	r3, #1
 800b316:	4622      	mov	r2, r4
 800b318:	4641      	mov	r1, r8
 800b31a:	4638      	mov	r0, r7
 800b31c:	47c8      	blx	r9
 800b31e:	3001      	adds	r0, #1
 800b320:	d0e6      	beq.n	800b2f0 <_printf_common+0xa4>
 800b322:	3601      	adds	r6, #1
 800b324:	e7d9      	b.n	800b2da <_printf_common+0x8e>
	...

0800b328 <_printf_i>:
 800b328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b32c:	7e0f      	ldrb	r7, [r1, #24]
 800b32e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b330:	2f78      	cmp	r7, #120	@ 0x78
 800b332:	4691      	mov	r9, r2
 800b334:	4680      	mov	r8, r0
 800b336:	460c      	mov	r4, r1
 800b338:	469a      	mov	sl, r3
 800b33a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b33e:	d807      	bhi.n	800b350 <_printf_i+0x28>
 800b340:	2f62      	cmp	r7, #98	@ 0x62
 800b342:	d80a      	bhi.n	800b35a <_printf_i+0x32>
 800b344:	2f00      	cmp	r7, #0
 800b346:	f000 80d1 	beq.w	800b4ec <_printf_i+0x1c4>
 800b34a:	2f58      	cmp	r7, #88	@ 0x58
 800b34c:	f000 80b8 	beq.w	800b4c0 <_printf_i+0x198>
 800b350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b358:	e03a      	b.n	800b3d0 <_printf_i+0xa8>
 800b35a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b35e:	2b15      	cmp	r3, #21
 800b360:	d8f6      	bhi.n	800b350 <_printf_i+0x28>
 800b362:	a101      	add	r1, pc, #4	@ (adr r1, 800b368 <_printf_i+0x40>)
 800b364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b368:	0800b3c1 	.word	0x0800b3c1
 800b36c:	0800b3d5 	.word	0x0800b3d5
 800b370:	0800b351 	.word	0x0800b351
 800b374:	0800b351 	.word	0x0800b351
 800b378:	0800b351 	.word	0x0800b351
 800b37c:	0800b351 	.word	0x0800b351
 800b380:	0800b3d5 	.word	0x0800b3d5
 800b384:	0800b351 	.word	0x0800b351
 800b388:	0800b351 	.word	0x0800b351
 800b38c:	0800b351 	.word	0x0800b351
 800b390:	0800b351 	.word	0x0800b351
 800b394:	0800b4d3 	.word	0x0800b4d3
 800b398:	0800b3ff 	.word	0x0800b3ff
 800b39c:	0800b48d 	.word	0x0800b48d
 800b3a0:	0800b351 	.word	0x0800b351
 800b3a4:	0800b351 	.word	0x0800b351
 800b3a8:	0800b4f5 	.word	0x0800b4f5
 800b3ac:	0800b351 	.word	0x0800b351
 800b3b0:	0800b3ff 	.word	0x0800b3ff
 800b3b4:	0800b351 	.word	0x0800b351
 800b3b8:	0800b351 	.word	0x0800b351
 800b3bc:	0800b495 	.word	0x0800b495
 800b3c0:	6833      	ldr	r3, [r6, #0]
 800b3c2:	1d1a      	adds	r2, r3, #4
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6032      	str	r2, [r6, #0]
 800b3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e09c      	b.n	800b50e <_printf_i+0x1e6>
 800b3d4:	6833      	ldr	r3, [r6, #0]
 800b3d6:	6820      	ldr	r0, [r4, #0]
 800b3d8:	1d19      	adds	r1, r3, #4
 800b3da:	6031      	str	r1, [r6, #0]
 800b3dc:	0606      	lsls	r6, r0, #24
 800b3de:	d501      	bpl.n	800b3e4 <_printf_i+0xbc>
 800b3e0:	681d      	ldr	r5, [r3, #0]
 800b3e2:	e003      	b.n	800b3ec <_printf_i+0xc4>
 800b3e4:	0645      	lsls	r5, r0, #25
 800b3e6:	d5fb      	bpl.n	800b3e0 <_printf_i+0xb8>
 800b3e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3ec:	2d00      	cmp	r5, #0
 800b3ee:	da03      	bge.n	800b3f8 <_printf_i+0xd0>
 800b3f0:	232d      	movs	r3, #45	@ 0x2d
 800b3f2:	426d      	negs	r5, r5
 800b3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f8:	4858      	ldr	r0, [pc, #352]	@ (800b55c <_printf_i+0x234>)
 800b3fa:	230a      	movs	r3, #10
 800b3fc:	e011      	b.n	800b422 <_printf_i+0xfa>
 800b3fe:	6821      	ldr	r1, [r4, #0]
 800b400:	6833      	ldr	r3, [r6, #0]
 800b402:	0608      	lsls	r0, r1, #24
 800b404:	f853 5b04 	ldr.w	r5, [r3], #4
 800b408:	d402      	bmi.n	800b410 <_printf_i+0xe8>
 800b40a:	0649      	lsls	r1, r1, #25
 800b40c:	bf48      	it	mi
 800b40e:	b2ad      	uxthmi	r5, r5
 800b410:	2f6f      	cmp	r7, #111	@ 0x6f
 800b412:	4852      	ldr	r0, [pc, #328]	@ (800b55c <_printf_i+0x234>)
 800b414:	6033      	str	r3, [r6, #0]
 800b416:	bf14      	ite	ne
 800b418:	230a      	movne	r3, #10
 800b41a:	2308      	moveq	r3, #8
 800b41c:	2100      	movs	r1, #0
 800b41e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b422:	6866      	ldr	r6, [r4, #4]
 800b424:	60a6      	str	r6, [r4, #8]
 800b426:	2e00      	cmp	r6, #0
 800b428:	db05      	blt.n	800b436 <_printf_i+0x10e>
 800b42a:	6821      	ldr	r1, [r4, #0]
 800b42c:	432e      	orrs	r6, r5
 800b42e:	f021 0104 	bic.w	r1, r1, #4
 800b432:	6021      	str	r1, [r4, #0]
 800b434:	d04b      	beq.n	800b4ce <_printf_i+0x1a6>
 800b436:	4616      	mov	r6, r2
 800b438:	fbb5 f1f3 	udiv	r1, r5, r3
 800b43c:	fb03 5711 	mls	r7, r3, r1, r5
 800b440:	5dc7      	ldrb	r7, [r0, r7]
 800b442:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b446:	462f      	mov	r7, r5
 800b448:	42bb      	cmp	r3, r7
 800b44a:	460d      	mov	r5, r1
 800b44c:	d9f4      	bls.n	800b438 <_printf_i+0x110>
 800b44e:	2b08      	cmp	r3, #8
 800b450:	d10b      	bne.n	800b46a <_printf_i+0x142>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	07df      	lsls	r7, r3, #31
 800b456:	d508      	bpl.n	800b46a <_printf_i+0x142>
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	6861      	ldr	r1, [r4, #4]
 800b45c:	4299      	cmp	r1, r3
 800b45e:	bfde      	ittt	le
 800b460:	2330      	movle	r3, #48	@ 0x30
 800b462:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b466:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b46a:	1b92      	subs	r2, r2, r6
 800b46c:	6122      	str	r2, [r4, #16]
 800b46e:	f8cd a000 	str.w	sl, [sp]
 800b472:	464b      	mov	r3, r9
 800b474:	aa03      	add	r2, sp, #12
 800b476:	4621      	mov	r1, r4
 800b478:	4640      	mov	r0, r8
 800b47a:	f7ff fee7 	bl	800b24c <_printf_common>
 800b47e:	3001      	adds	r0, #1
 800b480:	d14a      	bne.n	800b518 <_printf_i+0x1f0>
 800b482:	f04f 30ff 	mov.w	r0, #4294967295
 800b486:	b004      	add	sp, #16
 800b488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	f043 0320 	orr.w	r3, r3, #32
 800b492:	6023      	str	r3, [r4, #0]
 800b494:	4832      	ldr	r0, [pc, #200]	@ (800b560 <_printf_i+0x238>)
 800b496:	2778      	movs	r7, #120	@ 0x78
 800b498:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	6831      	ldr	r1, [r6, #0]
 800b4a0:	061f      	lsls	r7, r3, #24
 800b4a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4a6:	d402      	bmi.n	800b4ae <_printf_i+0x186>
 800b4a8:	065f      	lsls	r7, r3, #25
 800b4aa:	bf48      	it	mi
 800b4ac:	b2ad      	uxthmi	r5, r5
 800b4ae:	6031      	str	r1, [r6, #0]
 800b4b0:	07d9      	lsls	r1, r3, #31
 800b4b2:	bf44      	itt	mi
 800b4b4:	f043 0320 	orrmi.w	r3, r3, #32
 800b4b8:	6023      	strmi	r3, [r4, #0]
 800b4ba:	b11d      	cbz	r5, 800b4c4 <_printf_i+0x19c>
 800b4bc:	2310      	movs	r3, #16
 800b4be:	e7ad      	b.n	800b41c <_printf_i+0xf4>
 800b4c0:	4826      	ldr	r0, [pc, #152]	@ (800b55c <_printf_i+0x234>)
 800b4c2:	e7e9      	b.n	800b498 <_printf_i+0x170>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	f023 0320 	bic.w	r3, r3, #32
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	e7f6      	b.n	800b4bc <_printf_i+0x194>
 800b4ce:	4616      	mov	r6, r2
 800b4d0:	e7bd      	b.n	800b44e <_printf_i+0x126>
 800b4d2:	6833      	ldr	r3, [r6, #0]
 800b4d4:	6825      	ldr	r5, [r4, #0]
 800b4d6:	6961      	ldr	r1, [r4, #20]
 800b4d8:	1d18      	adds	r0, r3, #4
 800b4da:	6030      	str	r0, [r6, #0]
 800b4dc:	062e      	lsls	r6, r5, #24
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	d501      	bpl.n	800b4e6 <_printf_i+0x1be>
 800b4e2:	6019      	str	r1, [r3, #0]
 800b4e4:	e002      	b.n	800b4ec <_printf_i+0x1c4>
 800b4e6:	0668      	lsls	r0, r5, #25
 800b4e8:	d5fb      	bpl.n	800b4e2 <_printf_i+0x1ba>
 800b4ea:	8019      	strh	r1, [r3, #0]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	6123      	str	r3, [r4, #16]
 800b4f0:	4616      	mov	r6, r2
 800b4f2:	e7bc      	b.n	800b46e <_printf_i+0x146>
 800b4f4:	6833      	ldr	r3, [r6, #0]
 800b4f6:	1d1a      	adds	r2, r3, #4
 800b4f8:	6032      	str	r2, [r6, #0]
 800b4fa:	681e      	ldr	r6, [r3, #0]
 800b4fc:	6862      	ldr	r2, [r4, #4]
 800b4fe:	2100      	movs	r1, #0
 800b500:	4630      	mov	r0, r6
 800b502:	f7f4 fe6d 	bl	80001e0 <memchr>
 800b506:	b108      	cbz	r0, 800b50c <_printf_i+0x1e4>
 800b508:	1b80      	subs	r0, r0, r6
 800b50a:	6060      	str	r0, [r4, #4]
 800b50c:	6863      	ldr	r3, [r4, #4]
 800b50e:	6123      	str	r3, [r4, #16]
 800b510:	2300      	movs	r3, #0
 800b512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b516:	e7aa      	b.n	800b46e <_printf_i+0x146>
 800b518:	6923      	ldr	r3, [r4, #16]
 800b51a:	4632      	mov	r2, r6
 800b51c:	4649      	mov	r1, r9
 800b51e:	4640      	mov	r0, r8
 800b520:	47d0      	blx	sl
 800b522:	3001      	adds	r0, #1
 800b524:	d0ad      	beq.n	800b482 <_printf_i+0x15a>
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	079b      	lsls	r3, r3, #30
 800b52a:	d413      	bmi.n	800b554 <_printf_i+0x22c>
 800b52c:	68e0      	ldr	r0, [r4, #12]
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	4298      	cmp	r0, r3
 800b532:	bfb8      	it	lt
 800b534:	4618      	movlt	r0, r3
 800b536:	e7a6      	b.n	800b486 <_printf_i+0x15e>
 800b538:	2301      	movs	r3, #1
 800b53a:	4632      	mov	r2, r6
 800b53c:	4649      	mov	r1, r9
 800b53e:	4640      	mov	r0, r8
 800b540:	47d0      	blx	sl
 800b542:	3001      	adds	r0, #1
 800b544:	d09d      	beq.n	800b482 <_printf_i+0x15a>
 800b546:	3501      	adds	r5, #1
 800b548:	68e3      	ldr	r3, [r4, #12]
 800b54a:	9903      	ldr	r1, [sp, #12]
 800b54c:	1a5b      	subs	r3, r3, r1
 800b54e:	42ab      	cmp	r3, r5
 800b550:	dcf2      	bgt.n	800b538 <_printf_i+0x210>
 800b552:	e7eb      	b.n	800b52c <_printf_i+0x204>
 800b554:	2500      	movs	r5, #0
 800b556:	f104 0619 	add.w	r6, r4, #25
 800b55a:	e7f5      	b.n	800b548 <_printf_i+0x220>
 800b55c:	0800dcd7 	.word	0x0800dcd7
 800b560:	0800dce8 	.word	0x0800dce8

0800b564 <std>:
 800b564:	2300      	movs	r3, #0
 800b566:	b510      	push	{r4, lr}
 800b568:	4604      	mov	r4, r0
 800b56a:	e9c0 3300 	strd	r3, r3, [r0]
 800b56e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b572:	6083      	str	r3, [r0, #8]
 800b574:	8181      	strh	r1, [r0, #12]
 800b576:	6643      	str	r3, [r0, #100]	@ 0x64
 800b578:	81c2      	strh	r2, [r0, #14]
 800b57a:	6183      	str	r3, [r0, #24]
 800b57c:	4619      	mov	r1, r3
 800b57e:	2208      	movs	r2, #8
 800b580:	305c      	adds	r0, #92	@ 0x5c
 800b582:	f000 f916 	bl	800b7b2 <memset>
 800b586:	4b0d      	ldr	r3, [pc, #52]	@ (800b5bc <std+0x58>)
 800b588:	6263      	str	r3, [r4, #36]	@ 0x24
 800b58a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c0 <std+0x5c>)
 800b58c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b58e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c4 <std+0x60>)
 800b590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <std+0x64>)
 800b594:	6323      	str	r3, [r4, #48]	@ 0x30
 800b596:	4b0d      	ldr	r3, [pc, #52]	@ (800b5cc <std+0x68>)
 800b598:	6224      	str	r4, [r4, #32]
 800b59a:	429c      	cmp	r4, r3
 800b59c:	d006      	beq.n	800b5ac <std+0x48>
 800b59e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5a2:	4294      	cmp	r4, r2
 800b5a4:	d002      	beq.n	800b5ac <std+0x48>
 800b5a6:	33d0      	adds	r3, #208	@ 0xd0
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	d105      	bne.n	800b5b8 <std+0x54>
 800b5ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5b4:	f000 b98c 	b.w	800b8d0 <__retarget_lock_init_recursive>
 800b5b8:	bd10      	pop	{r4, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0800b72d 	.word	0x0800b72d
 800b5c0:	0800b74f 	.word	0x0800b74f
 800b5c4:	0800b787 	.word	0x0800b787
 800b5c8:	0800b7ab 	.word	0x0800b7ab
 800b5cc:	20000e9c 	.word	0x20000e9c

0800b5d0 <stdio_exit_handler>:
 800b5d0:	4a02      	ldr	r2, [pc, #8]	@ (800b5dc <stdio_exit_handler+0xc>)
 800b5d2:	4903      	ldr	r1, [pc, #12]	@ (800b5e0 <stdio_exit_handler+0x10>)
 800b5d4:	4803      	ldr	r0, [pc, #12]	@ (800b5e4 <stdio_exit_handler+0x14>)
 800b5d6:	f000 b869 	b.w	800b6ac <_fwalk_sglue>
 800b5da:	bf00      	nop
 800b5dc:	20000104 	.word	0x20000104
 800b5e0:	0800d255 	.word	0x0800d255
 800b5e4:	20000114 	.word	0x20000114

0800b5e8 <cleanup_stdio>:
 800b5e8:	6841      	ldr	r1, [r0, #4]
 800b5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b61c <cleanup_stdio+0x34>)
 800b5ec:	4299      	cmp	r1, r3
 800b5ee:	b510      	push	{r4, lr}
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	d001      	beq.n	800b5f8 <cleanup_stdio+0x10>
 800b5f4:	f001 fe2e 	bl	800d254 <_fflush_r>
 800b5f8:	68a1      	ldr	r1, [r4, #8]
 800b5fa:	4b09      	ldr	r3, [pc, #36]	@ (800b620 <cleanup_stdio+0x38>)
 800b5fc:	4299      	cmp	r1, r3
 800b5fe:	d002      	beq.n	800b606 <cleanup_stdio+0x1e>
 800b600:	4620      	mov	r0, r4
 800b602:	f001 fe27 	bl	800d254 <_fflush_r>
 800b606:	68e1      	ldr	r1, [r4, #12]
 800b608:	4b06      	ldr	r3, [pc, #24]	@ (800b624 <cleanup_stdio+0x3c>)
 800b60a:	4299      	cmp	r1, r3
 800b60c:	d004      	beq.n	800b618 <cleanup_stdio+0x30>
 800b60e:	4620      	mov	r0, r4
 800b610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b614:	f001 be1e 	b.w	800d254 <_fflush_r>
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	bf00      	nop
 800b61c:	20000e9c 	.word	0x20000e9c
 800b620:	20000f04 	.word	0x20000f04
 800b624:	20000f6c 	.word	0x20000f6c

0800b628 <global_stdio_init.part.0>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	4b0b      	ldr	r3, [pc, #44]	@ (800b658 <global_stdio_init.part.0+0x30>)
 800b62c:	4c0b      	ldr	r4, [pc, #44]	@ (800b65c <global_stdio_init.part.0+0x34>)
 800b62e:	4a0c      	ldr	r2, [pc, #48]	@ (800b660 <global_stdio_init.part.0+0x38>)
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	4620      	mov	r0, r4
 800b634:	2200      	movs	r2, #0
 800b636:	2104      	movs	r1, #4
 800b638:	f7ff ff94 	bl	800b564 <std>
 800b63c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b640:	2201      	movs	r2, #1
 800b642:	2109      	movs	r1, #9
 800b644:	f7ff ff8e 	bl	800b564 <std>
 800b648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b64c:	2202      	movs	r2, #2
 800b64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b652:	2112      	movs	r1, #18
 800b654:	f7ff bf86 	b.w	800b564 <std>
 800b658:	20000fd4 	.word	0x20000fd4
 800b65c:	20000e9c 	.word	0x20000e9c
 800b660:	0800b5d1 	.word	0x0800b5d1

0800b664 <__sfp_lock_acquire>:
 800b664:	4801      	ldr	r0, [pc, #4]	@ (800b66c <__sfp_lock_acquire+0x8>)
 800b666:	f000 b934 	b.w	800b8d2 <__retarget_lock_acquire_recursive>
 800b66a:	bf00      	nop
 800b66c:	20000fdd 	.word	0x20000fdd

0800b670 <__sfp_lock_release>:
 800b670:	4801      	ldr	r0, [pc, #4]	@ (800b678 <__sfp_lock_release+0x8>)
 800b672:	f000 b92f 	b.w	800b8d4 <__retarget_lock_release_recursive>
 800b676:	bf00      	nop
 800b678:	20000fdd 	.word	0x20000fdd

0800b67c <__sinit>:
 800b67c:	b510      	push	{r4, lr}
 800b67e:	4604      	mov	r4, r0
 800b680:	f7ff fff0 	bl	800b664 <__sfp_lock_acquire>
 800b684:	6a23      	ldr	r3, [r4, #32]
 800b686:	b11b      	cbz	r3, 800b690 <__sinit+0x14>
 800b688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b68c:	f7ff bff0 	b.w	800b670 <__sfp_lock_release>
 800b690:	4b04      	ldr	r3, [pc, #16]	@ (800b6a4 <__sinit+0x28>)
 800b692:	6223      	str	r3, [r4, #32]
 800b694:	4b04      	ldr	r3, [pc, #16]	@ (800b6a8 <__sinit+0x2c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1f5      	bne.n	800b688 <__sinit+0xc>
 800b69c:	f7ff ffc4 	bl	800b628 <global_stdio_init.part.0>
 800b6a0:	e7f2      	b.n	800b688 <__sinit+0xc>
 800b6a2:	bf00      	nop
 800b6a4:	0800b5e9 	.word	0x0800b5e9
 800b6a8:	20000fd4 	.word	0x20000fd4

0800b6ac <_fwalk_sglue>:
 800b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	4688      	mov	r8, r1
 800b6b4:	4614      	mov	r4, r2
 800b6b6:	2600      	movs	r6, #0
 800b6b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b6c0:	d505      	bpl.n	800b6ce <_fwalk_sglue+0x22>
 800b6c2:	6824      	ldr	r4, [r4, #0]
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	d1f7      	bne.n	800b6b8 <_fwalk_sglue+0xc>
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d907      	bls.n	800b6e4 <_fwalk_sglue+0x38>
 800b6d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	d003      	beq.n	800b6e4 <_fwalk_sglue+0x38>
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4638      	mov	r0, r7
 800b6e0:	47c0      	blx	r8
 800b6e2:	4306      	orrs	r6, r0
 800b6e4:	3568      	adds	r5, #104	@ 0x68
 800b6e6:	e7e9      	b.n	800b6bc <_fwalk_sglue+0x10>

0800b6e8 <siprintf>:
 800b6e8:	b40e      	push	{r1, r2, r3}
 800b6ea:	b510      	push	{r4, lr}
 800b6ec:	b09d      	sub	sp, #116	@ 0x74
 800b6ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b6f0:	9002      	str	r0, [sp, #8]
 800b6f2:	9006      	str	r0, [sp, #24]
 800b6f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b6f8:	480a      	ldr	r0, [pc, #40]	@ (800b724 <siprintf+0x3c>)
 800b6fa:	9107      	str	r1, [sp, #28]
 800b6fc:	9104      	str	r1, [sp, #16]
 800b6fe:	490a      	ldr	r1, [pc, #40]	@ (800b728 <siprintf+0x40>)
 800b700:	f853 2b04 	ldr.w	r2, [r3], #4
 800b704:	9105      	str	r1, [sp, #20]
 800b706:	2400      	movs	r4, #0
 800b708:	a902      	add	r1, sp, #8
 800b70a:	6800      	ldr	r0, [r0, #0]
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b710:	f001 fc20 	bl	800cf54 <_svfiprintf_r>
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	701c      	strb	r4, [r3, #0]
 800b718:	b01d      	add	sp, #116	@ 0x74
 800b71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b71e:	b003      	add	sp, #12
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	20000110 	.word	0x20000110
 800b728:	ffff0208 	.word	0xffff0208

0800b72c <__sread>:
 800b72c:	b510      	push	{r4, lr}
 800b72e:	460c      	mov	r4, r1
 800b730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b734:	f000 f87e 	bl	800b834 <_read_r>
 800b738:	2800      	cmp	r0, #0
 800b73a:	bfab      	itete	ge
 800b73c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b73e:	89a3      	ldrhlt	r3, [r4, #12]
 800b740:	181b      	addge	r3, r3, r0
 800b742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b746:	bfac      	ite	ge
 800b748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b74a:	81a3      	strhlt	r3, [r4, #12]
 800b74c:	bd10      	pop	{r4, pc}

0800b74e <__swrite>:
 800b74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b752:	461f      	mov	r7, r3
 800b754:	898b      	ldrh	r3, [r1, #12]
 800b756:	05db      	lsls	r3, r3, #23
 800b758:	4605      	mov	r5, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	4616      	mov	r6, r2
 800b75e:	d505      	bpl.n	800b76c <__swrite+0x1e>
 800b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b764:	2302      	movs	r3, #2
 800b766:	2200      	movs	r2, #0
 800b768:	f000 f852 	bl	800b810 <_lseek_r>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	4632      	mov	r2, r6
 800b77a:	463b      	mov	r3, r7
 800b77c:	4628      	mov	r0, r5
 800b77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b782:	f000 b869 	b.w	800b858 <_write_r>

0800b786 <__sseek>:
 800b786:	b510      	push	{r4, lr}
 800b788:	460c      	mov	r4, r1
 800b78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b78e:	f000 f83f 	bl	800b810 <_lseek_r>
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	bf15      	itete	ne
 800b798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b79a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b79e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7a2:	81a3      	strheq	r3, [r4, #12]
 800b7a4:	bf18      	it	ne
 800b7a6:	81a3      	strhne	r3, [r4, #12]
 800b7a8:	bd10      	pop	{r4, pc}

0800b7aa <__sclose>:
 800b7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ae:	f000 b81f 	b.w	800b7f0 <_close_r>

0800b7b2 <memset>:
 800b7b2:	4402      	add	r2, r0
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d100      	bne.n	800b7bc <memset+0xa>
 800b7ba:	4770      	bx	lr
 800b7bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b7c0:	e7f9      	b.n	800b7b6 <memset+0x4>

0800b7c2 <strncmp>:
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	b16a      	cbz	r2, 800b7e2 <strncmp+0x20>
 800b7c6:	3901      	subs	r1, #1
 800b7c8:	1884      	adds	r4, r0, r2
 800b7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d103      	bne.n	800b7de <strncmp+0x1c>
 800b7d6:	42a0      	cmp	r0, r4
 800b7d8:	d001      	beq.n	800b7de <strncmp+0x1c>
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d1f5      	bne.n	800b7ca <strncmp+0x8>
 800b7de:	1ad0      	subs	r0, r2, r3
 800b7e0:	bd10      	pop	{r4, pc}
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	e7fc      	b.n	800b7e0 <strncmp+0x1e>
	...

0800b7e8 <_localeconv_r>:
 800b7e8:	4800      	ldr	r0, [pc, #0]	@ (800b7ec <_localeconv_r+0x4>)
 800b7ea:	4770      	bx	lr
 800b7ec:	20000250 	.word	0x20000250

0800b7f0 <_close_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d06      	ldr	r5, [pc, #24]	@ (800b80c <_close_r+0x1c>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f7 f948 	bl	8002a90 <_close>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_close_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_close_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20000fd8 	.word	0x20000fd8

0800b810 <_lseek_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4d07      	ldr	r5, [pc, #28]	@ (800b830 <_lseek_r+0x20>)
 800b814:	4604      	mov	r4, r0
 800b816:	4608      	mov	r0, r1
 800b818:	4611      	mov	r1, r2
 800b81a:	2200      	movs	r2, #0
 800b81c:	602a      	str	r2, [r5, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	f7f7 f95d 	bl	8002ade <_lseek>
 800b824:	1c43      	adds	r3, r0, #1
 800b826:	d102      	bne.n	800b82e <_lseek_r+0x1e>
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	b103      	cbz	r3, 800b82e <_lseek_r+0x1e>
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	20000fd8 	.word	0x20000fd8

0800b834 <_read_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4d07      	ldr	r5, [pc, #28]	@ (800b854 <_read_r+0x20>)
 800b838:	4604      	mov	r4, r0
 800b83a:	4608      	mov	r0, r1
 800b83c:	4611      	mov	r1, r2
 800b83e:	2200      	movs	r2, #0
 800b840:	602a      	str	r2, [r5, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	f7f7 f8eb 	bl	8002a1e <_read>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_read_r+0x1e>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_read_r+0x1e>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	20000fd8 	.word	0x20000fd8

0800b858 <_write_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d07      	ldr	r5, [pc, #28]	@ (800b878 <_write_r+0x20>)
 800b85c:	4604      	mov	r4, r0
 800b85e:	4608      	mov	r0, r1
 800b860:	4611      	mov	r1, r2
 800b862:	2200      	movs	r2, #0
 800b864:	602a      	str	r2, [r5, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	f7f7 f8f6 	bl	8002a58 <_write>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_write_r+0x1e>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_write_r+0x1e>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20000fd8 	.word	0x20000fd8

0800b87c <__errno>:
 800b87c:	4b01      	ldr	r3, [pc, #4]	@ (800b884 <__errno+0x8>)
 800b87e:	6818      	ldr	r0, [r3, #0]
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	20000110 	.word	0x20000110

0800b888 <__libc_init_array>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	4d0d      	ldr	r5, [pc, #52]	@ (800b8c0 <__libc_init_array+0x38>)
 800b88c:	4c0d      	ldr	r4, [pc, #52]	@ (800b8c4 <__libc_init_array+0x3c>)
 800b88e:	1b64      	subs	r4, r4, r5
 800b890:	10a4      	asrs	r4, r4, #2
 800b892:	2600      	movs	r6, #0
 800b894:	42a6      	cmp	r6, r4
 800b896:	d109      	bne.n	800b8ac <__libc_init_array+0x24>
 800b898:	4d0b      	ldr	r5, [pc, #44]	@ (800b8c8 <__libc_init_array+0x40>)
 800b89a:	4c0c      	ldr	r4, [pc, #48]	@ (800b8cc <__libc_init_array+0x44>)
 800b89c:	f002 f86a 	bl	800d974 <_init>
 800b8a0:	1b64      	subs	r4, r4, r5
 800b8a2:	10a4      	asrs	r4, r4, #2
 800b8a4:	2600      	movs	r6, #0
 800b8a6:	42a6      	cmp	r6, r4
 800b8a8:	d105      	bne.n	800b8b6 <__libc_init_array+0x2e>
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b0:	4798      	blx	r3
 800b8b2:	3601      	adds	r6, #1
 800b8b4:	e7ee      	b.n	800b894 <__libc_init_array+0xc>
 800b8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ba:	4798      	blx	r3
 800b8bc:	3601      	adds	r6, #1
 800b8be:	e7f2      	b.n	800b8a6 <__libc_init_array+0x1e>
 800b8c0:	0800df40 	.word	0x0800df40
 800b8c4:	0800df40 	.word	0x0800df40
 800b8c8:	0800df40 	.word	0x0800df40
 800b8cc:	0800df44 	.word	0x0800df44

0800b8d0 <__retarget_lock_init_recursive>:
 800b8d0:	4770      	bx	lr

0800b8d2 <__retarget_lock_acquire_recursive>:
 800b8d2:	4770      	bx	lr

0800b8d4 <__retarget_lock_release_recursive>:
 800b8d4:	4770      	bx	lr

0800b8d6 <memcpy>:
 800b8d6:	440a      	add	r2, r1
 800b8d8:	4291      	cmp	r1, r2
 800b8da:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8de:	d100      	bne.n	800b8e2 <memcpy+0xc>
 800b8e0:	4770      	bx	lr
 800b8e2:	b510      	push	{r4, lr}
 800b8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ec:	4291      	cmp	r1, r2
 800b8ee:	d1f9      	bne.n	800b8e4 <memcpy+0xe>
 800b8f0:	bd10      	pop	{r4, pc}

0800b8f2 <quorem>:
 800b8f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f6:	6903      	ldr	r3, [r0, #16]
 800b8f8:	690c      	ldr	r4, [r1, #16]
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	db7e      	blt.n	800b9fe <quorem+0x10c>
 800b900:	3c01      	subs	r4, #1
 800b902:	f101 0814 	add.w	r8, r1, #20
 800b906:	00a3      	lsls	r3, r4, #2
 800b908:	f100 0514 	add.w	r5, r0, #20
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b912:	9301      	str	r3, [sp, #4]
 800b914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b91c:	3301      	adds	r3, #1
 800b91e:	429a      	cmp	r2, r3
 800b920:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b924:	fbb2 f6f3 	udiv	r6, r2, r3
 800b928:	d32e      	bcc.n	800b988 <quorem+0x96>
 800b92a:	f04f 0a00 	mov.w	sl, #0
 800b92e:	46c4      	mov	ip, r8
 800b930:	46ae      	mov	lr, r5
 800b932:	46d3      	mov	fp, sl
 800b934:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b938:	b298      	uxth	r0, r3
 800b93a:	fb06 a000 	mla	r0, r6, r0, sl
 800b93e:	0c02      	lsrs	r2, r0, #16
 800b940:	0c1b      	lsrs	r3, r3, #16
 800b942:	fb06 2303 	mla	r3, r6, r3, r2
 800b946:	f8de 2000 	ldr.w	r2, [lr]
 800b94a:	b280      	uxth	r0, r0
 800b94c:	b292      	uxth	r2, r2
 800b94e:	1a12      	subs	r2, r2, r0
 800b950:	445a      	add	r2, fp
 800b952:	f8de 0000 	ldr.w	r0, [lr]
 800b956:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b960:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b964:	b292      	uxth	r2, r2
 800b966:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b96a:	45e1      	cmp	r9, ip
 800b96c:	f84e 2b04 	str.w	r2, [lr], #4
 800b970:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b974:	d2de      	bcs.n	800b934 <quorem+0x42>
 800b976:	9b00      	ldr	r3, [sp, #0]
 800b978:	58eb      	ldr	r3, [r5, r3]
 800b97a:	b92b      	cbnz	r3, 800b988 <quorem+0x96>
 800b97c:	9b01      	ldr	r3, [sp, #4]
 800b97e:	3b04      	subs	r3, #4
 800b980:	429d      	cmp	r5, r3
 800b982:	461a      	mov	r2, r3
 800b984:	d32f      	bcc.n	800b9e6 <quorem+0xf4>
 800b986:	613c      	str	r4, [r7, #16]
 800b988:	4638      	mov	r0, r7
 800b98a:	f001 f97f 	bl	800cc8c <__mcmp>
 800b98e:	2800      	cmp	r0, #0
 800b990:	db25      	blt.n	800b9de <quorem+0xec>
 800b992:	4629      	mov	r1, r5
 800b994:	2000      	movs	r0, #0
 800b996:	f858 2b04 	ldr.w	r2, [r8], #4
 800b99a:	f8d1 c000 	ldr.w	ip, [r1]
 800b99e:	fa1f fe82 	uxth.w	lr, r2
 800b9a2:	fa1f f38c 	uxth.w	r3, ip
 800b9a6:	eba3 030e 	sub.w	r3, r3, lr
 800b9aa:	4403      	add	r3, r0
 800b9ac:	0c12      	lsrs	r2, r2, #16
 800b9ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b9b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9bc:	45c1      	cmp	r9, r8
 800b9be:	f841 3b04 	str.w	r3, [r1], #4
 800b9c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b9c6:	d2e6      	bcs.n	800b996 <quorem+0xa4>
 800b9c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9d0:	b922      	cbnz	r2, 800b9dc <quorem+0xea>
 800b9d2:	3b04      	subs	r3, #4
 800b9d4:	429d      	cmp	r5, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	d30b      	bcc.n	800b9f2 <quorem+0x100>
 800b9da:	613c      	str	r4, [r7, #16]
 800b9dc:	3601      	adds	r6, #1
 800b9de:	4630      	mov	r0, r6
 800b9e0:	b003      	add	sp, #12
 800b9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e6:	6812      	ldr	r2, [r2, #0]
 800b9e8:	3b04      	subs	r3, #4
 800b9ea:	2a00      	cmp	r2, #0
 800b9ec:	d1cb      	bne.n	800b986 <quorem+0x94>
 800b9ee:	3c01      	subs	r4, #1
 800b9f0:	e7c6      	b.n	800b980 <quorem+0x8e>
 800b9f2:	6812      	ldr	r2, [r2, #0]
 800b9f4:	3b04      	subs	r3, #4
 800b9f6:	2a00      	cmp	r2, #0
 800b9f8:	d1ef      	bne.n	800b9da <quorem+0xe8>
 800b9fa:	3c01      	subs	r4, #1
 800b9fc:	e7ea      	b.n	800b9d4 <quorem+0xe2>
 800b9fe:	2000      	movs	r0, #0
 800ba00:	e7ee      	b.n	800b9e0 <quorem+0xee>
 800ba02:	0000      	movs	r0, r0
 800ba04:	0000      	movs	r0, r0
	...

0800ba08 <_dtoa_r>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	69c7      	ldr	r7, [r0, #28]
 800ba0e:	b097      	sub	sp, #92	@ 0x5c
 800ba10:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ba14:	ec55 4b10 	vmov	r4, r5, d0
 800ba18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ba1a:	9107      	str	r1, [sp, #28]
 800ba1c:	4681      	mov	r9, r0
 800ba1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba20:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba22:	b97f      	cbnz	r7, 800ba44 <_dtoa_r+0x3c>
 800ba24:	2010      	movs	r0, #16
 800ba26:	f000 fe09 	bl	800c63c <malloc>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ba30:	b920      	cbnz	r0, 800ba3c <_dtoa_r+0x34>
 800ba32:	4ba9      	ldr	r3, [pc, #676]	@ (800bcd8 <_dtoa_r+0x2d0>)
 800ba34:	21ef      	movs	r1, #239	@ 0xef
 800ba36:	48a9      	ldr	r0, [pc, #676]	@ (800bcdc <_dtoa_r+0x2d4>)
 800ba38:	f001 fc5e 	bl	800d2f8 <__assert_func>
 800ba3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba40:	6007      	str	r7, [r0, #0]
 800ba42:	60c7      	str	r7, [r0, #12]
 800ba44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba48:	6819      	ldr	r1, [r3, #0]
 800ba4a:	b159      	cbz	r1, 800ba64 <_dtoa_r+0x5c>
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	604a      	str	r2, [r1, #4]
 800ba50:	2301      	movs	r3, #1
 800ba52:	4093      	lsls	r3, r2
 800ba54:	608b      	str	r3, [r1, #8]
 800ba56:	4648      	mov	r0, r9
 800ba58:	f000 fee6 	bl	800c828 <_Bfree>
 800ba5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba60:	2200      	movs	r2, #0
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	1e2b      	subs	r3, r5, #0
 800ba66:	bfb9      	ittee	lt
 800ba68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba6c:	9305      	strlt	r3, [sp, #20]
 800ba6e:	2300      	movge	r3, #0
 800ba70:	6033      	strge	r3, [r6, #0]
 800ba72:	9f05      	ldr	r7, [sp, #20]
 800ba74:	4b9a      	ldr	r3, [pc, #616]	@ (800bce0 <_dtoa_r+0x2d8>)
 800ba76:	bfbc      	itt	lt
 800ba78:	2201      	movlt	r2, #1
 800ba7a:	6032      	strlt	r2, [r6, #0]
 800ba7c:	43bb      	bics	r3, r7
 800ba7e:	d112      	bne.n	800baa6 <_dtoa_r+0x9e>
 800ba80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ba82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba8c:	4323      	orrs	r3, r4
 800ba8e:	f000 855a 	beq.w	800c546 <_dtoa_r+0xb3e>
 800ba92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bcf4 <_dtoa_r+0x2ec>
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 855c 	beq.w	800c556 <_dtoa_r+0xb4e>
 800ba9e:	f10a 0303 	add.w	r3, sl, #3
 800baa2:	f000 bd56 	b.w	800c552 <_dtoa_r+0xb4a>
 800baa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800baaa:	2200      	movs	r2, #0
 800baac:	ec51 0b17 	vmov	r0, r1, d7
 800bab0:	2300      	movs	r3, #0
 800bab2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bab6:	f7f5 f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 800baba:	4680      	mov	r8, r0
 800babc:	b158      	cbz	r0, 800bad6 <_dtoa_r+0xce>
 800babe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bac0:	2301      	movs	r3, #1
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bac6:	b113      	cbz	r3, 800bace <_dtoa_r+0xc6>
 800bac8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800baca:	4b86      	ldr	r3, [pc, #536]	@ (800bce4 <_dtoa_r+0x2dc>)
 800bacc:	6013      	str	r3, [r2, #0]
 800bace:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bcf8 <_dtoa_r+0x2f0>
 800bad2:	f000 bd40 	b.w	800c556 <_dtoa_r+0xb4e>
 800bad6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bada:	aa14      	add	r2, sp, #80	@ 0x50
 800badc:	a915      	add	r1, sp, #84	@ 0x54
 800bade:	4648      	mov	r0, r9
 800bae0:	f001 f984 	bl	800cdec <__d2b>
 800bae4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bae8:	9002      	str	r0, [sp, #8]
 800baea:	2e00      	cmp	r6, #0
 800baec:	d078      	beq.n	800bbe0 <_dtoa_r+0x1d8>
 800baee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baf0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800baf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bafc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bb04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bb08:	4619      	mov	r1, r3
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	4b76      	ldr	r3, [pc, #472]	@ (800bce8 <_dtoa_r+0x2e0>)
 800bb0e:	f7f4 fbc3 	bl	8000298 <__aeabi_dsub>
 800bb12:	a36b      	add	r3, pc, #428	@ (adr r3, 800bcc0 <_dtoa_r+0x2b8>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	f7f4 fd76 	bl	8000608 <__aeabi_dmul>
 800bb1c:	a36a      	add	r3, pc, #424	@ (adr r3, 800bcc8 <_dtoa_r+0x2c0>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f7f4 fbbb 	bl	800029c <__adddf3>
 800bb26:	4604      	mov	r4, r0
 800bb28:	4630      	mov	r0, r6
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	f7f4 fd02 	bl	8000534 <__aeabi_i2d>
 800bb30:	a367      	add	r3, pc, #412	@ (adr r3, 800bcd0 <_dtoa_r+0x2c8>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f7f4 fd67 	bl	8000608 <__aeabi_dmul>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fbab 	bl	800029c <__adddf3>
 800bb46:	4604      	mov	r4, r0
 800bb48:	460d      	mov	r5, r1
 800bb4a:	f7f5 f80d 	bl	8000b68 <__aeabi_d2iz>
 800bb4e:	2200      	movs	r2, #0
 800bb50:	4607      	mov	r7, r0
 800bb52:	2300      	movs	r3, #0
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 ffc8 	bl	8000aec <__aeabi_dcmplt>
 800bb5c:	b140      	cbz	r0, 800bb70 <_dtoa_r+0x168>
 800bb5e:	4638      	mov	r0, r7
 800bb60:	f7f4 fce8 	bl	8000534 <__aeabi_i2d>
 800bb64:	4622      	mov	r2, r4
 800bb66:	462b      	mov	r3, r5
 800bb68:	f7f4 ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb6c:	b900      	cbnz	r0, 800bb70 <_dtoa_r+0x168>
 800bb6e:	3f01      	subs	r7, #1
 800bb70:	2f16      	cmp	r7, #22
 800bb72:	d852      	bhi.n	800bc1a <_dtoa_r+0x212>
 800bb74:	4b5d      	ldr	r3, [pc, #372]	@ (800bcec <_dtoa_r+0x2e4>)
 800bb76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bb82:	f7f4 ffb3 	bl	8000aec <__aeabi_dcmplt>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d049      	beq.n	800bc1e <_dtoa_r+0x216>
 800bb8a:	3f01      	subs	r7, #1
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb92:	1b9b      	subs	r3, r3, r6
 800bb94:	1e5a      	subs	r2, r3, #1
 800bb96:	bf45      	ittet	mi
 800bb98:	f1c3 0301 	rsbmi	r3, r3, #1
 800bb9c:	9300      	strmi	r3, [sp, #0]
 800bb9e:	2300      	movpl	r3, #0
 800bba0:	2300      	movmi	r3, #0
 800bba2:	9206      	str	r2, [sp, #24]
 800bba4:	bf54      	ite	pl
 800bba6:	9300      	strpl	r3, [sp, #0]
 800bba8:	9306      	strmi	r3, [sp, #24]
 800bbaa:	2f00      	cmp	r7, #0
 800bbac:	db39      	blt.n	800bc22 <_dtoa_r+0x21a>
 800bbae:	9b06      	ldr	r3, [sp, #24]
 800bbb0:	970d      	str	r7, [sp, #52]	@ 0x34
 800bbb2:	443b      	add	r3, r7
 800bbb4:	9306      	str	r3, [sp, #24]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	9308      	str	r3, [sp, #32]
 800bbba:	9b07      	ldr	r3, [sp, #28]
 800bbbc:	2b09      	cmp	r3, #9
 800bbbe:	d863      	bhi.n	800bc88 <_dtoa_r+0x280>
 800bbc0:	2b05      	cmp	r3, #5
 800bbc2:	bfc4      	itt	gt
 800bbc4:	3b04      	subgt	r3, #4
 800bbc6:	9307      	strgt	r3, [sp, #28]
 800bbc8:	9b07      	ldr	r3, [sp, #28]
 800bbca:	f1a3 0302 	sub.w	r3, r3, #2
 800bbce:	bfcc      	ite	gt
 800bbd0:	2400      	movgt	r4, #0
 800bbd2:	2401      	movle	r4, #1
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d863      	bhi.n	800bca0 <_dtoa_r+0x298>
 800bbd8:	e8df f003 	tbb	[pc, r3]
 800bbdc:	2b375452 	.word	0x2b375452
 800bbe0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bbe4:	441e      	add	r6, r3
 800bbe6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bbea:	2b20      	cmp	r3, #32
 800bbec:	bfc1      	itttt	gt
 800bbee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bbf2:	409f      	lslgt	r7, r3
 800bbf4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bbf8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bbfc:	bfd6      	itet	le
 800bbfe:	f1c3 0320 	rsble	r3, r3, #32
 800bc02:	ea47 0003 	orrgt.w	r0, r7, r3
 800bc06:	fa04 f003 	lslle.w	r0, r4, r3
 800bc0a:	f7f4 fc83 	bl	8000514 <__aeabi_ui2d>
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bc14:	3e01      	subs	r6, #1
 800bc16:	9212      	str	r2, [sp, #72]	@ 0x48
 800bc18:	e776      	b.n	800bb08 <_dtoa_r+0x100>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e7b7      	b.n	800bb8e <_dtoa_r+0x186>
 800bc1e:	9010      	str	r0, [sp, #64]	@ 0x40
 800bc20:	e7b6      	b.n	800bb90 <_dtoa_r+0x188>
 800bc22:	9b00      	ldr	r3, [sp, #0]
 800bc24:	1bdb      	subs	r3, r3, r7
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	427b      	negs	r3, r7
 800bc2a:	9308      	str	r3, [sp, #32]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc30:	e7c3      	b.n	800bbba <_dtoa_r+0x1b2>
 800bc32:	2301      	movs	r3, #1
 800bc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc38:	eb07 0b03 	add.w	fp, r7, r3
 800bc3c:	f10b 0301 	add.w	r3, fp, #1
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	bfb8      	it	lt
 800bc46:	2301      	movlt	r3, #1
 800bc48:	e006      	b.n	800bc58 <_dtoa_r+0x250>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dd28      	ble.n	800bca6 <_dtoa_r+0x29e>
 800bc54:	469b      	mov	fp, r3
 800bc56:	9303      	str	r3, [sp, #12]
 800bc58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	2204      	movs	r2, #4
 800bc60:	f102 0514 	add.w	r5, r2, #20
 800bc64:	429d      	cmp	r5, r3
 800bc66:	d926      	bls.n	800bcb6 <_dtoa_r+0x2ae>
 800bc68:	6041      	str	r1, [r0, #4]
 800bc6a:	4648      	mov	r0, r9
 800bc6c:	f000 fd9c 	bl	800c7a8 <_Balloc>
 800bc70:	4682      	mov	sl, r0
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d142      	bne.n	800bcfc <_dtoa_r+0x2f4>
 800bc76:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf0 <_dtoa_r+0x2e8>)
 800bc78:	4602      	mov	r2, r0
 800bc7a:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc7e:	e6da      	b.n	800ba36 <_dtoa_r+0x2e>
 800bc80:	2300      	movs	r3, #0
 800bc82:	e7e3      	b.n	800bc4c <_dtoa_r+0x244>
 800bc84:	2300      	movs	r3, #0
 800bc86:	e7d5      	b.n	800bc34 <_dtoa_r+0x22c>
 800bc88:	2401      	movs	r4, #1
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9307      	str	r3, [sp, #28]
 800bc8e:	9409      	str	r4, [sp, #36]	@ 0x24
 800bc90:	f04f 3bff 	mov.w	fp, #4294967295
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8cd b00c 	str.w	fp, [sp, #12]
 800bc9a:	2312      	movs	r3, #18
 800bc9c:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc9e:	e7db      	b.n	800bc58 <_dtoa_r+0x250>
 800bca0:	2301      	movs	r3, #1
 800bca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca4:	e7f4      	b.n	800bc90 <_dtoa_r+0x288>
 800bca6:	f04f 0b01 	mov.w	fp, #1
 800bcaa:	f8cd b00c 	str.w	fp, [sp, #12]
 800bcae:	465b      	mov	r3, fp
 800bcb0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bcb4:	e7d0      	b.n	800bc58 <_dtoa_r+0x250>
 800bcb6:	3101      	adds	r1, #1
 800bcb8:	0052      	lsls	r2, r2, #1
 800bcba:	e7d1      	b.n	800bc60 <_dtoa_r+0x258>
 800bcbc:	f3af 8000 	nop.w
 800bcc0:	636f4361 	.word	0x636f4361
 800bcc4:	3fd287a7 	.word	0x3fd287a7
 800bcc8:	8b60c8b3 	.word	0x8b60c8b3
 800bccc:	3fc68a28 	.word	0x3fc68a28
 800bcd0:	509f79fb 	.word	0x509f79fb
 800bcd4:	3fd34413 	.word	0x3fd34413
 800bcd8:	0800dd06 	.word	0x0800dd06
 800bcdc:	0800dd1d 	.word	0x0800dd1d
 800bce0:	7ff00000 	.word	0x7ff00000
 800bce4:	0800dcd6 	.word	0x0800dcd6
 800bce8:	3ff80000 	.word	0x3ff80000
 800bcec:	0800de70 	.word	0x0800de70
 800bcf0:	0800dd75 	.word	0x0800dd75
 800bcf4:	0800dd02 	.word	0x0800dd02
 800bcf8:	0800dcd5 	.word	0x0800dcd5
 800bcfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd00:	6018      	str	r0, [r3, #0]
 800bd02:	9b03      	ldr	r3, [sp, #12]
 800bd04:	2b0e      	cmp	r3, #14
 800bd06:	f200 80a1 	bhi.w	800be4c <_dtoa_r+0x444>
 800bd0a:	2c00      	cmp	r4, #0
 800bd0c:	f000 809e 	beq.w	800be4c <_dtoa_r+0x444>
 800bd10:	2f00      	cmp	r7, #0
 800bd12:	dd33      	ble.n	800bd7c <_dtoa_r+0x374>
 800bd14:	4b9c      	ldr	r3, [pc, #624]	@ (800bf88 <_dtoa_r+0x580>)
 800bd16:	f007 020f 	and.w	r2, r7, #15
 800bd1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd1e:	ed93 7b00 	vldr	d7, [r3]
 800bd22:	05f8      	lsls	r0, r7, #23
 800bd24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bd28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd2c:	d516      	bpl.n	800bd5c <_dtoa_r+0x354>
 800bd2e:	4b97      	ldr	r3, [pc, #604]	@ (800bf8c <_dtoa_r+0x584>)
 800bd30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd38:	f7f4 fd90 	bl	800085c <__aeabi_ddiv>
 800bd3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd40:	f004 040f 	and.w	r4, r4, #15
 800bd44:	2603      	movs	r6, #3
 800bd46:	4d91      	ldr	r5, [pc, #580]	@ (800bf8c <_dtoa_r+0x584>)
 800bd48:	b954      	cbnz	r4, 800bd60 <_dtoa_r+0x358>
 800bd4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd52:	f7f4 fd83 	bl	800085c <__aeabi_ddiv>
 800bd56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd5a:	e028      	b.n	800bdae <_dtoa_r+0x3a6>
 800bd5c:	2602      	movs	r6, #2
 800bd5e:	e7f2      	b.n	800bd46 <_dtoa_r+0x33e>
 800bd60:	07e1      	lsls	r1, r4, #31
 800bd62:	d508      	bpl.n	800bd76 <_dtoa_r+0x36e>
 800bd64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bd68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd6c:	f7f4 fc4c 	bl	8000608 <__aeabi_dmul>
 800bd70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bd74:	3601      	adds	r6, #1
 800bd76:	1064      	asrs	r4, r4, #1
 800bd78:	3508      	adds	r5, #8
 800bd7a:	e7e5      	b.n	800bd48 <_dtoa_r+0x340>
 800bd7c:	f000 80af 	beq.w	800bede <_dtoa_r+0x4d6>
 800bd80:	427c      	negs	r4, r7
 800bd82:	4b81      	ldr	r3, [pc, #516]	@ (800bf88 <_dtoa_r+0x580>)
 800bd84:	4d81      	ldr	r5, [pc, #516]	@ (800bf8c <_dtoa_r+0x584>)
 800bd86:	f004 020f 	and.w	r2, r4, #15
 800bd8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd96:	f7f4 fc37 	bl	8000608 <__aeabi_dmul>
 800bd9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd9e:	1124      	asrs	r4, r4, #4
 800bda0:	2300      	movs	r3, #0
 800bda2:	2602      	movs	r6, #2
 800bda4:	2c00      	cmp	r4, #0
 800bda6:	f040 808f 	bne.w	800bec8 <_dtoa_r+0x4c0>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1d3      	bne.n	800bd56 <_dtoa_r+0x34e>
 800bdae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdb0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f000 8094 	beq.w	800bee2 <_dtoa_r+0x4da>
 800bdba:	4b75      	ldr	r3, [pc, #468]	@ (800bf90 <_dtoa_r+0x588>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	f7f4 fe93 	bl	8000aec <__aeabi_dcmplt>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f000 808b 	beq.w	800bee2 <_dtoa_r+0x4da>
 800bdcc:	9b03      	ldr	r3, [sp, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 8087 	beq.w	800bee2 <_dtoa_r+0x4da>
 800bdd4:	f1bb 0f00 	cmp.w	fp, #0
 800bdd8:	dd34      	ble.n	800be44 <_dtoa_r+0x43c>
 800bdda:	4620      	mov	r0, r4
 800bddc:	4b6d      	ldr	r3, [pc, #436]	@ (800bf94 <_dtoa_r+0x58c>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fc11 	bl	8000608 <__aeabi_dmul>
 800bde6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdea:	f107 38ff 	add.w	r8, r7, #4294967295
 800bdee:	3601      	adds	r6, #1
 800bdf0:	465c      	mov	r4, fp
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f7f4 fb9e 	bl	8000534 <__aeabi_i2d>
 800bdf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdfc:	f7f4 fc04 	bl	8000608 <__aeabi_dmul>
 800be00:	4b65      	ldr	r3, [pc, #404]	@ (800bf98 <_dtoa_r+0x590>)
 800be02:	2200      	movs	r2, #0
 800be04:	f7f4 fa4a 	bl	800029c <__adddf3>
 800be08:	4605      	mov	r5, r0
 800be0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800be0e:	2c00      	cmp	r4, #0
 800be10:	d16a      	bne.n	800bee8 <_dtoa_r+0x4e0>
 800be12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be16:	4b61      	ldr	r3, [pc, #388]	@ (800bf9c <_dtoa_r+0x594>)
 800be18:	2200      	movs	r2, #0
 800be1a:	f7f4 fa3d 	bl	8000298 <__aeabi_dsub>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be26:	462a      	mov	r2, r5
 800be28:	4633      	mov	r3, r6
 800be2a:	f7f4 fe7d 	bl	8000b28 <__aeabi_dcmpgt>
 800be2e:	2800      	cmp	r0, #0
 800be30:	f040 8298 	bne.w	800c364 <_dtoa_r+0x95c>
 800be34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be38:	462a      	mov	r2, r5
 800be3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be3e:	f7f4 fe55 	bl	8000aec <__aeabi_dcmplt>
 800be42:	bb38      	cbnz	r0, 800be94 <_dtoa_r+0x48c>
 800be44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800be48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f2c0 8157 	blt.w	800c102 <_dtoa_r+0x6fa>
 800be54:	2f0e      	cmp	r7, #14
 800be56:	f300 8154 	bgt.w	800c102 <_dtoa_r+0x6fa>
 800be5a:	4b4b      	ldr	r3, [pc, #300]	@ (800bf88 <_dtoa_r+0x580>)
 800be5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be60:	ed93 7b00 	vldr	d7, [r3]
 800be64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be66:	2b00      	cmp	r3, #0
 800be68:	ed8d 7b00 	vstr	d7, [sp]
 800be6c:	f280 80e5 	bge.w	800c03a <_dtoa_r+0x632>
 800be70:	9b03      	ldr	r3, [sp, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	f300 80e1 	bgt.w	800c03a <_dtoa_r+0x632>
 800be78:	d10c      	bne.n	800be94 <_dtoa_r+0x48c>
 800be7a:	4b48      	ldr	r3, [pc, #288]	@ (800bf9c <_dtoa_r+0x594>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	ec51 0b17 	vmov	r0, r1, d7
 800be82:	f7f4 fbc1 	bl	8000608 <__aeabi_dmul>
 800be86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be8a:	f7f4 fe43 	bl	8000b14 <__aeabi_dcmpge>
 800be8e:	2800      	cmp	r0, #0
 800be90:	f000 8266 	beq.w	800c360 <_dtoa_r+0x958>
 800be94:	2400      	movs	r4, #0
 800be96:	4625      	mov	r5, r4
 800be98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be9a:	4656      	mov	r6, sl
 800be9c:	ea6f 0803 	mvn.w	r8, r3
 800bea0:	2700      	movs	r7, #0
 800bea2:	4621      	mov	r1, r4
 800bea4:	4648      	mov	r0, r9
 800bea6:	f000 fcbf 	bl	800c828 <_Bfree>
 800beaa:	2d00      	cmp	r5, #0
 800beac:	f000 80bd 	beq.w	800c02a <_dtoa_r+0x622>
 800beb0:	b12f      	cbz	r7, 800bebe <_dtoa_r+0x4b6>
 800beb2:	42af      	cmp	r7, r5
 800beb4:	d003      	beq.n	800bebe <_dtoa_r+0x4b6>
 800beb6:	4639      	mov	r1, r7
 800beb8:	4648      	mov	r0, r9
 800beba:	f000 fcb5 	bl	800c828 <_Bfree>
 800bebe:	4629      	mov	r1, r5
 800bec0:	4648      	mov	r0, r9
 800bec2:	f000 fcb1 	bl	800c828 <_Bfree>
 800bec6:	e0b0      	b.n	800c02a <_dtoa_r+0x622>
 800bec8:	07e2      	lsls	r2, r4, #31
 800beca:	d505      	bpl.n	800bed8 <_dtoa_r+0x4d0>
 800becc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bed0:	f7f4 fb9a 	bl	8000608 <__aeabi_dmul>
 800bed4:	3601      	adds	r6, #1
 800bed6:	2301      	movs	r3, #1
 800bed8:	1064      	asrs	r4, r4, #1
 800beda:	3508      	adds	r5, #8
 800bedc:	e762      	b.n	800bda4 <_dtoa_r+0x39c>
 800bede:	2602      	movs	r6, #2
 800bee0:	e765      	b.n	800bdae <_dtoa_r+0x3a6>
 800bee2:	9c03      	ldr	r4, [sp, #12]
 800bee4:	46b8      	mov	r8, r7
 800bee6:	e784      	b.n	800bdf2 <_dtoa_r+0x3ea>
 800bee8:	4b27      	ldr	r3, [pc, #156]	@ (800bf88 <_dtoa_r+0x580>)
 800beea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800beec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bef0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bef4:	4454      	add	r4, sl
 800bef6:	2900      	cmp	r1, #0
 800bef8:	d054      	beq.n	800bfa4 <_dtoa_r+0x59c>
 800befa:	4929      	ldr	r1, [pc, #164]	@ (800bfa0 <_dtoa_r+0x598>)
 800befc:	2000      	movs	r0, #0
 800befe:	f7f4 fcad 	bl	800085c <__aeabi_ddiv>
 800bf02:	4633      	mov	r3, r6
 800bf04:	462a      	mov	r2, r5
 800bf06:	f7f4 f9c7 	bl	8000298 <__aeabi_dsub>
 800bf0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf0e:	4656      	mov	r6, sl
 800bf10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf14:	f7f4 fe28 	bl	8000b68 <__aeabi_d2iz>
 800bf18:	4605      	mov	r5, r0
 800bf1a:	f7f4 fb0b 	bl	8000534 <__aeabi_i2d>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf26:	f7f4 f9b7 	bl	8000298 <__aeabi_dsub>
 800bf2a:	3530      	adds	r5, #48	@ 0x30
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf34:	f806 5b01 	strb.w	r5, [r6], #1
 800bf38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf3c:	f7f4 fdd6 	bl	8000aec <__aeabi_dcmplt>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d172      	bne.n	800c02a <_dtoa_r+0x622>
 800bf44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf48:	4911      	ldr	r1, [pc, #68]	@ (800bf90 <_dtoa_r+0x588>)
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	f7f4 f9a4 	bl	8000298 <__aeabi_dsub>
 800bf50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf54:	f7f4 fdca 	bl	8000aec <__aeabi_dcmplt>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	f040 80b4 	bne.w	800c0c6 <_dtoa_r+0x6be>
 800bf5e:	42a6      	cmp	r6, r4
 800bf60:	f43f af70 	beq.w	800be44 <_dtoa_r+0x43c>
 800bf64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bf68:	4b0a      	ldr	r3, [pc, #40]	@ (800bf94 <_dtoa_r+0x58c>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f7f4 fb4c 	bl	8000608 <__aeabi_dmul>
 800bf70:	4b08      	ldr	r3, [pc, #32]	@ (800bf94 <_dtoa_r+0x58c>)
 800bf72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf76:	2200      	movs	r2, #0
 800bf78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf7c:	f7f4 fb44 	bl	8000608 <__aeabi_dmul>
 800bf80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf84:	e7c4      	b.n	800bf10 <_dtoa_r+0x508>
 800bf86:	bf00      	nop
 800bf88:	0800de70 	.word	0x0800de70
 800bf8c:	0800de48 	.word	0x0800de48
 800bf90:	3ff00000 	.word	0x3ff00000
 800bf94:	40240000 	.word	0x40240000
 800bf98:	401c0000 	.word	0x401c0000
 800bf9c:	40140000 	.word	0x40140000
 800bfa0:	3fe00000 	.word	0x3fe00000
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f7f4 fb2e 	bl	8000608 <__aeabi_dmul>
 800bfac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bfb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bfb2:	4656      	mov	r6, sl
 800bfb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfb8:	f7f4 fdd6 	bl	8000b68 <__aeabi_d2iz>
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	f7f4 fab9 	bl	8000534 <__aeabi_i2d>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfca:	f7f4 f965 	bl	8000298 <__aeabi_dsub>
 800bfce:	3530      	adds	r5, #48	@ 0x30
 800bfd0:	f806 5b01 	strb.w	r5, [r6], #1
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	42a6      	cmp	r6, r4
 800bfda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfde:	f04f 0200 	mov.w	r2, #0
 800bfe2:	d124      	bne.n	800c02e <_dtoa_r+0x626>
 800bfe4:	4baf      	ldr	r3, [pc, #700]	@ (800c2a4 <_dtoa_r+0x89c>)
 800bfe6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bfea:	f7f4 f957 	bl	800029c <__adddf3>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bff6:	f7f4 fd97 	bl	8000b28 <__aeabi_dcmpgt>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d163      	bne.n	800c0c6 <_dtoa_r+0x6be>
 800bffe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c002:	49a8      	ldr	r1, [pc, #672]	@ (800c2a4 <_dtoa_r+0x89c>)
 800c004:	2000      	movs	r0, #0
 800c006:	f7f4 f947 	bl	8000298 <__aeabi_dsub>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c012:	f7f4 fd6b 	bl	8000aec <__aeabi_dcmplt>
 800c016:	2800      	cmp	r0, #0
 800c018:	f43f af14 	beq.w	800be44 <_dtoa_r+0x43c>
 800c01c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c01e:	1e73      	subs	r3, r6, #1
 800c020:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c022:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c026:	2b30      	cmp	r3, #48	@ 0x30
 800c028:	d0f8      	beq.n	800c01c <_dtoa_r+0x614>
 800c02a:	4647      	mov	r7, r8
 800c02c:	e03b      	b.n	800c0a6 <_dtoa_r+0x69e>
 800c02e:	4b9e      	ldr	r3, [pc, #632]	@ (800c2a8 <_dtoa_r+0x8a0>)
 800c030:	f7f4 faea 	bl	8000608 <__aeabi_dmul>
 800c034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c038:	e7bc      	b.n	800bfb4 <_dtoa_r+0x5ac>
 800c03a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c03e:	4656      	mov	r6, sl
 800c040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c044:	4620      	mov	r0, r4
 800c046:	4629      	mov	r1, r5
 800c048:	f7f4 fc08 	bl	800085c <__aeabi_ddiv>
 800c04c:	f7f4 fd8c 	bl	8000b68 <__aeabi_d2iz>
 800c050:	4680      	mov	r8, r0
 800c052:	f7f4 fa6f 	bl	8000534 <__aeabi_i2d>
 800c056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c05a:	f7f4 fad5 	bl	8000608 <__aeabi_dmul>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	4620      	mov	r0, r4
 800c064:	4629      	mov	r1, r5
 800c066:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c06a:	f7f4 f915 	bl	8000298 <__aeabi_dsub>
 800c06e:	f806 4b01 	strb.w	r4, [r6], #1
 800c072:	9d03      	ldr	r5, [sp, #12]
 800c074:	eba6 040a 	sub.w	r4, r6, sl
 800c078:	42a5      	cmp	r5, r4
 800c07a:	4602      	mov	r2, r0
 800c07c:	460b      	mov	r3, r1
 800c07e:	d133      	bne.n	800c0e8 <_dtoa_r+0x6e0>
 800c080:	f7f4 f90c 	bl	800029c <__adddf3>
 800c084:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c088:	4604      	mov	r4, r0
 800c08a:	460d      	mov	r5, r1
 800c08c:	f7f4 fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 800c090:	b9c0      	cbnz	r0, 800c0c4 <_dtoa_r+0x6bc>
 800c092:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c096:	4620      	mov	r0, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	f7f4 fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c09e:	b110      	cbz	r0, 800c0a6 <_dtoa_r+0x69e>
 800c0a0:	f018 0f01 	tst.w	r8, #1
 800c0a4:	d10e      	bne.n	800c0c4 <_dtoa_r+0x6bc>
 800c0a6:	9902      	ldr	r1, [sp, #8]
 800c0a8:	4648      	mov	r0, r9
 800c0aa:	f000 fbbd 	bl	800c828 <_Bfree>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	7033      	strb	r3, [r6, #0]
 800c0b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0b4:	3701      	adds	r7, #1
 800c0b6:	601f      	str	r7, [r3, #0]
 800c0b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 824b 	beq.w	800c556 <_dtoa_r+0xb4e>
 800c0c0:	601e      	str	r6, [r3, #0]
 800c0c2:	e248      	b.n	800c556 <_dtoa_r+0xb4e>
 800c0c4:	46b8      	mov	r8, r7
 800c0c6:	4633      	mov	r3, r6
 800c0c8:	461e      	mov	r6, r3
 800c0ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0ce:	2a39      	cmp	r2, #57	@ 0x39
 800c0d0:	d106      	bne.n	800c0e0 <_dtoa_r+0x6d8>
 800c0d2:	459a      	cmp	sl, r3
 800c0d4:	d1f8      	bne.n	800c0c8 <_dtoa_r+0x6c0>
 800c0d6:	2230      	movs	r2, #48	@ 0x30
 800c0d8:	f108 0801 	add.w	r8, r8, #1
 800c0dc:	f88a 2000 	strb.w	r2, [sl]
 800c0e0:	781a      	ldrb	r2, [r3, #0]
 800c0e2:	3201      	adds	r2, #1
 800c0e4:	701a      	strb	r2, [r3, #0]
 800c0e6:	e7a0      	b.n	800c02a <_dtoa_r+0x622>
 800c0e8:	4b6f      	ldr	r3, [pc, #444]	@ (800c2a8 <_dtoa_r+0x8a0>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f7f4 fa8c 	bl	8000608 <__aeabi_dmul>
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	460d      	mov	r5, r1
 800c0f8:	f7f4 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d09f      	beq.n	800c040 <_dtoa_r+0x638>
 800c100:	e7d1      	b.n	800c0a6 <_dtoa_r+0x69e>
 800c102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c104:	2a00      	cmp	r2, #0
 800c106:	f000 80ea 	beq.w	800c2de <_dtoa_r+0x8d6>
 800c10a:	9a07      	ldr	r2, [sp, #28]
 800c10c:	2a01      	cmp	r2, #1
 800c10e:	f300 80cd 	bgt.w	800c2ac <_dtoa_r+0x8a4>
 800c112:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c114:	2a00      	cmp	r2, #0
 800c116:	f000 80c1 	beq.w	800c29c <_dtoa_r+0x894>
 800c11a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c11e:	9c08      	ldr	r4, [sp, #32]
 800c120:	9e00      	ldr	r6, [sp, #0]
 800c122:	9a00      	ldr	r2, [sp, #0]
 800c124:	441a      	add	r2, r3
 800c126:	9200      	str	r2, [sp, #0]
 800c128:	9a06      	ldr	r2, [sp, #24]
 800c12a:	2101      	movs	r1, #1
 800c12c:	441a      	add	r2, r3
 800c12e:	4648      	mov	r0, r9
 800c130:	9206      	str	r2, [sp, #24]
 800c132:	f000 fc2d 	bl	800c990 <__i2b>
 800c136:	4605      	mov	r5, r0
 800c138:	b166      	cbz	r6, 800c154 <_dtoa_r+0x74c>
 800c13a:	9b06      	ldr	r3, [sp, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dd09      	ble.n	800c154 <_dtoa_r+0x74c>
 800c140:	42b3      	cmp	r3, r6
 800c142:	9a00      	ldr	r2, [sp, #0]
 800c144:	bfa8      	it	ge
 800c146:	4633      	movge	r3, r6
 800c148:	1ad2      	subs	r2, r2, r3
 800c14a:	9200      	str	r2, [sp, #0]
 800c14c:	9a06      	ldr	r2, [sp, #24]
 800c14e:	1af6      	subs	r6, r6, r3
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	9306      	str	r3, [sp, #24]
 800c154:	9b08      	ldr	r3, [sp, #32]
 800c156:	b30b      	cbz	r3, 800c19c <_dtoa_r+0x794>
 800c158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 80c6 	beq.w	800c2ec <_dtoa_r+0x8e4>
 800c160:	2c00      	cmp	r4, #0
 800c162:	f000 80c0 	beq.w	800c2e6 <_dtoa_r+0x8de>
 800c166:	4629      	mov	r1, r5
 800c168:	4622      	mov	r2, r4
 800c16a:	4648      	mov	r0, r9
 800c16c:	f000 fcc8 	bl	800cb00 <__pow5mult>
 800c170:	9a02      	ldr	r2, [sp, #8]
 800c172:	4601      	mov	r1, r0
 800c174:	4605      	mov	r5, r0
 800c176:	4648      	mov	r0, r9
 800c178:	f000 fc20 	bl	800c9bc <__multiply>
 800c17c:	9902      	ldr	r1, [sp, #8]
 800c17e:	4680      	mov	r8, r0
 800c180:	4648      	mov	r0, r9
 800c182:	f000 fb51 	bl	800c828 <_Bfree>
 800c186:	9b08      	ldr	r3, [sp, #32]
 800c188:	1b1b      	subs	r3, r3, r4
 800c18a:	9308      	str	r3, [sp, #32]
 800c18c:	f000 80b1 	beq.w	800c2f2 <_dtoa_r+0x8ea>
 800c190:	9a08      	ldr	r2, [sp, #32]
 800c192:	4641      	mov	r1, r8
 800c194:	4648      	mov	r0, r9
 800c196:	f000 fcb3 	bl	800cb00 <__pow5mult>
 800c19a:	9002      	str	r0, [sp, #8]
 800c19c:	2101      	movs	r1, #1
 800c19e:	4648      	mov	r0, r9
 800c1a0:	f000 fbf6 	bl	800c990 <__i2b>
 800c1a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 81d8 	beq.w	800c55e <_dtoa_r+0xb56>
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	4601      	mov	r1, r0
 800c1b2:	4648      	mov	r0, r9
 800c1b4:	f000 fca4 	bl	800cb00 <__pow5mult>
 800c1b8:	9b07      	ldr	r3, [sp, #28]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	4604      	mov	r4, r0
 800c1be:	f300 809f 	bgt.w	800c300 <_dtoa_r+0x8f8>
 800c1c2:	9b04      	ldr	r3, [sp, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f040 8097 	bne.w	800c2f8 <_dtoa_r+0x8f0>
 800c1ca:	9b05      	ldr	r3, [sp, #20]
 800c1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f040 8093 	bne.w	800c2fc <_dtoa_r+0x8f4>
 800c1d6:	9b05      	ldr	r3, [sp, #20]
 800c1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c1dc:	0d1b      	lsrs	r3, r3, #20
 800c1de:	051b      	lsls	r3, r3, #20
 800c1e0:	b133      	cbz	r3, 800c1f0 <_dtoa_r+0x7e8>
 800c1e2:	9b00      	ldr	r3, [sp, #0]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	9b06      	ldr	r3, [sp, #24]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	9306      	str	r3, [sp, #24]
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	9308      	str	r3, [sp, #32]
 800c1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 81b8 	beq.w	800c56a <_dtoa_r+0xb62>
 800c1fa:	6923      	ldr	r3, [r4, #16]
 800c1fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c200:	6918      	ldr	r0, [r3, #16]
 800c202:	f000 fb79 	bl	800c8f8 <__hi0bits>
 800c206:	f1c0 0020 	rsb	r0, r0, #32
 800c20a:	9b06      	ldr	r3, [sp, #24]
 800c20c:	4418      	add	r0, r3
 800c20e:	f010 001f 	ands.w	r0, r0, #31
 800c212:	f000 8082 	beq.w	800c31a <_dtoa_r+0x912>
 800c216:	f1c0 0320 	rsb	r3, r0, #32
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	dd73      	ble.n	800c306 <_dtoa_r+0x8fe>
 800c21e:	9b00      	ldr	r3, [sp, #0]
 800c220:	f1c0 001c 	rsb	r0, r0, #28
 800c224:	4403      	add	r3, r0
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	9b06      	ldr	r3, [sp, #24]
 800c22a:	4403      	add	r3, r0
 800c22c:	4406      	add	r6, r0
 800c22e:	9306      	str	r3, [sp, #24]
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	dd05      	ble.n	800c242 <_dtoa_r+0x83a>
 800c236:	9902      	ldr	r1, [sp, #8]
 800c238:	461a      	mov	r2, r3
 800c23a:	4648      	mov	r0, r9
 800c23c:	f000 fcba 	bl	800cbb4 <__lshift>
 800c240:	9002      	str	r0, [sp, #8]
 800c242:	9b06      	ldr	r3, [sp, #24]
 800c244:	2b00      	cmp	r3, #0
 800c246:	dd05      	ble.n	800c254 <_dtoa_r+0x84c>
 800c248:	4621      	mov	r1, r4
 800c24a:	461a      	mov	r2, r3
 800c24c:	4648      	mov	r0, r9
 800c24e:	f000 fcb1 	bl	800cbb4 <__lshift>
 800c252:	4604      	mov	r4, r0
 800c254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c256:	2b00      	cmp	r3, #0
 800c258:	d061      	beq.n	800c31e <_dtoa_r+0x916>
 800c25a:	9802      	ldr	r0, [sp, #8]
 800c25c:	4621      	mov	r1, r4
 800c25e:	f000 fd15 	bl	800cc8c <__mcmp>
 800c262:	2800      	cmp	r0, #0
 800c264:	da5b      	bge.n	800c31e <_dtoa_r+0x916>
 800c266:	2300      	movs	r3, #0
 800c268:	9902      	ldr	r1, [sp, #8]
 800c26a:	220a      	movs	r2, #10
 800c26c:	4648      	mov	r0, r9
 800c26e:	f000 fafd 	bl	800c86c <__multadd>
 800c272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c274:	9002      	str	r0, [sp, #8]
 800c276:	f107 38ff 	add.w	r8, r7, #4294967295
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f000 8177 	beq.w	800c56e <_dtoa_r+0xb66>
 800c280:	4629      	mov	r1, r5
 800c282:	2300      	movs	r3, #0
 800c284:	220a      	movs	r2, #10
 800c286:	4648      	mov	r0, r9
 800c288:	f000 faf0 	bl	800c86c <__multadd>
 800c28c:	f1bb 0f00 	cmp.w	fp, #0
 800c290:	4605      	mov	r5, r0
 800c292:	dc6f      	bgt.n	800c374 <_dtoa_r+0x96c>
 800c294:	9b07      	ldr	r3, [sp, #28]
 800c296:	2b02      	cmp	r3, #2
 800c298:	dc49      	bgt.n	800c32e <_dtoa_r+0x926>
 800c29a:	e06b      	b.n	800c374 <_dtoa_r+0x96c>
 800c29c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c29e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c2a2:	e73c      	b.n	800c11e <_dtoa_r+0x716>
 800c2a4:	3fe00000 	.word	0x3fe00000
 800c2a8:	40240000 	.word	0x40240000
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	1e5c      	subs	r4, r3, #1
 800c2b0:	9b08      	ldr	r3, [sp, #32]
 800c2b2:	42a3      	cmp	r3, r4
 800c2b4:	db09      	blt.n	800c2ca <_dtoa_r+0x8c2>
 800c2b6:	1b1c      	subs	r4, r3, r4
 800c2b8:	9b03      	ldr	r3, [sp, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f6bf af30 	bge.w	800c120 <_dtoa_r+0x718>
 800c2c0:	9b00      	ldr	r3, [sp, #0]
 800c2c2:	9a03      	ldr	r2, [sp, #12]
 800c2c4:	1a9e      	subs	r6, r3, r2
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e72b      	b.n	800c122 <_dtoa_r+0x71a>
 800c2ca:	9b08      	ldr	r3, [sp, #32]
 800c2cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2ce:	9408      	str	r4, [sp, #32]
 800c2d0:	1ae3      	subs	r3, r4, r3
 800c2d2:	441a      	add	r2, r3
 800c2d4:	9e00      	ldr	r6, [sp, #0]
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	920d      	str	r2, [sp, #52]	@ 0x34
 800c2da:	2400      	movs	r4, #0
 800c2dc:	e721      	b.n	800c122 <_dtoa_r+0x71a>
 800c2de:	9c08      	ldr	r4, [sp, #32]
 800c2e0:	9e00      	ldr	r6, [sp, #0]
 800c2e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c2e4:	e728      	b.n	800c138 <_dtoa_r+0x730>
 800c2e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c2ea:	e751      	b.n	800c190 <_dtoa_r+0x788>
 800c2ec:	9a08      	ldr	r2, [sp, #32]
 800c2ee:	9902      	ldr	r1, [sp, #8]
 800c2f0:	e750      	b.n	800c194 <_dtoa_r+0x78c>
 800c2f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c2f6:	e751      	b.n	800c19c <_dtoa_r+0x794>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	e779      	b.n	800c1f0 <_dtoa_r+0x7e8>
 800c2fc:	9b04      	ldr	r3, [sp, #16]
 800c2fe:	e777      	b.n	800c1f0 <_dtoa_r+0x7e8>
 800c300:	2300      	movs	r3, #0
 800c302:	9308      	str	r3, [sp, #32]
 800c304:	e779      	b.n	800c1fa <_dtoa_r+0x7f2>
 800c306:	d093      	beq.n	800c230 <_dtoa_r+0x828>
 800c308:	9a00      	ldr	r2, [sp, #0]
 800c30a:	331c      	adds	r3, #28
 800c30c:	441a      	add	r2, r3
 800c30e:	9200      	str	r2, [sp, #0]
 800c310:	9a06      	ldr	r2, [sp, #24]
 800c312:	441a      	add	r2, r3
 800c314:	441e      	add	r6, r3
 800c316:	9206      	str	r2, [sp, #24]
 800c318:	e78a      	b.n	800c230 <_dtoa_r+0x828>
 800c31a:	4603      	mov	r3, r0
 800c31c:	e7f4      	b.n	800c308 <_dtoa_r+0x900>
 800c31e:	9b03      	ldr	r3, [sp, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	46b8      	mov	r8, r7
 800c324:	dc20      	bgt.n	800c368 <_dtoa_r+0x960>
 800c326:	469b      	mov	fp, r3
 800c328:	9b07      	ldr	r3, [sp, #28]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	dd1e      	ble.n	800c36c <_dtoa_r+0x964>
 800c32e:	f1bb 0f00 	cmp.w	fp, #0
 800c332:	f47f adb1 	bne.w	800be98 <_dtoa_r+0x490>
 800c336:	4621      	mov	r1, r4
 800c338:	465b      	mov	r3, fp
 800c33a:	2205      	movs	r2, #5
 800c33c:	4648      	mov	r0, r9
 800c33e:	f000 fa95 	bl	800c86c <__multadd>
 800c342:	4601      	mov	r1, r0
 800c344:	4604      	mov	r4, r0
 800c346:	9802      	ldr	r0, [sp, #8]
 800c348:	f000 fca0 	bl	800cc8c <__mcmp>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	f77f ada3 	ble.w	800be98 <_dtoa_r+0x490>
 800c352:	4656      	mov	r6, sl
 800c354:	2331      	movs	r3, #49	@ 0x31
 800c356:	f806 3b01 	strb.w	r3, [r6], #1
 800c35a:	f108 0801 	add.w	r8, r8, #1
 800c35e:	e59f      	b.n	800bea0 <_dtoa_r+0x498>
 800c360:	9c03      	ldr	r4, [sp, #12]
 800c362:	46b8      	mov	r8, r7
 800c364:	4625      	mov	r5, r4
 800c366:	e7f4      	b.n	800c352 <_dtoa_r+0x94a>
 800c368:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 8101 	beq.w	800c576 <_dtoa_r+0xb6e>
 800c374:	2e00      	cmp	r6, #0
 800c376:	dd05      	ble.n	800c384 <_dtoa_r+0x97c>
 800c378:	4629      	mov	r1, r5
 800c37a:	4632      	mov	r2, r6
 800c37c:	4648      	mov	r0, r9
 800c37e:	f000 fc19 	bl	800cbb4 <__lshift>
 800c382:	4605      	mov	r5, r0
 800c384:	9b08      	ldr	r3, [sp, #32]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d05c      	beq.n	800c444 <_dtoa_r+0xa3c>
 800c38a:	6869      	ldr	r1, [r5, #4]
 800c38c:	4648      	mov	r0, r9
 800c38e:	f000 fa0b 	bl	800c7a8 <_Balloc>
 800c392:	4606      	mov	r6, r0
 800c394:	b928      	cbnz	r0, 800c3a2 <_dtoa_r+0x99a>
 800c396:	4b82      	ldr	r3, [pc, #520]	@ (800c5a0 <_dtoa_r+0xb98>)
 800c398:	4602      	mov	r2, r0
 800c39a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c39e:	f7ff bb4a 	b.w	800ba36 <_dtoa_r+0x2e>
 800c3a2:	692a      	ldr	r2, [r5, #16]
 800c3a4:	3202      	adds	r2, #2
 800c3a6:	0092      	lsls	r2, r2, #2
 800c3a8:	f105 010c 	add.w	r1, r5, #12
 800c3ac:	300c      	adds	r0, #12
 800c3ae:	f7ff fa92 	bl	800b8d6 <memcpy>
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4648      	mov	r0, r9
 800c3b8:	f000 fbfc 	bl	800cbb4 <__lshift>
 800c3bc:	f10a 0301 	add.w	r3, sl, #1
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	eb0a 030b 	add.w	r3, sl, fp
 800c3c6:	9308      	str	r3, [sp, #32]
 800c3c8:	9b04      	ldr	r3, [sp, #16]
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	462f      	mov	r7, r5
 800c3d0:	9306      	str	r3, [sp, #24]
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	9b00      	ldr	r3, [sp, #0]
 800c3d6:	9802      	ldr	r0, [sp, #8]
 800c3d8:	4621      	mov	r1, r4
 800c3da:	f103 3bff 	add.w	fp, r3, #4294967295
 800c3de:	f7ff fa88 	bl	800b8f2 <quorem>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	3330      	adds	r3, #48	@ 0x30
 800c3e6:	9003      	str	r0, [sp, #12]
 800c3e8:	4639      	mov	r1, r7
 800c3ea:	9802      	ldr	r0, [sp, #8]
 800c3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ee:	f000 fc4d 	bl	800cc8c <__mcmp>
 800c3f2:	462a      	mov	r2, r5
 800c3f4:	9004      	str	r0, [sp, #16]
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4648      	mov	r0, r9
 800c3fa:	f000 fc63 	bl	800ccc4 <__mdiff>
 800c3fe:	68c2      	ldr	r2, [r0, #12]
 800c400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c402:	4606      	mov	r6, r0
 800c404:	bb02      	cbnz	r2, 800c448 <_dtoa_r+0xa40>
 800c406:	4601      	mov	r1, r0
 800c408:	9802      	ldr	r0, [sp, #8]
 800c40a:	f000 fc3f 	bl	800cc8c <__mcmp>
 800c40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c410:	4602      	mov	r2, r0
 800c412:	4631      	mov	r1, r6
 800c414:	4648      	mov	r0, r9
 800c416:	920c      	str	r2, [sp, #48]	@ 0x30
 800c418:	9309      	str	r3, [sp, #36]	@ 0x24
 800c41a:	f000 fa05 	bl	800c828 <_Bfree>
 800c41e:	9b07      	ldr	r3, [sp, #28]
 800c420:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c422:	9e00      	ldr	r6, [sp, #0]
 800c424:	ea42 0103 	orr.w	r1, r2, r3
 800c428:	9b06      	ldr	r3, [sp, #24]
 800c42a:	4319      	orrs	r1, r3
 800c42c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42e:	d10d      	bne.n	800c44c <_dtoa_r+0xa44>
 800c430:	2b39      	cmp	r3, #57	@ 0x39
 800c432:	d027      	beq.n	800c484 <_dtoa_r+0xa7c>
 800c434:	9a04      	ldr	r2, [sp, #16]
 800c436:	2a00      	cmp	r2, #0
 800c438:	dd01      	ble.n	800c43e <_dtoa_r+0xa36>
 800c43a:	9b03      	ldr	r3, [sp, #12]
 800c43c:	3331      	adds	r3, #49	@ 0x31
 800c43e:	f88b 3000 	strb.w	r3, [fp]
 800c442:	e52e      	b.n	800bea2 <_dtoa_r+0x49a>
 800c444:	4628      	mov	r0, r5
 800c446:	e7b9      	b.n	800c3bc <_dtoa_r+0x9b4>
 800c448:	2201      	movs	r2, #1
 800c44a:	e7e2      	b.n	800c412 <_dtoa_r+0xa0a>
 800c44c:	9904      	ldr	r1, [sp, #16]
 800c44e:	2900      	cmp	r1, #0
 800c450:	db04      	blt.n	800c45c <_dtoa_r+0xa54>
 800c452:	9807      	ldr	r0, [sp, #28]
 800c454:	4301      	orrs	r1, r0
 800c456:	9806      	ldr	r0, [sp, #24]
 800c458:	4301      	orrs	r1, r0
 800c45a:	d120      	bne.n	800c49e <_dtoa_r+0xa96>
 800c45c:	2a00      	cmp	r2, #0
 800c45e:	ddee      	ble.n	800c43e <_dtoa_r+0xa36>
 800c460:	9902      	ldr	r1, [sp, #8]
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	2201      	movs	r2, #1
 800c466:	4648      	mov	r0, r9
 800c468:	f000 fba4 	bl	800cbb4 <__lshift>
 800c46c:	4621      	mov	r1, r4
 800c46e:	9002      	str	r0, [sp, #8]
 800c470:	f000 fc0c 	bl	800cc8c <__mcmp>
 800c474:	2800      	cmp	r0, #0
 800c476:	9b00      	ldr	r3, [sp, #0]
 800c478:	dc02      	bgt.n	800c480 <_dtoa_r+0xa78>
 800c47a:	d1e0      	bne.n	800c43e <_dtoa_r+0xa36>
 800c47c:	07da      	lsls	r2, r3, #31
 800c47e:	d5de      	bpl.n	800c43e <_dtoa_r+0xa36>
 800c480:	2b39      	cmp	r3, #57	@ 0x39
 800c482:	d1da      	bne.n	800c43a <_dtoa_r+0xa32>
 800c484:	2339      	movs	r3, #57	@ 0x39
 800c486:	f88b 3000 	strb.w	r3, [fp]
 800c48a:	4633      	mov	r3, r6
 800c48c:	461e      	mov	r6, r3
 800c48e:	3b01      	subs	r3, #1
 800c490:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c494:	2a39      	cmp	r2, #57	@ 0x39
 800c496:	d04e      	beq.n	800c536 <_dtoa_r+0xb2e>
 800c498:	3201      	adds	r2, #1
 800c49a:	701a      	strb	r2, [r3, #0]
 800c49c:	e501      	b.n	800bea2 <_dtoa_r+0x49a>
 800c49e:	2a00      	cmp	r2, #0
 800c4a0:	dd03      	ble.n	800c4aa <_dtoa_r+0xaa2>
 800c4a2:	2b39      	cmp	r3, #57	@ 0x39
 800c4a4:	d0ee      	beq.n	800c484 <_dtoa_r+0xa7c>
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	e7c9      	b.n	800c43e <_dtoa_r+0xa36>
 800c4aa:	9a00      	ldr	r2, [sp, #0]
 800c4ac:	9908      	ldr	r1, [sp, #32]
 800c4ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c4b2:	428a      	cmp	r2, r1
 800c4b4:	d028      	beq.n	800c508 <_dtoa_r+0xb00>
 800c4b6:	9902      	ldr	r1, [sp, #8]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	220a      	movs	r2, #10
 800c4bc:	4648      	mov	r0, r9
 800c4be:	f000 f9d5 	bl	800c86c <__multadd>
 800c4c2:	42af      	cmp	r7, r5
 800c4c4:	9002      	str	r0, [sp, #8]
 800c4c6:	f04f 0300 	mov.w	r3, #0
 800c4ca:	f04f 020a 	mov.w	r2, #10
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	4648      	mov	r0, r9
 800c4d2:	d107      	bne.n	800c4e4 <_dtoa_r+0xadc>
 800c4d4:	f000 f9ca 	bl	800c86c <__multadd>
 800c4d8:	4607      	mov	r7, r0
 800c4da:	4605      	mov	r5, r0
 800c4dc:	9b00      	ldr	r3, [sp, #0]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	e777      	b.n	800c3d4 <_dtoa_r+0x9cc>
 800c4e4:	f000 f9c2 	bl	800c86c <__multadd>
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	220a      	movs	r2, #10
 800c4f0:	4648      	mov	r0, r9
 800c4f2:	f000 f9bb 	bl	800c86c <__multadd>
 800c4f6:	4605      	mov	r5, r0
 800c4f8:	e7f0      	b.n	800c4dc <_dtoa_r+0xad4>
 800c4fa:	f1bb 0f00 	cmp.w	fp, #0
 800c4fe:	bfcc      	ite	gt
 800c500:	465e      	movgt	r6, fp
 800c502:	2601      	movle	r6, #1
 800c504:	4456      	add	r6, sl
 800c506:	2700      	movs	r7, #0
 800c508:	9902      	ldr	r1, [sp, #8]
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	2201      	movs	r2, #1
 800c50e:	4648      	mov	r0, r9
 800c510:	f000 fb50 	bl	800cbb4 <__lshift>
 800c514:	4621      	mov	r1, r4
 800c516:	9002      	str	r0, [sp, #8]
 800c518:	f000 fbb8 	bl	800cc8c <__mcmp>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	dcb4      	bgt.n	800c48a <_dtoa_r+0xa82>
 800c520:	d102      	bne.n	800c528 <_dtoa_r+0xb20>
 800c522:	9b00      	ldr	r3, [sp, #0]
 800c524:	07db      	lsls	r3, r3, #31
 800c526:	d4b0      	bmi.n	800c48a <_dtoa_r+0xa82>
 800c528:	4633      	mov	r3, r6
 800c52a:	461e      	mov	r6, r3
 800c52c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c530:	2a30      	cmp	r2, #48	@ 0x30
 800c532:	d0fa      	beq.n	800c52a <_dtoa_r+0xb22>
 800c534:	e4b5      	b.n	800bea2 <_dtoa_r+0x49a>
 800c536:	459a      	cmp	sl, r3
 800c538:	d1a8      	bne.n	800c48c <_dtoa_r+0xa84>
 800c53a:	2331      	movs	r3, #49	@ 0x31
 800c53c:	f108 0801 	add.w	r8, r8, #1
 800c540:	f88a 3000 	strb.w	r3, [sl]
 800c544:	e4ad      	b.n	800bea2 <_dtoa_r+0x49a>
 800c546:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c548:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c5a4 <_dtoa_r+0xb9c>
 800c54c:	b11b      	cbz	r3, 800c556 <_dtoa_r+0xb4e>
 800c54e:	f10a 0308 	add.w	r3, sl, #8
 800c552:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c554:	6013      	str	r3, [r2, #0]
 800c556:	4650      	mov	r0, sl
 800c558:	b017      	add	sp, #92	@ 0x5c
 800c55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55e:	9b07      	ldr	r3, [sp, #28]
 800c560:	2b01      	cmp	r3, #1
 800c562:	f77f ae2e 	ble.w	800c1c2 <_dtoa_r+0x7ba>
 800c566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c568:	9308      	str	r3, [sp, #32]
 800c56a:	2001      	movs	r0, #1
 800c56c:	e64d      	b.n	800c20a <_dtoa_r+0x802>
 800c56e:	f1bb 0f00 	cmp.w	fp, #0
 800c572:	f77f aed9 	ble.w	800c328 <_dtoa_r+0x920>
 800c576:	4656      	mov	r6, sl
 800c578:	9802      	ldr	r0, [sp, #8]
 800c57a:	4621      	mov	r1, r4
 800c57c:	f7ff f9b9 	bl	800b8f2 <quorem>
 800c580:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c584:	f806 3b01 	strb.w	r3, [r6], #1
 800c588:	eba6 020a 	sub.w	r2, r6, sl
 800c58c:	4593      	cmp	fp, r2
 800c58e:	ddb4      	ble.n	800c4fa <_dtoa_r+0xaf2>
 800c590:	9902      	ldr	r1, [sp, #8]
 800c592:	2300      	movs	r3, #0
 800c594:	220a      	movs	r2, #10
 800c596:	4648      	mov	r0, r9
 800c598:	f000 f968 	bl	800c86c <__multadd>
 800c59c:	9002      	str	r0, [sp, #8]
 800c59e:	e7eb      	b.n	800c578 <_dtoa_r+0xb70>
 800c5a0:	0800dd75 	.word	0x0800dd75
 800c5a4:	0800dcf9 	.word	0x0800dcf9

0800c5a8 <_free_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	2900      	cmp	r1, #0
 800c5ae:	d041      	beq.n	800c634 <_free_r+0x8c>
 800c5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5b4:	1f0c      	subs	r4, r1, #4
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	bfb8      	it	lt
 800c5ba:	18e4      	addlt	r4, r4, r3
 800c5bc:	f000 f8e8 	bl	800c790 <__malloc_lock>
 800c5c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c638 <_free_r+0x90>)
 800c5c2:	6813      	ldr	r3, [r2, #0]
 800c5c4:	b933      	cbnz	r3, 800c5d4 <_free_r+0x2c>
 800c5c6:	6063      	str	r3, [r4, #4]
 800c5c8:	6014      	str	r4, [r2, #0]
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5d0:	f000 b8e4 	b.w	800c79c <__malloc_unlock>
 800c5d4:	42a3      	cmp	r3, r4
 800c5d6:	d908      	bls.n	800c5ea <_free_r+0x42>
 800c5d8:	6820      	ldr	r0, [r4, #0]
 800c5da:	1821      	adds	r1, r4, r0
 800c5dc:	428b      	cmp	r3, r1
 800c5de:	bf01      	itttt	eq
 800c5e0:	6819      	ldreq	r1, [r3, #0]
 800c5e2:	685b      	ldreq	r3, [r3, #4]
 800c5e4:	1809      	addeq	r1, r1, r0
 800c5e6:	6021      	streq	r1, [r4, #0]
 800c5e8:	e7ed      	b.n	800c5c6 <_free_r+0x1e>
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	b10b      	cbz	r3, 800c5f4 <_free_r+0x4c>
 800c5f0:	42a3      	cmp	r3, r4
 800c5f2:	d9fa      	bls.n	800c5ea <_free_r+0x42>
 800c5f4:	6811      	ldr	r1, [r2, #0]
 800c5f6:	1850      	adds	r0, r2, r1
 800c5f8:	42a0      	cmp	r0, r4
 800c5fa:	d10b      	bne.n	800c614 <_free_r+0x6c>
 800c5fc:	6820      	ldr	r0, [r4, #0]
 800c5fe:	4401      	add	r1, r0
 800c600:	1850      	adds	r0, r2, r1
 800c602:	4283      	cmp	r3, r0
 800c604:	6011      	str	r1, [r2, #0]
 800c606:	d1e0      	bne.n	800c5ca <_free_r+0x22>
 800c608:	6818      	ldr	r0, [r3, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	6053      	str	r3, [r2, #4]
 800c60e:	4408      	add	r0, r1
 800c610:	6010      	str	r0, [r2, #0]
 800c612:	e7da      	b.n	800c5ca <_free_r+0x22>
 800c614:	d902      	bls.n	800c61c <_free_r+0x74>
 800c616:	230c      	movs	r3, #12
 800c618:	602b      	str	r3, [r5, #0]
 800c61a:	e7d6      	b.n	800c5ca <_free_r+0x22>
 800c61c:	6820      	ldr	r0, [r4, #0]
 800c61e:	1821      	adds	r1, r4, r0
 800c620:	428b      	cmp	r3, r1
 800c622:	bf04      	itt	eq
 800c624:	6819      	ldreq	r1, [r3, #0]
 800c626:	685b      	ldreq	r3, [r3, #4]
 800c628:	6063      	str	r3, [r4, #4]
 800c62a:	bf04      	itt	eq
 800c62c:	1809      	addeq	r1, r1, r0
 800c62e:	6021      	streq	r1, [r4, #0]
 800c630:	6054      	str	r4, [r2, #4]
 800c632:	e7ca      	b.n	800c5ca <_free_r+0x22>
 800c634:	bd38      	pop	{r3, r4, r5, pc}
 800c636:	bf00      	nop
 800c638:	20000fe4 	.word	0x20000fe4

0800c63c <malloc>:
 800c63c:	4b02      	ldr	r3, [pc, #8]	@ (800c648 <malloc+0xc>)
 800c63e:	4601      	mov	r1, r0
 800c640:	6818      	ldr	r0, [r3, #0]
 800c642:	f000 b825 	b.w	800c690 <_malloc_r>
 800c646:	bf00      	nop
 800c648:	20000110 	.word	0x20000110

0800c64c <sbrk_aligned>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	4e0f      	ldr	r6, [pc, #60]	@ (800c68c <sbrk_aligned+0x40>)
 800c650:	460c      	mov	r4, r1
 800c652:	6831      	ldr	r1, [r6, #0]
 800c654:	4605      	mov	r5, r0
 800c656:	b911      	cbnz	r1, 800c65e <sbrk_aligned+0x12>
 800c658:	f000 fe3e 	bl	800d2d8 <_sbrk_r>
 800c65c:	6030      	str	r0, [r6, #0]
 800c65e:	4621      	mov	r1, r4
 800c660:	4628      	mov	r0, r5
 800c662:	f000 fe39 	bl	800d2d8 <_sbrk_r>
 800c666:	1c43      	adds	r3, r0, #1
 800c668:	d103      	bne.n	800c672 <sbrk_aligned+0x26>
 800c66a:	f04f 34ff 	mov.w	r4, #4294967295
 800c66e:	4620      	mov	r0, r4
 800c670:	bd70      	pop	{r4, r5, r6, pc}
 800c672:	1cc4      	adds	r4, r0, #3
 800c674:	f024 0403 	bic.w	r4, r4, #3
 800c678:	42a0      	cmp	r0, r4
 800c67a:	d0f8      	beq.n	800c66e <sbrk_aligned+0x22>
 800c67c:	1a21      	subs	r1, r4, r0
 800c67e:	4628      	mov	r0, r5
 800c680:	f000 fe2a 	bl	800d2d8 <_sbrk_r>
 800c684:	3001      	adds	r0, #1
 800c686:	d1f2      	bne.n	800c66e <sbrk_aligned+0x22>
 800c688:	e7ef      	b.n	800c66a <sbrk_aligned+0x1e>
 800c68a:	bf00      	nop
 800c68c:	20000fe0 	.word	0x20000fe0

0800c690 <_malloc_r>:
 800c690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c694:	1ccd      	adds	r5, r1, #3
 800c696:	f025 0503 	bic.w	r5, r5, #3
 800c69a:	3508      	adds	r5, #8
 800c69c:	2d0c      	cmp	r5, #12
 800c69e:	bf38      	it	cc
 800c6a0:	250c      	movcc	r5, #12
 800c6a2:	2d00      	cmp	r5, #0
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	db01      	blt.n	800c6ac <_malloc_r+0x1c>
 800c6a8:	42a9      	cmp	r1, r5
 800c6aa:	d904      	bls.n	800c6b6 <_malloc_r+0x26>
 800c6ac:	230c      	movs	r3, #12
 800c6ae:	6033      	str	r3, [r6, #0]
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c78c <_malloc_r+0xfc>
 800c6ba:	f000 f869 	bl	800c790 <__malloc_lock>
 800c6be:	f8d8 3000 	ldr.w	r3, [r8]
 800c6c2:	461c      	mov	r4, r3
 800c6c4:	bb44      	cbnz	r4, 800c718 <_malloc_r+0x88>
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f7ff ffbf 	bl	800c64c <sbrk_aligned>
 800c6ce:	1c43      	adds	r3, r0, #1
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	d158      	bne.n	800c786 <_malloc_r+0xf6>
 800c6d4:	f8d8 4000 	ldr.w	r4, [r8]
 800c6d8:	4627      	mov	r7, r4
 800c6da:	2f00      	cmp	r7, #0
 800c6dc:	d143      	bne.n	800c766 <_malloc_r+0xd6>
 800c6de:	2c00      	cmp	r4, #0
 800c6e0:	d04b      	beq.n	800c77a <_malloc_r+0xea>
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	eb04 0903 	add.w	r9, r4, r3
 800c6ec:	f000 fdf4 	bl	800d2d8 <_sbrk_r>
 800c6f0:	4581      	cmp	r9, r0
 800c6f2:	d142      	bne.n	800c77a <_malloc_r+0xea>
 800c6f4:	6821      	ldr	r1, [r4, #0]
 800c6f6:	1a6d      	subs	r5, r5, r1
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f7ff ffa6 	bl	800c64c <sbrk_aligned>
 800c700:	3001      	adds	r0, #1
 800c702:	d03a      	beq.n	800c77a <_malloc_r+0xea>
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	442b      	add	r3, r5
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	f8d8 3000 	ldr.w	r3, [r8]
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	bb62      	cbnz	r2, 800c76c <_malloc_r+0xdc>
 800c712:	f8c8 7000 	str.w	r7, [r8]
 800c716:	e00f      	b.n	800c738 <_malloc_r+0xa8>
 800c718:	6822      	ldr	r2, [r4, #0]
 800c71a:	1b52      	subs	r2, r2, r5
 800c71c:	d420      	bmi.n	800c760 <_malloc_r+0xd0>
 800c71e:	2a0b      	cmp	r2, #11
 800c720:	d917      	bls.n	800c752 <_malloc_r+0xc2>
 800c722:	1961      	adds	r1, r4, r5
 800c724:	42a3      	cmp	r3, r4
 800c726:	6025      	str	r5, [r4, #0]
 800c728:	bf18      	it	ne
 800c72a:	6059      	strne	r1, [r3, #4]
 800c72c:	6863      	ldr	r3, [r4, #4]
 800c72e:	bf08      	it	eq
 800c730:	f8c8 1000 	streq.w	r1, [r8]
 800c734:	5162      	str	r2, [r4, r5]
 800c736:	604b      	str	r3, [r1, #4]
 800c738:	4630      	mov	r0, r6
 800c73a:	f000 f82f 	bl	800c79c <__malloc_unlock>
 800c73e:	f104 000b 	add.w	r0, r4, #11
 800c742:	1d23      	adds	r3, r4, #4
 800c744:	f020 0007 	bic.w	r0, r0, #7
 800c748:	1ac2      	subs	r2, r0, r3
 800c74a:	bf1c      	itt	ne
 800c74c:	1a1b      	subne	r3, r3, r0
 800c74e:	50a3      	strne	r3, [r4, r2]
 800c750:	e7af      	b.n	800c6b2 <_malloc_r+0x22>
 800c752:	6862      	ldr	r2, [r4, #4]
 800c754:	42a3      	cmp	r3, r4
 800c756:	bf0c      	ite	eq
 800c758:	f8c8 2000 	streq.w	r2, [r8]
 800c75c:	605a      	strne	r2, [r3, #4]
 800c75e:	e7eb      	b.n	800c738 <_malloc_r+0xa8>
 800c760:	4623      	mov	r3, r4
 800c762:	6864      	ldr	r4, [r4, #4]
 800c764:	e7ae      	b.n	800c6c4 <_malloc_r+0x34>
 800c766:	463c      	mov	r4, r7
 800c768:	687f      	ldr	r7, [r7, #4]
 800c76a:	e7b6      	b.n	800c6da <_malloc_r+0x4a>
 800c76c:	461a      	mov	r2, r3
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	42a3      	cmp	r3, r4
 800c772:	d1fb      	bne.n	800c76c <_malloc_r+0xdc>
 800c774:	2300      	movs	r3, #0
 800c776:	6053      	str	r3, [r2, #4]
 800c778:	e7de      	b.n	800c738 <_malloc_r+0xa8>
 800c77a:	230c      	movs	r3, #12
 800c77c:	6033      	str	r3, [r6, #0]
 800c77e:	4630      	mov	r0, r6
 800c780:	f000 f80c 	bl	800c79c <__malloc_unlock>
 800c784:	e794      	b.n	800c6b0 <_malloc_r+0x20>
 800c786:	6005      	str	r5, [r0, #0]
 800c788:	e7d6      	b.n	800c738 <_malloc_r+0xa8>
 800c78a:	bf00      	nop
 800c78c:	20000fe4 	.word	0x20000fe4

0800c790 <__malloc_lock>:
 800c790:	4801      	ldr	r0, [pc, #4]	@ (800c798 <__malloc_lock+0x8>)
 800c792:	f7ff b89e 	b.w	800b8d2 <__retarget_lock_acquire_recursive>
 800c796:	bf00      	nop
 800c798:	20000fdc 	.word	0x20000fdc

0800c79c <__malloc_unlock>:
 800c79c:	4801      	ldr	r0, [pc, #4]	@ (800c7a4 <__malloc_unlock+0x8>)
 800c79e:	f7ff b899 	b.w	800b8d4 <__retarget_lock_release_recursive>
 800c7a2:	bf00      	nop
 800c7a4:	20000fdc 	.word	0x20000fdc

0800c7a8 <_Balloc>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	69c6      	ldr	r6, [r0, #28]
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	b976      	cbnz	r6, 800c7d0 <_Balloc+0x28>
 800c7b2:	2010      	movs	r0, #16
 800c7b4:	f7ff ff42 	bl	800c63c <malloc>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	61e0      	str	r0, [r4, #28]
 800c7bc:	b920      	cbnz	r0, 800c7c8 <_Balloc+0x20>
 800c7be:	4b18      	ldr	r3, [pc, #96]	@ (800c820 <_Balloc+0x78>)
 800c7c0:	4818      	ldr	r0, [pc, #96]	@ (800c824 <_Balloc+0x7c>)
 800c7c2:	216b      	movs	r1, #107	@ 0x6b
 800c7c4:	f000 fd98 	bl	800d2f8 <__assert_func>
 800c7c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7cc:	6006      	str	r6, [r0, #0]
 800c7ce:	60c6      	str	r6, [r0, #12]
 800c7d0:	69e6      	ldr	r6, [r4, #28]
 800c7d2:	68f3      	ldr	r3, [r6, #12]
 800c7d4:	b183      	cbz	r3, 800c7f8 <_Balloc+0x50>
 800c7d6:	69e3      	ldr	r3, [r4, #28]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7de:	b9b8      	cbnz	r0, 800c810 <_Balloc+0x68>
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	fa01 f605 	lsl.w	r6, r1, r5
 800c7e6:	1d72      	adds	r2, r6, #5
 800c7e8:	0092      	lsls	r2, r2, #2
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 fda2 	bl	800d334 <_calloc_r>
 800c7f0:	b160      	cbz	r0, 800c80c <_Balloc+0x64>
 800c7f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7f6:	e00e      	b.n	800c816 <_Balloc+0x6e>
 800c7f8:	2221      	movs	r2, #33	@ 0x21
 800c7fa:	2104      	movs	r1, #4
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f000 fd99 	bl	800d334 <_calloc_r>
 800c802:	69e3      	ldr	r3, [r4, #28]
 800c804:	60f0      	str	r0, [r6, #12]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1e4      	bne.n	800c7d6 <_Balloc+0x2e>
 800c80c:	2000      	movs	r0, #0
 800c80e:	bd70      	pop	{r4, r5, r6, pc}
 800c810:	6802      	ldr	r2, [r0, #0]
 800c812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c816:	2300      	movs	r3, #0
 800c818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c81c:	e7f7      	b.n	800c80e <_Balloc+0x66>
 800c81e:	bf00      	nop
 800c820:	0800dd06 	.word	0x0800dd06
 800c824:	0800dd86 	.word	0x0800dd86

0800c828 <_Bfree>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	69c6      	ldr	r6, [r0, #28]
 800c82c:	4605      	mov	r5, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b976      	cbnz	r6, 800c850 <_Bfree+0x28>
 800c832:	2010      	movs	r0, #16
 800c834:	f7ff ff02 	bl	800c63c <malloc>
 800c838:	4602      	mov	r2, r0
 800c83a:	61e8      	str	r0, [r5, #28]
 800c83c:	b920      	cbnz	r0, 800c848 <_Bfree+0x20>
 800c83e:	4b09      	ldr	r3, [pc, #36]	@ (800c864 <_Bfree+0x3c>)
 800c840:	4809      	ldr	r0, [pc, #36]	@ (800c868 <_Bfree+0x40>)
 800c842:	218f      	movs	r1, #143	@ 0x8f
 800c844:	f000 fd58 	bl	800d2f8 <__assert_func>
 800c848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c84c:	6006      	str	r6, [r0, #0]
 800c84e:	60c6      	str	r6, [r0, #12]
 800c850:	b13c      	cbz	r4, 800c862 <_Bfree+0x3a>
 800c852:	69eb      	ldr	r3, [r5, #28]
 800c854:	6862      	ldr	r2, [r4, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c85c:	6021      	str	r1, [r4, #0]
 800c85e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c862:	bd70      	pop	{r4, r5, r6, pc}
 800c864:	0800dd06 	.word	0x0800dd06
 800c868:	0800dd86 	.word	0x0800dd86

0800c86c <__multadd>:
 800c86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c870:	690d      	ldr	r5, [r1, #16]
 800c872:	4607      	mov	r7, r0
 800c874:	460c      	mov	r4, r1
 800c876:	461e      	mov	r6, r3
 800c878:	f101 0c14 	add.w	ip, r1, #20
 800c87c:	2000      	movs	r0, #0
 800c87e:	f8dc 3000 	ldr.w	r3, [ip]
 800c882:	b299      	uxth	r1, r3
 800c884:	fb02 6101 	mla	r1, r2, r1, r6
 800c888:	0c1e      	lsrs	r6, r3, #16
 800c88a:	0c0b      	lsrs	r3, r1, #16
 800c88c:	fb02 3306 	mla	r3, r2, r6, r3
 800c890:	b289      	uxth	r1, r1
 800c892:	3001      	adds	r0, #1
 800c894:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c898:	4285      	cmp	r5, r0
 800c89a:	f84c 1b04 	str.w	r1, [ip], #4
 800c89e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8a2:	dcec      	bgt.n	800c87e <__multadd+0x12>
 800c8a4:	b30e      	cbz	r6, 800c8ea <__multadd+0x7e>
 800c8a6:	68a3      	ldr	r3, [r4, #8]
 800c8a8:	42ab      	cmp	r3, r5
 800c8aa:	dc19      	bgt.n	800c8e0 <__multadd+0x74>
 800c8ac:	6861      	ldr	r1, [r4, #4]
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	3101      	adds	r1, #1
 800c8b2:	f7ff ff79 	bl	800c7a8 <_Balloc>
 800c8b6:	4680      	mov	r8, r0
 800c8b8:	b928      	cbnz	r0, 800c8c6 <__multadd+0x5a>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f0 <__multadd+0x84>)
 800c8be:	480d      	ldr	r0, [pc, #52]	@ (800c8f4 <__multadd+0x88>)
 800c8c0:	21ba      	movs	r1, #186	@ 0xba
 800c8c2:	f000 fd19 	bl	800d2f8 <__assert_func>
 800c8c6:	6922      	ldr	r2, [r4, #16]
 800c8c8:	3202      	adds	r2, #2
 800c8ca:	f104 010c 	add.w	r1, r4, #12
 800c8ce:	0092      	lsls	r2, r2, #2
 800c8d0:	300c      	adds	r0, #12
 800c8d2:	f7ff f800 	bl	800b8d6 <memcpy>
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f7ff ffa5 	bl	800c828 <_Bfree>
 800c8de:	4644      	mov	r4, r8
 800c8e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8e4:	3501      	adds	r5, #1
 800c8e6:	615e      	str	r6, [r3, #20]
 800c8e8:	6125      	str	r5, [r4, #16]
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f0:	0800dd75 	.word	0x0800dd75
 800c8f4:	0800dd86 	.word	0x0800dd86

0800c8f8 <__hi0bits>:
 800c8f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	bf36      	itet	cc
 800c900:	0403      	lslcc	r3, r0, #16
 800c902:	2000      	movcs	r0, #0
 800c904:	2010      	movcc	r0, #16
 800c906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c90a:	bf3c      	itt	cc
 800c90c:	021b      	lslcc	r3, r3, #8
 800c90e:	3008      	addcc	r0, #8
 800c910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c914:	bf3c      	itt	cc
 800c916:	011b      	lslcc	r3, r3, #4
 800c918:	3004      	addcc	r0, #4
 800c91a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c91e:	bf3c      	itt	cc
 800c920:	009b      	lslcc	r3, r3, #2
 800c922:	3002      	addcc	r0, #2
 800c924:	2b00      	cmp	r3, #0
 800c926:	db05      	blt.n	800c934 <__hi0bits+0x3c>
 800c928:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c92c:	f100 0001 	add.w	r0, r0, #1
 800c930:	bf08      	it	eq
 800c932:	2020      	moveq	r0, #32
 800c934:	4770      	bx	lr

0800c936 <__lo0bits>:
 800c936:	6803      	ldr	r3, [r0, #0]
 800c938:	4602      	mov	r2, r0
 800c93a:	f013 0007 	ands.w	r0, r3, #7
 800c93e:	d00b      	beq.n	800c958 <__lo0bits+0x22>
 800c940:	07d9      	lsls	r1, r3, #31
 800c942:	d421      	bmi.n	800c988 <__lo0bits+0x52>
 800c944:	0798      	lsls	r0, r3, #30
 800c946:	bf49      	itett	mi
 800c948:	085b      	lsrmi	r3, r3, #1
 800c94a:	089b      	lsrpl	r3, r3, #2
 800c94c:	2001      	movmi	r0, #1
 800c94e:	6013      	strmi	r3, [r2, #0]
 800c950:	bf5c      	itt	pl
 800c952:	6013      	strpl	r3, [r2, #0]
 800c954:	2002      	movpl	r0, #2
 800c956:	4770      	bx	lr
 800c958:	b299      	uxth	r1, r3
 800c95a:	b909      	cbnz	r1, 800c960 <__lo0bits+0x2a>
 800c95c:	0c1b      	lsrs	r3, r3, #16
 800c95e:	2010      	movs	r0, #16
 800c960:	b2d9      	uxtb	r1, r3
 800c962:	b909      	cbnz	r1, 800c968 <__lo0bits+0x32>
 800c964:	3008      	adds	r0, #8
 800c966:	0a1b      	lsrs	r3, r3, #8
 800c968:	0719      	lsls	r1, r3, #28
 800c96a:	bf04      	itt	eq
 800c96c:	091b      	lsreq	r3, r3, #4
 800c96e:	3004      	addeq	r0, #4
 800c970:	0799      	lsls	r1, r3, #30
 800c972:	bf04      	itt	eq
 800c974:	089b      	lsreq	r3, r3, #2
 800c976:	3002      	addeq	r0, #2
 800c978:	07d9      	lsls	r1, r3, #31
 800c97a:	d403      	bmi.n	800c984 <__lo0bits+0x4e>
 800c97c:	085b      	lsrs	r3, r3, #1
 800c97e:	f100 0001 	add.w	r0, r0, #1
 800c982:	d003      	beq.n	800c98c <__lo0bits+0x56>
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	4770      	bx	lr
 800c988:	2000      	movs	r0, #0
 800c98a:	4770      	bx	lr
 800c98c:	2020      	movs	r0, #32
 800c98e:	4770      	bx	lr

0800c990 <__i2b>:
 800c990:	b510      	push	{r4, lr}
 800c992:	460c      	mov	r4, r1
 800c994:	2101      	movs	r1, #1
 800c996:	f7ff ff07 	bl	800c7a8 <_Balloc>
 800c99a:	4602      	mov	r2, r0
 800c99c:	b928      	cbnz	r0, 800c9aa <__i2b+0x1a>
 800c99e:	4b05      	ldr	r3, [pc, #20]	@ (800c9b4 <__i2b+0x24>)
 800c9a0:	4805      	ldr	r0, [pc, #20]	@ (800c9b8 <__i2b+0x28>)
 800c9a2:	f240 1145 	movw	r1, #325	@ 0x145
 800c9a6:	f000 fca7 	bl	800d2f8 <__assert_func>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	6144      	str	r4, [r0, #20]
 800c9ae:	6103      	str	r3, [r0, #16]
 800c9b0:	bd10      	pop	{r4, pc}
 800c9b2:	bf00      	nop
 800c9b4:	0800dd75 	.word	0x0800dd75
 800c9b8:	0800dd86 	.word	0x0800dd86

0800c9bc <__multiply>:
 800c9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c0:	4617      	mov	r7, r2
 800c9c2:	690a      	ldr	r2, [r1, #16]
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	bfa8      	it	ge
 800c9ca:	463b      	movge	r3, r7
 800c9cc:	4689      	mov	r9, r1
 800c9ce:	bfa4      	itt	ge
 800c9d0:	460f      	movge	r7, r1
 800c9d2:	4699      	movge	r9, r3
 800c9d4:	693d      	ldr	r5, [r7, #16]
 800c9d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	6879      	ldr	r1, [r7, #4]
 800c9de:	eb05 060a 	add.w	r6, r5, sl
 800c9e2:	42b3      	cmp	r3, r6
 800c9e4:	b085      	sub	sp, #20
 800c9e6:	bfb8      	it	lt
 800c9e8:	3101      	addlt	r1, #1
 800c9ea:	f7ff fedd 	bl	800c7a8 <_Balloc>
 800c9ee:	b930      	cbnz	r0, 800c9fe <__multiply+0x42>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	4b41      	ldr	r3, [pc, #260]	@ (800caf8 <__multiply+0x13c>)
 800c9f4:	4841      	ldr	r0, [pc, #260]	@ (800cafc <__multiply+0x140>)
 800c9f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c9fa:	f000 fc7d 	bl	800d2f8 <__assert_func>
 800c9fe:	f100 0414 	add.w	r4, r0, #20
 800ca02:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ca06:	4623      	mov	r3, r4
 800ca08:	2200      	movs	r2, #0
 800ca0a:	4573      	cmp	r3, lr
 800ca0c:	d320      	bcc.n	800ca50 <__multiply+0x94>
 800ca0e:	f107 0814 	add.w	r8, r7, #20
 800ca12:	f109 0114 	add.w	r1, r9, #20
 800ca16:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ca1a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ca1e:	9302      	str	r3, [sp, #8]
 800ca20:	1beb      	subs	r3, r5, r7
 800ca22:	3b15      	subs	r3, #21
 800ca24:	f023 0303 	bic.w	r3, r3, #3
 800ca28:	3304      	adds	r3, #4
 800ca2a:	3715      	adds	r7, #21
 800ca2c:	42bd      	cmp	r5, r7
 800ca2e:	bf38      	it	cc
 800ca30:	2304      	movcc	r3, #4
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	9b02      	ldr	r3, [sp, #8]
 800ca36:	9103      	str	r1, [sp, #12]
 800ca38:	428b      	cmp	r3, r1
 800ca3a:	d80c      	bhi.n	800ca56 <__multiply+0x9a>
 800ca3c:	2e00      	cmp	r6, #0
 800ca3e:	dd03      	ble.n	800ca48 <__multiply+0x8c>
 800ca40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d055      	beq.n	800caf4 <__multiply+0x138>
 800ca48:	6106      	str	r6, [r0, #16]
 800ca4a:	b005      	add	sp, #20
 800ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca50:	f843 2b04 	str.w	r2, [r3], #4
 800ca54:	e7d9      	b.n	800ca0a <__multiply+0x4e>
 800ca56:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca5a:	f1ba 0f00 	cmp.w	sl, #0
 800ca5e:	d01f      	beq.n	800caa0 <__multiply+0xe4>
 800ca60:	46c4      	mov	ip, r8
 800ca62:	46a1      	mov	r9, r4
 800ca64:	2700      	movs	r7, #0
 800ca66:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca6a:	f8d9 3000 	ldr.w	r3, [r9]
 800ca6e:	fa1f fb82 	uxth.w	fp, r2
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca78:	443b      	add	r3, r7
 800ca7a:	f8d9 7000 	ldr.w	r7, [r9]
 800ca7e:	0c12      	lsrs	r2, r2, #16
 800ca80:	0c3f      	lsrs	r7, r7, #16
 800ca82:	fb0a 7202 	mla	r2, sl, r2, r7
 800ca86:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca90:	4565      	cmp	r5, ip
 800ca92:	f849 3b04 	str.w	r3, [r9], #4
 800ca96:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ca9a:	d8e4      	bhi.n	800ca66 <__multiply+0xaa>
 800ca9c:	9b01      	ldr	r3, [sp, #4]
 800ca9e:	50e7      	str	r7, [r4, r3]
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800caa6:	3104      	adds	r1, #4
 800caa8:	f1b9 0f00 	cmp.w	r9, #0
 800caac:	d020      	beq.n	800caf0 <__multiply+0x134>
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	4647      	mov	r7, r8
 800cab2:	46a4      	mov	ip, r4
 800cab4:	f04f 0a00 	mov.w	sl, #0
 800cab8:	f8b7 b000 	ldrh.w	fp, [r7]
 800cabc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cac0:	fb09 220b 	mla	r2, r9, fp, r2
 800cac4:	4452      	add	r2, sl
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cacc:	f84c 3b04 	str.w	r3, [ip], #4
 800cad0:	f857 3b04 	ldr.w	r3, [r7], #4
 800cad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cad8:	f8bc 3000 	ldrh.w	r3, [ip]
 800cadc:	fb09 330a 	mla	r3, r9, sl, r3
 800cae0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cae4:	42bd      	cmp	r5, r7
 800cae6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800caea:	d8e5      	bhi.n	800cab8 <__multiply+0xfc>
 800caec:	9a01      	ldr	r2, [sp, #4]
 800caee:	50a3      	str	r3, [r4, r2]
 800caf0:	3404      	adds	r4, #4
 800caf2:	e79f      	b.n	800ca34 <__multiply+0x78>
 800caf4:	3e01      	subs	r6, #1
 800caf6:	e7a1      	b.n	800ca3c <__multiply+0x80>
 800caf8:	0800dd75 	.word	0x0800dd75
 800cafc:	0800dd86 	.word	0x0800dd86

0800cb00 <__pow5mult>:
 800cb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb04:	4615      	mov	r5, r2
 800cb06:	f012 0203 	ands.w	r2, r2, #3
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	460e      	mov	r6, r1
 800cb0e:	d007      	beq.n	800cb20 <__pow5mult+0x20>
 800cb10:	4c25      	ldr	r4, [pc, #148]	@ (800cba8 <__pow5mult+0xa8>)
 800cb12:	3a01      	subs	r2, #1
 800cb14:	2300      	movs	r3, #0
 800cb16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb1a:	f7ff fea7 	bl	800c86c <__multadd>
 800cb1e:	4606      	mov	r6, r0
 800cb20:	10ad      	asrs	r5, r5, #2
 800cb22:	d03d      	beq.n	800cba0 <__pow5mult+0xa0>
 800cb24:	69fc      	ldr	r4, [r7, #28]
 800cb26:	b97c      	cbnz	r4, 800cb48 <__pow5mult+0x48>
 800cb28:	2010      	movs	r0, #16
 800cb2a:	f7ff fd87 	bl	800c63c <malloc>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	61f8      	str	r0, [r7, #28]
 800cb32:	b928      	cbnz	r0, 800cb40 <__pow5mult+0x40>
 800cb34:	4b1d      	ldr	r3, [pc, #116]	@ (800cbac <__pow5mult+0xac>)
 800cb36:	481e      	ldr	r0, [pc, #120]	@ (800cbb0 <__pow5mult+0xb0>)
 800cb38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cb3c:	f000 fbdc 	bl	800d2f8 <__assert_func>
 800cb40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb44:	6004      	str	r4, [r0, #0]
 800cb46:	60c4      	str	r4, [r0, #12]
 800cb48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cb4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb50:	b94c      	cbnz	r4, 800cb66 <__pow5mult+0x66>
 800cb52:	f240 2171 	movw	r1, #625	@ 0x271
 800cb56:	4638      	mov	r0, r7
 800cb58:	f7ff ff1a 	bl	800c990 <__i2b>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb62:	4604      	mov	r4, r0
 800cb64:	6003      	str	r3, [r0, #0]
 800cb66:	f04f 0900 	mov.w	r9, #0
 800cb6a:	07eb      	lsls	r3, r5, #31
 800cb6c:	d50a      	bpl.n	800cb84 <__pow5mult+0x84>
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4622      	mov	r2, r4
 800cb72:	4638      	mov	r0, r7
 800cb74:	f7ff ff22 	bl	800c9bc <__multiply>
 800cb78:	4631      	mov	r1, r6
 800cb7a:	4680      	mov	r8, r0
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f7ff fe53 	bl	800c828 <_Bfree>
 800cb82:	4646      	mov	r6, r8
 800cb84:	106d      	asrs	r5, r5, #1
 800cb86:	d00b      	beq.n	800cba0 <__pow5mult+0xa0>
 800cb88:	6820      	ldr	r0, [r4, #0]
 800cb8a:	b938      	cbnz	r0, 800cb9c <__pow5mult+0x9c>
 800cb8c:	4622      	mov	r2, r4
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4638      	mov	r0, r7
 800cb92:	f7ff ff13 	bl	800c9bc <__multiply>
 800cb96:	6020      	str	r0, [r4, #0]
 800cb98:	f8c0 9000 	str.w	r9, [r0]
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	e7e4      	b.n	800cb6a <__pow5mult+0x6a>
 800cba0:	4630      	mov	r0, r6
 800cba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cba6:	bf00      	nop
 800cba8:	0800de38 	.word	0x0800de38
 800cbac:	0800dd06 	.word	0x0800dd06
 800cbb0:	0800dd86 	.word	0x0800dd86

0800cbb4 <__lshift>:
 800cbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb8:	460c      	mov	r4, r1
 800cbba:	6849      	ldr	r1, [r1, #4]
 800cbbc:	6923      	ldr	r3, [r4, #16]
 800cbbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbc2:	68a3      	ldr	r3, [r4, #8]
 800cbc4:	4607      	mov	r7, r0
 800cbc6:	4691      	mov	r9, r2
 800cbc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbcc:	f108 0601 	add.w	r6, r8, #1
 800cbd0:	42b3      	cmp	r3, r6
 800cbd2:	db0b      	blt.n	800cbec <__lshift+0x38>
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	f7ff fde7 	bl	800c7a8 <_Balloc>
 800cbda:	4605      	mov	r5, r0
 800cbdc:	b948      	cbnz	r0, 800cbf2 <__lshift+0x3e>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	4b28      	ldr	r3, [pc, #160]	@ (800cc84 <__lshift+0xd0>)
 800cbe2:	4829      	ldr	r0, [pc, #164]	@ (800cc88 <__lshift+0xd4>)
 800cbe4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cbe8:	f000 fb86 	bl	800d2f8 <__assert_func>
 800cbec:	3101      	adds	r1, #1
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	e7ee      	b.n	800cbd0 <__lshift+0x1c>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f100 0114 	add.w	r1, r0, #20
 800cbf8:	f100 0210 	add.w	r2, r0, #16
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	4553      	cmp	r3, sl
 800cc00:	db33      	blt.n	800cc6a <__lshift+0xb6>
 800cc02:	6920      	ldr	r0, [r4, #16]
 800cc04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc08:	f104 0314 	add.w	r3, r4, #20
 800cc0c:	f019 091f 	ands.w	r9, r9, #31
 800cc10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc18:	d02b      	beq.n	800cc72 <__lshift+0xbe>
 800cc1a:	f1c9 0e20 	rsb	lr, r9, #32
 800cc1e:	468a      	mov	sl, r1
 800cc20:	2200      	movs	r2, #0
 800cc22:	6818      	ldr	r0, [r3, #0]
 800cc24:	fa00 f009 	lsl.w	r0, r0, r9
 800cc28:	4310      	orrs	r0, r2
 800cc2a:	f84a 0b04 	str.w	r0, [sl], #4
 800cc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc32:	459c      	cmp	ip, r3
 800cc34:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc38:	d8f3      	bhi.n	800cc22 <__lshift+0x6e>
 800cc3a:	ebac 0304 	sub.w	r3, ip, r4
 800cc3e:	3b15      	subs	r3, #21
 800cc40:	f023 0303 	bic.w	r3, r3, #3
 800cc44:	3304      	adds	r3, #4
 800cc46:	f104 0015 	add.w	r0, r4, #21
 800cc4a:	4560      	cmp	r0, ip
 800cc4c:	bf88      	it	hi
 800cc4e:	2304      	movhi	r3, #4
 800cc50:	50ca      	str	r2, [r1, r3]
 800cc52:	b10a      	cbz	r2, 800cc58 <__lshift+0xa4>
 800cc54:	f108 0602 	add.w	r6, r8, #2
 800cc58:	3e01      	subs	r6, #1
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	612e      	str	r6, [r5, #16]
 800cc5e:	4621      	mov	r1, r4
 800cc60:	f7ff fde2 	bl	800c828 <_Bfree>
 800cc64:	4628      	mov	r0, r5
 800cc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc6e:	3301      	adds	r3, #1
 800cc70:	e7c5      	b.n	800cbfe <__lshift+0x4a>
 800cc72:	3904      	subs	r1, #4
 800cc74:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc78:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc7c:	459c      	cmp	ip, r3
 800cc7e:	d8f9      	bhi.n	800cc74 <__lshift+0xc0>
 800cc80:	e7ea      	b.n	800cc58 <__lshift+0xa4>
 800cc82:	bf00      	nop
 800cc84:	0800dd75 	.word	0x0800dd75
 800cc88:	0800dd86 	.word	0x0800dd86

0800cc8c <__mcmp>:
 800cc8c:	690a      	ldr	r2, [r1, #16]
 800cc8e:	4603      	mov	r3, r0
 800cc90:	6900      	ldr	r0, [r0, #16]
 800cc92:	1a80      	subs	r0, r0, r2
 800cc94:	b530      	push	{r4, r5, lr}
 800cc96:	d10e      	bne.n	800ccb6 <__mcmp+0x2a>
 800cc98:	3314      	adds	r3, #20
 800cc9a:	3114      	adds	r1, #20
 800cc9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ccac:	4295      	cmp	r5, r2
 800ccae:	d003      	beq.n	800ccb8 <__mcmp+0x2c>
 800ccb0:	d205      	bcs.n	800ccbe <__mcmp+0x32>
 800ccb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb6:	bd30      	pop	{r4, r5, pc}
 800ccb8:	42a3      	cmp	r3, r4
 800ccba:	d3f3      	bcc.n	800cca4 <__mcmp+0x18>
 800ccbc:	e7fb      	b.n	800ccb6 <__mcmp+0x2a>
 800ccbe:	2001      	movs	r0, #1
 800ccc0:	e7f9      	b.n	800ccb6 <__mcmp+0x2a>
	...

0800ccc4 <__mdiff>:
 800ccc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	4689      	mov	r9, r1
 800ccca:	4606      	mov	r6, r0
 800cccc:	4611      	mov	r1, r2
 800ccce:	4648      	mov	r0, r9
 800ccd0:	4614      	mov	r4, r2
 800ccd2:	f7ff ffdb 	bl	800cc8c <__mcmp>
 800ccd6:	1e05      	subs	r5, r0, #0
 800ccd8:	d112      	bne.n	800cd00 <__mdiff+0x3c>
 800ccda:	4629      	mov	r1, r5
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f7ff fd63 	bl	800c7a8 <_Balloc>
 800cce2:	4602      	mov	r2, r0
 800cce4:	b928      	cbnz	r0, 800ccf2 <__mdiff+0x2e>
 800cce6:	4b3f      	ldr	r3, [pc, #252]	@ (800cde4 <__mdiff+0x120>)
 800cce8:	f240 2137 	movw	r1, #567	@ 0x237
 800ccec:	483e      	ldr	r0, [pc, #248]	@ (800cde8 <__mdiff+0x124>)
 800ccee:	f000 fb03 	bl	800d2f8 <__assert_func>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	b003      	add	sp, #12
 800ccfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd00:	bfbc      	itt	lt
 800cd02:	464b      	movlt	r3, r9
 800cd04:	46a1      	movlt	r9, r4
 800cd06:	4630      	mov	r0, r6
 800cd08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd0c:	bfba      	itte	lt
 800cd0e:	461c      	movlt	r4, r3
 800cd10:	2501      	movlt	r5, #1
 800cd12:	2500      	movge	r5, #0
 800cd14:	f7ff fd48 	bl	800c7a8 <_Balloc>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	b918      	cbnz	r0, 800cd24 <__mdiff+0x60>
 800cd1c:	4b31      	ldr	r3, [pc, #196]	@ (800cde4 <__mdiff+0x120>)
 800cd1e:	f240 2145 	movw	r1, #581	@ 0x245
 800cd22:	e7e3      	b.n	800ccec <__mdiff+0x28>
 800cd24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cd28:	6926      	ldr	r6, [r4, #16]
 800cd2a:	60c5      	str	r5, [r0, #12]
 800cd2c:	f109 0310 	add.w	r3, r9, #16
 800cd30:	f109 0514 	add.w	r5, r9, #20
 800cd34:	f104 0e14 	add.w	lr, r4, #20
 800cd38:	f100 0b14 	add.w	fp, r0, #20
 800cd3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	46d9      	mov	r9, fp
 800cd48:	f04f 0c00 	mov.w	ip, #0
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cd52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	fa1f f38a 	uxth.w	r3, sl
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	b283      	uxth	r3, r0
 800cd60:	1acb      	subs	r3, r1, r3
 800cd62:	0c00      	lsrs	r0, r0, #16
 800cd64:	4463      	add	r3, ip
 800cd66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd74:	4576      	cmp	r6, lr
 800cd76:	f849 3b04 	str.w	r3, [r9], #4
 800cd7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd7e:	d8e5      	bhi.n	800cd4c <__mdiff+0x88>
 800cd80:	1b33      	subs	r3, r6, r4
 800cd82:	3b15      	subs	r3, #21
 800cd84:	f023 0303 	bic.w	r3, r3, #3
 800cd88:	3415      	adds	r4, #21
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	42a6      	cmp	r6, r4
 800cd8e:	bf38      	it	cc
 800cd90:	2304      	movcc	r3, #4
 800cd92:	441d      	add	r5, r3
 800cd94:	445b      	add	r3, fp
 800cd96:	461e      	mov	r6, r3
 800cd98:	462c      	mov	r4, r5
 800cd9a:	4544      	cmp	r4, r8
 800cd9c:	d30e      	bcc.n	800cdbc <__mdiff+0xf8>
 800cd9e:	f108 0103 	add.w	r1, r8, #3
 800cda2:	1b49      	subs	r1, r1, r5
 800cda4:	f021 0103 	bic.w	r1, r1, #3
 800cda8:	3d03      	subs	r5, #3
 800cdaa:	45a8      	cmp	r8, r5
 800cdac:	bf38      	it	cc
 800cdae:	2100      	movcc	r1, #0
 800cdb0:	440b      	add	r3, r1
 800cdb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdb6:	b191      	cbz	r1, 800cdde <__mdiff+0x11a>
 800cdb8:	6117      	str	r7, [r2, #16]
 800cdba:	e79d      	b.n	800ccf8 <__mdiff+0x34>
 800cdbc:	f854 1b04 	ldr.w	r1, [r4], #4
 800cdc0:	46e6      	mov	lr, ip
 800cdc2:	0c08      	lsrs	r0, r1, #16
 800cdc4:	fa1c fc81 	uxtah	ip, ip, r1
 800cdc8:	4471      	add	r1, lr
 800cdca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cdce:	b289      	uxth	r1, r1
 800cdd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cdd4:	f846 1b04 	str.w	r1, [r6], #4
 800cdd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cddc:	e7dd      	b.n	800cd9a <__mdiff+0xd6>
 800cdde:	3f01      	subs	r7, #1
 800cde0:	e7e7      	b.n	800cdb2 <__mdiff+0xee>
 800cde2:	bf00      	nop
 800cde4:	0800dd75 	.word	0x0800dd75
 800cde8:	0800dd86 	.word	0x0800dd86

0800cdec <__d2b>:
 800cdec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdf0:	460f      	mov	r7, r1
 800cdf2:	2101      	movs	r1, #1
 800cdf4:	ec59 8b10 	vmov	r8, r9, d0
 800cdf8:	4616      	mov	r6, r2
 800cdfa:	f7ff fcd5 	bl	800c7a8 <_Balloc>
 800cdfe:	4604      	mov	r4, r0
 800ce00:	b930      	cbnz	r0, 800ce10 <__d2b+0x24>
 800ce02:	4602      	mov	r2, r0
 800ce04:	4b23      	ldr	r3, [pc, #140]	@ (800ce94 <__d2b+0xa8>)
 800ce06:	4824      	ldr	r0, [pc, #144]	@ (800ce98 <__d2b+0xac>)
 800ce08:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce0c:	f000 fa74 	bl	800d2f8 <__assert_func>
 800ce10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce18:	b10d      	cbz	r5, 800ce1e <__d2b+0x32>
 800ce1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce1e:	9301      	str	r3, [sp, #4]
 800ce20:	f1b8 0300 	subs.w	r3, r8, #0
 800ce24:	d023      	beq.n	800ce6e <__d2b+0x82>
 800ce26:	4668      	mov	r0, sp
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	f7ff fd84 	bl	800c936 <__lo0bits>
 800ce2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce32:	b1d0      	cbz	r0, 800ce6a <__d2b+0x7e>
 800ce34:	f1c0 0320 	rsb	r3, r0, #32
 800ce38:	fa02 f303 	lsl.w	r3, r2, r3
 800ce3c:	430b      	orrs	r3, r1
 800ce3e:	40c2      	lsrs	r2, r0
 800ce40:	6163      	str	r3, [r4, #20]
 800ce42:	9201      	str	r2, [sp, #4]
 800ce44:	9b01      	ldr	r3, [sp, #4]
 800ce46:	61a3      	str	r3, [r4, #24]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	bf0c      	ite	eq
 800ce4c:	2201      	moveq	r2, #1
 800ce4e:	2202      	movne	r2, #2
 800ce50:	6122      	str	r2, [r4, #16]
 800ce52:	b1a5      	cbz	r5, 800ce7e <__d2b+0x92>
 800ce54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce58:	4405      	add	r5, r0
 800ce5a:	603d      	str	r5, [r7, #0]
 800ce5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce60:	6030      	str	r0, [r6, #0]
 800ce62:	4620      	mov	r0, r4
 800ce64:	b003      	add	sp, #12
 800ce66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce6a:	6161      	str	r1, [r4, #20]
 800ce6c:	e7ea      	b.n	800ce44 <__d2b+0x58>
 800ce6e:	a801      	add	r0, sp, #4
 800ce70:	f7ff fd61 	bl	800c936 <__lo0bits>
 800ce74:	9b01      	ldr	r3, [sp, #4]
 800ce76:	6163      	str	r3, [r4, #20]
 800ce78:	3020      	adds	r0, #32
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	e7e8      	b.n	800ce50 <__d2b+0x64>
 800ce7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce86:	6038      	str	r0, [r7, #0]
 800ce88:	6918      	ldr	r0, [r3, #16]
 800ce8a:	f7ff fd35 	bl	800c8f8 <__hi0bits>
 800ce8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce92:	e7e5      	b.n	800ce60 <__d2b+0x74>
 800ce94:	0800dd75 	.word	0x0800dd75
 800ce98:	0800dd86 	.word	0x0800dd86

0800ce9c <__ssputs_r>:
 800ce9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea0:	688e      	ldr	r6, [r1, #8]
 800cea2:	461f      	mov	r7, r3
 800cea4:	42be      	cmp	r6, r7
 800cea6:	680b      	ldr	r3, [r1, #0]
 800cea8:	4682      	mov	sl, r0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	4690      	mov	r8, r2
 800ceae:	d82d      	bhi.n	800cf0c <__ssputs_r+0x70>
 800ceb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ceb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ceb8:	d026      	beq.n	800cf08 <__ssputs_r+0x6c>
 800ceba:	6965      	ldr	r5, [r4, #20]
 800cebc:	6909      	ldr	r1, [r1, #16]
 800cebe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cec2:	eba3 0901 	sub.w	r9, r3, r1
 800cec6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceca:	1c7b      	adds	r3, r7, #1
 800cecc:	444b      	add	r3, r9
 800cece:	106d      	asrs	r5, r5, #1
 800ced0:	429d      	cmp	r5, r3
 800ced2:	bf38      	it	cc
 800ced4:	461d      	movcc	r5, r3
 800ced6:	0553      	lsls	r3, r2, #21
 800ced8:	d527      	bpl.n	800cf2a <__ssputs_r+0x8e>
 800ceda:	4629      	mov	r1, r5
 800cedc:	f7ff fbd8 	bl	800c690 <_malloc_r>
 800cee0:	4606      	mov	r6, r0
 800cee2:	b360      	cbz	r0, 800cf3e <__ssputs_r+0xa2>
 800cee4:	6921      	ldr	r1, [r4, #16]
 800cee6:	464a      	mov	r2, r9
 800cee8:	f7fe fcf5 	bl	800b8d6 <memcpy>
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cef6:	81a3      	strh	r3, [r4, #12]
 800cef8:	6126      	str	r6, [r4, #16]
 800cefa:	6165      	str	r5, [r4, #20]
 800cefc:	444e      	add	r6, r9
 800cefe:	eba5 0509 	sub.w	r5, r5, r9
 800cf02:	6026      	str	r6, [r4, #0]
 800cf04:	60a5      	str	r5, [r4, #8]
 800cf06:	463e      	mov	r6, r7
 800cf08:	42be      	cmp	r6, r7
 800cf0a:	d900      	bls.n	800cf0e <__ssputs_r+0x72>
 800cf0c:	463e      	mov	r6, r7
 800cf0e:	6820      	ldr	r0, [r4, #0]
 800cf10:	4632      	mov	r2, r6
 800cf12:	4641      	mov	r1, r8
 800cf14:	f000 f9c6 	bl	800d2a4 <memmove>
 800cf18:	68a3      	ldr	r3, [r4, #8]
 800cf1a:	1b9b      	subs	r3, r3, r6
 800cf1c:	60a3      	str	r3, [r4, #8]
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	4433      	add	r3, r6
 800cf22:	6023      	str	r3, [r4, #0]
 800cf24:	2000      	movs	r0, #0
 800cf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2a:	462a      	mov	r2, r5
 800cf2c:	f000 fa28 	bl	800d380 <_realloc_r>
 800cf30:	4606      	mov	r6, r0
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d1e0      	bne.n	800cef8 <__ssputs_r+0x5c>
 800cf36:	6921      	ldr	r1, [r4, #16]
 800cf38:	4650      	mov	r0, sl
 800cf3a:	f7ff fb35 	bl	800c5a8 <_free_r>
 800cf3e:	230c      	movs	r3, #12
 800cf40:	f8ca 3000 	str.w	r3, [sl]
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf4a:	81a3      	strh	r3, [r4, #12]
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	e7e9      	b.n	800cf26 <__ssputs_r+0x8a>
	...

0800cf54 <_svfiprintf_r>:
 800cf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf58:	4698      	mov	r8, r3
 800cf5a:	898b      	ldrh	r3, [r1, #12]
 800cf5c:	061b      	lsls	r3, r3, #24
 800cf5e:	b09d      	sub	sp, #116	@ 0x74
 800cf60:	4607      	mov	r7, r0
 800cf62:	460d      	mov	r5, r1
 800cf64:	4614      	mov	r4, r2
 800cf66:	d510      	bpl.n	800cf8a <_svfiprintf_r+0x36>
 800cf68:	690b      	ldr	r3, [r1, #16]
 800cf6a:	b973      	cbnz	r3, 800cf8a <_svfiprintf_r+0x36>
 800cf6c:	2140      	movs	r1, #64	@ 0x40
 800cf6e:	f7ff fb8f 	bl	800c690 <_malloc_r>
 800cf72:	6028      	str	r0, [r5, #0]
 800cf74:	6128      	str	r0, [r5, #16]
 800cf76:	b930      	cbnz	r0, 800cf86 <_svfiprintf_r+0x32>
 800cf78:	230c      	movs	r3, #12
 800cf7a:	603b      	str	r3, [r7, #0]
 800cf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf80:	b01d      	add	sp, #116	@ 0x74
 800cf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf86:	2340      	movs	r3, #64	@ 0x40
 800cf88:	616b      	str	r3, [r5, #20]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf8e:	2320      	movs	r3, #32
 800cf90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf94:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf98:	2330      	movs	r3, #48	@ 0x30
 800cf9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d138 <_svfiprintf_r+0x1e4>
 800cf9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfa2:	f04f 0901 	mov.w	r9, #1
 800cfa6:	4623      	mov	r3, r4
 800cfa8:	469a      	mov	sl, r3
 800cfaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfae:	b10a      	cbz	r2, 800cfb4 <_svfiprintf_r+0x60>
 800cfb0:	2a25      	cmp	r2, #37	@ 0x25
 800cfb2:	d1f9      	bne.n	800cfa8 <_svfiprintf_r+0x54>
 800cfb4:	ebba 0b04 	subs.w	fp, sl, r4
 800cfb8:	d00b      	beq.n	800cfd2 <_svfiprintf_r+0x7e>
 800cfba:	465b      	mov	r3, fp
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff ff6b 	bl	800ce9c <__ssputs_r>
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	f000 80a7 	beq.w	800d11a <_svfiprintf_r+0x1c6>
 800cfcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfce:	445a      	add	r2, fp
 800cfd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfd2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 809f 	beq.w	800d11a <_svfiprintf_r+0x1c6>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfe6:	f10a 0a01 	add.w	sl, sl, #1
 800cfea:	9304      	str	r3, [sp, #16]
 800cfec:	9307      	str	r3, [sp, #28]
 800cfee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cff2:	931a      	str	r3, [sp, #104]	@ 0x68
 800cff4:	4654      	mov	r4, sl
 800cff6:	2205      	movs	r2, #5
 800cff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffc:	484e      	ldr	r0, [pc, #312]	@ (800d138 <_svfiprintf_r+0x1e4>)
 800cffe:	f7f3 f8ef 	bl	80001e0 <memchr>
 800d002:	9a04      	ldr	r2, [sp, #16]
 800d004:	b9d8      	cbnz	r0, 800d03e <_svfiprintf_r+0xea>
 800d006:	06d0      	lsls	r0, r2, #27
 800d008:	bf44      	itt	mi
 800d00a:	2320      	movmi	r3, #32
 800d00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d010:	0711      	lsls	r1, r2, #28
 800d012:	bf44      	itt	mi
 800d014:	232b      	movmi	r3, #43	@ 0x2b
 800d016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d01a:	f89a 3000 	ldrb.w	r3, [sl]
 800d01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d020:	d015      	beq.n	800d04e <_svfiprintf_r+0xfa>
 800d022:	9a07      	ldr	r2, [sp, #28]
 800d024:	4654      	mov	r4, sl
 800d026:	2000      	movs	r0, #0
 800d028:	f04f 0c0a 	mov.w	ip, #10
 800d02c:	4621      	mov	r1, r4
 800d02e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d032:	3b30      	subs	r3, #48	@ 0x30
 800d034:	2b09      	cmp	r3, #9
 800d036:	d94b      	bls.n	800d0d0 <_svfiprintf_r+0x17c>
 800d038:	b1b0      	cbz	r0, 800d068 <_svfiprintf_r+0x114>
 800d03a:	9207      	str	r2, [sp, #28]
 800d03c:	e014      	b.n	800d068 <_svfiprintf_r+0x114>
 800d03e:	eba0 0308 	sub.w	r3, r0, r8
 800d042:	fa09 f303 	lsl.w	r3, r9, r3
 800d046:	4313      	orrs	r3, r2
 800d048:	9304      	str	r3, [sp, #16]
 800d04a:	46a2      	mov	sl, r4
 800d04c:	e7d2      	b.n	800cff4 <_svfiprintf_r+0xa0>
 800d04e:	9b03      	ldr	r3, [sp, #12]
 800d050:	1d19      	adds	r1, r3, #4
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	9103      	str	r1, [sp, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	bfbb      	ittet	lt
 800d05a:	425b      	neglt	r3, r3
 800d05c:	f042 0202 	orrlt.w	r2, r2, #2
 800d060:	9307      	strge	r3, [sp, #28]
 800d062:	9307      	strlt	r3, [sp, #28]
 800d064:	bfb8      	it	lt
 800d066:	9204      	strlt	r2, [sp, #16]
 800d068:	7823      	ldrb	r3, [r4, #0]
 800d06a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d06c:	d10a      	bne.n	800d084 <_svfiprintf_r+0x130>
 800d06e:	7863      	ldrb	r3, [r4, #1]
 800d070:	2b2a      	cmp	r3, #42	@ 0x2a
 800d072:	d132      	bne.n	800d0da <_svfiprintf_r+0x186>
 800d074:	9b03      	ldr	r3, [sp, #12]
 800d076:	1d1a      	adds	r2, r3, #4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	9203      	str	r2, [sp, #12]
 800d07c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d080:	3402      	adds	r4, #2
 800d082:	9305      	str	r3, [sp, #20]
 800d084:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d148 <_svfiprintf_r+0x1f4>
 800d088:	7821      	ldrb	r1, [r4, #0]
 800d08a:	2203      	movs	r2, #3
 800d08c:	4650      	mov	r0, sl
 800d08e:	f7f3 f8a7 	bl	80001e0 <memchr>
 800d092:	b138      	cbz	r0, 800d0a4 <_svfiprintf_r+0x150>
 800d094:	9b04      	ldr	r3, [sp, #16]
 800d096:	eba0 000a 	sub.w	r0, r0, sl
 800d09a:	2240      	movs	r2, #64	@ 0x40
 800d09c:	4082      	lsls	r2, r0
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	3401      	adds	r4, #1
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a8:	4824      	ldr	r0, [pc, #144]	@ (800d13c <_svfiprintf_r+0x1e8>)
 800d0aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0ae:	2206      	movs	r2, #6
 800d0b0:	f7f3 f896 	bl	80001e0 <memchr>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d036      	beq.n	800d126 <_svfiprintf_r+0x1d2>
 800d0b8:	4b21      	ldr	r3, [pc, #132]	@ (800d140 <_svfiprintf_r+0x1ec>)
 800d0ba:	bb1b      	cbnz	r3, 800d104 <_svfiprintf_r+0x1b0>
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	3307      	adds	r3, #7
 800d0c0:	f023 0307 	bic.w	r3, r3, #7
 800d0c4:	3308      	adds	r3, #8
 800d0c6:	9303      	str	r3, [sp, #12]
 800d0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ca:	4433      	add	r3, r6
 800d0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0ce:	e76a      	b.n	800cfa6 <_svfiprintf_r+0x52>
 800d0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	e7a8      	b.n	800d02c <_svfiprintf_r+0xd8>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	3401      	adds	r4, #1
 800d0de:	9305      	str	r3, [sp, #20]
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	f04f 0c0a 	mov.w	ip, #10
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0ec:	3a30      	subs	r2, #48	@ 0x30
 800d0ee:	2a09      	cmp	r2, #9
 800d0f0:	d903      	bls.n	800d0fa <_svfiprintf_r+0x1a6>
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d0c6      	beq.n	800d084 <_svfiprintf_r+0x130>
 800d0f6:	9105      	str	r1, [sp, #20]
 800d0f8:	e7c4      	b.n	800d084 <_svfiprintf_r+0x130>
 800d0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0fe:	4604      	mov	r4, r0
 800d100:	2301      	movs	r3, #1
 800d102:	e7f0      	b.n	800d0e6 <_svfiprintf_r+0x192>
 800d104:	ab03      	add	r3, sp, #12
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	462a      	mov	r2, r5
 800d10a:	4b0e      	ldr	r3, [pc, #56]	@ (800d144 <_svfiprintf_r+0x1f0>)
 800d10c:	a904      	add	r1, sp, #16
 800d10e:	4638      	mov	r0, r7
 800d110:	f7fd fe72 	bl	800adf8 <_printf_float>
 800d114:	1c42      	adds	r2, r0, #1
 800d116:	4606      	mov	r6, r0
 800d118:	d1d6      	bne.n	800d0c8 <_svfiprintf_r+0x174>
 800d11a:	89ab      	ldrh	r3, [r5, #12]
 800d11c:	065b      	lsls	r3, r3, #25
 800d11e:	f53f af2d 	bmi.w	800cf7c <_svfiprintf_r+0x28>
 800d122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d124:	e72c      	b.n	800cf80 <_svfiprintf_r+0x2c>
 800d126:	ab03      	add	r3, sp, #12
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	462a      	mov	r2, r5
 800d12c:	4b05      	ldr	r3, [pc, #20]	@ (800d144 <_svfiprintf_r+0x1f0>)
 800d12e:	a904      	add	r1, sp, #16
 800d130:	4638      	mov	r0, r7
 800d132:	f7fe f8f9 	bl	800b328 <_printf_i>
 800d136:	e7ed      	b.n	800d114 <_svfiprintf_r+0x1c0>
 800d138:	0800dddf 	.word	0x0800dddf
 800d13c:	0800dde9 	.word	0x0800dde9
 800d140:	0800adf9 	.word	0x0800adf9
 800d144:	0800ce9d 	.word	0x0800ce9d
 800d148:	0800dde5 	.word	0x0800dde5

0800d14c <__sflush_r>:
 800d14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d154:	0716      	lsls	r6, r2, #28
 800d156:	4605      	mov	r5, r0
 800d158:	460c      	mov	r4, r1
 800d15a:	d454      	bmi.n	800d206 <__sflush_r+0xba>
 800d15c:	684b      	ldr	r3, [r1, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dc02      	bgt.n	800d168 <__sflush_r+0x1c>
 800d162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d164:	2b00      	cmp	r3, #0
 800d166:	dd48      	ble.n	800d1fa <__sflush_r+0xae>
 800d168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d16a:	2e00      	cmp	r6, #0
 800d16c:	d045      	beq.n	800d1fa <__sflush_r+0xae>
 800d16e:	2300      	movs	r3, #0
 800d170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d174:	682f      	ldr	r7, [r5, #0]
 800d176:	6a21      	ldr	r1, [r4, #32]
 800d178:	602b      	str	r3, [r5, #0]
 800d17a:	d030      	beq.n	800d1de <__sflush_r+0x92>
 800d17c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	0759      	lsls	r1, r3, #29
 800d182:	d505      	bpl.n	800d190 <__sflush_r+0x44>
 800d184:	6863      	ldr	r3, [r4, #4]
 800d186:	1ad2      	subs	r2, r2, r3
 800d188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d18a:	b10b      	cbz	r3, 800d190 <__sflush_r+0x44>
 800d18c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d18e:	1ad2      	subs	r2, r2, r3
 800d190:	2300      	movs	r3, #0
 800d192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d194:	6a21      	ldr	r1, [r4, #32]
 800d196:	4628      	mov	r0, r5
 800d198:	47b0      	blx	r6
 800d19a:	1c43      	adds	r3, r0, #1
 800d19c:	89a3      	ldrh	r3, [r4, #12]
 800d19e:	d106      	bne.n	800d1ae <__sflush_r+0x62>
 800d1a0:	6829      	ldr	r1, [r5, #0]
 800d1a2:	291d      	cmp	r1, #29
 800d1a4:	d82b      	bhi.n	800d1fe <__sflush_r+0xb2>
 800d1a6:	4a2a      	ldr	r2, [pc, #168]	@ (800d250 <__sflush_r+0x104>)
 800d1a8:	40ca      	lsrs	r2, r1
 800d1aa:	07d6      	lsls	r6, r2, #31
 800d1ac:	d527      	bpl.n	800d1fe <__sflush_r+0xb2>
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	6062      	str	r2, [r4, #4]
 800d1b2:	04d9      	lsls	r1, r3, #19
 800d1b4:	6922      	ldr	r2, [r4, #16]
 800d1b6:	6022      	str	r2, [r4, #0]
 800d1b8:	d504      	bpl.n	800d1c4 <__sflush_r+0x78>
 800d1ba:	1c42      	adds	r2, r0, #1
 800d1bc:	d101      	bne.n	800d1c2 <__sflush_r+0x76>
 800d1be:	682b      	ldr	r3, [r5, #0]
 800d1c0:	b903      	cbnz	r3, 800d1c4 <__sflush_r+0x78>
 800d1c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1c6:	602f      	str	r7, [r5, #0]
 800d1c8:	b1b9      	cbz	r1, 800d1fa <__sflush_r+0xae>
 800d1ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1ce:	4299      	cmp	r1, r3
 800d1d0:	d002      	beq.n	800d1d8 <__sflush_r+0x8c>
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f7ff f9e8 	bl	800c5a8 <_free_r>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1dc:	e00d      	b.n	800d1fa <__sflush_r+0xae>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	47b0      	blx	r6
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	1c50      	adds	r0, r2, #1
 800d1e8:	d1c9      	bne.n	800d17e <__sflush_r+0x32>
 800d1ea:	682b      	ldr	r3, [r5, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d0c6      	beq.n	800d17e <__sflush_r+0x32>
 800d1f0:	2b1d      	cmp	r3, #29
 800d1f2:	d001      	beq.n	800d1f8 <__sflush_r+0xac>
 800d1f4:	2b16      	cmp	r3, #22
 800d1f6:	d11e      	bne.n	800d236 <__sflush_r+0xea>
 800d1f8:	602f      	str	r7, [r5, #0]
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	e022      	b.n	800d244 <__sflush_r+0xf8>
 800d1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d202:	b21b      	sxth	r3, r3
 800d204:	e01b      	b.n	800d23e <__sflush_r+0xf2>
 800d206:	690f      	ldr	r7, [r1, #16]
 800d208:	2f00      	cmp	r7, #0
 800d20a:	d0f6      	beq.n	800d1fa <__sflush_r+0xae>
 800d20c:	0793      	lsls	r3, r2, #30
 800d20e:	680e      	ldr	r6, [r1, #0]
 800d210:	bf08      	it	eq
 800d212:	694b      	ldreq	r3, [r1, #20]
 800d214:	600f      	str	r7, [r1, #0]
 800d216:	bf18      	it	ne
 800d218:	2300      	movne	r3, #0
 800d21a:	eba6 0807 	sub.w	r8, r6, r7
 800d21e:	608b      	str	r3, [r1, #8]
 800d220:	f1b8 0f00 	cmp.w	r8, #0
 800d224:	dde9      	ble.n	800d1fa <__sflush_r+0xae>
 800d226:	6a21      	ldr	r1, [r4, #32]
 800d228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d22a:	4643      	mov	r3, r8
 800d22c:	463a      	mov	r2, r7
 800d22e:	4628      	mov	r0, r5
 800d230:	47b0      	blx	r6
 800d232:	2800      	cmp	r0, #0
 800d234:	dc08      	bgt.n	800d248 <__sflush_r+0xfc>
 800d236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d23e:	81a3      	strh	r3, [r4, #12]
 800d240:	f04f 30ff 	mov.w	r0, #4294967295
 800d244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d248:	4407      	add	r7, r0
 800d24a:	eba8 0800 	sub.w	r8, r8, r0
 800d24e:	e7e7      	b.n	800d220 <__sflush_r+0xd4>
 800d250:	20400001 	.word	0x20400001

0800d254 <_fflush_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	690b      	ldr	r3, [r1, #16]
 800d258:	4605      	mov	r5, r0
 800d25a:	460c      	mov	r4, r1
 800d25c:	b913      	cbnz	r3, 800d264 <_fflush_r+0x10>
 800d25e:	2500      	movs	r5, #0
 800d260:	4628      	mov	r0, r5
 800d262:	bd38      	pop	{r3, r4, r5, pc}
 800d264:	b118      	cbz	r0, 800d26e <_fflush_r+0x1a>
 800d266:	6a03      	ldr	r3, [r0, #32]
 800d268:	b90b      	cbnz	r3, 800d26e <_fflush_r+0x1a>
 800d26a:	f7fe fa07 	bl	800b67c <__sinit>
 800d26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d0f3      	beq.n	800d25e <_fflush_r+0xa>
 800d276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d278:	07d0      	lsls	r0, r2, #31
 800d27a:	d404      	bmi.n	800d286 <_fflush_r+0x32>
 800d27c:	0599      	lsls	r1, r3, #22
 800d27e:	d402      	bmi.n	800d286 <_fflush_r+0x32>
 800d280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d282:	f7fe fb26 	bl	800b8d2 <__retarget_lock_acquire_recursive>
 800d286:	4628      	mov	r0, r5
 800d288:	4621      	mov	r1, r4
 800d28a:	f7ff ff5f 	bl	800d14c <__sflush_r>
 800d28e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d290:	07da      	lsls	r2, r3, #31
 800d292:	4605      	mov	r5, r0
 800d294:	d4e4      	bmi.n	800d260 <_fflush_r+0xc>
 800d296:	89a3      	ldrh	r3, [r4, #12]
 800d298:	059b      	lsls	r3, r3, #22
 800d29a:	d4e1      	bmi.n	800d260 <_fflush_r+0xc>
 800d29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d29e:	f7fe fb19 	bl	800b8d4 <__retarget_lock_release_recursive>
 800d2a2:	e7dd      	b.n	800d260 <_fflush_r+0xc>

0800d2a4 <memmove>:
 800d2a4:	4288      	cmp	r0, r1
 800d2a6:	b510      	push	{r4, lr}
 800d2a8:	eb01 0402 	add.w	r4, r1, r2
 800d2ac:	d902      	bls.n	800d2b4 <memmove+0x10>
 800d2ae:	4284      	cmp	r4, r0
 800d2b0:	4623      	mov	r3, r4
 800d2b2:	d807      	bhi.n	800d2c4 <memmove+0x20>
 800d2b4:	1e43      	subs	r3, r0, #1
 800d2b6:	42a1      	cmp	r1, r4
 800d2b8:	d008      	beq.n	800d2cc <memmove+0x28>
 800d2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2c2:	e7f8      	b.n	800d2b6 <memmove+0x12>
 800d2c4:	4402      	add	r2, r0
 800d2c6:	4601      	mov	r1, r0
 800d2c8:	428a      	cmp	r2, r1
 800d2ca:	d100      	bne.n	800d2ce <memmove+0x2a>
 800d2cc:	bd10      	pop	{r4, pc}
 800d2ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2d6:	e7f7      	b.n	800d2c8 <memmove+0x24>

0800d2d8 <_sbrk_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4d06      	ldr	r5, [pc, #24]	@ (800d2f4 <_sbrk_r+0x1c>)
 800d2dc:	2300      	movs	r3, #0
 800d2de:	4604      	mov	r4, r0
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	602b      	str	r3, [r5, #0]
 800d2e4:	f7f5 fc08 	bl	8002af8 <_sbrk>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_sbrk_r+0x1a>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_sbrk_r+0x1a>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	20000fd8 	.word	0x20000fd8

0800d2f8 <__assert_func>:
 800d2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2fa:	4614      	mov	r4, r2
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	4b09      	ldr	r3, [pc, #36]	@ (800d324 <__assert_func+0x2c>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4605      	mov	r5, r0
 800d304:	68d8      	ldr	r0, [r3, #12]
 800d306:	b14c      	cbz	r4, 800d31c <__assert_func+0x24>
 800d308:	4b07      	ldr	r3, [pc, #28]	@ (800d328 <__assert_func+0x30>)
 800d30a:	9100      	str	r1, [sp, #0]
 800d30c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d310:	4906      	ldr	r1, [pc, #24]	@ (800d32c <__assert_func+0x34>)
 800d312:	462b      	mov	r3, r5
 800d314:	f000 f870 	bl	800d3f8 <fiprintf>
 800d318:	f000 f880 	bl	800d41c <abort>
 800d31c:	4b04      	ldr	r3, [pc, #16]	@ (800d330 <__assert_func+0x38>)
 800d31e:	461c      	mov	r4, r3
 800d320:	e7f3      	b.n	800d30a <__assert_func+0x12>
 800d322:	bf00      	nop
 800d324:	20000110 	.word	0x20000110
 800d328:	0800ddfa 	.word	0x0800ddfa
 800d32c:	0800de07 	.word	0x0800de07
 800d330:	0800de35 	.word	0x0800de35

0800d334 <_calloc_r>:
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	fba1 5402 	umull	r5, r4, r1, r2
 800d33a:	b934      	cbnz	r4, 800d34a <_calloc_r+0x16>
 800d33c:	4629      	mov	r1, r5
 800d33e:	f7ff f9a7 	bl	800c690 <_malloc_r>
 800d342:	4606      	mov	r6, r0
 800d344:	b928      	cbnz	r0, 800d352 <_calloc_r+0x1e>
 800d346:	4630      	mov	r0, r6
 800d348:	bd70      	pop	{r4, r5, r6, pc}
 800d34a:	220c      	movs	r2, #12
 800d34c:	6002      	str	r2, [r0, #0]
 800d34e:	2600      	movs	r6, #0
 800d350:	e7f9      	b.n	800d346 <_calloc_r+0x12>
 800d352:	462a      	mov	r2, r5
 800d354:	4621      	mov	r1, r4
 800d356:	f7fe fa2c 	bl	800b7b2 <memset>
 800d35a:	e7f4      	b.n	800d346 <_calloc_r+0x12>

0800d35c <__ascii_mbtowc>:
 800d35c:	b082      	sub	sp, #8
 800d35e:	b901      	cbnz	r1, 800d362 <__ascii_mbtowc+0x6>
 800d360:	a901      	add	r1, sp, #4
 800d362:	b142      	cbz	r2, 800d376 <__ascii_mbtowc+0x1a>
 800d364:	b14b      	cbz	r3, 800d37a <__ascii_mbtowc+0x1e>
 800d366:	7813      	ldrb	r3, [r2, #0]
 800d368:	600b      	str	r3, [r1, #0]
 800d36a:	7812      	ldrb	r2, [r2, #0]
 800d36c:	1e10      	subs	r0, r2, #0
 800d36e:	bf18      	it	ne
 800d370:	2001      	movne	r0, #1
 800d372:	b002      	add	sp, #8
 800d374:	4770      	bx	lr
 800d376:	4610      	mov	r0, r2
 800d378:	e7fb      	b.n	800d372 <__ascii_mbtowc+0x16>
 800d37a:	f06f 0001 	mvn.w	r0, #1
 800d37e:	e7f8      	b.n	800d372 <__ascii_mbtowc+0x16>

0800d380 <_realloc_r>:
 800d380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d384:	4607      	mov	r7, r0
 800d386:	4614      	mov	r4, r2
 800d388:	460d      	mov	r5, r1
 800d38a:	b921      	cbnz	r1, 800d396 <_realloc_r+0x16>
 800d38c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d390:	4611      	mov	r1, r2
 800d392:	f7ff b97d 	b.w	800c690 <_malloc_r>
 800d396:	b92a      	cbnz	r2, 800d3a4 <_realloc_r+0x24>
 800d398:	f7ff f906 	bl	800c5a8 <_free_r>
 800d39c:	4625      	mov	r5, r4
 800d39e:	4628      	mov	r0, r5
 800d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a4:	f000 f841 	bl	800d42a <_malloc_usable_size_r>
 800d3a8:	4284      	cmp	r4, r0
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	d802      	bhi.n	800d3b4 <_realloc_r+0x34>
 800d3ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3b2:	d8f4      	bhi.n	800d39e <_realloc_r+0x1e>
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	f7ff f96a 	bl	800c690 <_malloc_r>
 800d3bc:	4680      	mov	r8, r0
 800d3be:	b908      	cbnz	r0, 800d3c4 <_realloc_r+0x44>
 800d3c0:	4645      	mov	r5, r8
 800d3c2:	e7ec      	b.n	800d39e <_realloc_r+0x1e>
 800d3c4:	42b4      	cmp	r4, r6
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	4629      	mov	r1, r5
 800d3ca:	bf28      	it	cs
 800d3cc:	4632      	movcs	r2, r6
 800d3ce:	f7fe fa82 	bl	800b8d6 <memcpy>
 800d3d2:	4629      	mov	r1, r5
 800d3d4:	4638      	mov	r0, r7
 800d3d6:	f7ff f8e7 	bl	800c5a8 <_free_r>
 800d3da:	e7f1      	b.n	800d3c0 <_realloc_r+0x40>

0800d3dc <__ascii_wctomb>:
 800d3dc:	4603      	mov	r3, r0
 800d3de:	4608      	mov	r0, r1
 800d3e0:	b141      	cbz	r1, 800d3f4 <__ascii_wctomb+0x18>
 800d3e2:	2aff      	cmp	r2, #255	@ 0xff
 800d3e4:	d904      	bls.n	800d3f0 <__ascii_wctomb+0x14>
 800d3e6:	228a      	movs	r2, #138	@ 0x8a
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ee:	4770      	bx	lr
 800d3f0:	700a      	strb	r2, [r1, #0]
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	4770      	bx	lr
	...

0800d3f8 <fiprintf>:
 800d3f8:	b40e      	push	{r1, r2, r3}
 800d3fa:	b503      	push	{r0, r1, lr}
 800d3fc:	4601      	mov	r1, r0
 800d3fe:	ab03      	add	r3, sp, #12
 800d400:	4805      	ldr	r0, [pc, #20]	@ (800d418 <fiprintf+0x20>)
 800d402:	f853 2b04 	ldr.w	r2, [r3], #4
 800d406:	6800      	ldr	r0, [r0, #0]
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	f000 f83f 	bl	800d48c <_vfiprintf_r>
 800d40e:	b002      	add	sp, #8
 800d410:	f85d eb04 	ldr.w	lr, [sp], #4
 800d414:	b003      	add	sp, #12
 800d416:	4770      	bx	lr
 800d418:	20000110 	.word	0x20000110

0800d41c <abort>:
 800d41c:	b508      	push	{r3, lr}
 800d41e:	2006      	movs	r0, #6
 800d420:	f000 fa08 	bl	800d834 <raise>
 800d424:	2001      	movs	r0, #1
 800d426:	f7f5 faef 	bl	8002a08 <_exit>

0800d42a <_malloc_usable_size_r>:
 800d42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d42e:	1f18      	subs	r0, r3, #4
 800d430:	2b00      	cmp	r3, #0
 800d432:	bfbc      	itt	lt
 800d434:	580b      	ldrlt	r3, [r1, r0]
 800d436:	18c0      	addlt	r0, r0, r3
 800d438:	4770      	bx	lr

0800d43a <__sfputc_r>:
 800d43a:	6893      	ldr	r3, [r2, #8]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	2b00      	cmp	r3, #0
 800d440:	b410      	push	{r4}
 800d442:	6093      	str	r3, [r2, #8]
 800d444:	da08      	bge.n	800d458 <__sfputc_r+0x1e>
 800d446:	6994      	ldr	r4, [r2, #24]
 800d448:	42a3      	cmp	r3, r4
 800d44a:	db01      	blt.n	800d450 <__sfputc_r+0x16>
 800d44c:	290a      	cmp	r1, #10
 800d44e:	d103      	bne.n	800d458 <__sfputc_r+0x1e>
 800d450:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d454:	f000 b932 	b.w	800d6bc <__swbuf_r>
 800d458:	6813      	ldr	r3, [r2, #0]
 800d45a:	1c58      	adds	r0, r3, #1
 800d45c:	6010      	str	r0, [r2, #0]
 800d45e:	7019      	strb	r1, [r3, #0]
 800d460:	4608      	mov	r0, r1
 800d462:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <__sfputs_r>:
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	4614      	mov	r4, r2
 800d470:	18d5      	adds	r5, r2, r3
 800d472:	42ac      	cmp	r4, r5
 800d474:	d101      	bne.n	800d47a <__sfputs_r+0x12>
 800d476:	2000      	movs	r0, #0
 800d478:	e007      	b.n	800d48a <__sfputs_r+0x22>
 800d47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d47e:	463a      	mov	r2, r7
 800d480:	4630      	mov	r0, r6
 800d482:	f7ff ffda 	bl	800d43a <__sfputc_r>
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	d1f3      	bne.n	800d472 <__sfputs_r+0xa>
 800d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d48c <_vfiprintf_r>:
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	460d      	mov	r5, r1
 800d492:	b09d      	sub	sp, #116	@ 0x74
 800d494:	4614      	mov	r4, r2
 800d496:	4698      	mov	r8, r3
 800d498:	4606      	mov	r6, r0
 800d49a:	b118      	cbz	r0, 800d4a4 <_vfiprintf_r+0x18>
 800d49c:	6a03      	ldr	r3, [r0, #32]
 800d49e:	b90b      	cbnz	r3, 800d4a4 <_vfiprintf_r+0x18>
 800d4a0:	f7fe f8ec 	bl	800b67c <__sinit>
 800d4a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4a6:	07d9      	lsls	r1, r3, #31
 800d4a8:	d405      	bmi.n	800d4b6 <_vfiprintf_r+0x2a>
 800d4aa:	89ab      	ldrh	r3, [r5, #12]
 800d4ac:	059a      	lsls	r2, r3, #22
 800d4ae:	d402      	bmi.n	800d4b6 <_vfiprintf_r+0x2a>
 800d4b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4b2:	f7fe fa0e 	bl	800b8d2 <__retarget_lock_acquire_recursive>
 800d4b6:	89ab      	ldrh	r3, [r5, #12]
 800d4b8:	071b      	lsls	r3, r3, #28
 800d4ba:	d501      	bpl.n	800d4c0 <_vfiprintf_r+0x34>
 800d4bc:	692b      	ldr	r3, [r5, #16]
 800d4be:	b99b      	cbnz	r3, 800d4e8 <_vfiprintf_r+0x5c>
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f000 f938 	bl	800d738 <__swsetup_r>
 800d4c8:	b170      	cbz	r0, 800d4e8 <_vfiprintf_r+0x5c>
 800d4ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4cc:	07dc      	lsls	r4, r3, #31
 800d4ce:	d504      	bpl.n	800d4da <_vfiprintf_r+0x4e>
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d4:	b01d      	add	sp, #116	@ 0x74
 800d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4da:	89ab      	ldrh	r3, [r5, #12]
 800d4dc:	0598      	lsls	r0, r3, #22
 800d4de:	d4f7      	bmi.n	800d4d0 <_vfiprintf_r+0x44>
 800d4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4e2:	f7fe f9f7 	bl	800b8d4 <__retarget_lock_release_recursive>
 800d4e6:	e7f3      	b.n	800d4d0 <_vfiprintf_r+0x44>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4ec:	2320      	movs	r3, #32
 800d4ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4f6:	2330      	movs	r3, #48	@ 0x30
 800d4f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d6a8 <_vfiprintf_r+0x21c>
 800d4fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d500:	f04f 0901 	mov.w	r9, #1
 800d504:	4623      	mov	r3, r4
 800d506:	469a      	mov	sl, r3
 800d508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d50c:	b10a      	cbz	r2, 800d512 <_vfiprintf_r+0x86>
 800d50e:	2a25      	cmp	r2, #37	@ 0x25
 800d510:	d1f9      	bne.n	800d506 <_vfiprintf_r+0x7a>
 800d512:	ebba 0b04 	subs.w	fp, sl, r4
 800d516:	d00b      	beq.n	800d530 <_vfiprintf_r+0xa4>
 800d518:	465b      	mov	r3, fp
 800d51a:	4622      	mov	r2, r4
 800d51c:	4629      	mov	r1, r5
 800d51e:	4630      	mov	r0, r6
 800d520:	f7ff ffa2 	bl	800d468 <__sfputs_r>
 800d524:	3001      	adds	r0, #1
 800d526:	f000 80a7 	beq.w	800d678 <_vfiprintf_r+0x1ec>
 800d52a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d52c:	445a      	add	r2, fp
 800d52e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d530:	f89a 3000 	ldrb.w	r3, [sl]
 800d534:	2b00      	cmp	r3, #0
 800d536:	f000 809f 	beq.w	800d678 <_vfiprintf_r+0x1ec>
 800d53a:	2300      	movs	r3, #0
 800d53c:	f04f 32ff 	mov.w	r2, #4294967295
 800d540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d544:	f10a 0a01 	add.w	sl, sl, #1
 800d548:	9304      	str	r3, [sp, #16]
 800d54a:	9307      	str	r3, [sp, #28]
 800d54c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d550:	931a      	str	r3, [sp, #104]	@ 0x68
 800d552:	4654      	mov	r4, sl
 800d554:	2205      	movs	r2, #5
 800d556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55a:	4853      	ldr	r0, [pc, #332]	@ (800d6a8 <_vfiprintf_r+0x21c>)
 800d55c:	f7f2 fe40 	bl	80001e0 <memchr>
 800d560:	9a04      	ldr	r2, [sp, #16]
 800d562:	b9d8      	cbnz	r0, 800d59c <_vfiprintf_r+0x110>
 800d564:	06d1      	lsls	r1, r2, #27
 800d566:	bf44      	itt	mi
 800d568:	2320      	movmi	r3, #32
 800d56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d56e:	0713      	lsls	r3, r2, #28
 800d570:	bf44      	itt	mi
 800d572:	232b      	movmi	r3, #43	@ 0x2b
 800d574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d578:	f89a 3000 	ldrb.w	r3, [sl]
 800d57c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d57e:	d015      	beq.n	800d5ac <_vfiprintf_r+0x120>
 800d580:	9a07      	ldr	r2, [sp, #28]
 800d582:	4654      	mov	r4, sl
 800d584:	2000      	movs	r0, #0
 800d586:	f04f 0c0a 	mov.w	ip, #10
 800d58a:	4621      	mov	r1, r4
 800d58c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d590:	3b30      	subs	r3, #48	@ 0x30
 800d592:	2b09      	cmp	r3, #9
 800d594:	d94b      	bls.n	800d62e <_vfiprintf_r+0x1a2>
 800d596:	b1b0      	cbz	r0, 800d5c6 <_vfiprintf_r+0x13a>
 800d598:	9207      	str	r2, [sp, #28]
 800d59a:	e014      	b.n	800d5c6 <_vfiprintf_r+0x13a>
 800d59c:	eba0 0308 	sub.w	r3, r0, r8
 800d5a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	9304      	str	r3, [sp, #16]
 800d5a8:	46a2      	mov	sl, r4
 800d5aa:	e7d2      	b.n	800d552 <_vfiprintf_r+0xc6>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	1d19      	adds	r1, r3, #4
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	9103      	str	r1, [sp, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	bfbb      	ittet	lt
 800d5b8:	425b      	neglt	r3, r3
 800d5ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d5be:	9307      	strge	r3, [sp, #28]
 800d5c0:	9307      	strlt	r3, [sp, #28]
 800d5c2:	bfb8      	it	lt
 800d5c4:	9204      	strlt	r2, [sp, #16]
 800d5c6:	7823      	ldrb	r3, [r4, #0]
 800d5c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5ca:	d10a      	bne.n	800d5e2 <_vfiprintf_r+0x156>
 800d5cc:	7863      	ldrb	r3, [r4, #1]
 800d5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5d0:	d132      	bne.n	800d638 <_vfiprintf_r+0x1ac>
 800d5d2:	9b03      	ldr	r3, [sp, #12]
 800d5d4:	1d1a      	adds	r2, r3, #4
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	9203      	str	r2, [sp, #12]
 800d5da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5de:	3402      	adds	r4, #2
 800d5e0:	9305      	str	r3, [sp, #20]
 800d5e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d6b8 <_vfiprintf_r+0x22c>
 800d5e6:	7821      	ldrb	r1, [r4, #0]
 800d5e8:	2203      	movs	r2, #3
 800d5ea:	4650      	mov	r0, sl
 800d5ec:	f7f2 fdf8 	bl	80001e0 <memchr>
 800d5f0:	b138      	cbz	r0, 800d602 <_vfiprintf_r+0x176>
 800d5f2:	9b04      	ldr	r3, [sp, #16]
 800d5f4:	eba0 000a 	sub.w	r0, r0, sl
 800d5f8:	2240      	movs	r2, #64	@ 0x40
 800d5fa:	4082      	lsls	r2, r0
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	3401      	adds	r4, #1
 800d600:	9304      	str	r3, [sp, #16]
 800d602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d606:	4829      	ldr	r0, [pc, #164]	@ (800d6ac <_vfiprintf_r+0x220>)
 800d608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d60c:	2206      	movs	r2, #6
 800d60e:	f7f2 fde7 	bl	80001e0 <memchr>
 800d612:	2800      	cmp	r0, #0
 800d614:	d03f      	beq.n	800d696 <_vfiprintf_r+0x20a>
 800d616:	4b26      	ldr	r3, [pc, #152]	@ (800d6b0 <_vfiprintf_r+0x224>)
 800d618:	bb1b      	cbnz	r3, 800d662 <_vfiprintf_r+0x1d6>
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	3307      	adds	r3, #7
 800d61e:	f023 0307 	bic.w	r3, r3, #7
 800d622:	3308      	adds	r3, #8
 800d624:	9303      	str	r3, [sp, #12]
 800d626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d628:	443b      	add	r3, r7
 800d62a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d62c:	e76a      	b.n	800d504 <_vfiprintf_r+0x78>
 800d62e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d632:	460c      	mov	r4, r1
 800d634:	2001      	movs	r0, #1
 800d636:	e7a8      	b.n	800d58a <_vfiprintf_r+0xfe>
 800d638:	2300      	movs	r3, #0
 800d63a:	3401      	adds	r4, #1
 800d63c:	9305      	str	r3, [sp, #20]
 800d63e:	4619      	mov	r1, r3
 800d640:	f04f 0c0a 	mov.w	ip, #10
 800d644:	4620      	mov	r0, r4
 800d646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d64a:	3a30      	subs	r2, #48	@ 0x30
 800d64c:	2a09      	cmp	r2, #9
 800d64e:	d903      	bls.n	800d658 <_vfiprintf_r+0x1cc>
 800d650:	2b00      	cmp	r3, #0
 800d652:	d0c6      	beq.n	800d5e2 <_vfiprintf_r+0x156>
 800d654:	9105      	str	r1, [sp, #20]
 800d656:	e7c4      	b.n	800d5e2 <_vfiprintf_r+0x156>
 800d658:	fb0c 2101 	mla	r1, ip, r1, r2
 800d65c:	4604      	mov	r4, r0
 800d65e:	2301      	movs	r3, #1
 800d660:	e7f0      	b.n	800d644 <_vfiprintf_r+0x1b8>
 800d662:	ab03      	add	r3, sp, #12
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	462a      	mov	r2, r5
 800d668:	4b12      	ldr	r3, [pc, #72]	@ (800d6b4 <_vfiprintf_r+0x228>)
 800d66a:	a904      	add	r1, sp, #16
 800d66c:	4630      	mov	r0, r6
 800d66e:	f7fd fbc3 	bl	800adf8 <_printf_float>
 800d672:	4607      	mov	r7, r0
 800d674:	1c78      	adds	r0, r7, #1
 800d676:	d1d6      	bne.n	800d626 <_vfiprintf_r+0x19a>
 800d678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d67a:	07d9      	lsls	r1, r3, #31
 800d67c:	d405      	bmi.n	800d68a <_vfiprintf_r+0x1fe>
 800d67e:	89ab      	ldrh	r3, [r5, #12]
 800d680:	059a      	lsls	r2, r3, #22
 800d682:	d402      	bmi.n	800d68a <_vfiprintf_r+0x1fe>
 800d684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d686:	f7fe f925 	bl	800b8d4 <__retarget_lock_release_recursive>
 800d68a:	89ab      	ldrh	r3, [r5, #12]
 800d68c:	065b      	lsls	r3, r3, #25
 800d68e:	f53f af1f 	bmi.w	800d4d0 <_vfiprintf_r+0x44>
 800d692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d694:	e71e      	b.n	800d4d4 <_vfiprintf_r+0x48>
 800d696:	ab03      	add	r3, sp, #12
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	462a      	mov	r2, r5
 800d69c:	4b05      	ldr	r3, [pc, #20]	@ (800d6b4 <_vfiprintf_r+0x228>)
 800d69e:	a904      	add	r1, sp, #16
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7fd fe41 	bl	800b328 <_printf_i>
 800d6a6:	e7e4      	b.n	800d672 <_vfiprintf_r+0x1e6>
 800d6a8:	0800dddf 	.word	0x0800dddf
 800d6ac:	0800dde9 	.word	0x0800dde9
 800d6b0:	0800adf9 	.word	0x0800adf9
 800d6b4:	0800d469 	.word	0x0800d469
 800d6b8:	0800dde5 	.word	0x0800dde5

0800d6bc <__swbuf_r>:
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	460e      	mov	r6, r1
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	b118      	cbz	r0, 800d6ce <__swbuf_r+0x12>
 800d6c6:	6a03      	ldr	r3, [r0, #32]
 800d6c8:	b90b      	cbnz	r3, 800d6ce <__swbuf_r+0x12>
 800d6ca:	f7fd ffd7 	bl	800b67c <__sinit>
 800d6ce:	69a3      	ldr	r3, [r4, #24]
 800d6d0:	60a3      	str	r3, [r4, #8]
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	071a      	lsls	r2, r3, #28
 800d6d6:	d501      	bpl.n	800d6dc <__swbuf_r+0x20>
 800d6d8:	6923      	ldr	r3, [r4, #16]
 800d6da:	b943      	cbnz	r3, 800d6ee <__swbuf_r+0x32>
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f000 f82a 	bl	800d738 <__swsetup_r>
 800d6e4:	b118      	cbz	r0, 800d6ee <__swbuf_r+0x32>
 800d6e6:	f04f 37ff 	mov.w	r7, #4294967295
 800d6ea:	4638      	mov	r0, r7
 800d6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	6922      	ldr	r2, [r4, #16]
 800d6f2:	1a98      	subs	r0, r3, r2
 800d6f4:	6963      	ldr	r3, [r4, #20]
 800d6f6:	b2f6      	uxtb	r6, r6
 800d6f8:	4283      	cmp	r3, r0
 800d6fa:	4637      	mov	r7, r6
 800d6fc:	dc05      	bgt.n	800d70a <__swbuf_r+0x4e>
 800d6fe:	4621      	mov	r1, r4
 800d700:	4628      	mov	r0, r5
 800d702:	f7ff fda7 	bl	800d254 <_fflush_r>
 800d706:	2800      	cmp	r0, #0
 800d708:	d1ed      	bne.n	800d6e6 <__swbuf_r+0x2a>
 800d70a:	68a3      	ldr	r3, [r4, #8]
 800d70c:	3b01      	subs	r3, #1
 800d70e:	60a3      	str	r3, [r4, #8]
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	6022      	str	r2, [r4, #0]
 800d716:	701e      	strb	r6, [r3, #0]
 800d718:	6962      	ldr	r2, [r4, #20]
 800d71a:	1c43      	adds	r3, r0, #1
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d004      	beq.n	800d72a <__swbuf_r+0x6e>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	07db      	lsls	r3, r3, #31
 800d724:	d5e1      	bpl.n	800d6ea <__swbuf_r+0x2e>
 800d726:	2e0a      	cmp	r6, #10
 800d728:	d1df      	bne.n	800d6ea <__swbuf_r+0x2e>
 800d72a:	4621      	mov	r1, r4
 800d72c:	4628      	mov	r0, r5
 800d72e:	f7ff fd91 	bl	800d254 <_fflush_r>
 800d732:	2800      	cmp	r0, #0
 800d734:	d0d9      	beq.n	800d6ea <__swbuf_r+0x2e>
 800d736:	e7d6      	b.n	800d6e6 <__swbuf_r+0x2a>

0800d738 <__swsetup_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4b29      	ldr	r3, [pc, #164]	@ (800d7e0 <__swsetup_r+0xa8>)
 800d73c:	4605      	mov	r5, r0
 800d73e:	6818      	ldr	r0, [r3, #0]
 800d740:	460c      	mov	r4, r1
 800d742:	b118      	cbz	r0, 800d74c <__swsetup_r+0x14>
 800d744:	6a03      	ldr	r3, [r0, #32]
 800d746:	b90b      	cbnz	r3, 800d74c <__swsetup_r+0x14>
 800d748:	f7fd ff98 	bl	800b67c <__sinit>
 800d74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d750:	0719      	lsls	r1, r3, #28
 800d752:	d422      	bmi.n	800d79a <__swsetup_r+0x62>
 800d754:	06da      	lsls	r2, r3, #27
 800d756:	d407      	bmi.n	800d768 <__swsetup_r+0x30>
 800d758:	2209      	movs	r2, #9
 800d75a:	602a      	str	r2, [r5, #0]
 800d75c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	f04f 30ff 	mov.w	r0, #4294967295
 800d766:	e033      	b.n	800d7d0 <__swsetup_r+0x98>
 800d768:	0758      	lsls	r0, r3, #29
 800d76a:	d512      	bpl.n	800d792 <__swsetup_r+0x5a>
 800d76c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d76e:	b141      	cbz	r1, 800d782 <__swsetup_r+0x4a>
 800d770:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d774:	4299      	cmp	r1, r3
 800d776:	d002      	beq.n	800d77e <__swsetup_r+0x46>
 800d778:	4628      	mov	r0, r5
 800d77a:	f7fe ff15 	bl	800c5a8 <_free_r>
 800d77e:	2300      	movs	r3, #0
 800d780:	6363      	str	r3, [r4, #52]	@ 0x34
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d788:	81a3      	strh	r3, [r4, #12]
 800d78a:	2300      	movs	r3, #0
 800d78c:	6063      	str	r3, [r4, #4]
 800d78e:	6923      	ldr	r3, [r4, #16]
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	89a3      	ldrh	r3, [r4, #12]
 800d794:	f043 0308 	orr.w	r3, r3, #8
 800d798:	81a3      	strh	r3, [r4, #12]
 800d79a:	6923      	ldr	r3, [r4, #16]
 800d79c:	b94b      	cbnz	r3, 800d7b2 <__swsetup_r+0x7a>
 800d79e:	89a3      	ldrh	r3, [r4, #12]
 800d7a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d7a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7a8:	d003      	beq.n	800d7b2 <__swsetup_r+0x7a>
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	f000 f883 	bl	800d8b8 <__smakebuf_r>
 800d7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b6:	f013 0201 	ands.w	r2, r3, #1
 800d7ba:	d00a      	beq.n	800d7d2 <__swsetup_r+0x9a>
 800d7bc:	2200      	movs	r2, #0
 800d7be:	60a2      	str	r2, [r4, #8]
 800d7c0:	6962      	ldr	r2, [r4, #20]
 800d7c2:	4252      	negs	r2, r2
 800d7c4:	61a2      	str	r2, [r4, #24]
 800d7c6:	6922      	ldr	r2, [r4, #16]
 800d7c8:	b942      	cbnz	r2, 800d7dc <__swsetup_r+0xa4>
 800d7ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d7ce:	d1c5      	bne.n	800d75c <__swsetup_r+0x24>
 800d7d0:	bd38      	pop	{r3, r4, r5, pc}
 800d7d2:	0799      	lsls	r1, r3, #30
 800d7d4:	bf58      	it	pl
 800d7d6:	6962      	ldrpl	r2, [r4, #20]
 800d7d8:	60a2      	str	r2, [r4, #8]
 800d7da:	e7f4      	b.n	800d7c6 <__swsetup_r+0x8e>
 800d7dc:	2000      	movs	r0, #0
 800d7de:	e7f7      	b.n	800d7d0 <__swsetup_r+0x98>
 800d7e0:	20000110 	.word	0x20000110

0800d7e4 <_raise_r>:
 800d7e4:	291f      	cmp	r1, #31
 800d7e6:	b538      	push	{r3, r4, r5, lr}
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	d904      	bls.n	800d7f8 <_raise_r+0x14>
 800d7ee:	2316      	movs	r3, #22
 800d7f0:	6003      	str	r3, [r0, #0]
 800d7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f6:	bd38      	pop	{r3, r4, r5, pc}
 800d7f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7fa:	b112      	cbz	r2, 800d802 <_raise_r+0x1e>
 800d7fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d800:	b94b      	cbnz	r3, 800d816 <_raise_r+0x32>
 800d802:	4628      	mov	r0, r5
 800d804:	f000 f830 	bl	800d868 <_getpid_r>
 800d808:	4622      	mov	r2, r4
 800d80a:	4601      	mov	r1, r0
 800d80c:	4628      	mov	r0, r5
 800d80e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d812:	f000 b817 	b.w	800d844 <_kill_r>
 800d816:	2b01      	cmp	r3, #1
 800d818:	d00a      	beq.n	800d830 <_raise_r+0x4c>
 800d81a:	1c59      	adds	r1, r3, #1
 800d81c:	d103      	bne.n	800d826 <_raise_r+0x42>
 800d81e:	2316      	movs	r3, #22
 800d820:	6003      	str	r3, [r0, #0]
 800d822:	2001      	movs	r0, #1
 800d824:	e7e7      	b.n	800d7f6 <_raise_r+0x12>
 800d826:	2100      	movs	r1, #0
 800d828:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d82c:	4620      	mov	r0, r4
 800d82e:	4798      	blx	r3
 800d830:	2000      	movs	r0, #0
 800d832:	e7e0      	b.n	800d7f6 <_raise_r+0x12>

0800d834 <raise>:
 800d834:	4b02      	ldr	r3, [pc, #8]	@ (800d840 <raise+0xc>)
 800d836:	4601      	mov	r1, r0
 800d838:	6818      	ldr	r0, [r3, #0]
 800d83a:	f7ff bfd3 	b.w	800d7e4 <_raise_r>
 800d83e:	bf00      	nop
 800d840:	20000110 	.word	0x20000110

0800d844 <_kill_r>:
 800d844:	b538      	push	{r3, r4, r5, lr}
 800d846:	4d07      	ldr	r5, [pc, #28]	@ (800d864 <_kill_r+0x20>)
 800d848:	2300      	movs	r3, #0
 800d84a:	4604      	mov	r4, r0
 800d84c:	4608      	mov	r0, r1
 800d84e:	4611      	mov	r1, r2
 800d850:	602b      	str	r3, [r5, #0]
 800d852:	f7f5 f8c9 	bl	80029e8 <_kill>
 800d856:	1c43      	adds	r3, r0, #1
 800d858:	d102      	bne.n	800d860 <_kill_r+0x1c>
 800d85a:	682b      	ldr	r3, [r5, #0]
 800d85c:	b103      	cbz	r3, 800d860 <_kill_r+0x1c>
 800d85e:	6023      	str	r3, [r4, #0]
 800d860:	bd38      	pop	{r3, r4, r5, pc}
 800d862:	bf00      	nop
 800d864:	20000fd8 	.word	0x20000fd8

0800d868 <_getpid_r>:
 800d868:	f7f5 b8b6 	b.w	80029d8 <_getpid>

0800d86c <__swhatbuf_r>:
 800d86c:	b570      	push	{r4, r5, r6, lr}
 800d86e:	460c      	mov	r4, r1
 800d870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d874:	2900      	cmp	r1, #0
 800d876:	b096      	sub	sp, #88	@ 0x58
 800d878:	4615      	mov	r5, r2
 800d87a:	461e      	mov	r6, r3
 800d87c:	da0d      	bge.n	800d89a <__swhatbuf_r+0x2e>
 800d87e:	89a3      	ldrh	r3, [r4, #12]
 800d880:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d884:	f04f 0100 	mov.w	r1, #0
 800d888:	bf14      	ite	ne
 800d88a:	2340      	movne	r3, #64	@ 0x40
 800d88c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d890:	2000      	movs	r0, #0
 800d892:	6031      	str	r1, [r6, #0]
 800d894:	602b      	str	r3, [r5, #0]
 800d896:	b016      	add	sp, #88	@ 0x58
 800d898:	bd70      	pop	{r4, r5, r6, pc}
 800d89a:	466a      	mov	r2, sp
 800d89c:	f000 f848 	bl	800d930 <_fstat_r>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	dbec      	blt.n	800d87e <__swhatbuf_r+0x12>
 800d8a4:	9901      	ldr	r1, [sp, #4]
 800d8a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d8aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d8ae:	4259      	negs	r1, r3
 800d8b0:	4159      	adcs	r1, r3
 800d8b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8b6:	e7eb      	b.n	800d890 <__swhatbuf_r+0x24>

0800d8b8 <__smakebuf_r>:
 800d8b8:	898b      	ldrh	r3, [r1, #12]
 800d8ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8bc:	079d      	lsls	r5, r3, #30
 800d8be:	4606      	mov	r6, r0
 800d8c0:	460c      	mov	r4, r1
 800d8c2:	d507      	bpl.n	800d8d4 <__smakebuf_r+0x1c>
 800d8c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d8c8:	6023      	str	r3, [r4, #0]
 800d8ca:	6123      	str	r3, [r4, #16]
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	6163      	str	r3, [r4, #20]
 800d8d0:	b003      	add	sp, #12
 800d8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d4:	ab01      	add	r3, sp, #4
 800d8d6:	466a      	mov	r2, sp
 800d8d8:	f7ff ffc8 	bl	800d86c <__swhatbuf_r>
 800d8dc:	9f00      	ldr	r7, [sp, #0]
 800d8de:	4605      	mov	r5, r0
 800d8e0:	4639      	mov	r1, r7
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f7fe fed4 	bl	800c690 <_malloc_r>
 800d8e8:	b948      	cbnz	r0, 800d8fe <__smakebuf_r+0x46>
 800d8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ee:	059a      	lsls	r2, r3, #22
 800d8f0:	d4ee      	bmi.n	800d8d0 <__smakebuf_r+0x18>
 800d8f2:	f023 0303 	bic.w	r3, r3, #3
 800d8f6:	f043 0302 	orr.w	r3, r3, #2
 800d8fa:	81a3      	strh	r3, [r4, #12]
 800d8fc:	e7e2      	b.n	800d8c4 <__smakebuf_r+0xc>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	6020      	str	r0, [r4, #0]
 800d902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d906:	81a3      	strh	r3, [r4, #12]
 800d908:	9b01      	ldr	r3, [sp, #4]
 800d90a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d90e:	b15b      	cbz	r3, 800d928 <__smakebuf_r+0x70>
 800d910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d914:	4630      	mov	r0, r6
 800d916:	f000 f81d 	bl	800d954 <_isatty_r>
 800d91a:	b128      	cbz	r0, 800d928 <__smakebuf_r+0x70>
 800d91c:	89a3      	ldrh	r3, [r4, #12]
 800d91e:	f023 0303 	bic.w	r3, r3, #3
 800d922:	f043 0301 	orr.w	r3, r3, #1
 800d926:	81a3      	strh	r3, [r4, #12]
 800d928:	89a3      	ldrh	r3, [r4, #12]
 800d92a:	431d      	orrs	r5, r3
 800d92c:	81a5      	strh	r5, [r4, #12]
 800d92e:	e7cf      	b.n	800d8d0 <__smakebuf_r+0x18>

0800d930 <_fstat_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4d07      	ldr	r5, [pc, #28]	@ (800d950 <_fstat_r+0x20>)
 800d934:	2300      	movs	r3, #0
 800d936:	4604      	mov	r4, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	4611      	mov	r1, r2
 800d93c:	602b      	str	r3, [r5, #0]
 800d93e:	f7f5 f8b3 	bl	8002aa8 <_fstat>
 800d942:	1c43      	adds	r3, r0, #1
 800d944:	d102      	bne.n	800d94c <_fstat_r+0x1c>
 800d946:	682b      	ldr	r3, [r5, #0]
 800d948:	b103      	cbz	r3, 800d94c <_fstat_r+0x1c>
 800d94a:	6023      	str	r3, [r4, #0]
 800d94c:	bd38      	pop	{r3, r4, r5, pc}
 800d94e:	bf00      	nop
 800d950:	20000fd8 	.word	0x20000fd8

0800d954 <_isatty_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4d06      	ldr	r5, [pc, #24]	@ (800d970 <_isatty_r+0x1c>)
 800d958:	2300      	movs	r3, #0
 800d95a:	4604      	mov	r4, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	602b      	str	r3, [r5, #0]
 800d960:	f7f5 f8b2 	bl	8002ac8 <_isatty>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	d102      	bne.n	800d96e <_isatty_r+0x1a>
 800d968:	682b      	ldr	r3, [r5, #0]
 800d96a:	b103      	cbz	r3, 800d96e <_isatty_r+0x1a>
 800d96c:	6023      	str	r3, [r4, #0]
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	20000fd8 	.word	0x20000fd8

0800d974 <_init>:
 800d974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d976:	bf00      	nop
 800d978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d97a:	bc08      	pop	{r3}
 800d97c:	469e      	mov	lr, r3
 800d97e:	4770      	bx	lr

0800d980 <_fini>:
 800d980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d982:	bf00      	nop
 800d984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d986:	bc08      	pop	{r3}
 800d988:	469e      	mov	lr, r3
 800d98a:	4770      	bx	lr
